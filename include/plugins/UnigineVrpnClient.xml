<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Plugins.VrpnClient.createAnalogDevice(char)">
			<summary>
			Creates an object that allows receiving data about input device sticks (for example, game-pad sticks).
			</summary> 
			<param name="name"> Path to the device in the format device_name@server_address. </param> 
			<returns>Newly created VrpnAnalogDevice.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnClient.deleteAnalogDevice(VrpnAnalogDeviceInterface)">
			<summary>
			Deletes the VrpnAnalogDevice object.
			</summary> 
			<param name="device"> VrpnAnalogDevice to be deleted. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnClient.createButtonDevice(char)">
			<summary>
			Creates an object that allows receiving data about states of input device buttons.
			</summary> 
			<param name="name"> Path to the device in the format device_name@server_address. </param> 
			<returns>Newly created VrpnButtonDevice.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnClient.deleteButtonDevice(VrpnButtonDeviceInterface)">
			<summary>
			Deletes the VrpnButtonDevice object.
			</summary> 
			<param name="device"> VrpnButtonDevice to be deleted. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnClient.createTrackerDevice(char)">
			<summary>
			Creates an object that allows receiving data about position, orientation, velocity and acceleration of tracked objects from 3D tracking sensors.
			</summary> 
			<param name="name"> Path to the device in the format device_name@server_address. </param> 
			<returns>Newly created VrpnTrackerDevice.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnClient.deleteTrackerDevice(VrpnTrackerDeviceInterface)">
			<summary>
			Deletes the VrpnTrackerDevice object.
			</summary> 
			<param name="device"> VrpnTrackerDevice to be deleted. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.setAnalogCallback(char)">
			<summary>
			Sets the world script callback function that receives data about input device sticks.					The callback function should be defined in the world script and receive 1 argument - an instance of the VrpnAnalogDevice class.
			</summary> 
			<param name="name"> Callback function name. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.getAnalogCallback">
			<summary>
			Returns a name of the world script callback function that receives data about input device sticks.				The callback function should be defined in the world script and receive 1 argument - an instance of the VrpnAnalogDevice class.
			</summary>  
			<returns>Callback function name.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.getChannel(int)">
			<summary>
			Returns data received by the analog stick with the given number.					If the given stick haven't received data, the engine assertion will occur.
			</summary> 
			<param name="channel"> Analog stick number in range [0;number_of_sticks - 1]. </param> 
			<returns>Returns data received by the analog stick with the given number.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.getNumChannels">
			<summary>
			Returns the number of analog sticks that have received data.
			</summary>  
			<returns>The number of analog sticks that have received data. If no sticks have received data, 0 will be returned.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.update">
			<summary>
			Updates the internal state of the device and receives input data.					This function should be called each frame.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.hasChanges const">
			<summary>
			Returns a value indicating if there were any changes in analog values registered.
			</summary>  
			<returns>true if there were any changes in analog values registered otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnAnalogDevice.VrpnAnalogDevice(char)">
			<summary>
			Constructor.
			</summary> 
			<param name="name"> Path to the device in the format device_name@server_address. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnButtonDevice.setButtonCallback(char)">
			<summary>
			Sets the world script callback function that receives data about input device buttons.					The callback function should be defined in the world script and receive 2 arguments - a button number and state.
			</summary> 
			<param name="name"> Callback function name. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnButtonDevice.getButtonCallback">
			<summary>
			Returns a name of the world script callback function that receives data about input device buttons.				The callback function should be defined in the world script and receive 2 arguments - a button number and state.
			</summary>  
			<returns>Callback function name.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnButtonDevice.update">
			<summary>
			Updates the internal state of the device and receives input data.					This function should be called each frame.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.VrpnButtonDevice.getNumButtons const">
			<summary>
			Returns the total number of buttons of the input device.
			</summary>  
			<returns>Total number of buttons of the input device.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnButtonDevice.getButtonState(int) const">
			<summary>
			Returns the current state for a button with the specified index.
			</summary> 
			<param name="num"> Button index. </param> 
			<returns>Button state.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnButtonDevice.VrpnButtonDevice(char)">
			<summary>
			Constructor.
			</summary> 
			<param name="name"> Path to the device in the format device_name@server_address. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.VrpnTrackerDevice(char)">
			<summary>
			Constructor.
			</summary> 
			<param name="name"> Path to the device in the format device_name@server_address. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.setAccelerationCallback(char)">
			<summary>
			Sets the world script callback function that receives data about acceleration of tracked objects.
			</summary> 
			<param name="name"> Callback function name. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getAccelerationCallback">
			<summary>
			Returns a name of the world script callback function that receives data about acceleration of tracked objects.			The callback function should be defined in the world script and receive 4 arguments:											Sensor number (int)						Linear acceleration (vec3 for the float precision version, or dvec3 for the double precision version)						Acceleration of orientation change (an analog of angular acceleration; quat)						Acceleration measurement time (float for the float precision version, or double for the double precision version)
			</summary>  
			<returns>Callback function name.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.setTransformCallback(char)">
			<summary>
			Sets the world script callback function that receives data about position and orientation of tracked objects.
			</summary> 
			<param name="name"> Callback function name. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getTransformCallback">
			<summary>
			Returns a name of the world script callback function that receives data about position and orientation of tracked objects.			The callback function should be defined in the world script and receive 3 arguments:											Sensor number (int)						Position (vec3 for the float precision version, or dvec3 for the double precision version)						Orientation (quat)
			</summary>  
			<returns>Callback function name.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.setVelocityCallback(char)">
			<summary>
			Sets the world script callback function that receives data about velocity of tracked objects.
			</summary> 
			<param name="name"> Callback function name. </param> 
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getVelocityCallback">
			<summary>
			Returns a name of the world script callback function that receives data about velocity of tracked objects.				The callback function should be defined in the world script and receive 4 arguments:											Sensor number (int)						Linear velocity (vec3 for the float precision version, or dvec3 for the double precision version)						Velocity of orientation change (an analog of angular velocity; quat)						Velocity measurement time (float for the float precision version, or double for the double precision version)
			</summary>  
			<returns>Callback function name.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.update">
			<summary>
			Updates the internal state of the device and receives input data.					This function should be called each frame.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getNumSensors const">
			<summary>
			Returns the total number of sensors.
			</summary>  
			<returns>The total number of sensors.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorPosition(int) const">
			<summary>
			Returns the specified sensor position.
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Sensor position.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorRotation(int) const">
			<summary>
			Returns the specified sensor rotation.
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Sensor rotation.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorVelocity(int) const">
			<summary>
			Returns the current sensor velocity (m/s2).
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Sensor velocity, in units per second.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorVelocityOrientation(int) const">
			<summary>
			Returns the orientation of the specified sensor after the delta time.
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Orientation of the sensor velocity.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorVelocityIFps(int) const">
			<summary>
			Returns the delta time (in seconds) for the sensor velocity.
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Delta time (in seconds).</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorAcceleration(int) const">
			<summary>
			Returns the current sensor acceleration (m/s2).
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Sensor acceleration.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorAccelerationOrientation(int) const">
			<summary>
			Returns the orientation of the specified sensor after the delta time.
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Orientation of the sensor acceleration.</returns>
		</member>
		<member name="M:Unigine.Plugins.VrpnTrackerDevice.getSensorAccelerationIFps(int) const">
			<summary>
			Returns delta time (in seconds) for the sensor acceleration.
			</summary> 
			<param name="num"> Sensor index number in range [0; NUM_SENSORS - 1 ]. </param> 
			<returns>Delta time (in seconds).</returns>
		</member>
	</members>
</doc>