<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Plugins.IG.Manager.getConfig const">
			<summary>
			Returns the IG configuration as an IGConfig class instance.
			</summary>  
			<returns>IGConfig class instance containing IG configuration.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.reloadConfig">
			<summary>
			Reloads the IG Configuration file (ig_config.xml).
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.loadDatabase(int)">
			<summary>
			Loads the database with the specified ID and sets it to be used.
			</summary> 
			<param name="database_id"> ID of the database to be used. </param> 
			<returns>true means that the database with the specified ID is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.reloadDatabase">
			<summary>
			Reloads the current database.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.unloadDatabase">
			<summary>
			Unloads the current database.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getCurrentDatabaseID const">
			<summary>
			Returns the identifier of the currently loaded world database stored in the IG configuration file (ig_config.xml).
			</summary>  
			<returns>Identifier of the world database, or 0, if no world is loaded.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getDatabaseID(char) const">
			<summary>
			Returns the identifier of the world database with the specified name stored in the IG configuration file (ig_config.xml).
			</summary> 
			<param name="world_name"> World database name. </param> 
			<returns>Identifier of the specified world database, or 0, if no world is loaded.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getDatabaseName(int) const">
			<summary>
			Returns the name of the world database stored in the IG configuration file (ig_config.xml).
			</summary> 
			<param name="id"> Identifier of the world database. </param> 
			<returns>The world database name.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isDatabaseLoaded const">
			<summary>
			Returns a value indicating if any database is currently loaded.
			</summary>  
			<returns>true if any database is currently loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSkyMap const">
			<summary>
			Returns the interface of the sky map.
			</summary>  
			<returns>Sky map interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getMeteo const">
			<summary>
			Returns the meteo interface.
			</summary>  
			<returns>Meteo interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSymbolsController const">
			<summary>
			Returns the interface of the symbols controller.
			</summary>  
			<returns>Symbols controller interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getLightController const">
			<summary>
			Returns the interface of the light controller.
			</summary>  
			<returns>Light controller interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getConverter const">
			<summary>
			Returns the converter interface.
			</summary>  
			<returns>Converter interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getView(int,bool)">
			<summary>
			Returns the interface of the specified view.
			</summary> 
			<param name="view_id"> ID of the view. </param>
			<param name="auto_create"> true to automatically create the view with the specified ID if it doesn't exist yet; false - to return nullptr in case the view doesn't exist. </param> 
			<returns>Pointer to the view interface if it exists; otherwise - nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getViews(Unigine.Vector{View*,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all existing views (if any).
			</summary> 
			<param name="views_ret"> Vector containing all existing views (if any). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeView(int)">
			<summary>
			Removes the view with the specified ID.
			</summary> 
			<param name="view_id"> ID of the view to be removed. </param> 
			<returns>true if the view with the specified ID is removed successfully; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isViewExist(int) const">
			<summary>
			Returns a value indicating if the view with the specified ID exists.
			</summary> 
			<param name="view_id"> ID of the view. </param> 
			<returns>true if the view with the specified ID exists; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getViewGroup(int,bool)">
			<summary>
			Returns the interface of the specified view group.
			</summary> 
			<param name="group_id"> ID of the view group. </param>
			<param name="auto_create"> true to automatically create the view group with the specified ID if it doesn't exist yet; false - to return nullptr in case the view group doesn't exist. </param> 
			<returns>Pointer to the view group interface if it exists; otherwise - nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeViewGroup(int)">
			<summary>
			Removes the view group with the specified ID.
			</summary> 
			<param name="group_view_id"> ID of the view group to be removed. </param> 
			<returns>true if the view group with the specified ID is removed successfully; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isViewGroupExist(int) const">
			<summary>
			Returns a value indicating if the view group with the specified ID exists.
			</summary> 
			<param name="group_view_id"> ID of the view group. </param> 
			<returns>true if the view group with the specified ID exists; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getEntity(longlong,bool)">
			<summary>
			Returns the interface of the specified entity.
			</summary> 
			<param name="entity_id"> ID of the entity.The value should be the entity ID, not the type ID. </param>
			<param name="auto_create"> true to automatically create the entity with the specified ID if it doesn't exist yet; false - to return nullptr in case the entity doesn't exist. </param> 
			<returns>Pointer to the entity interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeEntity(longlong)">
			<summary>
			Removes the entity with the specified ID.
			</summary> 
			<param name="entity_id"> ID of the entity to be removed.The value should be the entity ID, not the type ID. </param> 
			<returns>true if the entity with the specified ID is removed successfully; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isEntityExist(longlong) const">
			<summary>
			Returns a value indicating if the entity with the specified ID exists.
			</summary> 
			<param name="entity_id"> ID of the entity.The value should be the entity ID, not the type ID. </param> 
			<returns>true if the entity with the specified ID exists; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getEntities(Unigine.Vector{Entity*,int,Unigine.VectorAllocator}) const">
			<summary>
			Fills the list of entities with all existing entities.
			</summary> 
			<param name="entities_ret"> List of entities. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.findEntity(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Returns the interface of the entity represented by the specified node.
			</summary> 
			<param name="node"> Node for which an entity is to be found. </param> 
			<returns>Pointer to the entity interface if it exists; otherwise - nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.findEntityType(char) const">
			<summary>
			Returns the ID of the entity type by its name. Entity type ID and name define the type of the entity to be used for a specific instance and are set in the entity definition section of the IG configuration file as follows:
			</summary> 
			<param name="type_name"> Entity type name. </param> 
			<returns>Entity type ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.findComponentID(longlong,char) const">
			<summary>
			Returns the ID of the component with the given name, which belongs to the specified entity type.
			</summary> 
			<param name="entity_type"> Entity type ID.Entity type ID is defined in the entity definition section of the IG configuration file. </param>
			<param name="name"> Component name. </param> 
			<returns>Component ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.findArticulatedPartID(longlong,char) const">
			<summary>
			Returns the identifier of an articulated part by its name and the type of the entity it belongs to, stored in the IG configuration file (ig_config.xml).
			</summary> 
			<param name="entity_type"> Entity type identifier indicated in the IG configuration file (ig_config.xml). </param>
			<param name="name"> Name of an articulated part indicated in the IG configuration file (ig_config.xml). </param> 
			<returns>Identifier of an articulated part.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setInterpolation(bool)">
			<summary>
			Sets a value indicating if interpolation and extrapolation should be enabled for the IG.
			</summary> 
			<param name="enabled"> true to enable interpolation and extrapolation for the IG; false - to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isInterpolation const">
			<summary>
			Returns a value indicating if interpolation and extrapolation are enabled for the IG.
			</summary>  
			<returns>true if interpolation and extrapolation are enabled for the IG; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setInterpolationLerp(bool)">
			<summary>
			Sets a value indicating if interpolation between the current and previous frames should be enabled for the IG to tackle the problem of lost packets between the IG and hosts.
			</summary> 
			<param name="enabled"> true to enable interpolation between the current and previous frames for the IG; false - to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isInterpolationLerp const">
			<summary>
			Returns a value indicating if interpolation between the current and previous frames is enabled for the IG to tackle the problem of lost packets between the IG and hosts.
			</summary>  
			<returns>true if interpolation between the current and previous frames is enabled for the IG; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setInterpolationTime(double)">
			<summary>
			Sets the interpolation time value for the IG.
			</summary> 
			<param name="current_time"> Current interpolation time value, in seconds. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getInterpolationTime const">
			<summary>
			Returns the current interpolation time value for the IG.
			</summary>  
			<returns>Interpolation time value, in seconds.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setInterpolationPeriod(double)">
			<summary>
			Sets the interpolation period value for the IG.
			</summary> 
			<param name="time_period"> Interpolation period value, in seconds. The default value is 0.04. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getInterpolationPeriod const">
			<summary>
			Returns the current interpolation period value for the IG.
			</summary>  
			<returns>Interpolation period value, in seconds. The default value is 0.04.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setExtrapolationPeriod(double)">
			<summary>
			Sets the extrapolation period value for the IG.
			</summary> 
			<param name="time_period"> Extrapolation period value, in seconds. The default value is 0.04. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getExtrapolationPeriod const">
			<summary>
			Returns the current extrapolation period value for the IG.
			</summary>  
			<returns>Extrapolation period value, in seconds. The default value is 0.2.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setInterpolationLerpFactor(double)">
			<summary>
			Sets the interpolation lerp factor value for the IG. The lower the value the smoother movement will be, but it will feel like objects move underwater or in a jelly, higher values result in higher positioning accuracy (objects positions will be closer to actual ones for the current frame), but objects will move with a noticeable jitter.					Frame-to-frame interpolation  mode must be enabled.
			</summary> 
			<param name="factor"> Current interpolation lerp factor value, in seconds. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getInterpolationLerpFactor const">
			<summary>
			Returns the current interpolation lerp factor value for the IG. The lower the value the smoother movement will be, but it will feel like objects move underwater or in a jelly, higher values result in higher positioning accuracy (objects positions will be closer to actual ones for the current frame), but objects will move with a noticeable jitter.					Frame-to-frame interpolation  mode must be enabled.
			</summary>  
			<returns>Interpolation lerp factor value.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getTerrain const">
			<summary>
			Returns the currently used global terrain object.
			</summary>  
			<returns>Currently used global terrain object.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getGeodeticPivot const">
			<summary>
			Returns the geodetic pivot used to curve the terrain.
			</summary>  
			<returns>Current geodetic pivot used to curve the terrain.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isTerrainCurved const">
			<summary>
			Check if the terrain is curved.
			</summary>  
			<returns>true, if the terrain is curved, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setTerrainIntersectionMask(int)">
			<summary>
			Sets the intersection mask that is used to define the ground/landing surface.
			</summary> 
			<param name="mask"> Intersection mask. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getTerrainIntersectionMask const">
			<summary>
			Returns the intersection mask that is used to define the ground/landing surface.
			</summary>  
			<returns>Intersection mask.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getHatHot(Unigine.Vec3,double,double,IGIntersection) const">
			<summary>
			Checks if there is anything in the given geodetic position and returns HAT/HOT as well as surface normal, exact object over which the request was made, intersected surface, world coordinates of the intersection point, etc. to the specified output variables.
			</summary> 
			<param name="geo_position"> Geodetic position. </param>
			<param name="ret_hat"> Address for the return HAT value. </param>
			<param name="ret_hot"> Address for the return HOT value. </param>
			<param name="ret_intersection"> Information on intersection at the given geodetic position, such as exact object over which the request was made, intersected surface, world coordinates of the intersection point, etc. </param> 
			<returns>true, if there is anything in the given geodetic position, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getIntersection(Unigine.Vec3,Unigine.Vec3,int,Unigine.Vector{IGIntersection,int,Unigine.VectorAllocator}) const">
			<summary>
			Checks if the ray with set points intersects with anything.
			</summary> 
			<param name="p0"> Ray origin. </param>
			<param name="p1"> Point along the ray. </param>
			<param name="mask"> Intersection mask. </param>
			<param name="ret"> Vector containing information on intersections. </param> 
			<returns>true, if the ray intersects with anything, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getWater const">
			<summary>
			Returns the interface of the water control.
			</summary>  
			<returns>Water control interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSyncker const">
			<summary>
			Returns the Syncker Interface.
			</summary>  
			<returns>Pointer to the Syncker::Syncker interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSynckerMaster const">
			<summary>
			Returns the Syncker Master Interface.
			</summary>  
			<returns>Pointer to the Syncker::Master interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSynckerSlave const">
			<summary>
			Returns the Syncker Slave Interface.
			</summary>  
			<returns>Pointer to the Syncker::Slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.loadNode(char)">
			<summary>
			Loads a node from the specified file to the world on the Master and all Slaves. This is a network analogue of the loadNode() method of the World class.					This is a safe analogue of the Syncker method loadNode() that has an internal check if this method runs on the master and if Syncker is running.
			</summary> 
			<param name="file_path"> Path to the *.node file. </param> 
			<returns>Loaded node or nullptr if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.syncNode(Unigine.Ptr{Unigine.Node},unsignedchar)">
			<summary>
			Enables synchronization of parameters of the given node via the UDP protocol. Scene nodes are not synchronized by default, this method is used to add a particular node to the synchronization queue.					This is a safe analogue of the Syncker method addSyncNode() that has an internal check if this method runs on the master and if Syncker is running. If this method is called on a slave, it does nothing.
			</summary> 
			<param name="node"> Node to synchronize. </param>
			<param name="mask"> Synchronization mask. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.synckerCreate(Unigine.Ptr{Unigine.Node},unsignedchar)">
			<summary>
			Synchronizes creation of the given node on all Slaves. This method is to be called after node creation on the Master. It is recommended to use the loadNode() method whenever possible as this approach allows adding nodes of all types, unlike the synckerCreate() method that supports only a limited number of them.					This is a safe analogue of the Syncker method createNode() that has an internal check if this method runs on the master and if Syncker is running. If this method is called on a slave, it does nothing.
			</summary> 
			<param name="node"> Node to create. </param>
			<param name="mask"> Synchronization mask. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.synckerDestroy(Unigine.Ptr{Unigine.Node})">
			<summary>
			Synchronizes deletion of the given node (with all its children) on the Master and all Slaves.					This is a safe analogue of the Syncker method deleteNode() that has an internal check if this method runs on the master and if Syncker is running. If this method is called on a slave, it does nothing.
			</summary> 
			<param name="in_node"> Node to delete. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isSyncNode(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Returns a value indicating if synchronization of the given node is enabled. Using this method you can quickly check if a node is monitored by the Syncker (node's states are dispatched to Slaves over the network).					This is a safe analogue of the Syncker method isSyncNode() that has an internal check if this method runs on the master and if Syncker is running. If this method is called on a slave, it does nothing.
			</summary> 
			<param name="in_node"> Node to be checked. </param> 
			<returns>true if synchronization of the given node is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.checkEntityType(longlong) const">
			<summary>
			Checks if the given entity type is supported by IG.
			</summary> 
			<param name="entity_type"> Entity type identifier </param> 
			<returns>true, if the given entity type is supported, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setCollisionVolumeMask(int)">
			<summary>
			Sets a new collision volume mask for entities.
			</summary> 
			<param name="mask"> New collision volume mask. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getCollisionVolumeMask const">
			<summary>
			Returns the current collision volume mask for entities.
			</summary>  
			<returns>Current collision volume mask for entities.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setFreeze(bool)">
			<summary>
			Sets a value indicating if execution of IG logic is temporarily put on hold (paused). This method can be useful for debugging.
			</summary> 
			<param name="value"> true - to put on hold (pause) execution of IG logic; false - to resume execution. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isFreeze const">
			<summary>
			Returns a value indicating if execution of IG logic is temporarily put on hold (paused).
			</summary>  
			<returns>true, if execution of IG logic is temporarily put on hold (paused), otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.sendUserMessage(unsignedchar,Unigine.Ptr{Unigine.Blob})">
			<summary>
			Sends user message from the master to a slave.
			</summary> 
			<param name="packet_code"> Packet ID. </param>
			<param name="send_message"> User message </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnUserMessageReceivedCallback(uint8_t,Unigine.CallbackBase1{BlobPtr})">
			<summary>
			Executes the callback function when the user message from the master is received.
			</summary> 
			<param name="packet_code"> Packet ID. </param>
			<param name="callback"> Callback pointer. The callback function must have the following signature:void (Unigine::BlobPtr *blob) </param> 
			<returns>Callback subscriber ID. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnUserMessageReceivedCallback(void)">
			<summary>
			Removes a callback on receiving a user message for the specified subscriber.
			</summary> 
			<param name="subscriber"> Callback subscriber ID specified when adding it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnUserMessageReceivedCallbacks">
			<summary>
			Clears all added callbacks on on receiving a user message.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.get">
			<summary>
			Returns the Manager interface.
			</summary>  
			<returns>Pointer to the manager interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isMaster const">
			<summary>
			Returns a value indicating if the IG application is a Syncker-Master or runs in a single mode without the Syncker at all.
			</summary>  
			<returns>true if the IG application is a Syncker-Master or runs in a single mode without the Syncker at all; false if the IG application is a Syncker-Slave.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isReady const">
			<summary>
			Returns a value indicating if all Slaves that were waited for by the IG have connected.
			</summary>  
			<returns>true if all Slaves that were waited for by the IG have connected; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getIFps const">
			<summary>
			Returns the inverse FPS value (the time in seconds it took to complete the last frame). This method is similar to the Game::getIFps() but it is more preferred for multi-channel systems as it implements more accurate frame time calculation (including spike-periods).
			</summary>  
			<returns>Inverse FPS value (1/FPS) - the time in seconds it took to complete the last frame, in seconds. </returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDistanceScale(float)">
			<summary>
			Sets the global distance scale for all rendering distance parameters: shadow distance, light distance, LOD distances, etc. (see render_distance_scale console command) and for the IG Simplifier component. The Simplifier component can help optimize rendering of your entities. When assigned to an entity, it enables you to define which parts of its model can be neglected starting at certain distance levels (e.g., hide flaps, ailerons, and rudders at 1km, engines at 5 km, etc.) and which substitutes can be used to represent an entity at a large distance (e.g., a flashing strobe light, when the plane is just a point on the screen).					This method calls the setDistanceScale() of the Render class.
			</summary> 
			<param name="d"> Global rendering distance scale and Simplifier component (IG LOD manager). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setAdaptiveQualitySystemMode(int)">
			<summary>
			Sets a new Adaptive Quality System mode. This system provides automatic real-time adjustment of levels of detail depending on current performance (render_distance_scale and simplifier_distance_scale).
			</summary> 
			<param name="mode"> Adaptive Quality System mode to be set. One of the following values:0 - real-time quality adjustment is disabled1 - degradation mode only (image quality is degraded if the performance goes down)2 - automatic real-time adjustment (image quality is degraded if the performance is low, and improved if the performance increases) </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.destroyObjects">
			<summary>
			Destroys all entities, views, and view groups.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getCurrentView const">
			<summary>
			Returns the current ID of the view.
			</summary>  
			<returns>ID of the view.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setCurrentView(int)">
			<summary>
			Switches to the view with the specified ID. If the view with the specifie ID does not exist, it will be created automatically.
			</summary> 
			<param name="view_id"> ID of the view to be set as current. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setSlaveView(char,int)">
			<summary>
			Sets a view with the specified ID to be used for the specified Slave (available for Master IG only).
			</summary> 
			<param name="slave_name"> Slave name (-sync_view ""). </param>
			<param name="view_id"> ID of the view to be set as current for the specified Slave. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setSlaveView(int,int)">
			<summary>
			Sets a view with the specified ID to be used for a certain Slave by its index (available for Master IG only).
			</summary> 
			<param name="index"> Slave index in the range from 0 to the total numer of Slaves. </param>
			<param name="view_id"> ID of the view to be set as current for the specified Slave. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSlaveView(char) const">
			<summary>
			Returns the current view ID used for a certain Slave by its name .
			</summary> 
			<param name="slave_name"> Slave name. </param> 
			<returns>ID of the view used for the Slave with the specified name.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSlaveView(int) const">
			<summary>
			Returns the current view ID used for a certain Slave by its index (available for Master IG only).
			</summary> 
			<param name="slave_index"> Slave index in the range from 0 to the total numer of Slaves. </param> 
			<returns>ID of the view used for the Slave with the specified index.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearInterpolationData">
			<summary>
			Clears all interpolation data for all entities.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getGeodeticsTransformer const">
			<summary>
			Returns a pointer to the instance of the GeodeticsTransformer class if the Geodetics  plugin is loaded. This class is used to transform geodetic coordinates (latitude, longitude and altitude) to the 3D world position and vice versa.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getGeodeticOrigin const">
			<summary>
			Returns the coordinates of the geodetic origin.
			</summary>  
			<returns>Geodetic origin coordinates.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getNumSlaves const">
			<summary>
			Returns the total number of Slaves (available for Master IG only).
			</summary>  
			<returns>Total number of IG Slaves.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSlaveName(int) const">
			<summary>
			Returns Slave name by its index (available for Master IG only).
			</summary> 
			<param name="index"> Slave index. </param> 
			<returns>Name of the Slave with the specified index.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getSynckerName const">
			<summary>
			Returns the current name of the IG host.
			</summary>  
			<returns>Current name of the IG host.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDebugEnabled(bool)">
			<summary>
			Sets a value indicating if the Debug mode is enabled. This mode allows inspecting the IG application at run-time.
			</summary> 
			<param name="v"> true - to enable the Debug mode; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isDebugEnabled const">
			<summary>
			Returns a value indicating if the Debug mode is enabled. This mode allows inspecting the IG application at run-time
			</summary>  
			<returns>true if the IG Debug mode is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDebugMode(IG::Manager::DEBUG_MODE,bool)">
			<summary>
			Sets a value indicating if the specified Debug mode is enabled. This mode allows inspecting the IG application at run-time
			</summary> 
			<param name="mode"> Debug mode type. One of the DEBUG_MODE_* values. </param>
			<param name="enabled"> true - to enable the specified Debug mode; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isDebugMode(IG::Manager::DEBUG_MODE) const">
			<summary>
			Returns a value indicating if the specified Debug mode is enabled. This mode allows inspecting the IG application at run-time
			</summary> 
			<param name="mode"> Debug mode type. One of the DEBUG_MODE_* values. </param> 
			<returns>true if the specified IG Debug mode is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDebugDuration(float)">
			<summary>
			Sets the time period during which Debug visualizer elements are displayed.
			</summary> 
			<param name="time"> Time interval during which Debug visualizer elements are displayed, in seconds. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getDebugDuration const">
			<summary>
			Returns the current time period during which Debug visualizer elements are displayed.
			</summary>  
			<returns>Current time interval during which Debug visualizer elements are displayed, in seconds.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDebugScreenspace(bool)">
			<summary>
			Sets a value indicating the type of dimensions to be used when rendering Debug visualizer elements.
			</summary> 
			<param name="v"> Flag indicating the type of dimensions to be used:false - use the world space dimensionstrue - use the screen space dimensions </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isDebugScreenspace const">
			<summary>
			Returns a value indicating the type of dimensions currently used when rendering Debug visualizer elements.
			</summary>  
			<returns>Flag indicating the type of dimensions to be used:false - use the world space dimensionstrue - use the screen space dimensions</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDebugDepth(bool)">
			<summary>
			Sets a value indicating if depth testing for the Debug visualizer elements is enabled (if elements should be obscured by the ones closer to the camera).
			</summary> 
			<param name="v"> true to enable depth testing for the Debug visualizer elements (if elements should be obscured by the ones closer to the camera); false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.isDebugDepth const">
			<summary>
			Returns a value indicating if depth testing for the Debug visualizer elements is enabled (if elements should be obscured by the ones closer to the camera).
			</summary>  
			<returns>true if depth testing for the Debug visualizer elements is enabled (if elements should be obscured by the ones closer to the camera); otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setDebugScale(float)">
			<summary>
			Sets the new scale multiplier for Debug visualizer elements.
			</summary> 
			<param name="v"> Scale multiplier for Debug visualizer elements. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.getDebugScale const">
			<summary>
			Returns the current scale multiplier for Debug visualizer elements.
			</summary>  
			<returns>Current scale multiplier for Debug visualizer elements.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.calcDebugScale(float) const">
			<summary>
			Returns the actual scale of Debug visualizer elements calculated for the specified value based on the current type of dimensions (world/screen) and the current debug scale value.
			</summary> 
			<param name="v"> Initial scale value. </param> 
			<returns>Actual scale of Debug visualizer elements calculated for the specified value. The scale is calculated based on the current debug scale value.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnCreateViewCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on creating a new view. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnCreateViewCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
			<returns>ID of the last added Create View callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnCreateViewCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on creating a new view.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnCreateViewCallbacks">
			<summary>
			Clears all added Create View callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnCreateViewGroupCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on creating a new view. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnCreateViewGroupCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnCreateViewGroupCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on creating a new view group.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnCreateViewGroupCallbacks">
			<summary>
			Clears all added Create ViewGroup callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnCreateEntityCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on creating a new entity. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnCreateEntityCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnCreateEntityCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on creating a new entity.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnCreateEntityCallbacks">
			<summary>
			Clears all added Create Entity callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnCollisionVolumeDetectedCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on detecting an intersection with a collision volume. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnCollisionVolumeDetectedCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnCollisionVolumeDetectedCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on detecting an intersection with a collision volume.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnCollisionVolumeDetectedCallbacks">
			<summary>
			Clears all added CollisionVolume Detected callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnCollisionSegmentDetectedCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on detecting an intersection with a collision segment. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnCollisionSegmentDetectedCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnCollisionSegmentDetectedCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on detecting an intersection with a collision segment.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnCollisionSegmentDetectedCallbacks">
			<summary>
			Clears all added CollisionSegment Detected callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnIGReadyCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed when all Slaves that were waited for by the IG are connected. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnIGReadyCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnIGReadyCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed when all Slaves that were waited for by the IG are connected.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnIGReadyCallbacks">
			<summary>
			Clears all added IG Ready callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnSlaveConnectedCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on connecting a new Slave. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnSlaveConnectedCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnSlaveConnectedCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on connecting a new Slave.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnSlaveConnectedCallbacks">
			<summary>
			Clears all added Slave Connected callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.addOnSlaveDisconnectedCallback(void,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be executed on disconnecting a Slave. The signature of the callback function is as follows:
			</summary> 
			<param name="subscriber"> Callback subscriber. Can be used to remove the added callback via the removeOnSlaveDisconnectedCallback() method. </param>
			<param name="callback"> Callback function to be executed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.removeOnSlaveDisconnectedCallback(void)">
			<summary>
			Removes a callback function for the specified subscriber from the list of callbacks to be executed on disconnecting a Slave.
			</summary> 
			<param name="subscriber"> Callback subscriber. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.clearOnSlaveDisconnectedCallbacks">
			<summary>
			Clears all added Slave Disconnected callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Manager.setPropertyWarningEnabled(bool)">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_METEO">
			<summary>
			Debug mode visualizing meteo information.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_ENTITY_INFO">
			<summary>
			Debug mode visualizing the basis for every CIGI and DIS entity with the ID, type, and type name specified (information is taken from the IG configuration file).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_ENTITY_COLLISION_VOLUME">
			<summary>
			Debug mode visualizing collision volumes for every entity.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_ENTITY_COLLISION_SEGMENT">
			<summary>
			Debug mode visualizing collision segments for every entity.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_ENTITY_PATH_TRACE_TIME">
			<summary>
			Debug mode visualizing entity path tracing time.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_ENTITY_PATH_TRACE">
			<summary>
			Debug mode with entity path tracing - positions between frames and data sent over the network. Blue points mark data from the server; pink arrows - movement between frames.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Manager.DEBUG_MODE_REQUEST_DEBUG">
			<summary>
			Debug mode visualizing where LOS/HAT/HOT requests are sent to.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getID const">
			<summary>
			Returns the component ID.
			</summary>  
			<returns>Component ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getComponentType">
			<summary>
			Returns the component class.
			</summary>  
			<returns>CIGI component class.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getInstanceID">
			<summary>
			Returns the instance ID.
			</summary>  
			<returns>Instance ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getNode const">
			<summary>
			Returns the node assigned to the component.
			</summary>  
			<returns>Node assigned to the component.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getProperty const">
			<summary>
			Returns the node assigned to the component.
			</summary>  
			<returns>Property assigned to the component.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.setParameterData(char,void)">
			<summary>
			Sets the data for the component parameter with the specified name.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="value"> Pointer to a buffer with parameter data to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Component.setParameterInt(char,int)">
			<summary>
			Sets the value of the component parameter with the specified name using the specified integer value.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="value"> Value to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getParameterInt(char)">
			<summary>
			Returns the current value of the parameter with the specified name.
			</summary> 
			<param name="name"> Parameter name. </param> 
			<returns>Current value of the parameter with the specified name.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.setParameterFloat(char,float)">
			<summary>
			Sets the value of the float component parameter with the specified name using the specified float value.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="value"> Value to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getParameterFloat(char)">
			<summary>
			Returns the current value of the float parameter with the specified name.
			</summary> 
			<param name="name"> Parameter name. </param> 
			<returns>Current value of the float parameter with the specified name.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Component.setParameterDouble(char,double)">
			<summary>
			Sets the value of the component parameter with the specified name using the specified double value.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="value"> Value to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Component.getParameterDouble(char)">
			<summary>
			Returns the current value of the double parameter with the specified name.
			</summary> 
			<param name="name"> Parameter name. </param> 
			<returns>Current value of the double parameter with the specified name.</returns>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_ENTITY">
			<summary>
			Entity component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_VIEW">
			<summary>
			View component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_GROUP">
			<summary>
			View Group component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_SENSOR">
			<summary>
			Sensor component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_REG_WATER">
			<summary>
			Regional Water component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_REG_TERRAIN">
			<summary>
			Regional Terrain component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_REG_WEATHER">
			<summary>
			Regional Weather component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_GLOBAL_WATER">
			<summary>
			Global Water component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_GLOBAL_TERRAIN">
			<summary>
			Global Terrain component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_GLOBAL_WEATHER">
			<summary>
			Global Weather component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_ATMOSPHERE">
			<summary>
			Atmosphere component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_CELESTIAL">
			<summary>
			Celestial component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_EVENT">
			<summary>
			Event component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_SYSTEM">
			<summary>
			System component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_SYMBOL_SURFACE">
			<summary>
			Symbol Surface component class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Component.COMPONENT_TYPE_SYMBOL">
			<summary>
			Symbol component class.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.ComponentBaseInterface.saveState(BlobPtr)">
			<summary>
									Saves the state of the component. Is used in code writing the component data to be synchronized to a blob on the Master. This method is used for synchronization of ExtraSlaves that are connected after the simulation has started and is triggered once at the Slave connection. Here's an example from the WaterDropAircraftController component:
			</summary> 
			<param name="blob"> Target Blob to which the current component data (its internal state, any parameters, commands, etc.) is to be saved. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ComponentBaseInterface.restoreState(BlobPtr)">
			<summary>
			Restores the state of the component. Is used in code reading the data from the blob on Slaves. This method is used for synchronization of ExtraSlaves that are connected after the simulation has started and is triggered once at the Slave connection. Here's an example from the WaterDropAircraftController component:
			</summary> 
			<param name="blob"> Source Blob from which the current component data (its internal state, any parameters, commands, etc.) is to be loaded. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getID const">
			<summary>
			Returns the ID of the articulated part.
			</summary>  
			<returns>Articulated part ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getNumNodes const">
			<summary>
			Returns the total number of nodes representing the articulated part.
			</summary>  
			<returns>Number of nodes representing the articulated part.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getNode(int) const">
			<summary>
			Returns the given node from the array of nodes representing the articulated part.
			</summary> 
			<param name="num"> Node number. </param> 
			<returns>Node.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.setEnabled(bool)">
			<summary>
			Sets the value indicating if the articulated part is enabled.
			</summary> 
			<param name="enable"> true to enable the articulated part; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.isEnabled const">
			<summary>
			Returns the value indicating if the articulated part is enabled.
			</summary>  
			<returns>true if the articulated part is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.setPosition(Unigine.Math.vec3)">
			<summary>
			Sets the offset of the articulated part in the submodel coordinate system (SCS).
			</summary> 
			<param name="offset"> Articulated part offset coordinates to set (X - back, Y - left, Z - down). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getPosition const">
			<summary>
			Returns the current offset of the articulated part in the submodel coordinate system (SCS).
			</summary>  
			<returns>Articulated part offset coordinates (X - back, Y - left, Z - down).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.setRotationEuler(Unigine.Math.vec3)">
			<summary>
			Sets the rotation of the articulated part in the submodel coordinate system (SCS).
			</summary> 
			<param name="rotation_euler"> Articulated part rotation euler angles to set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getRotationEuler const">
			<summary>
			Returns the rotation of the articulated part in the submodel coordinate system (SCS).
			</summary>  
			<returns>Articulated part rotation euler angles.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.setLinearRate(Unigine.Math.vec3)">
			<summary>
			Sets the rate of linear motion of the articulated part.
			</summary> 
			<param name="rate"> Vector of linear motion rates to be set for the corresponding axes (the result is automatically converted for the current coordinate system). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getLinearRate const">
			<summary>
			Returns the current rate of linear motion of the articulated part.
			</summary>  
			<returns>Vector of linear motion rates for the corresponding axes (the result is automatically converted for the current coordinate system).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.setAngularRate(Unigine.Math.vec3)">
			<summary>
			Sets the rate of angular motion of the articulated part.
			</summary> 
			<param name="rate"> Vector of angular motion rates to be set for the corresponding axes (the result is automatically converted for the current coordinate system). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ArticulatedPart.getAngularRate const">
			<summary>
			Returns the current rate of angular motion of the articulated part.
			</summary>  
			<returns>Vector of angular motion rates for the corresponding axes (the result is automatically converted for the current coordinate system).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.getID const">
			<summary>
			Returns the ID of the collision segment.
			</summary>  
			<returns>Collision segment ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.getEntity const">
			<summary>
			Returns the entity to which the collision segment is assigned.
			</summary>  
			<returns>Entity to which the collision segment is assigned.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.isEnabled const">
			<summary>
			Returns a value indicating if the collision segment is enabled.
			</summary>  
			<returns>true if the collision segment is enabled; otherwise, false</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.setEnabled(bool)">
			<summary>
			Enables or disables the collision segment.
			</summary> 
			<param name="value"> true to enable the collision segment; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.setStartPoint(Unigine.Math.vec3)">
			<summary>
			Sets the coordinates of the start point of the collision segment.
			</summary> 
			<param name="point"> Coordinates of the start point of the collision segment, in the coordinate system of the entity. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.getStartPoint const">
			<summary>
			Returns the current coordinates of the start point of the collision segment.
			</summary>  
			<returns>Coordinates of the start point of the collision segment, in the coordinate system of the entity.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.setEndPoint(Unigine.Math.vec3)">
			<summary>
			Sets the coordinates of the end point of the collision segment.
			</summary> 
			<param name="point"> Coordinates of the end point of the collision segment, in the coordinate system of the entity. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.getEndPoint const">
			<summary>
			Returns the current coordinates of the end point of the collision segment.
			</summary>  
			<returns>Coordinates of the end point of the collision segment, in the coordinate system of the entity.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.setMaterialMask(int)">
			<summary>
			Sets the material mask for the collision segment. This parameter specifies the environmental and cultural features to be included in or excluded from consideration for collision testing.
			</summary> 
			<param name="mask"> Integer representing a bit mask, each bit of which represents a range of material code values. Setting that bit to 1 will cause the IG to register hits with materials within the corresponding range. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.getMaterialMask const">
			<summary>
			Gets the material mask for the collision segment. This parameter specifies the environmental and cultural features to be included in or excluded from consideration for collision testing.
			</summary>  
			<returns>Integer representing a bit mask, each bit of which represents a range of material code values. Setting that bit to 1 will cause the IG to register hits with materials within the corresponding range.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.addOnCollisionDetectedCallback(Unigine.CallbackBase3{CollisionSegment,Unigine.Ptr{Unigine.Object},Unigine.Ptr{WorldIntersection}})">
			<summary>
			Adds a callback function to be called when a collision with the collision segment is detected. This function can be used to define specific actions to be performed when a collision with the segment is detected. The signature of the callback function must be as follows:					You can set a callback function as follows:					Example: Setting a collision detected callback for a collision segment of an entity
			</summary> 
			<param name="func"> Callback function. </param> 
			<returns>ID of the last added collision detected callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.removeOnCollisionDetectedCallback(void)">
			<summary>
			Removes the specified callback from the list of collision detected callbacks.
			</summary> 
			<param name="id"> Collision detected callback ID obtained when adding it. </param> 
			<returns>True if the collision detected callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionSegment.clearOnCollisionDetectedCallbacks">
			<summary>
			Clears all added collision detected callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.getID const">
			<summary>
			Returns the ID of the collision volume.
			</summary>  
			<returns>Collision volume ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.getEntity const">
			<summary>
			Returns the entity to which the collision volume is assigned.
			</summary>  
			<returns>Entity to which the collision volume is assigned.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.setEnabled(bool)">
			<summary>
			Enables or disables the collision volume.
			</summary> 
			<param name="value"> true to enable the collision volume; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.isEnabled const">
			<summary>
			Returns a value indicating if the collision volume is enabled.
			</summary>  
			<returns>true if the collision volume is enabled; otherwise, false</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.setPosition(Unigine.Math.vec3)">
			<summary>
			Sets the coordinates of the center of the collision volume.
			</summary> 
			<param name="value"> Coordinates of the center of the collision volume, in the coordinate system of the entity. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.getPosition const">
			<summary>
			Returns the current coordinates of the center of the collision volume.
			</summary>  
			<returns>Current coordinates of the center of the collision volume, in the coordinate system of the entity.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.setRotation(Unigine.Math.quat)">
			<summary>
			Sets the rotation of the cuboid-shaped collision volume. The rotation quaternion is obtained by converting NED euler rotation (roll, pitch, yaw) to a quaternion via the Converter::eulerNEDToRotation() method.
			</summary> 
			<param name="value"> Quaternion defining rotation of the cuboid-shaped collision volume. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.getRotation const">
			<summary>
			Returns the current rotation of the cuboid-shaped collision volume. You can convert the obtained rotation quaternion to NED euler rotation (roll, pitch, yaw) via the Converter::rotationToEulerNED() method.
			</summary>  
			<returns>Quaternion defining rotation of the cuboid-shaped collision volume.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the size of the cuboid-shaped collision volume.
			</summary> 
			<param name="size"> Vector defining the size of the cuboid-shaped collision volume (depth, width, height). Each component is specified in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.setRadius(float)">
			<summary>
			Sets the radius of the spherical collision volume.
			</summary> 
			<param name="radius"> Radius of the spherical collision volume, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.addOnCollisionDetectedCallback(Unigine.CallbackBase4{CollisionVolume,Unigine.Ptr{ShapeContact},longlong,int})">
			<summary>
			Adds a callback function to be called when a collision with the collision volume is detected. This function can be used to define specific actions to be performed when a collision with the volume is detected. The signature of the callback function must be as follows:					You can set a callback function as follows:					Example: Setting a collision detected callback for a collision volume of an entity
			</summary> 
			<param name="func"> Callback function. </param> 
			<returns>ID of the last added collision detected callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.removeOnCollisionDetectedCallback(void)">
			<summary>
			Removes the specified callback from the list of collision detected callbacks.
			</summary> 
			<param name="id"> Collision detected callback ID obtained when adding it. </param> 
			<returns>True if the collision detected callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.clearOnCollisionDetectedCallbacks">
			<summary>
			Clears all added collision detected callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.setName(char)">
			<summary>
			Sets a new name for the collision volume.
			</summary> 
			<param name="value"> Collision volume name to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.CollisionVolume.getName const">
			<summary>
			Returns the name of the collision volume.
			</summary>  
			<returns>Collision volume name.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.worldToGeodetic(Unigine.Math.dvec3)">
			<summary>
			Returns geodetic coordinates of a point with the specified world coordinates.
			</summary> 
			<param name="world_pos"> World coordinates of the point to be converted (X, Y, Z). </param> 
			<returns>Geodetic coordinates of the point (lat, lon, alt).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.geodeticToWorld(Unigine.Math.dvec3) const">
			<summary>
			Returns world coordinates of a point with the specified geodetic coordinates.
			</summary> 
			<param name="geo_pos"> Geodetic coordinates of the point to be converted (lat, lon, alt). </param> 
			<returns>World coordinates of the point (X, Y, Z).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.ENUtoNED(Unigine.Math.dvec3) const">
			<summary>
			Converts the coordinates of a point specified in the ENU (East-North-Up) system to NED (North-East-Down).
			</summary> 
			<param name="enu_pos"> Coordinates of a point in the ENU (East-North-Up) system. </param> 
			<returns>Coordinates of the point in the NED (North-East-Down) system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.NEDtoENU(Unigine.Math.dvec3) const">
			<summary>
			Converts the coordinates of a point specified in the NED (North-East-Down) system to ENU (East-North-Up).
			</summary> 
			<param name="ned_pos"> Coordinates of a point in the NED (North-East-Down) system. </param> 
			<returns>Coordinates of the point in the ENU (East-North-Up) system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.IGtoENU(Unigine.Math.dvec3) const">
			<summary>
			Converts the coordinates of a point specified in the IG system to ENU (East-North-Up).
			</summary> 
			<param name="ig_pos"> Coordinates of the point in the IG system. </param> 
			<returns>Coordinates of a point in the ENU (East-North-Up) system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.ENUtoIG(Unigine.Math.dvec3) const">
			<summary>
			Converts the coordinates of a point specified in the ENU (East-North-Up) system to IG.
			</summary> 
			<param name="enu_pos"> Coordinates of a point in the ENU (East-North-Up) system. </param> 
			<returns>Coordinates of the point in the IG system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.ENUtoNED(Unigine.Math.vec3) const">
			<summary>
			Converts the coordinates of a point specified in the ENU (East-North-Up) system to NED (North-East-Down).
			</summary> 
			<param name="enu_pos"> Coordinates of a point in the ENU (East-North-Up) system. </param> 
			<returns>Coordinates of the point in the NED (North-East-Down) system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.NEDtoENU(Unigine.Math.vec3) const">
			<summary>
			Converts the coordinates of a point specified in the NED (North-East-Down) system to ENU (East-North-Up).
			</summary> 
			<param name="ned_pos"> Coordinates of the point in the NED (North-East-Down) system. </param> 
			<returns>Coordinates of a point in the ENU (East-North-Up) system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.IGtoENU(Unigine.Math.vec3) const">
			<summary>
			Converts the coordinates of a point specified in the IG system to ENU (East-North-Up).
			</summary> 
			<param name="ig_pos"> Coordinates of the point in the IG system. </param> 
			<returns>Coordinates of a point in the ENU (East-North-Up) system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.ENUtoIG(Unigine.Math.vec3) const">
			<summary>
			Converts the coordinates of a point specified in the IG system to ENU (East-North-Up).
			</summary> 
			<param name="enu_pos"> Coordinates of a point in the ENU (East-North-Up) system. </param> 
			<returns>Coordinates of the point in the IG system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.getZeroRotation(Unigine.Math.dvec3) const">
			<summary>
			Returns the zero-rotation for the specified target geodetic position.											Unigine uses ENU orientation!																					final_rotation = zero_rotation * entity_local_rotation																						entity_local_rotation = final_rotation * inverse(zero_rotation)
			</summary> 
			<param name="geo_pos"> Target geodetic position coordinates (lat, lon, alt). </param> 
			<returns>Zero-rotation quaternion for the specified target geodetic position.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.getZeroUpDirection(Unigine.Math.dvec3) const">
			<summary>
			Returns the zero "up"-vector coordinates for the specified target geodetic position.
			</summary> 
			<param name="geo_pos"> Target geodetic position coordinates (lat, lon, alt). </param> 
			<returns>Zero "up"-vector coordinates for the specified target geodetic position.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.getZeroBasis(Unigine.Math.dvec3) const">
			<summary>
			Returns the whole zero basis for the specified target geodetic position.
			</summary> 
			<param name="geo_pos"> Target geodetic position coordinates (lat, lon, alt). </param> 
			<returns>Zero basis for the specified target geodetic position.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.eulerENUToRotation(Unigine.Math.vec3) const">
			<summary>
			Converts the specified Euler rotation vector in ENU (East-North-Up) coordinates to a rotation quaternion.											Unigine uses ENU orientation!						Axis order: Yaw -&gt; Pitch -&gt; Roll (ENU: Z -&gt; X -&gt; Y, NED: Z -&gt; Y -&gt; X)																					final_rotation = zero_rotation * entity_local_rotation																						entity_local_rotation = final_rotation * inverse(zero_rotation)
			</summary> 
			<param name="euler"> Vector representing rotation (roll, pitch, yaw) in ENU (East-North-Up) coordinates. </param> 
			<returns>Rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.eulerNEDToRotation(Unigine.Math.vec3) const">
			<summary>
			Converts the specified Euler rotation vector in NED (North-East-Down) coordinates to a rotation quaternion.											Unigine uses ENU orientation!						Axis order: Yaw -&gt; Pitch -&gt; Roll (ENU: Z -&gt; X -&gt; Y, NED: Z -&gt; Y -&gt; X)																					final_rotation = zero_rotation * entity_local_rotation																						entity_local_rotation = final_rotation * inverse(zero_rotation)
			</summary> 
			<param name="euler"> Vector representing Euler rotation (roll, pitch, yaw) in NED (North-East-Down) coordinates. </param> 
			<returns>Rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.eulerIGToRotation(Unigine.Math.vec3) const">
			<summary>
			Converts the specified Euler rotation vector in IG coordinates to a rotation quaternion.
			</summary> 
			<param name="euler"> Vector representing Euler rotation (roll, pitch, yaw) in IG coordinates. </param> 
			<returns>Rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.rotationToEulerENU(Unigine.Math.quat) const">
			<summary>
			Converts the specified rotation quaternion to Euler rotation vector in ENU (East-North-Up) coordinates.											Unigine uses ENU orientation!						Axis order: Yaw -&gt; Pitch -&gt; Roll (ENU: Z -&gt; X -&gt; Y, NED: Z -&gt; Y -&gt; X)																					final_rotation = zero_rotation * entity_local_rotation																						entity_local_rotation = final_rotation * inverse(zero_rotation)
			</summary> 
			<param name="rotation"> Rotation quaternion. </param> 
			<returns>Vector representing rotation (roll, pitch, yaw) in ENU (East-North-Up) coordinates.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.rotationToEulerNED(Unigine.Math.quat) const">
			<summary>
			Converts the specified rotation quaternion to Euler rotation vector in NED (North-East-Down) coordinates.											Unigine uses ENU orientation!						Axis order: Yaw -&gt; Pitch -&gt; Roll (ENU: Z -&gt; X -&gt; Y, NED: Z -&gt; Y -&gt; X)																					final_rotation = zero_rotation * entity_local_rotation																						entity_local_rotation = final_rotation * inverse(zero_rotation)
			</summary> 
			<param name="rotation"> Rotation quaternion. </param> 
			<returns>Vector representing Euler rotation (roll, pitch, yaw) in NED (North-East-Down) coordinates.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.rotationToEulerIG(Unigine.Math.quat) const">
			<summary>
			Converts the specified rotation quaternion to Euler rotation vector in IG coordinates.
			</summary> 
			<param name="rotation"> Rotation quaternion. </param> 
			<returns>Vector representing Euler rotation (roll, pitch, yaw) in IG coordinates.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.setCoordinateSystem(Converter::COORDINATE_SYSTEM)">
			<summary>
			Sets the specified coordinate system to be used.
			</summary> 
			<param name="coord_system"> Coordinate system to be set. One of the COORDINATE_SYSTEM::* values. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Converter.getCoordinateSystem const">
			<summary>
			Returns the currently used coordinate system.
			</summary>  
			<returns>Coordinate system currently used.</returns>
		</member>
		<member name="F:Unigine.Plugins.IG.Converter.COORDINATE_SYSTEM_NED">
			<summary>
			NED (North-East-Down) coordinate system. X - front, Y - right, Z - down, default in Unigine. Rotation order: Z -&gt; Y -&gt; X (Yaw-Pitch-Roll)
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Converter.COORDINATE_SYSTEM_ENU">
			<summary>
			ENU (East-North-Up) coordinate system. X - right, Y - front, Z - up, default in Unigine. Rotation order: Z -&gt; X -&gt; Y (Yaw-Roll-Pitch)
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getID const">
			<summary>
			Returns the unique ID of the entity instance.
			</summary>  
			<returns>Entity ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getNode const">
			<summary>
			Returns the node assigned to the entity.
			</summary>  
			<returns>Node assigned to the entity.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getNodeReference const">
			<summary>
			Returns the node reference assigned to the entity.
			</summary>  
			<returns>NodeReference assigned to the entity.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setGeoPosition(Unigine.Math.dvec3,double)">
			<summary>
			Sets the entity position in geo-coordinates (lat, lon, alt).
			</summary> 
			<param name="position"> New geo-coordinates of entity position to be set. </param>
			<param name="timestamp"> Timestamp, indicating the time when entity position in geo-coordinates is to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getGeoPosition const">
			<summary>
			Returns the current entity position in geo-coordinates (lat, lon, alt).
			</summary>  
			<returns>Entity position coordinates.Geo-coordinates will be returned if there is no parent entity assigned, otherwise — local coordinates will be returned.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setRotationEuler(Unigine.Math.vec3,double)">
			<summary>
			Sets the entity rotation at the specified time.
			</summary> 
			<param name="euler"> Entity rotation Euler angles to set. </param>
			<param name="timestamp"> Timestamp, indicating the time when rotation is to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getRotationEuler const">
			<summary>
			Returns the current entity rotation euler angles.
			</summary>  
			<returns>Entity rotation euler angles.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setPositionOffset(Unigine.Math.dvec3,double)">
			<summary>
			Sets the entity position offset at the specified time.
			</summary> 
			<param name="offset"> Position offset to be set for the entity. </param>
			<param name="timestamp"> Timestamp, indicating the time when position offset is to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getPositionOffset const">
			<summary>
			Returns the current entity position offset.
			</summary>  
			<returns>Current entity position offset.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setType(longlong)">
			<summary>
			Sets the type of the entity. Entity type ID is defined in the entity definition section of the IG configuration file as follows:					0 removes the entity from the scene.
			</summary> 
			<param name="id"> Entity type to be set. 0 removes the entity from the scene. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getType const">
			<summary>
			Returns the type of the entity. Entity type ID is defined in the entity definition section of the IG configuration file as follows:
			</summary>  
			<returns>Entity type.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getInternalType const">
			<summary>
			Returns the internal type of the entity.
			</summary>  
			<returns>Internal entity type.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setState(Entity::STATE)">
			<summary>
			Sets the state of the entity.
			</summary> 
			<param name="id"> Entity state to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getState const">
			<summary>
			Returns the current entity state.
			</summary>  
			<returns>Current entity state.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setCollision(bool)">
			<summary>
			Sets the value indicating if collision detecton shall be enabled for the entity.
			</summary> 
			<param name="enabled"> true to enable collision detecton for the entity; false — to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.isCollision const">
			<summary>
			Returns the value indicating if collision detecton shall be enabled for the entity.
			</summary>  
			<returns>Collision Detection Enable parameter value. true collision detecton for the entity shall be enabled; false — collision detecton for the entity shall be enabled.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setParent(Entity)">
			<summary>
			Attaches the entity as a child to the specified parent entity.
			</summary> 
			<param name="entity"> Parent entity. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.unparent">
			<summary>
			Detaches the entity from its parent.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getParentID const">
			<summary>
			Returns the ID of the entity parent.
			</summary>  
			<returns>Entity parent ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAttachState const">
			<summary>
			Returns the value of the Attach State parameter. It specifies whether the entity is be attached as a child to a parent.
			</summary>  
			<returns>Attach State parameter value. 1 the entity shall be or remain attached to the entity specified by the Parent ID parameter; 0 — the entity shall be detached from its parent.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setAlpha(int)">
			<summary>
			Sets the alpha value, that determines transparency of entity geometry.
			</summary> 
			<param name="byte_value"> Alpha value to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAlpha const">
			<summary>
			Returns the current alpha value, that determines transparency of entity geometry.
			</summary>  
			<returns>Alpha value.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setInheritAlpha(bool)">
			<summary>
			Sets the value indicating if the entity uses the alpha value of its parent.
			</summary> 
			<param name="enabled"> true the entity shall use the alpha value of its parent; false — the entity shall use its own alpha value. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.isInheritAlpha const">
			<summary>
			Returns the value indicating if the entity uses the alpha value of its parent.
			</summary>  
			<returns>true if the entity uses the alpha value of its parent; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setGroundClamp(Entity::CLAMP)">
			<summary>
			Sets the value of the Ground/Ocean Clamp parameter.
			</summary> 
			<param name="clamp"> Ground/Ocean Clamp parameter value. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getGroundClamp const">
			<summary>
			Returns the value of the Ground/Ocean Clamp parameter.
			</summary>  
			<returns>Ground/Ocean Clamp parameter value.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setGroundClampHeightMode(Entity::CLAMP_HEIGHT_MODE)">
			<summary>
			Sets the value of the clamp height mode parameter used for clamping. By default, the Ground Clamp Height Mode is set to RELATIVE — the entity is clamped to the ground and the height is calculated from the ground. With the mode set to IGNORE, the entity is clamped to the ground and the height is ignored.
			</summary> 
			<param name="height_mode"> Clamp height mode parameter value. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getGroundClampHeightMode const">
			<summary>
			Returns the value of the clamp height mode parameter used for clamping. By default, the Ground Clamp Height Mode is set to RELATIVE — the entity is clamped to the ground and the height is calculated from the ground. With the mode set to IGNORE, the entity is clamped to the ground and the height is ignored.
			</summary>  
			<returns>Clamp height mode parameter value.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getGroundClampPoint const">
			<summary>
			Returns the current ground clamping point coordinates for the entity. Clamping is performed relative to the ground and sea level.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setAnimationDirection(Entity::ANIMATION_DIRECTION)">
			<summary>
			Sets the entity's animation playback direction.
			</summary> 
			<param name="animation_direction"> Direction of the entity's animation playback. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAnimationDirection const">
			<summary>
			Returns the current entity's animation playback direction.
			</summary>  
			<returns>Direction of the entity's animation playback.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setAnimationLoop(Entity::ANIMATION_LOOP)">
			<summary>
			Sets the entity's animation playback mode.
			</summary> 
			<param name="animation_loop"> Mode of the entity's animation playback. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAnimationLoop const">
			<summary>
			Returns the current entity's animation playback mode.
			</summary>  
			<returns>Mode of the entity's animation playback.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setAnimationState(Entity::ANIMATION_STATE)">
			<summary>
			Sets the entity's animation playback state.
			</summary> 
			<param name="animation_state"> State of the entity's animation playback. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAnimationState const">
			<summary>
			Returns the current entity's animation playback state.
			</summary>  
			<returns>State of the entity's animation playback.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setInterpolation(bool)">
			<summary>
			Sets a value indicating if interpolation and extrapolation are enabled.
			</summary> 
			<param name="id"> true to enable interpolation and extrapolation; false — to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.isInterpolation const">
			<summary>
			Returns a value indicating if interpolation and extrapolation are enabled.
			</summary>  
			<returns>true if interpolation and extrapolation are enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.clearInterpolationData">
			<summary>
			Clears all interpolation data for the entity.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setExtrapolationCoordSystem(Entity::COORDINATE_SYSTEM)">
			<summary>
			Sets the reference coordinate system to which the linear and angular velocity and acceleration are applied. If the reference coordinate system is set to WORLD, and the entity is a top-level (non-child) entity, the velocity and acceleration are defined relative to the database. Linear velocity and acceleration describe a path along and above the surface of the geoid. Angular velocity and acceleration describe a rotation relative to a reference plane. If the entity is a child entity, the velocity and acceleration are defined relative to the parent’s local coordinate system. If the reference coordinate system is set to LOCAL, the velocity and acceleration are defined relative to the entity’s local coordinate system.
			</summary> 
			<param name="animation_state"> Coordinate system used for extrapolation. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getExtrapolationCoordSystem const">
			<summary>
			Returns the current reference coordinate system to which the linear and angular velocity and acceleration are applied. If the reference coordinate system is set to WORLD, and the entity is a top-level (non-child) entity, the velocity and acceleration are defined relative to the database. Linear velocity and acceleration describe a path along and above the surface of the geoid. Angular velocity and acceleration describe a rotation relative to a reference plane. If the entity is a child entity, the velocity and acceleration are defined relative to the parent’s local coordinate system. If the reference coordinate system is set to LOCAL, the velocity and acceleration are defined relative to the entity’s local coordinate system.
			</summary>  
			<returns>Extrapolation coordinate system.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setVelocity(Unigine.Math.dvec3,Unigine.Math.vec3)">
			<summary>
			Sets linear and angular velocity for the entity.
			</summary> 
			<param name="linear"> Linear velocity vector to be set. </param>
			<param name="angular_deg"> Angular velocity vector (roll, pitch, yaw), in degrees per second. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getLinearVelocity const">
			<summary>
			Returns the linear velocity of the entity.
			</summary>  
			<returns>Linear velocity vector.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAngularVelocity const">
			<summary>
			Returns the angular velocity of the entity.
			</summary>  
			<returns>Angular velocity vector (roll, pitch, yaw), in degrees per second.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.setAcceleration(Unigine.Math.dvec3,Unigine.Math.vec3)">
			<summary>
			Sets linear and angular acceleration for the entity.
			</summary> 
			<param name="linear"> Linear acceleration vector to be set. </param>
			<param name="angular_deg"> Angular acceleration vector (roll, pitch, yaw), in degrees per second. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getLinearAcceleration const">
			<summary>
			Returns the linear acceleration of the entity.
			</summary>  
			<returns>Linear acceleration vector.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getAngularAcceleration const">
			<summary>
			Returns the angular acceleration of the entity.
			</summary>  
			<returns>Angular acceleration vector (roll, pitch, yaw), in degrees per second.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getComponent(int,bool)">
			<summary>
			Returns the interface of the specified component.
			</summary> 
			<param name="id"> ID of the component. </param>
			<param name="auto_create"> true to automatically create the component with the specified ID if it doesn't exist yet; false - to return nullptr in case the component doesn't exist. </param> 
			<returns>Component interface if it exists, or nullptr otherwise.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getComponents const">
			<summary>
			Returns the list of all components associated with the entity.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getArticulatedPart(int,bool)">
			<summary>
			Returns the interface of the specified articulated part.
			</summary> 
			<param name="id"> ID of the articulated part. </param>
			<param name="auto_create"> true to automatically create the articulated part with the specified ID if it doesn't exist yet; false - to return nullptr in case the articulated part doesn't exist. </param> 
			<returns>Articulated part interface if it exists, or nullptr otherwise.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getArticulatedParts const">
			<summary>
			Returns the list of all articulated parts associated with the entity.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getCollisionSegment(int,bool)">
			<summary>
			Returns the interface of the specified collision segment.
			</summary> 
			<param name="id"> ID of the collision segment. </param>
			<param name="auto_create"> true to automatically create the collision segment with the specified ID if it doesn't exist yet; false - to return nullptr in case the collision segment doesn't exist. </param> 
			<returns>Collision segment interface if it exists, or nullptr otherwise.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getCollisionSegments const">
			<summary>
			Returns the list of all collision segments associated with the entity.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getCollisionVolume(int,bool)">
			<summary>
			Returns the interface of the specified collision volume.
			</summary> 
			<param name="id"> ID of the collision volume. </param>
			<param name="auto_create"> true to automatically create the collision volume with the specified ID if it doesn't exist yet; false - to return nullptr in case the collision volume doesn't exist. </param> 
			<returns>Collision volume interface if it exists, or nullptr otherwise.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getCollisionVolumes const">
			<summary>
			Returns the list of all collision volumes associated with the entity.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getObjects const">
			<summary>
			Returns the vector of all nodes, that constitute the entity.
			</summary>  
			<returns>Vector of nodes, that constitute the entity.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getEntityTypeFromDIS(uint8_t,uint8_t,uint16_t,uint8_t,uint8_t,uint8_t,uint8_t)">
			<summary>
			Returns the entity type identifier (defined in the entity definition section) based on the given arguments. This method is used to convert the entity's ID from DIS type to the IG type.					You can also set the type using a DIS-style ID:
			</summary> 
			<param name="kind"> Entity kind </param>
			<param name="domain"> Domain </param>
			<param name="country"> Country </param>
			<param name="cat"> Category </param>
			<param name="subcat"> Sub Category </param>
			<param name="spec"> Specific </param>
			<param name="extra"> Extra </param> 
			<returns>Entity type identifier</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getDISTypeFromEntityType(int64_t,uint8_t,uint8_t,uint16_t,uint8_t,uint8_t,uint8_t,uint8_t)">
			<summary>
			Returns the DIS-style entity type identifier (by setting values for the given arguments: kind, domain, etc.) based on the specified entity type ID used in the IG (see the entity definition section). This method is used to convert the entity's ID from IG type to the DIS type.				Entity type can be specified using a DIS-style ID:
			</summary> 
			<param name="entity_type"> Entity type identifier. </param>
			<param name="kind"> Kind </param>
			<param name="domain"> Domain </param>
			<param name="country"> Country </param>
			<param name="cat"> Category </param>
			<param name="subcat"> Sub Category </param>
			<param name="spec"> Specific </param>
			<param name="extra"> Extra </param> 
			<returns>true, if the entity type ID conversion from IG to DIS is successfull, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getEntityIDFromDISID(uint16_t,uint16_t)">
			<summary>
			Returns the result of entity ID conversion from DIS to IG. In case of DIS an entity is identified by a pair: Application ID + Entity ID (Site ID is ignored by IG).
			</summary> 
			<param name="app"> Application ID. </param>
			<param name="id"> Entity ID used in DIS application. </param> 
			<returns>Entity ID used in IG.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getDISIDFromEntityID(int64_t,uint16_t,uint16_t)">
			<summary>
			Converts entity ID from IG to DIS and puts the result to variables specified via app and id arguments. In case of DIS an entity is identified by a pair: Application ID + Entity ID (Site ID is ignored by IG).
			</summary> 
			<param name="entity_id"> Entity ID used in IG. </param>
			<param name="app"> Application ID used in DIS. </param>
			<param name="id"> Entity ID used in DIS. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.getTypeName const">
			<summary>
			Returns the name of the entity type (defined in the entity definition section).
			</summary>  
			<returns>Entity type name.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Entity.isPrespawned const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.STATE_INACTIVE">
			<summary>
			The entity is inactive.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.STATE_ACTIVE">
			<summary>
			The entity is active.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.STATE_DESTROYED">
			<summary>
			The entity is destroyed.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.CLAMP_NO_CLAMP">
			<summary>
			Altitude clamping for entity is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.CLAMP_NON_CONFORMAL">
			<summary>
			Altitude parameter specifies an offset of the entity above the ground level.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.CLAMP_CONFORMAL">
			<summary>
			Altitude parameter specifies an offset of the entity above the sea level.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.CLAMP_HEIGHT_MODE_RELATIVE">
			<summary>
			Clamp height mode that makes the entity to be clamped to the ground and the height be calculated from the ground.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.CLAMP_HEIGHT_MODE_IGNORE">
			<summary>
			Clamp height mode that makes the entity to be clamped to the ground and the height be ignored.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_STATE_STOP">
			<summary>
			Stop entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_STATE_PAUSE">
			<summary>
			Pause entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_STATE_PLAY">
			<summary>
			Start entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_STATE_CONTINUE">
			<summary>
			Resume entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_DIRECTION_FORWARD">
			<summary>
			Forward direction of the entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_DIRECTION_BACKWARD">
			<summary>
			Backward direction of the entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_LOOP_ONESHOT">
			<summary>
			Oneshot mode of the entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.ANIMATION_LOOP_CONTINUOUS">
			<summary>
			Continuous mode of the entity animation playback.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.COORDINATE_SYSTEM_WORLD">
			<summary>
			If the reference coordinate system is set to this value, and the entity is a top-level (non-child) entity, the velocity and acceleration are defined relative to the database. Linear velocity and acceleration describe a path along and above the surface of the geoid. Angular velocity and acceleration describe a rotation relative to a reference plane. If the entity is a child entity, the velocity and acceleration are defined relative to the parent’s local coordinate system.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Entity.COORDINATE_SYSTEM_LOCAL">
			<summary>
			If the reference coordinate system is set to this value, the velocity and acceleration are defined relative to the entity’s local coordinate system.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setEnabled(Unigine.Ptr{Unigine.Node},char,bool)">
			<summary>
			Enables or disables all lights of a given parent node within a specified category.
			</summary> 
			<param name="parent_node"> Parent node of lights to be enabled. </param>
			<param name="path"> Category of lights in the lights hierarchy. </param>
			<param name="enable"> true to enable lights, false to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setEnabled(char,bool)">
			<summary>
			Enables or disables all lights within a specified category.
			</summary> 
			<param name="path"> Category of lights in the lights hierarchy. </param>
			<param name="enable"> true to enable lights, false to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setEnabled(Unigine.Vector{unsignedint,int,Unigine.VectorAllocator},bool)">
			<summary>
			Enables or disables all lights within a specified category using its hash.					Toggling lights using the path hash is faster than using categories, therefore, is recommended for use, where appropriate.
			</summary> 
			<param name="hash_path"> Hash of the category of lights in the lights hierarchy. </param>
			<param name="enable"> true to enable lights, false to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setStrobed(char,bool)">
			<summary>
			Enables or disables lights strobing within a specified category.
			</summary> 
			<param name="path"> Category of lights in the lights hierarchy. </param>
			<param name="enable"> true to enable strobing, false to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setStrobed(Unigine.Vector{unsignedint,int,Unigine.VectorAllocator},bool)">
			<summary>
			Enables or disables lights strobing within a specified category using its hash.
			</summary> 
			<param name="hash_path"> Hash of the category of lights in the lights hierarchy. </param>
			<param name="enable"> true to enable strobing, false to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setBright(char,float)">
			<summary>
			Sets the intensity of lights within a specified category.
			</summary> 
			<param name="path"> Category of lights in the lights hierarchy. </param>
			<param name="bright"> Light intensity value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.setBright(Unigine.Vector{unsignedint,int,Unigine.VectorAllocator},float)">
			<summary>
			Sets the intensity of lights within a specified category using its hash.
			</summary> 
			<param name="hash_path"> Hash of the category of lights in the lights hierarchy. </param>
			<param name="bright"> Light intensity value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.LightController.getIndexPath(char,Unigine.Vector{unsignedint,int,Unigine.VectorAllocator})">
			<summary>
			Fills in the vector data array with the path hash values.
			</summary> 
			<param name="path"> Category of lights in the lights hierarchy. </param>
			<param name="ret_hash_path"> Pointer to the array storing hash of the path. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getRegion(longlong,bool)">
			<summary>
			Returns the interface of a weather region/layer by its identifier. If no weather region/layer with such id exists, it will be created.
			</summary> 
			<param name="id"> Weather region identifier. </param>
			<param name="auto_create"> true to automatically create the region with the specified ID if it doesn't exist yet; false - to return nullptr in case the region doesn't exist. </param> 
			<returns>Weather region interface if it exists; otherwise - nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.removeRegion(longlong)">
			<summary>
			Removes a weather region with a given identifier.
			</summary> 
			<param name="id"> Identifier of the weather region to be removed. </param> 
			<returns>true if a region with a given identifier is removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.clearRegions">
			<summary>
			Removes all weather regions and layers.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getMeanWindSpeed(Unigine.Math.dvec3) const">
			<summary>
			Returns an average wind speed at the specified geographic location. This method combines wind parameter of all weather regions and layers affecting this point.
			</summary> 
			<param name="geo_pos"> Geographic coordinates of a point (lat, lon, alt), for which an average wind speed and direction are to be calculated. </param> 
			<returns>Vector defining average wind speed (in meters per second) in all directions for the given location.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.addOnCreateRegionCallback(Unigine.CallbackBase1{Plugins::IG::Region})">
			<summary>
			Sets a callback function to be fired when a new weather region is created.
			</summary> 
			<param name="func"> Callback pointer. The callback function must have the following signature:(Unigine::Plugins::IG::Region *region) </param> 
			<returns>ID of the last added Create Region callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.removeOnCreateRegionCallback(void)">
			<summary>
			Removes the specified callback from the list of Create Region callbacks.
			</summary> 
			<param name="id"> Create Region callback ID obtained when adding it. </param> 
			<returns>true if the Create Region callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.clearOnCreateRegionCallbacks">
			<summary>
			Clears all added Create Region callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.addOnRemoveRegionCallback(Unigine.CallbackBase1{Plugins::IG::Region})">
			<summary>
			Sets a callback function to be fired when a weather region is removed.
			</summary> 
			<param name="func"> Callback pointer. The callback function must have the following signature:(Unigine::Plugins::IG::Region *region) </param> 
			<returns>ID of the last added Remove Region callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.removeOnRemoveRegionCallback(void)">
			<summary>
			Removes the specified callback from the list of Remove Region callbacks.
			</summary> 
			<param name="id"> Remove Region callback ID obtained when adding it. </param> 
			<returns>true if the Remove Region callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.clearOnRemoveRegionCallbacks">
			<summary>
			Clears all added Remove Region callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.addOnLightningStrikeCallback(Unigine.CallbackBase2{Unigine.Math.Vec3,int})">
			<summary>
			Sets a callback function to be fired when a lightning strikes.
			</summary> 
			<param name="func"> Callback pointer. The callback function must have the following signature:(Unigine::Math::Vec3 geo_pos, int type) </param> 
			<returns>ID of the last added Lightning Strike callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.removeOnLightningStrikeCallback(void)">
			<summary>
			Removes the specified callback from the list of Lightning Strike callbacks.
			</summary> 
			<param name="id"> Lightning Strike callback ID obtained when adding it. </param> 
			<returns>true if the Lightning Strike callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.clearOnLightningStrikeCallbacks">
			<summary>
			Clears all added Lightning Strike callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.addOnMeteoChangedCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback on changing global meteo conditions.
			</summary> 
			<param name="callback"> Callback pointer. </param> 
			<returns>Callback subscriber ID. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.removeOnMeteoChangedCallback(void)">
			<summary>
			Removes a callback on changing global meteo conditions for the specified subscriber.
			</summary> 
			<param name="subscriber"> Callback subscriber ID specified when adding it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.clearOnMeteoChangedCallbacks">
			<summary>
			Clears all added callbacks on changing global meteo conditions.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getGlobalRegion const">
			<summary>
			Returns the main global weather region.
			</summary>  
			<returns>Main global weather region.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getCameraEffects const">
			<summary>
			Returns the camera effects instance used to create dynamic effects for precipitation rendering when changing camera position and speed.
			</summary>  
			<returns>Returns the camera effects instance.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.findWeatherLayers(Unigine.Vec3,Unigine.Vector{MeteoPositionParam,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all weather layers (base, clouds, precipitation) of all weather regions containing the specified position (and thus affecting it) along with their corresponding impact factors (as MeteoPositionParam structure).
			</summary> 
			<param name="geo_pos"> Geocoordinates of the point for which all affecting layers of all regions are to be found. </param>
			<param name="vector"> The list of all layers in the weather region containing the specified position (and thus affecting it) along with their corresponding impact factors (as MeteoPositionParam structure). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.lightningStrike(Unigine.Math.dvec3,int)">
			<summary>
			Generates a lightning strike effect at the specified location.
			</summary> 
			<param name="geo_pos"> Geocoordinates of the lightning strike location. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getNumRegions const">
			<summary>
			Returns the total number of weather regions.
			</summary>  
			<returns>Total number of weather regions.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getRegionByIndex(int)">
			<summary>
			Returns a weather region by its index.
			</summary> 
			<param name="index"> Weather region index in the range from 0 to the total number of regions. </param> 
			<returns>Weather region with the specified index if it exists, otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Meteo.getCloudBottom const">
			<summary>
			Returns the height of the bottom (lower bound) of the lowest cloud layer among all weather regions.
			</summary>  
			<returns>Height of the bottom (lower bound) of the lowest cloud layer among all weather regions.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.getSpeed const">
			<summary>
			Returns the current camera speed.
			</summary>  
			<returns>Current camera speed as a three-component vector, each component representing the speed along the corresponding axis, in meters per second.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.getPosition const">
			<summary>
			Returns the current camera position in the world space.
			</summary>  
			<returns>Current camera position in the world space.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.getCurrentWind const">
			<summary>
			Returns the current wind speed in all directions.
			</summary>  
			<returns>Current wind speed in all directions.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.getCurrentVisibility const">
			<summary>
			Returns the current visibility.
			</summary>  
			<returns>Current visibility, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.isRenderAnimationEnabled const">
			<summary>
			Returns a value indicating if wind animation is enabled (vegetation and water are affected by the wind).
			</summary>  
			<returns>true if wind animation is enabled (vegetation and water are affected by the wind); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.isRenderCloudsInterleaveOptimization const">
			<summary>
			Returns a value indicating if interleaved rendering optimization for clouds is enabled.
			</summary>  
			<returns>true if interleaved rendering optimization for clouds is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.setCloudsOptimizationDistance(double,double)">
			<summary>
			Sets the distances from the camera at which the two levels of interleaved rendering optimization for clouds should be used.
			</summary> 
			<param name="interleave_1"> Distance from the camera (in meters) at which 2x2 interleaved rendering optimization is to be used for clouds. </param>
			<param name="interleave_2"> Distance from the camera (in meters) at which 4x4 interleaved rendering optimization is to be used for clouds. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.MeteoCameraEffects.isRenderCloudsTransparentAutoOrder const">
			<summary>
			Returns a value indicating if automatic adjustment of transparency rendering order for clouds is enabled.
			</summary>  
			<returns>true if automatic adjustment of transparency rendering order for clouds is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setEnabled(bool)">
			<summary>
			Enables or disables the weather region.
			</summary> 
			<param name="v"> true to enable the weather region; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.isEnabled const">
			<summary>
			Returns a value indicating if the weather region is currently enabled.
			</summary>  
			<returns>true if the weather region is currently enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getID const">
			<summary>
			Returns the ID of the region.
			</summary>  
			<returns>Region ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.createLayer(longlong,WeatherLayerType)">
			<summary>
			Creates a new weather layer for the region. In case a layer with the specified ID exists and has a different type, it will be replaced with the new one.
			</summary> 
			<param name="layer_id"> ID of the layer to be created. </param>
			<param name="type"> Type of the layer to be created, one of the following values:Plugins::IG::WeatherLayerType::LAYER_BASE - base layer.Plugins::IG::WeatherLayerType::LAYER_CLOUD - cloud layer.Plugins::IG::WeatherLayerType::LAYER_PRECIPITATION - precipitation layer. </param> 
			<returns>New weather layer if it is created successfully; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getLayer(longlong)">
			<summary>
			Returns a weather layer by its ID.
			</summary> 
			<param name="layer_id"> Weather layer ID. </param> 
			<returns>Weather layer with the specified ID if it exists, otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.removeLayer(longlong)">
			<summary>
			Removes a weather layer with the specified ID.
			</summary> 
			<param name="layer_id"> Weather layer ID. </param> 
			<returns>true if the weather layer is created successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getMainLayer const">
			<summary>
			Returns the main weather layer of the region. It is a base layer, that is used to define weather parameters, such as visibility range, temperature, humidity, etc. The main layer always exists in the region and cannot be deleted.
			</summary>  
			<returns>Main weather layer of the region.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getLayers(Unigine.Vector{WeatherLayer*,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all layers (base, clouds, precipitation) contained in the weather region.
			</summary> 
			<param name="vec"> The list of all layers in the weather region. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.findWeatherLayers(Unigine.Math.Vec3,Unigine.Vector{MeteoPositionParam,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all layers (base, clouds, precipitation) of the weather region containing the specified position (and thus affecting it) along with their corresponding impact factors (as MeteoPositionParam structure).
			</summary> 
			<param name="geo_pos"> Geocoordinates of the point for which all affecting layers are to be found. </param>
			<param name="vector"> The list of all layers in the weather region containing the specified position (and thus affecting it) along with their corresponding impact factors (as MeteoPositionParam structure). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setShapeAsRectangle(Unigine.Math.dvec2,double)">
			<summary>
			Sets the shape of a rectangle weather region using the specified width, height, and corner radius.
			</summary> 
			<param name="size"> Vector combining width and height of the rectangle, in units (W, H). </param>
			<param name="corner_radius"> Corner radius of the rectangle, in units. This parameter enables you to create a rounded rectangle.This value cannot be greater than half size. </param> 
			<returns>true if the shape of the region is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setShapeAsPolygon(Unigine.Vector{Unigine.Math.vec2,int,Unigine.VectorAllocator},Unigine.Vector{unsignedshort,int,Unigine.VectorAllocator})">
			<summary>
			Sets the shape of a polygon weather region using the specified sets of vertex coordinates and their indices.
			</summary> 
			<param name="points"> Array of polygon vertex coordinates. </param>
			<param name="indices"> Array of vertex indices defining a polygon. </param> 
			<returns>true if the shape of the region is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setShapeAsPolygon(Unigine.Vector{Unigine.Math.dvec2,int,Unigine.VectorAllocator})">
			<summary>
			Sets the shape of a polygon weather region as a set of geocoordinates of points.
			</summary> 
			<param name="geo_points"> Array of geocoordinates of points forming a polygon. </param> 
			<returns>true if the shape of the region is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getRegionType const">
			<summary>
			Sets the type of the weather region's shape.
			</summary>  
			<returns>Weather region type, one of the following:GLOBAL - global (atmospheric layers, which have no distinct horizontal boundaries)RECTANGLE - local (regional weather with atmospheric effects restricted to a certain area defined by a rectangle)POLYGON - local (regional weather with atmospheric effects restricted to a certain area defined by a polygon)</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getShapeSize const">
			<summary>
			Returns the size of the rectangle that defines or encloses the shape of the weather region as a two-component vector.
			</summary>  
			<returns>Two-component vector (W, L) containing width and length of the rectangle (in meters) that defines or encloses the shape of the weather region depending on its type:Global - (inf, inf)Rectangle - (rectangle_width, rectangle_length)Polygon - (boundbox_width, boundbox_length)</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getShapeRectangleRadius const">
			<summary>
			Returns the current corner radius of the rectangle. This parameter defines the shape of a rounded rectangle.
			</summary>  
			<returns>Current corner radius of the rectangle, in units.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setTransitionSize(double)">
			<summary>
			Sets the width of the transition area around the borders of the weather region. The effects of the region fade out gradually within this area.
			</summary> 
			<param name="width"> New width of the transition area around the borders of the weather region to be set, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getTransitionSize const">
			<summary>
			Returns the current width of the transition area around the borders of the weather region. The effects of the region fade out gradually within this area.
			</summary>  
			<returns>Current width of the transition area around the borders of the weather region, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setWorldPosition(Unigine.Math.dvec2)">
			<summary>
			Sets new world coordinates for the weather region's position.
			</summary> 
			<param name="world_pos"> New Cartesian coordinates to be set for the weather region's position (X, Y). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getWorldPosition const">
			<summary>
			Returns the current world coordinates of the weather region's position.
			</summary>  
			<returns>Current Cartesian coordinates of the weather region's position (X, Y).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setGeoPosition(Unigine.Math.dvec2)">
			<summary>
			Sets new geocoordinates for the weather region's position.
			</summary> 
			<param name="geo_pos"> Geocoordinates of the weather region's position (Lat, Lon). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.setRotation(float)">
			<summary>
			Rotates the weather region around the Z axis by the specified angle.
			</summary> 
			<param name="angle_deg"> Rotation angle to be set, in degrees within the [-360; 360] range. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getRotation const">
			<summary>
			Returns the current angle of rotation of the weather region around the Z axis.
			</summary>  
			<returns>Current rotation angle, in degrees within the [-360; 360] range.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getImpact(Unigine.Math.dvec2) const">
			<summary>
			Returns a value indicating the degree of impact of the region at the specified point depending on whether it is completely inside, outside, or somewhere within the transition area.
			</summary> 
			<param name="world_pos"> World coordinates (Cartesian) of the point to be ckecked. </param> 
			<returns>Value indicating the degree of impact of the region at the specified point:0 - completely outside the region (and transition area)1 - inside the region(0 &lt; x &lt; 1) - within the transition area</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.addOnChangedCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback on changing region parameters.
			</summary> 
			<param name="callback"> Callback pointer. </param> 
			<returns>Callback subscriber ID. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.removeOnChangedCallback(void)">
			<summary>
			Removes a callback on changing region parameters for the specified subscriber.
			</summary> 
			<param name="id"> Callback subscriber ID specified when adding it. </param> 
			<returns>true if the callback for the specified subscriber is removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Region.getNumLayers const">
			<summary>
			Returns the total number of layers of the region.
			</summary>  
			<returns>Total number of layers.</returns>
		</member>
		<member name="F:Unigine.Plugins.IG.Region.REGION_TYPE_POLYGON">
			<summary>
			Local polygon region type: regional weather with atmospheric effects restricted to a certain area defined by a polygon.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Region.REGION_TYPE_RECTANGLE">
			<summary>
			Local rectangle region type: regional weather with atmospheric effects restricted to a certain area defined by a rectangle.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Region.REGION_TYPE_GLOBAL">
			<summary>
			Global region type (atmospheric layers, which have no distinct horizontal boundaries).
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setTimezone(float)">
			<summary>
			Sets the time zone to be used for the simulation in the UTC format. The image generator is configured to use Greenwhich time zone by default.
			</summary> 
			<param name="timezone"> UTC time zone value. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getTimezone const">
			<summary>
			Returns the time zone currently used for the simulation in the UTC format.
			</summary>  
			<returns>UTC time zone value.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setDateTime(longlong,bool)">
			<summary>
			Sets the time of the simulation.
			</summary> 
			<param name="time_posix"> Time of the simulation to be set, number of seconds since January 1, 1970 </param>
			<param name="UTC"> true to set this time as the Coordinated Universal Time (UTC +0), false — to set this time as the current local time. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setDateTime(int,int,int,int,int,int,bool)">
			<summary>
			Sets the current date and time.
			</summary> 
			<param name="sec"> An integer between 0 and 59 to be set as seconds value. </param>
			<param name="min"> An integer between 0 and 59 to be set as minutes value. </param>
			<param name="hour"> An integer between 0 (midnight) and 23 (11 p.m.) local time to be set as hours value. </param>
			<param name="day"> An integer between 1 and 31 to be set as day value. </param>
			<param name="month"> An integer between 1 and 12 to be set as month value. </param>
			<param name="year"> An integer to be set as year value. </param>
			<param name="UTC"> true to set this time as the Coordinated Universal Time (UTC +0), false — to set this time as the current local time. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getDateTime(bool) const">
			<summary>
			Returns the current time of the simulation.
			</summary> 
			<param name="UTC"> true to return this time as the Coordinated Universal Time (UTC +0), false — to return this time as the current local time. </param> 
			<returns>Current time of the simulation, number of seconds since January 1, 1970</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setContinuousTime(bool)">
			<summary>
			Enables or disables continuous time of day. When enabled the image generator will continuously update the time of day. Otherwise the time and date once set will remain unchanged.
			</summary> 
			<param name="enable"> true to enable continuous time of day; false - to use static time. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.isContinuousTime const">
			<summary>
			Returns a value indicating if the time of day is continuously updated by the image generator ore remains static.
			</summary>  
			<returns>true if the time of day is continuously updated by the image generator; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setStarfieldIntensity(float)">
			<summary>
			Sets the intensity of the star field.
			</summary> 
			<param name="intensity"> Star field intensity value to be set, within the [0.0f, 1.0f] range. The higher the value, the brighter the stars will be. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getStarfieldIntensity const">
			<summary>
			Returns the current star field intensity value.
			</summary>  
			<returns>Current star field intensity value, within the [0.0f, 1.0f] range. The higher the value, the brighter the stars will be.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setSunEnabled(bool)">
			<summary>
			Sets a value indicating if the Sun is to be rendered or not.
			</summary> 
			<param name="enable"> true to enable rendering of the Sun; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.isSunEnabled const">
			<summary>
			Returns a value indicating if the Sun is rendered or not.
			</summary>  
			<returns>true if the Sun is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setSunIntensity(float)">
			<summary>
			Sets the intensity of the sun.
			</summary> 
			<param name="intensity"> Sun intensity value within the [0.0f, 1.0f] range. The higher the value, the brighter the sun is. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getSunIntensity const">
			<summary>
			Returns the current sun intensity value.
			</summary>  
			<returns>Sun intensity value within the [0.0f, 1.0f] range. The higher the value, the brighter the sun is.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getSunNode const">
			<summary>
			Returns a pointer to the node currently used to represent the Sun. Nodes for the Sun and the Moon can be assigned via the UnigineEditor.
			</summary>  
			<returns>Pointer to the node currently used to represent the Sun.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setMoonEnabled(bool)">
			<summary>
			Sets a value indicating if the Moon is to be rendered or not.
			</summary> 
			<param name="enable"> true to enable rendering of the Moon; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.isMoonEnabled const">
			<summary>
			Returns a value indicating if the Moon is rendered or not.
			</summary>  
			<returns>true if the Moon is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setMoonIntensity(float)">
			<summary>
			Sets the intensity of the moon.
			</summary> 
			<param name="intensity"> Moon intensity value within the [0.0f, 1.0f] range. The higher the value, the brighter the moon is. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getMoonIntensity const">
			<summary>
			Returns the current moon intensity value.
			</summary>  
			<returns>Moon intensity value within the [0.0f, 1.0f] range. The higher the value, the brighter the moon is.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.getMoonNode const">
			<summary>
			Returns a pointer to the node currently used to represent the Moon. Nodes for the Sun and the Moon can be assigned via the UnigineEditor.
			</summary>  
			<returns>Pointer to the node currently used to represent the Moon.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.setStarfieldEnabled(bool)">
			<summary>
			Sets a value indicating if the star field is to be rendered or not.
			</summary> 
			<param name="enable"> true to enable star field rendering; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.isStarfieldEnabled const">
			<summary>
			Returns a value indicating if the star field is rendered or not.
			</summary>  
			<returns>true if the star field is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.forceRefresh">
			<summary>
			Refreshes the sky map according to its current settings. This method should be called after setting sky map's parameters to apply them. Sky map change callbacks are called on refresh.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.addOnTimeChangedCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be called when the sky map state changes. This function can be used to define specific actions to be performed when the sky map state changes. The signature of the callback function must be as follows:					You can set a callback function as follows:					Example: Setting a time changed callback on changing sky map state.
			</summary> 
			<param name="func"> Callback function. </param> 
			<returns>ID of the last added time changed callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.removeOnTimeChangedCallback(void)">
			<summary>
			Removes the specified callback from the list of time changed callbacks.
			</summary> 
			<param name="id"> Time changed callback ID obtained when adding it. </param> 
			<returns>True if the time changed callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SkyMap.clearOnTimeChangedCallbacks">
			<summary>
			Clears all added time changed callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.createSymbol(SymbolsController::SYMBOL_TYPE,SymbolsController.SYMBOL_TYPE,int)">
			<summary>
			Creates a new symbol.					Symbol must be immediately added to SymbolsPlane.
			</summary> 
			<param name="type"> Type of the symbol:POLYLINETEXTCIRCLE </param>
			<param name="symbol_id"> ID of the symbol. </param> 
			<returns>Pointer to the new created symbol interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.cloneSymbol(int,int)">
			<summary>
			Clones a symbol with the specified ID.
			</summary> 
			<param name="symbol_id"> ID of the symbol to be cloned. </param>
			<param name="new_symbol_id"> ID of the new symbol. </param> 
			<returns>Pointer to the new cloned symbol interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.createPlane(int,View)">
			<summary>
			Creates a new symbols surface (a virtual plane on which symbols are drawn).A new surface is placed in 3D space coincident with the near clipping plane of the specified view.
			</summary> 
			<param name="plane_id"> ID of the symbol. </param>
			<param name="view"> View relative to which a new symbols surface is to be placed. </param> 
			<returns>Pointer to the new created symbols surface interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.createPlane(int,Entity)">
			<summary>
			Creates a new symbols surface (a virtual plane on which symbols are drawn). A new surface is placed in 3D space relative to the specified entity.
			</summary> 
			<param name="plane_id"> ID of the symbol. </param>
			<param name="entity"> Entity relative to which a new symbols surface is to be placed. </param> 
			<returns>Pointer to the new created symbols surface interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.getSymbol(int) const">
			<summary>
			Returns the interface of the specified symbol.
			</summary> 
			<param name="symbol_id"> ID of the symbol. </param> 
			<returns>Pointer to the new created symbol interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.getPlane(int) const">
			<summary>
			Returns the interface of the specified symbols surface (a virtual plane on which symbols are drawn).
			</summary> 
			<param name="plane_id"> ID of the symbols surface. </param> 
			<returns>Pointer to the new created symbols surface interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.removeSymbol(int)">
			<summary>
			Removes the symbol with the specified ID.
			</summary> 
			<param name="symbol_id"> ID of the symbol to be removed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.removePlane(int)">
			<summary>
			Removes the symbols surface (plane) with the specified ID, and all symbols related to it.
			</summary> 
			<param name="plane_id"> ID of the symbols surface (plane) to be removed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsController.clear">
			<summary>
			Removes all symbols and planes.
			</summary>  
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolsController.SYMBOL_TYPE_CIRCLE">
			<summary>
			Circle.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolsController.SYMBOL_TYPE_TEXT">
			<summary>
			Text.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolsController.SYMBOL_TYPE_POLYLINE">
			<summary>
			Polyline.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getID const">
			<summary>
			Returns the plane identifier.
			</summary>  
			<returns>Identifier of the plane.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.addSymbol(Symbol)">
			<summary>
			Adds the specified symbol to the plane.
			</summary> 
			<param name="symbol"> Symbol to be added. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.setBillboard(bool,bool)">
			<summary>
			Toggles on and off the plane orientation to the viewer and fixing the plane size regardless of the distance to it.
			</summary> 
			<param name="enable"> true to make the plane a billboard (always oriented to the viewer), false to disable orientation to the viewer. </param>
			<param name="fixed_scale"> true to make the billboard size unchanged regardless of its distance from the viewer, false — to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.isBillboard const">
			<summary>
			Checks if a node is a billboard (always oriented to the viewer).
			</summary>  
			<returns>true if a node is a billboard, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.isFixedBillboardScale const">
			<summary>
			Checks if the billboard size is fixed relative to the viewer regardless of the distance.
			</summary>  
			<returns>true if the billboard scale is fixed, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.setPosition(Unigine.Math.vec3)">
			<summary>
			Sets the plane position relative to the entity, if the plane has a parent entity.
			</summary> 
			<param name="value"> Position in the coordinate system of a parent entity. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.setRotation(Unigine.Math.quat)">
			<summary>
			Sets the plane rotation relative to the parent entity. The method is not applicable to billboards.
			</summary> 
			<param name="rotate"> Rotation quaternion for the plane </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.setPhysicalSize(float,float)">
			<summary>
			Sets the plane size for planes that have a parent entity.
			</summary> 
			<param name="width"> Width of the symbols plane, in units </param>
			<param name="height"> Height of the symbols plane, in units </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getPhysicalSize const">
			<summary>
			Returns the physical size of the symbols plane, in units.
			</summary>  
			<returns>Vector containing physical size of the symbols plane (width, height), in units.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.setUVSize(float,float,float,float)">
			<summary>
			Sets the symbol surface 2D coordinate system.
			</summary> 
			<param name="minU"> Minimum U value of the symbol surface. </param>
			<param name="minV"> Minimum V value of the symbol surface. </param>
			<param name="maxU"> Maximum U value of the symbol surface. </param>
			<param name="maxV"> Maximum V value of the symbol surface. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getUVSize const">
			<summary>
			Returns the current symbol surface 2D coordinate system.
			</summary>  
			<returns>Vector containing the following values: (Minimum U, Minimum V, Maximum U, Maximum V).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.setScreenSize(float,float,float,float)">
			<summary>
			Sets the screen plane resolution and offset in pixels.
			</summary> 
			<param name="width"> Width of the screen plane, in pixels. </param>
			<param name="height"> Height of the screen plane, in pixels. </param>
			<param name="offsetX"> Horizontal offset of the screen plane. </param>
			<param name="offsetY"> Vertical offset of the screen plane. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getScreenSize const">
			<summary>
			Returns the screen plane resolution and offset in pixels.
			</summary>  
			<returns>Vector containing screen dimensions of the symbols plane (screen_width, screen_height, offset_z, offset_y), in pixels.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getType const">
			<summary>
			Returns the type of the symbols plane.
			</summary>  
			<returns>Symbols plane type.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getRootSymbols const">
			<summary>
			Returns all root symbols attached to the plane.
			</summary>  
			<returns>Vector containing all root symbols attached to the plane.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getSymbols const">
			<summary>
			Returns all symbols attached to the plane (roots and all their children).
			</summary>  
			<returns>Vector containing all symbols attached to the plane.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getPosition const">
			<summary>
			Returns the current position of the symbols plane.
			</summary>  
			<returns>Vector containing coordinates of the symbols plane position.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolsPlane.getRotation const">
			<summary>
			Returns the current rotation of the symbols plane.
			</summary>  
			<returns>Quaternion representing rotation of the symbols plane position.</returns>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolsPlane.SYMBOLS_PLANE_TYPE_VIEW">
			<summary>
			The symbols plane is coincident with the near clipping plane of a particular view.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolsPlane.SYMBOLS_PLANE_TYPE_ENTITY">
			<summary>
			The symbols plane is placed relative to a particular entity.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.getID const">
			<summary>
			Returns the ID of the symbol.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setParent(Symbol)">
			<summary>
			Sets a new parent for the symbol.
			</summary> 
			<param name="symbol"> Symbol to be set as parent for the symbol. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.getParent const">
			<summary>
			Returns the parent of the symbol.
			</summary>  
			<returns>Parent of the symbol.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setVisible(bool)">
			<summary>
			Toggles visibility of the symbol on and off.
			</summary> 
			<param name="value"> 1 to make the symbol visible, otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.isVisible const">
			<summary>
			Checks if the symbol is visible.
			</summary>  
			<returns>1 if the symbol is visible, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setOrder(int)">
			<summary>
			Sets rendering order (Z-order) for the symbol. The higher the value, the later the symbol is rendered atop other elements.
			</summary> 
			<param name="value"> Order of the symbol. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setOffset(float,float)">
			<summary>
			Sets the symbol's position relevant to the parent plane or symbol.
			</summary> 
			<param name="x"> Horizontal offset from the parent. </param>
			<param name="y"> Vertical offset from the parent. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.getOffset const">
			<summary>
			Returns the symbol's position relevant to the parent plane or symbol.
			</summary>  
			<returns>Offset from the parent.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setScale(float,float)">
			<summary>
			Sets the symbol's scale.
			</summary> 
			<param name="scale_x"> The symbol's scale along the X axis. </param>
			<param name="scale_y"> The symbol's scale along the Y axis. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.getScale const">
			<summary>
			Returns the symbol's scale.
			</summary>  
			<returns>Symbol's scale.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setRotation(float)">
			<summary>
			Sets the rotation angle for the symbol.
			</summary> 
			<param name="angle_anticlockwise"> Angle of rotation in counter-clockwise direction. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.getRotation const">
			<summary>
			Returns the rotation angle for the symbol.
			</summary>  
			<returns>Angle of rotation in counter-clockwise direction.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setFlashProgram(Unigine.Vector{float,int,Unigine.VectorAllocator})">
			<summary>
			Sets the flash program for the symbol. The program uses a sequence of indicated time periods in seconds to consecutively enable and disable the symbol starting from the Enabled state. For example, a sequence 0.3;0.05;0.1 means that a symbol is enabled for 0.3 seconds, then disabled for 0.05 seconds, enabled for 0.1 seconds, and then continues to be enabled for 0.3 seconds, etc. To disable the program, the array should be empty.
			</summary> 
			<param name="data"> Flash program for the symbol. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.resetFlashProgram">
			<summary>
			Starts the flash program anew.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setColor(Unigine.vec4)">
			<summary>
			Sets the color of the symbol.
			</summary> 
			<param name="color"> Color of the symbol in the RGBA range. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setColorInherit(bool)">
			<summary>
			Toggles inheritance of the color from the parent symbol on and off.
			</summary> 
			<param name="value"> 1 to inherit the color from the parent symbol, otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.setLineWidth(float)">
			<summary>
			Sets the width of lines the symbol is drawn of.
			</summary> 
			<param name="value"> Width of the line. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Symbol.getType const">
			<summary>
			Returns the type of the symbol.
			</summary>  
			<returns>Symbol type.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolPolyline.addPoint(float,float)">
			<summary>
			Sets the point in the coordinates of the plane.
			</summary> 
			<param name="x"> Horizontal offset from the plane's origin. </param>
			<param name="y"> Vertical offset from the plane's origin. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolPolyline.setFill(bool)">
			<summary>
			Toggles filling of the figure created by lines on and off.
			</summary> 
			<param name="value"> 1 to make the figure filled, otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolPolyline.setClosed(bool)">
			<summary>
			Enables and disables connection of the last point with the first point that makes the line closed.
			</summary> 
			<param name="value"> 1 to make the figure looped, otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolPolyline.setVertexOrderStrip(bool)">
			<summary>
			Toggles on and off creation of a triangle strip — a connected series of filled triangles formed from an ordered set of vertices. The first triangle is formed from the first three vertices. Each successive triangle is formed from the last two vertices and the next vertex in the set.
			</summary> 
			<param name="value"> 1 to enable a triangle strip, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolCircle.setFill(bool)">
			<summary>
			Toggles filling of the circle symbol on and off.
			</summary> 
			<param name="value"> 1 to make the circle symbol filled, otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolCircle.setCenter(float,float)">
			<summary>
			Sets the circle symbol center relative to the plane in the plane's UV coordinates.
			</summary> 
			<param name="x"> Horizontal offset from the plane's reference point in UV coordinates. </param>
			<param name="y"> Vertical offset from the plane's reference point in UV coordinates. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolCircle.setRadius(float)">
			<summary>
			Sets the circle symbol radius in the plane's UV coordinates.
			</summary> 
			<param name="value"> Radius of the circle in UV coordinates. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolCircle.setInnerRadius(float)">
			<summary>
			Sets the inner radius of the circle symbol in the plane's UV coordinates.
			</summary> 
			<param name="value"> Inner radius of the circle in UV coordinates. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolCircle.setSector(float,float)">
			<summary>
			Creates a circle sector (an arc) by setting two angles that define its limits.
			</summary> 
			<param name="start_angle"> Starting angle of the sector. </param>
			<param name="end_angle"> Ending angle of the sector. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolText.setText(char)">
			<summary>
			Sets the text to be displayed.
			</summary> 
			<param name="text"> Text to be displayed. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolText.setFont(int)">
			<summary>
			Sets the font using its identifier stored in the IG configuration file (ig_config.xml).
			</summary> 
			<param name="font_id"> Font identifier. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolText.setFontSize(float)">
			<summary>
			Sets the font size.
			</summary> 
			<param name="font_size"> Font size. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolText.setAlign(SymbolText.AlignHorizontal,SymbolText.AlignVertical)">
			<summary>
			Sets horizontal and vertical alignment for the text to be displayed.
			</summary> 
			<param name="align_horizontal"> Horizontal alignment for the text. </param>
			<param name="align_vertical"> Vertical alignment for the text. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.SymbolText.setOrientation(SymbolText.Orientation)">
			<summary>
			Sets orientation for the text to be displayed (horizontal: left-to-right / right-to-left or vertical: bottom-to-top / top-to-bottom).
			</summary> 
			<param name="orientation"> Text orientation to be set. </param> 
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.BOTTOM_TO_TOP">
			<summary>
			Vertical text orientation from bottom to top.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.RIGHT_TO_LEFT">
			<summary>
			Horizontal text orientation from right to left.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.TOP_TO_BOTTOM">
			<summary>
			Vertical text orientation from top to bottom.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.LEFT_TO_RIGHT">
			<summary>
			Horizontal text orientation from left to right.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.BOTTOM">
			<summary>
			Align text to bottom.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.V_CENTER">
			<summary>
			Align text to the center.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.TOP">
			<summary>
			Align text to the top.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.RIGHT">
			<summary>
			Align text to the right.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.H_CENTER">
			<summary>
			Align text to the center.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.SymbolText.LEFT">
			<summary>
			Align text to the left.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.setParentEntity(Entity)">
			<summary>
			Attaches the View(Group) as a child to the specified parent entity.
			</summary> 
			<param name="entity"> Parent entity. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getParentEntityID const">
			<summary>
			Returns the ID of the parent entity for the View(Group).
			</summary>  
			<returns>Parent entity ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.setGeoPosition(Unigine.Math.dvec3)">
			<summary>
			Sets the View(Group) position, in geo-coordinates (lat, lon, alt).
			</summary> 
			<param name="position"> View(Group) position to set, in geo-coordinates (lat, lon, alt). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getGeoPosition const">
			<summary>
			Returns the current View(Group) position, in geo-coordinates (lat, lon, alt).
			</summary>  
			<returns>View(Group) position, in geo-coordinates (lat, lon, alt).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.setPosition(Unigine.Math.dvec3)">
			<summary>
			Sets the View(Group) position.
			</summary> 
			<param name="position"> View(Group) position coordinates to set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getPosition const">
			<summary>
			Returns the current View(Group) position.
			</summary>  
			<returns>View(Group) position coordinates.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.setWorldPosition(Unigine.Math.dvec3)">
			<summary>
			Sets the View(Group) position, in world coordinates.
			</summary> 
			<param name="pos"> View(Group) position to set, in world coordinates. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getWorldPosition const">
			<summary>
			Returns the current View(Group) position, in world coordinates.
			</summary>  
			<returns>View(Group) position, in world coordinates.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.setRotationEuler(Unigine.Math.vec3)">
			<summary>
			Sets the View(Group) rotation.
			</summary> 
			<param name="euler"> View(Group) rotation euler angles to set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getRotationEuler const">
			<summary>
			Returns the current View(Group) rotation.
			</summary>  
			<returns>View(Group) rotation euler angles.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.setWorldRotationEuler(Unigine.Math.vec3)">
			<summary>
			Sets the View(Group) rotation, in world coordinates.
			</summary> 
			<param name="euler"> View(Group) rotation euler angles to set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getWorldRotationEuler const">
			<summary>
			Returns the current View(Group) rotation, in world coordinates.
			</summary>  
			<returns>View(Group) rotation euler angles.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getNode const">
			<summary>
			Returns the node assigned to the View(Group).
			</summary>  
			<returns>Node assigned to the View(Group).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getPlayer const">
			<summary>
			Returns the PlayerDummy assigned to the View(Group).
			</summary>  
			<returns>PlayerDummy assigned to the View(Group).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.copyTransformFromPlayer(Unigine.Ptr{Player})">
			<summary>
			Copies the modelview matrix and sets it for the View(Group).
			</summary> 
			<param name="player"> Source player to copy the transform from. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getComponent(int)">
			<summary>
			Returns the interface of the component by its ID.
			</summary> 
			<param name="id"> ID of the component. </param> 
			<returns>Component interface if it exists, or nullptr otherwise.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewBase.getType const">
			<summary>
			Returns the type identifier indicating whether it is a View or a ViewGroup.
			</summary>  
			<returns>View type identifier.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.ViewGroup.getID const">
			<summary>
			Returns the ID of the view group.
			</summary>  
			<returns>View group ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.getID">
			<summary>
			Returns the ID of the view.
			</summary>  
			<returns>View ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setParentGroup(ViewGroup)">
			<summary>
			Attaches the view as a child to the specified parent view group.
			</summary> 
			<param name="view_group"> Parent view group. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.getParentGroupID">
			<summary>
			Returns the ID of the parent group for the view.
			</summary>  
			<returns>Parent view group ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setDefinition(float,float,float,float,float,float)">
			<summary>
			Sets the viewing volume (projection) parameters for the view using the specified values.
			</summary> 
			<param name="near"> Distance to the near clipping plane, in units. </param>
			<param name="far"> Distance to the far clipping plane, in units. </param>
			<param name="left_deg"> Left half-angle, in degrees. </param>
			<param name="right_deg"> Right half-angle, in degrees. </param>
			<param name="top_deg"> Top half-angle, in degrees. </param>
			<param name="bottom_deg"> Bottom half-angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.setDefinition(float,float,float)">
			<summary>
			Sets the viewing volume (projection) parameters for the view using the specified values.
			</summary> 
			<param name="near"> Distance to the near clipping plane, in units. </param>
			<param name="far"> Distance to the far clipping plane, in units. </param>
			<param name="fov"> Field of view angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.copyDefinitionFromPlayer(Unigine.Ptr{Player})">
			<summary>
			Sets the viewing volume (projection) parameters for the view by copying them from the specified Player.The viewport mask should be copied separately.
			</summary> 
			<param name="player"> Source Player to copy viewing volume parameters (projection) from. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.getNear">
			<summary>
			Returns the current distance to the near clipping plane.
			</summary>  
			<returns>Distance to the near clipping plane, in units.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.getFar">
			<summary>
			Returns the current distance to the far clipping plane.
			</summary>  
			<returns>Distance to the far clipping plane, in units.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.getLeftDeg">
			<summary>
			Returns the current left half-angle for the view frustum.
			</summary>  
			<returns>Left half-angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.getRightDeg">
			<summary>
			Returns the current right half-angle for the view frustum.
			</summary>  
			<returns>Right half-angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.getTopDeg">
			<summary>
			Returns the current top half-angle for the view frustum.
			</summary>  
			<returns>Top half-angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.getBottomDeg">
			<summary>
			Returns the current bottom half-angle for the view frustum.
			</summary>  
			<returns>Bottom half-angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setReplicationMode(View::REPLICATION)">
			<summary>
			Sets the replication mode for the view.
			</summary> 
			<param name="mode"> Replication mode to be set. One of the REPLICATION_* values. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.getReplicationMode const">
			<summary>
			Returns the current replication mode for the view.
			</summary>  
			<returns>Replication mode. One of the REPLICATION_* values.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setMirrorMode(View::MIRROR)">
			<summary>
			Sets the mirror mode for the view.
			</summary> 
			<param name="mode"> Mirror mode to be set. One of the MIRROR_* values. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.getMirrorMode const">
			<summary>
			Returns the current mirror mode for the view.
			</summary>  
			<returns>Mirror mode. One of the MIRROR_* values.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setProjection(View::PROJECTION)">
			<summary>
			Sets the projection type for the view.
			</summary> 
			<param name="type"> Projection type to be set. One of the PROJECTION_* values. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.getProjection const">
			<summary>
			Returns the current projection type for the view.
			</summary>  
			<returns>Projection type. One of the PROJECTION_* values.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setViewType(int)">
			<summary>
			Sets the type of the view. The value of this parameter specifies an IG-defined type for the view.
			</summary> 
			<param name="type"> View type to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.getViewType const">
			<summary>
			Returns the current view type. IG-defined type for the view.
			</summary>  
			<returns>View type.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setEnabled(bool)">
			<summary>
			true to enable the view; false - to disable it.
			</summary> 
			<param name="value"> true if the view is enabled; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.isEnabled const">
			<summary>
			Returns a value indicating if the view is enabled.
			</summary>  
			<returns>true if the view is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.View.setSynckerProjectionEnable(bool)">
			<summary>
			Sets a value indicating if the view is affected by the Syncker's projections.
			</summary> 
			<param name="value"> true to make the view affected by the Syncker's projections; false - to make the view ignore them. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.View.isSynckerProjectionEnable const">
			<summary>
			Returns a value indicating if the view is affected by the Syncker's projections.
			</summary>  
			<returns>true if the view is affected by the Syncker's projections; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.Plugins.IG.View.MIRROR_NONE">
			<summary>
			View mirror mode none.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.MIRROR_HORIZONTAL">
			<summary>
			View mirror mode horizontal.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.MIRROR_VERTICAL">
			<summary>
			View mirror mode vertical.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.MIRROR_BOTH">
			<summary>
			View mirror mode horizontal and vertical.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.REPLICATION_MODE_1_1">
			<summary>
			Pixel replication function to be performed on the view: none. This feature is typically used in sensor applications to perform electronic zooming (i.e., pixel and line doubling).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.REPLICATION_MODE_1_2">
			<summary>
			Pixel replication function to be performed on the view: 1 x 2. This feature is typically used in sensor applications to perform electronic zooming (i.e., pixel and line doubling).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.REPLICATION_MODE_2_1">
			<summary>
			Pixel replication function to be performed on the view: 2 x 1. This feature is typically used in sensor applications to perform electronic zooming (i.e., pixel and line doubling).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.REPLICATION_MODE_2_2">
			<summary>
			Pixel replication function to be performed on the view: 2 x 2. This feature is typically used in sensor applications to perform electronic zooming (i.e., pixel and line doubling).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.PROJECTION_PERSPECTIVE">
			<summary>
			Perspective view projection.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.View.PROJECTION_ORTHOGRAPHIC">
			<summary>
			Orthographic view projection.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setWaterNode(Unigine.Ptr{ObjectWaterGlobal})">
			<summary>
			Sets the Water Global object to be used.						The Water Global object is automatically found at the start of the project. Use this method only for dynamically created Water Global object.
			</summary> 
			<param name="value"> Water Global object. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getWaterNode const">
			<summary>
			Returns the currently used Water Global object.
			</summary>  
			<returns>Water Global object.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setSeaLevel(double)">
			<summary>
			Sets the height of the sea level in world coordinates.
			</summary> 
			<param name="level"> Sea level height, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getSeaLevel const">
			<summary>
			Returns the current height of the sea level in world coordinates.
			</summary>  
			<returns>Sea level height, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setSeaLevelSmoothBySpeed(double)">
			<summary>
			Sets the mode of smooth gradual change of the height of the sea level by the specified rate (in meters per second). The height of the sea level changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setSeaLevelSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in meters per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setSeaLevelSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the height of the sea level by the specified time interval. The barometric pressure changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setSeaLevelSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setClarity(float)">
			<summary>
			Sets the clarity of water.
			</summary> 
			<param name="value"> Water clarity from 0 (unclear) to 1 (clear). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getClarity const">
			<summary>
			Returns the current clarity of water.
			</summary>  
			<returns>Water clarity from 0 to 1.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setClaritySmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the water clarity by the specified rate (in units per second). The water clarity changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setClaritySmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setClaritySmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the water clarity by the specified time interval. The water clarity changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setClaritySmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setBeaufortChangeType(Water::BEAUFORT_CHANGE_TYPE)">
			<summary>
			Sets the type of transition between the current and target Beaufort wind force levels.
			</summary> 
			<param name="type"> Type of transition between the current and target Beaufort wind force levels. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getBeaufortChangeType const">
			<summary>
			Returns the current type of transition between the current and target Beaufort wind force levels.
			</summary>  
			<returns>Current type of transition between the current and target Beaufort wind force levels.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setBeaufort(float)">
			<summary>
			Sets the current Beaufort wind force level from 0(Calm) to 12(Hurricane).
			</summary> 
			<param name="beaufort"> New Beaufort wind force level from 0(Calm) to 12(Hurricane). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getBeaufort const">
			<summary>
			Returns the current Beaufort wind force level from 0(Calm) to 12(Hurricane).
			</summary>  
			<returns>Current Beaufort wind force level from 0(Calm) to 12(Hurricane).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setBeaufortSmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the Beaufort wind force level by the specified rate (in levels per second). The Beaufort wind force level changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setBeaufortSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in levels per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setBeaufortSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the Beaufort wind force level by the specified time interval. The water Beaufort wind force level changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setBeaufortSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setWindDirection(float)">
			<summary>
			Sets a new wind direction angle relative to North.
			</summary> 
			<param name="direction"> Wind direction angle relative to North, in degrees. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getWindDirection const">
			<summary>
			Returns the current wind direction angle relative to North.
			</summary>  
			<returns>Current wind direction angle relative to North, in degrees.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setWhitecap(float)">
			<summary>
			Sets the foam intensity for white caps on the water surface.
			</summary> 
			<param name="whitecap"> Foam intensity for white caps on the water surface in the [0, 1] range. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.getWhitecap const">
			<summary>
			Returns the current foam intensity for white caps on the water surface.
			</summary>  
			<returns>Current foam intensity for white caps on the water surface in the [0, 1] range.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setWhitecapSmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the foam intensity for white caps on the water surface by the specified rate (in units per second). The foam intensity for white caps on the water surface changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setWhitecapSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.setWhitecapSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the foam intensity for white caps on the water surface by the specified time interval. The white caps on the water surface change gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setWhitecapSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.Water.updateAllShorelines">
			<summary>
			Forced shoreline update (affects all FieldShoreline nodes).
			</summary>  
		</member>
		<member name="F:Unigine.Plugins.IG.Water.BEAUFORT_CHANGE_TYPE_DISCRETE">
			<summary>
			Beaufort wind force levels are switched discretely from current to target.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.Water.BEAUFORT_CHANGE_TYPE_CONTINUOUS">
			<summary>
			Smooth wind force transition between the current and target Beaufort levels is enabled.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getID const">
			<summary>
			Returns the ID of the weather layer.
			</summary>  
			<returns>ID of the weather layer.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getRegionID const">
			<summary>
			Returns the ID of the weather region to which the layer belongs.
			</summary>  
			<returns>ID of the weather region to which the layer belongs.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getLayerType const">
			<summary>
			Returns the type of the weather layer.
			</summary>  
			<returns>Weather layer type, one of the following values:Plugins::IG::WEATHER_LAYER_TYPE_BASE - base layer.Plugins::IG::WEATHER_LAYER_TYPE_CLOUD - cloud layer.Plugins::IG::WEATHER_LAYER_TYPE_PRECIPITATION - precipitation layer.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setEnabled(bool)">
			<summary>
			Sets a value indicating if the weather layer is enabled. The layer change callback is called.
			</summary> 
			<param name="v"> true to enable the weather layer, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.isEnabled const">
			<summary>
			Returns a value indicating if the weather layer and the region it belongs to are enabled.
			</summary>  
			<returns>true if the layer and the region it belongs to are both enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.isEnabledSelf const">
			<summary>
			Returns a value indicating if the weather layer itself is enabled. Use isEnabled() to check whether the region this layer belongs to is enabled as well.
			</summary>  
			<returns>true if the layer itself is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.isGlobal const">
			<summary>
			Returns a value indicating whether the weather layer is global (has no distinct horizontal boundaries) or not.
			</summary>  
			<returns>true if the weather layer is global (has no distinct horizontal boundaries); false - atmospheric effects of the layer are restricted to a certain area.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setElevation(double)">
			<summary>
			Sets the base altitude for the weather layer above the sea level (distance from the sea level to the lower border of the layer).
			</summary> 
			<param name="value"> New base altitude for the weather layer, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getElevation const">
			<summary>
			Returns the current base altitude for the weather layer above the sea level (distance from the sea level to the lower border of the layer).
			</summary>  
			<returns>Current base altitude for the weather layer, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setElevationSmoothBySpeed(double)">
			<summary>
			Sets the mode of smooth gradual change of the weather layer elevation by the specified rate (in units per second). The weather layer elevation changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setElevationSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setElevationSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the weather layer elevation by the specified time interval. The weather layer elevation changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setElevationSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setThickness(double)">
			<summary>
			Sets the thickness of the weather layer.
			</summary> 
			<param name="value"> New thickness of the weather layer, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getThickness const">
			<summary>
			Returns the current thickness of the weather layer.
			</summary>  
			<returns>Current thickness of the weather layer, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setThicknessSmoothBySpeed(double)">
			<summary>
			Sets the mode of smooth gradual change of the weather layer thickness by the specified rate (in units per second). The weather layer thickness changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setThicknessSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setThicknessSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the weather layer thickness by the specified time interval. The weather layer thickness changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setThicknessSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setVerticalTransition(Unigine.Math.vec2)">
			<summary>
			Sets new vertical sizes of transition areas at the bottom and the top of the weather layer. The effects of the layer fade out gradually within these areas downwards and upwards.
			</summary> 
			<param name="value"> Vector containing new vertical sizes (widths in meters) of transition areas at the bottom and the top of the layer (bottom_width, top_width). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getVerticalTransition const">
			<summary>
			Returns the vertical sizes of transition areas at the bottom and the top of the weather layer. The effects of the layer fade out gradually within these areas downwards and upwards.
			</summary>  
			<returns>Vector containing the current vertical sizes (widths in meters) of transition areas at the bottom and the top of the layer (bottom_width, top_width).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setVerticalTransitionSmoothBySpeed(Unigine.Math.vec2)">
			<summary>
			Sets the mode of smooth gradual change of transition areas at the bottom and the top of the weather layer by the specified rate (in units per second). The transition areas at the bottom and the top of the weather layer in all directions changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setVerticalTransitionSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. Vector components specify rates for transition areas at the bottom and the top of the layer (bottom_width, top_width). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setVerticalTransitionSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the sizes of transition areas at the bottom and the top of the weather layer by the specified time interval. The sizes of transition areas at the bottom and the top of the weather layer change gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setVerticalTransitionSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setWind(Unigine.Math.vec3)">
			<summary>
			Sets the wind speed and direction for the weather layer.
			</summary> 
			<param name="value"> Vector defining wind speed in all directions, in meters per second. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getWind const">
			<summary>
			Returns the current wind speed and direction for the weather layer.
			</summary>  
			<returns>Vector defining new wind speed in all directions, in meters per second.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setWindSmoothBySpeed(Unigine.Math.vec3)">
			<summary>
			Sets the mode of smooth gradual change of the wind speed in all directions by the specified rate (in units per second). The wind speed in all directions changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setWindSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target (each vector component specifies the rate for the corresponding coordinate). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setWindSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the wind speed in all directions by the specified time interval. The wind speed in all directions changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setWindSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setCoverage(float)">
			<summary>
			Sets the cloud coverage intensity value for the weater layer.
			</summary> 
			<param name="value"> Current cloud coverage intensity value for the weater layer, in the [0; 1] range (from zero to maximum cloudiness). </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getCoverage const">
			<summary>
			Returns the current cloud coverage intensity value for the weater layer.
			</summary>  
			<returns>Current cloud coverage intensity value for the weater layer, in the [0; 1] range (from zero to maximum cloudiness).</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setCoverageSmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the cloud coverage intensity by the specified rate (in units per second). The cloud coverage intensity changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setCoverageSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setCoverageSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the cloud coverage intensity by the specified time interval. The cloud coverage intensity changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setCoverageSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setVisibility(float)">
			<summary>
			Sets the visibility range within the weather layer. Objects beyond this range are not visible inside the layer.
			</summary> 
			<param name="value"> New visibility range within the weather layer, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getVisibility const">
			<summary>
			Returns the current visibility range within the weather layer. Objects beyond this range are not visible inside the layer.
			</summary>  
			<returns>Visibility range within the weather layer, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setVisibilitySmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the visibility by the specified rate (in units per second). The visibility changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setVisibilitySmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setVisibilitySmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the visibility by the specified time interval. The visibility changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setVisibilitySmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setHumidity(float)">
			<summary>
			Sets the humidity value for the weather layer.
			</summary> 
			<param name="value"> New humidity value for the weather layer, in %. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getHumidity const">
			<summary>
			Returns the current humidity value for the weather layer.
			</summary>  
			<returns>Current humidity value for the weather layer, in %.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setHumiditySmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the humidity by the specified rate (in % per second). The humidity changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setHumiditySmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in % per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setHumiditySmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the humidity by the specified time interval. The humidity changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setHumiditySmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setTemperature(float)">
			<summary>
			Sets the temperature value for the weather layer.
			</summary> 
			<param name="value"> New temperature value to be set, in degrees Celcius. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getTemperature const">
			<summary>
			Returns the current temperature value for the weather layer.
			</summary>  
			<returns>Current temperature value, in degrees Celcius.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setTemperatureSmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the temperature by the specified rate (in degrees Celcius per second). The temperature changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setTemperatureSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in degrees Celcius per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setTemperatureSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the temperature by the specified time interval. The temperature changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setTemperatureSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setBarometric(float)">
			<summary>
			Sets the barometric pressure value for the weather layer.
			</summary> 
			<param name="value"> New barometric pressure value to be set, in mmHg. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getBarometric const">
			<summary>
			Returns the current barometric pressure value for the weather layer.
			</summary>  
			<returns>Current barometric pressure value, in mmHg.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setBarometricSmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the barometric pressure by the specified rate (in mmHg per second). The barometric pressure changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setBarometricSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in mmHg per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setBarometricSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the barometric pressure by the specified time interval. The barometric pressure changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setBarometricSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.setLightning(float)">
			<summary>
			Sets a new lightning frequency value for the weather layer. This value defines how often the lightning is observed.
			</summary> 
			<param name="freq"> Lightning frequency within the [0; 1] range. By the value of 0 there'll be no lighting at all, while 1 - corresponds to maximum frequency. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getLightning const">
			<summary>
			Returns the current lightning frequency value for the weather layer. This value defines how often the lightning is observed.
			</summary>  
			<returns>Lightning frequency within the [0; 1] range. By the value of 0 there is no lighting at all, while 1 - corresponds to maximum frequency.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getImpact(double) const">
			<summary>
			Returns a value indicating the degree of impact of the layer at the specified altitude depending on whether it is completely inside, outside, or somewhere within the transition area.
			</summary> 
			<param name="altitude"> Altitude value to be checked. </param> 
			<returns>Value indicating the degree of impact of the layer at the specified altitude:0 - completely outside the layer (and transition area)1 - inside the layer(0 &lt; x &lt; 1) - within the transition area</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayer.getDensity(Unigine.Math.dvec3) const">
			<summary>
			Returns the current density of clouds/precipitation intensity at the specified point. This method can be used to implement a meteoradar.
			</summary> 
			<param name="world_pos"> Coordinates of the point at which the density of clouds or precipitation intensity is to be obtained. </param> 
			<returns>Density of clouds for a cloud layer or precipitation intensity for a precipitation layer.</returns>
		</member>
		<member name="F:Unigine.Plugins.IG.WeatherLayer.WEATHER_LAYER_TYPE_PRECIPITATION">
			<summary>
			Precipitation Layer - layer that controls precipitation within the region (via the WeatherLayerPrecipitation class).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.WeatherLayer.WEATHER_LAYER_TYPE_CLOUD">
			<summary>
			Cloud Layer - layer that controls clouds within the region (via the WeatherLayerCloud class).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.IG.WeatherLayer.WEATHER_LAYER_TYPE_BASE">
			<summary>
			Base Layer - layer with no visual representation, it defines weather parameters such as visibility range, temperature, humidity.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerCloud.getNode const">
			<summary>
			Returns a node representing the cloud layer (ObjectCloudLayer).
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerCloud.setCloudType(int,bool)">
			<summary>
			Sets a new cloud type for the layer.
			</summary> 
			<param name="cloud_type"> Index of the cloud type for the layer. </param>
			<param name="reset_cloud_to_default"> true to reset all cloud layer parameters to defaults, false to keep current values. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerCloud.getCloudType const">
			<summary>
			Returns the type of cloud set for the layer.
			</summary>  
			<returns>Index of the cloud type for the layer.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.getEffectNode const">
			<summary>
			Returns the node used to visualize the precipitation effect.
			</summary>  
			<returns>Node representing the precipitation effect in the world.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.setPrecipitationType(int)">
			<summary>
			Sets a value defining the type of the weather precipitation layer.
			</summary> 
			<param name="type"> Integer value that defines the type of precipitation enabled for the weather layer:0 - disable precipitation1 - rain2 - snowThe set of precipitation types can be extended. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.getPrecipitationType const">
			<summary>
			Returns a value defining the type of the weather precipitation layer.
			</summary>  
			<returns>Integer value that defines the type of precipitation enabled for the weather layer:0 - disable precipitation1 - rain2 - snowThe set of precipitation types can be extended.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.setParticlesSize(float)">
			<summary>
			Sets the size of particles used to visualize the precipitation effect (snowflakes, droplets, etc.).
			</summary> 
			<param name="size"> New particle size, in units. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.getParticlesSize const">
			<summary>
			Returns the current size of particles used to visualize the precipitation effect (snowflakes, droplets, etc.).
			</summary>  
			<returns>Particle size, in units.</returns>
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.setParticlesSizeSmoothBySpeed(float)">
			<summary>
			Sets the mode of smooth gradual change of the particles size by the specified rate (in units per second). The particles size changes gradually from the current to target value by the specified value during each second, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). This method fits best when the difference between the target and current value is either too big (e.g. visibility distance change from 10m to 1km) or too small (e.g. from 1m to 1.05m), avoiding too fast or too slow changes. For other cases you can also choose another mode "by time" to change the value from the current to target during the specified time interval via the setParticlesSizeSmoothByTime().
			</summary> 
			<param name="unit_per_sec"> Constant rate (in units per second) with which the value gradually changes from the current to target. </param> 
		</member>
		<member name="M:Unigine.Plugins.IG.WeatherLayerPrecipitation.setParticlesSizeSmoothByTime(float)">
			<summary>
			Sets the mode of smooth gradual change of the particles size by the specified time interval. The particles size changes gradually from the current to target value during this interval, such smoothing is performed to make changes more realistic. Moreover, each value can be changed with its own rate (the rain starting fast with a slowly changing cloud coverage). When the value of 0 is set, the value changes instantly. If the difference between the target and current value is too big (e.g. visibility distance change from 10m to 1km), the changes in this mode may be too fast and too noticeable, or on the contrary they might be too slow if the difference is too small (e.g. from 1m to 1.05m). In this case you can choose another mode to change the value with a specified rate via the setParticlesSizeSmoothBySpeed().
			</summary> 
			<param name="sec"> Time interval (in seconds) during which the value changes from the current to target. </param> 
		</member>
	</members>
</doc>