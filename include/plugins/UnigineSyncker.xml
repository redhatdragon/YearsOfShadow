<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgIsMaster">
			<summary>
			Returns a value indicating if the command line argument "-sync_master" equals to 1.
			</summary>  
			<returns>true if the command line argument "-sync_master" equals to 1; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgUdpPort">
			<summary>
			Returns the UDP port value set by the command line argument "-sync_port".
			</summary>  
			<returns>UDP port number. The default value is 8890.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgAddressingMethod">
			<summary>
			Returns the addressing mode value set by the command line argument "-sync_method".
			</summary>  
			<returns>Current addressing mode: one of the ADDRESSING_METHOD enum values.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgSwapSyncMode const">
			<summary>
			Returns the swap synchronization mode set by the command line argument "-sync_swap".
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgPeersCount">
			<summary>
			Returns the number of peers set by the command line argument "-sync_count".
			</summary>  
			<returns>Number of peers. The default value is 1. The number of peers includes all Slaves in the network + the Master.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgBroadcastAddress">
			<summary>
			Returns the broadcast address of the Master set by the command line argument "-sync_broadcast_address".
			</summary>  
			<returns>Broadcast address of the Master.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgMulticastAddress">
			<summary>
			Returns the multicast address of the Master set by the command line argument "-sync_multicast_address".
			</summary>  
			<returns>Multicast address of the Master. The default value is 239.0.0.1</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgMasterAddress">
			<summary>
			Returns the IP address of the Master set by the command line argument "-sync_master_address".Available for Slave only.
			</summary>  
			<returns>IP address of the Master.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgUdpSlavePort">
			<summary>
			Returns the UDP port used by the Slave set by the command line argument "-sync_slave_port".Available for Slave only.
			</summary>  
			<returns>UDP port used by the Slave. The default value is 0 (any unused port available).</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getArgAllowExtraSlaves">
			<summary>
			Returns the value indicating if additional Slaves can be connected after starting the session set by the command line argument "-sync_allow_extra_slaves".Available for Slave only.
			</summary>  
			<returns>true if additional Slaves can be connected after starting the session; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initMaster">
			<summary>
			Initializes the Syncker as the Master application using values specified via the command-line arguments.
			</summary>  
			<returns>Pointer to the Master interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initMasterBroadcast(int,char,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Master application with the broadcast mode enabled. Slaves must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="peers_count"> Total number of Syncker hosts in the network (including the Master itself). Similar to specifying the -sync_count command-line argument. </param>
			<param name="broadcast_address"> Broadcast address to be used. Similar to specifying the -sync_broadcast_address command-line argument. </param>
			<param name="udp_port"> Broadcast address to be used. Similar to specifying the -sync_broadcast_address command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the Master interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initMasterMulticast(int,char,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Master application with the multicast mode enabled.
			</summary> 
			<param name="peers_count"> Total number of Syncker hosts in the network (including the Master itself). Similar to specifying the -sync_count command-line argument. </param>
			<param name="multicast_address"> Multicast address to be used. Similar to specifying the -sync_multicast_address command-line argument. </param>
			<param name="udp_port"> UDP port to be used. Similar to specifying the -sync_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the Master interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initMasterUnicast(int,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Master application with the broadcast mode enabled. Slaves must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="peers_count"> Total number of Syncker hosts in the network (including the Master itself). Similar to specifying the -sync_count command-line argument. </param>
			<param name="udp_port"> UDP port to be used. Similar to specifying the -sync_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the Master interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.isMasterInitialized">
			<summary>
			Returns a value indicating if the Master was initialized.
			</summary>  
			<returns>true if the Master was initialized; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getMaster">
			<summary>
			Returns the master interface.
			</summary>  
			<returns>Pointer to the Master interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlave">
			<summary>
			Initializes the Syncker as the Slave application using values specified via the command-line arguments.
			</summary>  
			<returns>Pointer to the Slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.isSlaveInitialized">
			<summary>
			Returns a value indicating if the slave was initialized.
			</summary>  
			<returns>1 if the slave was initialized; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getSlave">
			<summary>
			Returns the Slave interface.
			</summary>  
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.isSynckerInitialized">
			<summary>
			Returns a value indicating if the Syncker (Master or Slave) was initialized.
			</summary>  
			<returns>1 if the Syncker (master or slave) was initialized; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.getSyncker">
			<summary>
			Returns the base class interface for Master and Slave.
			</summary>  
			<returns>Pointer to the syncker interface. It is the base class for Master and Slave.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.setDebugWindow(bool)">
			<summary>
			Sets a value indicating if the Syncker's debug window is open.
			</summary> 
			<param name="window"> Enable flag. Use 1 to show the debug window, or 0 - to hide it. </param> 
			<returns>1 if the Syncker's debug window is open; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.isDebugWindow">
			<summary>
			Returns a value indicating if the Syncker's debug window is enabled.
			</summary>  
			<returns>true if the Syncker's debug window is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.destroySyncker">
			<summary>
			Performs shutdown and destroys the Syncker.					Called automatically, when the plugin is unloaded.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlaveBroadcast(unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Slave application with the broadcast mode enabled. Master's IP address will be detected automatically. Master must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="udp_port"> UDP port to be used. Similar to specifying the -sync_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlaveBroadcast(char,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Slave application with the specified parameters and the broadcast mode enabled. Master's IP address is specified explicitly. Master must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="master_address"> Master IP address to be used. Similar to specifying the -sync_master_address command-line argument. </param>
			<param name="udp_port"> UDP port to be used. Similar to specifying the -sync_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlaveMulticast(char,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Slave application with the specified parameters and the multicast mode enabled. Master's IP address will be detected automatically. Master must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="multicast_address"> Multicast address to be used. Similar to specifying the -sync_multicast_address command-line argument. </param>
			<param name="udp_port"> UDP port to be used. Similar to specifying the -sync_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlaveMulticast(char,char,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Slave application with the specified parameters and the multicast mode enabled. Master's IP address is specified explicitly. Master must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="master_address"> Master IP address to be used. Similar to specifying the -sync_master_address command-line argument. </param>
			<param name="multicast_address"> Multicast address to be used. Similar to specifying the -sync_multicast_address command-line argument. </param>
			<param name="udp_port"> UDP port to be used. Similar to specifying the -sync_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlaveUnicast(unsignedshort,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Slave application with the specified parameters and the unicast mode enabled. Master's IP address will be detected automatically. Master must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="master_udp_port"> UDP port to be used by the Master. </param>
			<param name="slave_udp_port"> UDP port to be used by the Slave. Similar to specifying the -sync_slave_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSlaveUnicast(char,unsignedshort,unsignedshort,Syncker::SWAP_SYNC_MODE)">
			<summary>
			Initializes the Syncker as the Slave application with the specified parameters and the unicast mode enabled. Master's IP address is specified explicitly. Master must be initialized with broadcast mode enabled as well.
			</summary> 
			<param name="master_address"> Master IP address to be used. Similar to specifying the -sync_master_address command-line argument. </param>
			<param name="master_udp_port"> UDP port to be used by the Master. </param>
			<param name="slave_udp_port"> UDP port to be used by the Slave. Similar to specifying the -sync_slave_port command-line argument. </param>
			<param name="swap_mode"> Swap synchronization mode to be used by the Syncker. Similar to specifying the -sync_swap command-line argument. </param> 
			<returns>Pointer to the slave interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.initSyncker">
			<summary>
			Initializes the Syncker as Master or Slave application depending on the values specified via the command-line arguments.
			</summary>  
			<returns>Pointer to the syncker interface. It is the base class for Master and Slave.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Manager.get">
			<summary>
			Returns the Manager interface.
			</summary>  
			<returns>Pointer to the manager interface.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setInterpolation(bool)">
			<summary>
			Sets a value indicating if interpolation and extrapolation should be enabled for the computer to tackle the problem of lost packets between the master and slaves.
			</summary> 
			<param name="interpolation"> true to enable interpolation and extrapolation for the computer; false - to disable. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.isInterpolation const">
			<summary>
			Returns a value indicating if interpolation and extrapolation are enabled for the computer to tackle the problem of lost packets between the master and slaves.
			</summary>  
			<returns>true if interpolation and extrapolation are enabled for the computer; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.isInterpolation(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Returns a value indicating if the given node is interpolated by the Syncker.
			</summary> 
			<param name="node"> Node to be checked. </param> 
			<returns>true if the given node is interpolated by the Syncker; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setInterpolationPeriod(double)">
			<summary>
								Sets the interpolation period value for the computer. It is recommended to use this method when setting the frequency of sending packets to Slaves.
			</summary> 
			<param name="period"> Interpolation period value, in seconds. The default value is 0.04.The value should not be less than 1/getSendRate(), otherwise the image shall be "stuttering". </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getInterpolationPeriod const">
			<summary>
			Returns the current interpolation period value for the computer.
			</summary>  
			<returns>Interpolation period value, in seconds. The default value is 0.04.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setExtrapolationPeriod(double)">
			<summary>
			Sets the extrapolation period value for the computer.
			</summary> 
			<param name="period"> Extrapolation period value, in seconds. The default value is 0.04. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getExtrapolationPeriod const">
			<summary>
			Returns the current extrapolation period value for the computer.
			</summary>  
			<returns>Extrapolation period value, in seconds. The default value is 0.2.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setView(int,char)">
			<summary>
			Assigns the specified display or projector stored in the configuration file to the specified display of the computer.
			</summary> 
			<param name="display_num"> Display number to assign the viewport to. </param>
			<param name="display_name"> Name of the display or projector stored in the configuration file that represents the viewport. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getView(int) const">
			<summary>
			Returns the current display or projector stored in the configuration file and assigned to the given display of the computer.
			</summary> 
			<param name="display_num"> Display number. </param> 
			<returns>Name of the display or projector stored in the configuration file and assigned to the given display.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.clearViews">
			<summary>
			Clears all views assigned to the displays of the computer.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setDebug(bool,int,int,int)">
			<summary>
			Enables or disables displaying of debug information at the specified position on the screen.
			</summary> 
			<param name="enabled"> true to display the debug information; false - to hide it. </param>
			<param name="x"> Horizontal margin of the debug information block. The default value is 10. </param>
			<param name="y"> Vertical margin of the debug information block. The default value is 10. </param>
			<param name="align_mask"> Alignment mask. One of the Gui::ALIGN_* variables or their combination. The default value is Gui::ALIGN_RIGHT | Gui::ALIGN_BOTTOM. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.isDebug">
			<summary>
			Returns a value indicating if the debug information is to be displayed.
			</summary>  
			<returns>true if the debug information is to be displayed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getAddressingMethod const">
			<summary>
			Returns the packet addressing method currently used by the Syncker for communication.
			</summary>  
			<returns>Packets addressing mode currently used by the Syncker.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setDisconnectTimeout(float)">
			<summary>
			Sets the timeout period after which a Slave shall be considered as disconnected.
			</summary> 
			<param name="timeout"> Duration of the timeout period, in seconds. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getDisconnectTimeout const">
			<summary>
			Returns the current timeout period after which a Slave is considered as disconnected.
			</summary>  
			<returns>Duration of the timeout period, in seconds.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getProjections const">
			<summary>
			Returns the interface for managing projections configuration via API (see the Projections class).
			</summary>  
			<returns>Projections class instance.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getViewOffset">
			<summary>
			Returns the current view offset. The view offset is used in CAVE systems to reflect the current viewer's head position. It can also be used for parallax adjustment insid the cockpit.
			</summary>  
			<returns>A vec3 vector representing components of the the view offset along X, Y, and Z axes, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.sendMessage(char,Unigine.Ptr{Unigine.Blob},Syncker::DELIVERY_METHOD)">
			<summary>
			Sends a user message contained in the specified buffer using the given delivery method to the specified named channel via the UDP protocol.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param>
			<param name="message"> Buffer, containing the user message. </param>
			<param name="delivery_method">  </param> 
			<returns>true if the message was sent successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.setMessageReceivedCallback(char,Unigine.CallbackBase)">
			<summary>
			Sets a callback function to be fired when a UDP user message is sent. A callback is executed in the Main Thread, but it is undefined when exactly - either in update(), or postUpdate(), or swap().
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. If the specified channel does not exist, it shall be created. </param>
			<param name="func"> Callback pointer. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getSwapSyncMode const">
			<summary>
			Returns the buffer swap synchronization mode currently used by the Syncker.
			</summary>  
			<returns>Current swap synchronization mode used by the Syncker. One of the following:DEFAULT - default syncronization mode.NVIDIA - NVIDIA buffer swap synchronization. Detailed information on current sync status is displayed in the console (available only for NVIDIA Quadro GPUs with G-SYNC support).</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getTime const">
			<summary>
			Returns the current Master frame time (even if called from a Slave computer), it is the time of the last buffer swap operation (i.e., beginning of the next frame). This method is more accurate than the same method of the Game class and returns a double-precision value.
			</summary>  
			<returns>Current Master frame time, in seconds.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Syncker.getIFps const">
			<summary>
			Returns the duration of the last frame. This method is more accurate than the same method of the Game class and returns a double-precision value.
			</summary>  
			<returns>Duration of the previous frame, in seconds.</returns>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.RELIABLE">
			<summary>
			Reliable delivery mode. Reliable and sequenced mode, enabled by default. All packets shall be delivered to the recipient in the exact order they were sent.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.SEQUENCED">
			<summary>
			Sequenced delivery mode. Packets may be lost, but never duplicated, they arrive in the exact order they were sent.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.UNRELIABLE">
			<summary>
			Unreliable delivery mode. Pure UDP. Packets may be lost, duplicated, or received in an order that differs from the one they were sent. Packets are not compressed, fragmented, or merged.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.MULTICAST">
			<summary>
			Multicast addressing mode (one-to-many): hosts have different IP-addresses, but a single port.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.UNICAST">
			<summary>
			Unicast addressing mode (one-to-one): hosts have different IP-addresses (some may be the same) and different ports.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.BROADCAST">
			<summary>
			Broadcast addressing mode (one-to-all): hosts have different IP-addresses, but a single port.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.NVIDIA">
			<summary>
			NVIDIA buffer swap synchronization. Detailed information on current sync status is displayed in the console. This mode is available only for NVIDIA Quadro GPUs with G-SYNC support.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Syncker.DEFAULT">
			<summary>
			Default buffer swap synchronization.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getNumSlaves">
			<summary>
			Returns the total number of the slaves connected to the Master.
			</summary>  
			<returns>Total number of slaves connected to the Master.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSlaveAddress(int)">
			<summary>
			Returns the network address of the given slave computer.
			</summary> 
			<param name="num"> Slave number. </param> 
			<returns>Network address of the slave computer.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSlavePort(int)">
			<summary>
			Returns the UDP port used by the slave with the specified number.
			</summary> 
			<param name="num"> Slave number. </param> 
			<returns>UDP port of the specified slave computer. 0 - means any unused port available.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSlaveID(int)">
			<summary>
			Returns the ID of the slave with the specified number. A unique Slave ID consists of two parts: IP (32 bits) + port (16 bits)
			</summary> 
			<param name="num"> Slave number. </param> 
			<returns>ID of the slave with the specified number.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSlaveWorldName(int)">
			<summary>
			Returns the name of the world file currently loaded on the specified slave.
			</summary> 
			<param name="num"> Slave number. </param> 
			<returns>Name of the world file currently loaded on the specified slave.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSlaveView(int,int)">
			<summary>
			Returns the name of the display or projector stored in the configuration file and assigned to the given display of the given slave computer.
			</summary> 
			<param name="num"> Slave number. </param>
			<param name="display_num"> Display number. </param> 
			<returns>Name of the display or projector.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSyncPlayer(bool)">
			<summary>
			Enables synchronization of the current player's parameters via the UDP protocol:											Its transformation						Projection matrix						Viewport mask						Mask for reflections						Applied post-materials (if any)										Current player synchronization is used only when all slaves use the same camera.
			</summary> 
			<param name="enabled"> true to enable synchronization; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isSyncPlayer">
			<summary>
			Returns a value indicating if synchronization of the current player is enabled.					Current player synchronization is used only when all slaves use the same camera.
			</summary>  
			<returns>true if synchronization of the current player is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSyncRender(bool)">
			<summary>
			Enables synchronization of all render parameters via the UDP protocol: light scattering, occlusion, etc.					When all slaves use the same rendering settings, synchronization of render parameters can be disabled.
			</summary> 
			<param name="enabled"> true to enable synchronization; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isSyncRender">
			<summary>
			Returns a value indicating if synchronization of all render parameters is enabled.					When all slaves use the same rendering settings, synchronization of render parameters can be disabled.
			</summary>  
			<returns>true if synchronization of all render parameters is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.addSyncNode(Unigine.Ptr{Unigine.Node},unsignedchar)">
			<summary>
			Enables synchronization of parameters of the given node via the UDP protocol.					Scene nodes are not synchronized by default, this method is used to add a particular node to the synchronization queue.
			</summary> 
			<param name="node"> Node to synchronize. </param>
			<param name="sync_mask"> Synchronization mask. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.addSyncNodes(Unigine.Vector{Unigine.Ptr{Unigine.Node},int,Unigine.VectorAllocator},unsignedchar)">
			<summary>
			Enables synchronization of parameters of given nodes via the UDP protocol.					Scene nodes are not synchronized by default, this method is used to add particular nodes to the synchronization queue.
			</summary> 
			<param name="nodes"> List of nodes to synchronize. </param>
			<param name="sync_mask"> Synchronization mask. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSyncNodeMask(Unigine.Ptr{Unigine.Node},unsignedchar)">
			<summary>
			Sets a new synchronization mask for the specified node. Synchronization mask can be used for optimization reasons limiting the amount of data to be synchronized and thus reducing network load. For example, for moving parts of a helicopter we can set a mask to synchronize only node transformations:
			
			</summary> 
			<param name="node"> Node for which a new synchronization mask is to be set. </param>
			<param name="sync_mask"> New synchronization mask to be set for the specified node. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSyncNodeMask(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns the synchronization mask for the specified node.
			</summary> 
			<param name="node"> Node, for which a synchronization mask is to be obtained. </param> 
			<returns>Synchronization mask of the specified node.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isSyncNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns a value indicating if synchronization of the given node is enabled. Using this method you can quickly check if a node is monitored by the Syncker (node's states are dispatched to Slaves over the network).
			</summary> 
			<param name="node"> Node to be checked. </param> 
			<returns>true if synchronization of the given node is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getNumSyncNodes">
			<summary>
			Returns the total number of nodes in the synchronization queue.
			</summary>  
			<returns>Total number of nodes in the synchronization queue.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSyncNode(int)">
			<summary>
			Returns the synchronized node with the given number.
			</summary> 
			<param name="num"> Node number in the synchronization queue. </param> 
			<returns>Synchronized node.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncNode(int)">
			<summary>
			Removes the specified node from the synchronization queue.
			</summary> 
			<param name="num"> Node number in the synchronization queue. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Removes the specified node from the synchronization queue.
			</summary> 
			<param name="node"> Node to be removed from synchronization. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncNodeID(int)">
			<summary>
			Removes the specified node from the synchronization queue by its ID.
			</summary> 
			<param name="node_id"> ID of the node to be removed from the synchronization queue. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncNodes(Unigine.Vector{Unigine.Ptr{Unigine.Node},int,Unigine.VectorAllocator})">
			<summary>
			Removes the specified nodes from the synchronization queue.
			</summary> 
			<param name="nodes"> List of nodes to be removed from the synchronization queue. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.clearSyncNodes">
			<summary>
			Removes all nodes from the synchronization queue.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.addSyncMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Enables synchronization of the given material via the UDP protocol.					Scene materials are not synchronized by default, this method is used to add a particular material to the synchronization queue.
			</summary> 
			<param name="material"> Material to synchronize. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.addSyncMaterials(Unigine.Vector{Unigine.Ptr{Unigine.Material},int,Unigine.VectorAllocator})">
			<summary>
			Enables synchronization of given materials via the UDP protocol.					Scene materials are not synchronized by default, this method is used to add particular materials to the synchronization queue.
			</summary> 
			<param name="materials"> List of materials to synchronize. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isSyncMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Returns a value indicating if synchronization of the given material is enabled. Using this method you can quickly check if a material is monitored by the Syncker (material's states are dispatched to Slaves over the network).
			</summary> 
			<param name="mat"> Material to be checked. </param> 
			<returns>true if synchronization of the given material is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getNumSyncMaterials">
			<summary>
			Returns the total number of materials in the synchronization queue.
			</summary>  
			<returns>Total number of materials in the synchronization queue.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSyncMaterial(int)">
			<summary>
			Returns the synchronized material with the given number.
			</summary> 
			<param name="num"> Material number in the synchronization queue. </param> 
			<returns>Synchronized material.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncMaterial(int)">
			<summary>
			Removes the material with the given number from the synchronization queue.
			</summary> 
			<param name="num"> Material number in the synchronization queue. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Removes the specified material from the synchronization queue.
			</summary> 
			<param name="material"> Material to be removed from the synchronization queue. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeSyncMaterials(Unigine.Vector{Unigine.Ptr{Unigine.Material},int,Unigine.VectorAllocator})">
			<summary>
			Removes the specified materials from the synchronization queue.
			</summary> 
			<param name="materials"> List of materials to be removed from the synchronization queue. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.clearSyncMaterials">
			<summary>
			Removes all materials from the synchronization queue.
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.createNode(Unigine.Ptr{Unigine.Node},unsignedchar)">
			<summary>
			Synchronizes creation of the given node on all Slaves. This method is to be called after node creation on the Master.					It is recommended to use the loadNode() or loadNodereference() methods whenever possible as this approach allows adding nodes of all types, unlike the createNode() method that supports only a limited number of them.
			Example:
			</summary> 
			<param name="node"> Node to create. </param>
			<param name="sync_mask"> Synchronization mask. </param> 
			<returns>true if the node was created successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.deleteNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Synchronizes deletion of the given node (with all its children) on the Master and all Slaves. Similar to calling deleteLater() for the node.
			</summary> 
			<param name="node"> Node to delete. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isNodeCreatedBySyncker(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns a value indicating if the given node was created via the createNode() method. Using this method you can quickly check if a node is in the run-time objects creation buffer.
			</summary> 
			<param name="node"> Node to be checked. </param> 
			<returns>true if the given node was created via the createNode() method; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSlavePlayer(int,Unigine.Ptr{Player})">
			<summary>
			Sets the specified player for the specified Slave.					Synchronization of the main master camera is disabled.
			</summary> 
			<param name="num"> Slave number in the range from  to the total number of slaves. </param>
			<param name="player"> Player to be set. </param> 
			<returns>true if the specified player was successfully set for the specified Slave; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSlavePlayer(char,Unigine.Ptr{Player})">
			<summary>
			Sets the specified player for all Slave computers using the specified view (see the sync_view argument).					Synchronization of the main master camera is disabled.
			</summary> 
			<param name="view"> Name of the view (display or projector). </param>
			<param name="player"> Player to be set. </param> 
			<returns>true if the specified player was successfully set for all Slave computers using the specified view; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSendRate(float)">
			<summary>
								Sets the frequency of sending packets to Slaves. Use this method when network load is too high and slows down the whole IG system. It is recommended to use this method with interpolation enabled.
			</summary> 
			<param name="rate"> Frequency of sending packets to Slaves. The default value is -1 (every frame).The value should not be less than 1/getInterpolationPeriod(), otherwise the image shall be "stuttering". </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getSendRate">
			<summary>
			Returns the current frequency of sending packets to Slaves. Use this method when network load is too high and slows down the whole IG system. It is recommended to use this method with interpolation enabled.
			</summary>  
			<returns>Frequency of sending packets to Slaves.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setAllowExtraSlaves(bool)">
			<summary>
			Sets a value indicating if new Slaves can connect to the Master after starting the session. This can be used, for example, to connect a Slave which is used as a tool for configuring projections and does not operate as an IG.
			</summary> 
			<param name="slaves"> true to permit new Slaves connecting to the Master after starting the session; false - to forbid it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isAllowExtraSlaves">
			<summary>
			Returns a value indicating if new Slaves can connect to the Master after starting the session. This can be used, for example, to connect a Slave which is used as a tool for configuring projections and does not operate as an IG.
			</summary>  
			<returns>true if new Slaves can connect to the Master after starting the session; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setViewOffset(Unigine.Math.vec3)">
			<summary>
			Sets a new player's head position on the Master.
			</summary> 
			<param name="offset"> New player's head position coordinates to be set. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSyncViewOffset(bool)">
			<summary>
			Enables synchronization of view offset for projections via the UDP protocol.
			</summary> 
			<param name="offset"> true to enable synchronization; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isSyncViewOffset">
			<summary>
			Returns a value indicating if synchronization of view offset for projections is enabled.
			</summary>  
			<returns>true if synchronization of view offset for projections is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setSyncWorldLoad(bool)">
			<summary>
			Enables synchronization of world loading via the UDP protocol.
			</summary> 
			<param name="load"> true to enable synchronization; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isSyncWorldLoad">
			<summary>
			Returns a value indicating if synchronization of world loading is enabled.
			</summary>  
			<returns>true if synchronization of world loading is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.setDefaultSyncNodes(unsignedchar)">
			<summary>
			Sets a new mask defining types of nodes that will be synchronized automatically after world loading. This mask can be used for optimization reasons limiting the number of nodes to be synchronized and thus reducing network load. For example, you can restrict automatic synchronization to global water, and clouds only:
			
			</summary> 
			<param name="nodes"> Mask defining types of nodes that will be synchronized automatically after world loading. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getDefaultSyncNodes">
			<summary>
			Returns the current mask defining types of nodes that will be synchronized automatically after world loading. This mask can be used for optimization reasons limiting the number of nodes to be synchronized and thus reducing network load.
			</summary>  
			<returns>Current mask defining types of nodes that will be synchronized automatically after world loading.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.loadWorld(char)">
			<summary>
			Loads a world from the specified file on the Master and all Slaves. Syncker is able to automatically synchronize the current world, but it works as follows: Slaves shall only start loading a new world after it is completely loaded on the Master. This method provides a 2x speedup of world loading process, as it forces all hosts to start loading the world almost simultaneously.
			</summary> 
			<param name="name"> Path to the *.world file to be loaded. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.loadNode(char,unsignedchar,Unigine.Math.Mat4)">
			<summary>
			Loads a node from the specified file to the world on the Master and all Slaves and places it to the specified ititial transformation. This is a network analogue of the loadNode() method of the World class. By default, the loaded node is not synchronized, which is suitable for static objects at run time and at the same time saves performance. For dynamic objects to be synchronized, the suitable synchronization mask should be set.
			</summary> 
			<param name="name"> Path to the *.node file. </param>
			<param name="sync_mask"> Synchronization mask, one of the SYNC_MASK values. </param>
			<param name="init_transform"> Initial transformation of the node. </param> 
			<returns>Loaded node or nullptr if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.loadNode(char,unsignedchar)">
			<summary>
			Loads a node from the specified file to the world on the Master and all Slaves and places it at the origin with the default transformation. This is a network analogue of the loadNode() method of the World class. By default, the loaded node is not synchronized, which is suitable for static objects at run time and at the same time saves performance. For dynamic objects to be synchronized, the suitable synchronization mask should be set.
			</summary> 
			<param name="name"> Path to the *.node file. </param>
			<param name="sync_mask"> Synchronization mask, one of the SYNC_MASK values. </param> 
			<returns>Loaded node or nullptr if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.loadNodeReference(char,unsignedchar,Unigine.Math.Mat4)">
			<summary>
			Loads a node reference from the specified file to the world on the Master and all Slaves and places it to the specified ititial transformation. This is a network analogue of the NodeReference class constructor. By default, the loaded node is not synchronized, which is suitable for static objects at run time and at the same time saves performance. For dynamic objects to be synchronized, the suitable synchronization mask should be set.
			</summary> 
			<param name="name"> Path to the *.node file. </param>
			<param name="sync_mask"> Synchronization mask, one of the SYNC_MASK values. </param>
			<param name="init_transform"> Initial transformation of the node. </param> 
			<returns>Node Reference instance if it was loaded successfully; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.loadNodeReference(char,unsignedchar)">
			<summary>
			Loads a node reference from the specified file to the world on the Master and all Slaves and places it to the origin with default transformation. This is a network analogue of the NodeReference class constructor. By default, the loaded node is not synchronized, which is suitable for static objects at run time and at the same time saves performance. For dynamic objects to be synchronized, the suitable synchronization mask should be set.
			</summary> 
			<param name="name"> Path to the *.node file. </param>
			<param name="sync_mask"> Synchronization mask, one of the SYNC_MASK values. </param> 
			<returns>Node Reference instance if it was loaded successfully; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.isNodeLoadedBySyncker(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns a value indicating if the given node was loaded by the Syncker via the loadNode() or the loadNodeReference() method.
			</summary> 
			<param name="node"> Node to be checked. </param> 
			<returns>true if the given node was created via the createNode() method; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.addCallback(Unigine.Master.CALLBACK_INDEX,Unigine.CallbackBase)">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when sending or receiving user messages, as well as when changing settings on the Master or a Slave. The signature of the callback function can be one of the following:
			
			</summary> 
			<param name="callback"> Callback type. One of the following values:SESSION_STARTEDSESSION_CONTINUEDSESSION_FINISHEDSLAVE_CONNECTEDSLAVE_DISCONNECTEDMASTER_SETUP_CHANGEDSLAVE_SETUP_CHANGED </param>
			<param name="func"> Callback pointer. </param> 
			<returns>Number of the last added callback of the specified type, if the callback was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeCallback(Unigine.Master.CALLBACK_INDEX,void)">
			<summary>
			Removes a given callback from the list of callbacks of the specified type. Callback functions can be used to determine actions to be performed when sending or receiving user messages, as well as when changing settings on the Master or a Slave.
			</summary> 
			<param name="callback"> Callback type. One of the following values:SESSION_STARTEDSESSION_CONTINUEDSESSION_FINISHEDSLAVE_CONNECTEDSLAVE_DISCONNECTEDMASTER_SETUP_CHANGEDSLAVE_SETUP_CHANGED </param>
			<param name="func"> Callback pointer. </param> 
			<returns>true if the position callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.clearCallbacks(Unigine.Master.CALLBACK_INDEX)">
			<summary>
			Clears all added callbacks of the specified type. Callback functions can be used to determine actions to be performed when sending or receiving user messages, as well as when changing settings on the Master or a Slave.
			</summary> 
			<param name="callback"> Callback type. One of the following values:SESSION_STARTEDSESSION_CONTINUEDSESSION_FINISHEDSLAVE_CONNECTEDSLAVE_DISCONNECTEDMASTER_SETUP_CHANGEDSLAVE_SETUP_CHANGED </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.addMessageToBuffer(char,Unigine.Ptr{Unigine.Blob})">
			<summary>
			Adds a message to the buffer to be received by additional slaves as soon as they connect.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param>
			<param name="message"> Buffer containing the user message. </param> 
			<returns>Message ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getNumBufferedMessages(char) const">
			<summary>
			Returns the total number of buffered messages.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param> 
			<returns>Total number of buffered messages.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getBufferedMessageID(char,int) const">
			<summary>
			Returns the ID of the buffered message by its index.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param>
			<param name="index"> Message index number. </param> 
			<returns>Message ID.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.getBufferedMessage(char,int) const">
			<summary>
			Returns the buffer containing the message.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param>
			<param name="id"> Message ID. </param> 
			<returns>Buffer containing the user message.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.removeBufferedMessage(char,int)">
			<summary>
			Removes the specified message from the buffer.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param>
			<param name="id"> Message ID. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Master.clearBufferedMessages(char)">
			<summary>
			Removes all messages from the buffer.
			</summary> 
			<param name="channel"> Channel name. Multiple systems may use Syncker's network simultaneously (e.g. IG and user's application). For convenience, all messages are sent and received via named channels. </param> 
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.MASTER_SETUP_CHANGED">
			<summary>
			Callback to be fired on changing settings on the Master. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.SLAVE_SETUP_CHANGED">
			<summary>
			Callback to be fired on changing settings on a Slave.	 Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.SLAVE_DISCONNECTED">
			<summary>
			Callback function to be fired before disconnecting a Slave. The reason for disconnection specified in string format ("disconnected by slave", "timeout", etc.) Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.SLAVE_CONNECTED">
			<summary>
			Callback function to be fired on successful connection of a new Slave. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.SESSION_FINISHED">
			<summary>
			Callback function to be fired on closing a session. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.SESSION_CONTINUED">
			<summary>
			Callback function to be fired on continuing a session. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.SESSION_STARTED">
			<summary>
			Callback function to be fired on starting a session (all Slaves are connected, MTU is determined). Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.OBJECT_SURFACE">
			<summary>
			Update all paramters of surfaces (surface flags and information about inherited materials for each surface).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.OBJECT">
			<summary>
			Update object parameters. All other parameters of objects except for NODE_FLAGS and TRANSFORM (particles trasform for object particles, bones transform for object skinned)
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.DERIVED">
			<summary>
			Update information of derived class (11111000 - without the first 3 bits).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.TRANSFORM">
			<summary>
			Update node transform (with interpolation).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.NODE_FLAGS">
			<summary>
			Update only simple node flag (enabled, etc.)
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.OBJECT_PARTICLES">
			<summary>
			Particle system. See the ObjectParticles class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.CLOUD_LAYER">
			<summary>
			Cloud layer. See the ObjectCloudLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.WATER_GLOBAL">
			<summary>
			Global water. See the ObjectWaterGlobal class.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Master.LIGHT_WORLD">
			<summary>
			World light. See the LightWorld class.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.getMasterNodeID(int)">
			<summary>
			Returns the ID of a dynamic node on the Master by its local ID on the Slave. A Slave does not create an exact copy of a node created on the Master, their IDs do not match. So, knowing an ID of a local copy of a node created on the Master, you can easily find its original on the Master. This can be used in user messages, when you need to apply some specific modifications to source node on the Master.
			</summary> 
			<param name="slave_node_id"> Node's ID on the Slave. </param> 
			<returns>ID of the node on the Master.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.getSlaveNodeID(int)">
			<summary>
			Returns the local ID of a dynamic node on the Slave by its ID on the Master. A Slave does not create an exact copy of a node created on the Master, their IDs do not match. So, if you created a node on the Master and then called the Syncker::Master::createNode() method, you can easily find its copy on the current Slave. This can be used in user messages, when you need to apply some specific modifications to a Slave's copy of a node, that was created on the Master.
			</summary> 
			<param name="master_node_id"> Node's ID on the Master. </param> 
			<returns>ID of the node on the Slave.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.addSyncNode(Unigine.Ptr{Unigine.Node},int)">
			<summary>
			Enables synchronization of parameters of the given node via the UDP protocol.					Scene nodes are not synchronized by default, this method is used to add a particular node to the synchronization queue.
			</summary> 
			<param name="node"> Node to synchronize. </param>
			<param name="master_node_id"> ID of the node on the Master. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.addSyncNodeID(int,int)">
			<summary>
			Enables synchronization of parameters of the given node via the UDP protocol.					Scene nodes are not synchronized by default, this method is used to add a particular node (by its id) to the synchronization queue.
			</summary> 
			<param name="slave_node_id"> ID of the node on the Slave. </param>
			<param name="master_node_id"> ID of the node on the Master. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.removeSyncNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Removes the specified node from the synchronization queue.
			</summary> 
			<param name="node"> Node to be removed. </param> 
			<returns>true if the node was successfully removed from the synchronization queue; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.removeSyncNodeID(int)">
			<summary>
			Removes the node with the given number from the synchronization queue.
			</summary> 
			<param name="slave_node_id"> Node number in the synchronization queue. </param> 
			<returns>true if the node was successfully removed from the synchronization queue; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.getID">
			<summary>
			Returns the current ID of the Slave.
			</summary>  
			<returns>ID of the slave combined as follows: IP address (32 bits) + port number (16 bits).</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.setSkipFlags(int)">
			<summary>
			Sets the skip flags enabling you to ignore certain information from the Master.
			</summary> 
			<param name="flags"> A combination of skip flags to be used, for example: </param>
			<param name="flags"> slave-&gt;setSkipFlags(GAME | WORLD_LOAD | USER_DATA); </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.getSkipFlags">
			<summary>
			Returns the current skip flags combination enabling you to ignore certain information from the Master.
			</summary>  
			<returns>A combination of currently used skip flags.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.addCallback(Unigine.Slave.CALLBACK_INDEX,Unigine.CallbackBase)">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when sending or receiving user messages, as well as when changing settings on the Master or a Slave. The signature of the callback function can be one of the following:
			
			</summary> 
			<param name="callback"> Callback type. One of the following values:SESSION_STARTEDSESSION_FINISHEDMASTER_CONNECTEDMASTER_DISCONNECTEDNODE_LOADED </param>
			<param name="func"> Callback pointer. </param> 
			<returns>Number of the last added callback of the specified type, if the callback was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.removeCallback(Unigine.Slave.CALLBACK_INDEX,void)">
			<summary>
			Removes a given callback from the list of callbacks of the specified type. Callback functions can be used to determine actions to be performed when sending or receiving user messages, as well as when changing settings on the Master or a Slave.
			</summary> 
			<param name="callback"> Callback type. One of the following values:SESSION_STARTEDSESSION_FINISHEDMASTER_CONNECTEDMASTER_DISCONNECTEDNODE_LOADED </param>
			<param name="func"> Callback pointer. </param> 
			<returns>true if the position callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Slave.clearCallbacks(Unigine.Slave.CALLBACK_INDEX)">
			<summary>
			Clears all added callbacks of the specified type. Callback functions can be used to determine actions to be performed when sending or receiving user messages, as well as when changing settings on the Master or a Slave.
			</summary> 
			<param name="callback"> Callback type. One of the following values:SESSION_STARTEDSESSION_FINISHEDMASTER_CONNECTEDMASTER_DISCONNECTEDNODE_LOADED </param> 
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODE_LOADED">
			<summary>
			Callback function to be fired on creating a node by the Master on the Slave via loadNode() / loadNodeReference() / createNode(). Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.MASTER_DISCONNECTED">
			<summary>
			Callback function to be fired on disconnecting from the Master. The reason for disconnection specified in string format ("disconnected by master", "timeout", etc.) Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.MASTER_CONNECTED">
			<summary>
			Callback function to be fired on successful connection to the Master. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.SESSION_FINISHED">
			<summary>
			Callback function to be fired on closing a session. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.SESSION_STARTED">
			<summary>
			Callback function to be fired on starting a session. Callback signature:
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.PROJECTIONS">
			<summary>
			Projections configuration. Can be disabled for Slaves having their projections configured manually via API.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.RUN_CONSOLE">
			<summary>
			Running console commands.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODE_DELETE">
			<summary>
			Node removal.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODE_ID_REGISTER">
			<summary>
			Links between dynamic nodes of the Master and Slaves (via ID) created via loadNode(), createNode(), etc.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODE_CREATE">
			<summary>
			Node creation.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODEREF_LOAD">
			<summary>
			Loading node references from *.node files.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODE_LOAD">
			<summary>
			Loading nodes from *.node files.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.USER_DATA">
			<summary>
			Processing user packets sent via sendMessage().
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.VIEW_OFFSET">
			<summary>
			Changing view offset parameters.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.SET_PLAYER">
			<summary>
			Ignoring setSlavePlayer() calls by the Master.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.MATERIALS">
			<summary>
			Materials.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.NODES">
			<summary>
			Nodes.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.RENDER">
			<summary>
			Render and post-effects settings.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.PLAYER">
			<summary>
			Current Master camera synchronization (every frame).
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.GAME">
			<summary>
			Game class (time and speed), for particles — ifps and seed.
		</summary>
		</member>
		<member name="F:Unigine.Plugins.Syncker.Slave.WORLD_LOAD">
			<summary>
			Loading worlds.
		</summary>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setEnabled(bool)">
			<summary>
			Sets a value indicating if projections on this host are to be modified by the Synker. You can disable this option, when using Syncker only for synchronization of node transformations (and/or transfer data) and modification of projections is unnecessary.
			</summary> 
			<param name="enabled"> true to enable modification of projections on this host by the Syncker; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.isEnabled">
			<summary>
			Returns the current value indicating if projections on this host are to be modified by the Synker. You can disable this option, when using Syncker only for synchronization of node transformations (and/or transfer data) and modification of projections is unnecessary.
			</summary>  
			<returns>true if modification of projections on this host by the Syncker is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setConfiguratorEnabled(bool)">
			<summary>
			Sets a value indicating if Syncker’s Projection Configurator window is shown.
			</summary> 
			<param name="enabled"> true to show Syncker’s Projection Configurator window; false - to hide it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.isConfiguratorEnabled">
			<summary>
			Returns the current value indicating if Syncker’s Projection Configurator window is shown.
			</summary>  
			<returns>true if modification of projections on this host by the Syncker is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.saveProjections(char,bool)">
			<summary>
			Saves the current projections configuration to the specified file. You can use this method to migrate old binary files to the new XML format.
			</summary> 
			<param name="file_name"> Name of the file to which the current projections configuration shall be saved. </param>
			<param name="binary"> Binary flag. Set true to save configuration in binary format; false - to save in XML format. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.loadProjections(char,bool)">
			<summary>
			Loads projections configuration from the specified file. You can use this method to migrate old binary files to the new XML format.
			</summary> 
			<param name="file_name"> Name of the file with projections configuration to be loaded. </param>
			<param name="binary"> Binary flag. Set true to load configuration from a binary file; false - to load configuration from an XML file. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getNumDisplays">
			<summary>
			Returns the total number of displays in the current configuration.
			</summary>  
			<returns>Current number of displays.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.addDisplay(char)">
			<summary>
			Adds a new display to the current configuration.
			</summary> 
			<param name="name"> Name of the new display to be added. </param> 
			<returns>Number of the new added display.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.removeDisplay(int)">
			<summary>
			Removes the display with the specified number from the current configuration.
			</summary> 
			<param name="num"> Number of the display to be removed in the range from 0 to the total number of displays. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setDisplayEnabled(int,bool)">
			<summary>
			Sets a value indicating if the specified display is enabled.
			</summary> 
			<param name="num"> Number of the display in the range from 0 to the total number of displays. </param>
			<param name="enabled"> true to enable the specified display; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.isDisplayEnabled(int)">
			<summary>
			Returns a value indicating if the specified display is enabled.
			</summary> 
			<param name="num"> Number of the display in the range from 0 to the total number of displays. </param> 
			<returns>true if the specified display is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setDisplayName(int,char)">
			<summary>
			Sets a new name for the display with the specified number.
			</summary> 
			<param name="num"> Number of the display in the range from 0 to the total number of displays. </param>
			<param name="name"> New name to be set for the specified display. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getDisplayName(int)">
			<summary>
			Returns the name of the display with the specified number.
			</summary> 
			<param name="num"> Number of the display in the range from 0 to the total number of displays. </param> 
			<returns>Name of the specified display.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setDisplayTransform(int,Unigine.Math.Mat4)">
			<summary>
			Sets a new transformation for the display with the specified number.
			</summary> 
			<param name="num"> Number of the display in the range from 0 to the total number of displays. </param>
			<param name="transform"> New transformation to be set for the specified display. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getDisplayTransform(int)">
			<summary>
			Returns the current transformation of the display with the specified number.
			</summary> 
			<param name="num"> Number of the display in the range from 0 to the total number of displays. </param> 
			<returns>Current transformation of the specified display.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getNumProjectors">
			<summary>
			Returns the total number of projectors in the current configuration.
			</summary>  
			<returns>Current number of projectors.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.addProjector(char)">
			<summary>
			Adds a new projector to the current configuration.
			</summary> 
			<param name="name"> Name of the new projector to be added. </param> 
			<returns>Number of the new added projector.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.removeProjector(int)">
			<summary>
			Removes the projector with the specified number from the current configuration.
			</summary> 
			<param name="num"> Number of the projector to be removed in the range from 0 to the total number of projectors. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorEnabled(int,bool)">
			<summary>
			Sets a value indicating if the specified projector is enabled.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="enabled"> true to enable the specified projector; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.isProjectorEnabled(int)">
			<summary>
			Returns a value indicating if the specified projector is enabled.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>true if the specified projector is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorName(int,char)">
			<summary>
			Sets a new name for the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="name"> New name to be set for the specified projector. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getProjectorName(int)">
			<summary>
			Returns the name of the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>Name of the specified projector.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorTransform(int,Unigine.Math.Mat4)">
			<summary>
			Sets a new transformation for the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="transform"> New transformation to be set for the specified projector. The transformation includes position (relative to the viewer), rotation, and size (width and height). </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getProjectorTransform(int)">
			<summary>
			Returns the current transformation of the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>Current transformation of the specified projector.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorAspectRatio(int,float)">
			<summary>
			Sets a new aspect ratio (width to height) for the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="aspect"> New aspect ratio to be set for the specified projector. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getProjectorAspectRatio(int)">
			<summary>
			Returns the current aspect ratio (width to height) of the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>Current aspect ratio of the specified projector.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorVFOV(int,float)">
			<summary>
			Sets a new vertical FOV (field of view) of the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="vfov"> New vertical field of view to be set for the specified projector, in degrees. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getProjectorVFOV(int)">
			<summary>
			Returns the current vertical FOV (field of view) of the projector with the specified number.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>Current vertical field of view of the specified projector, in degrees.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorHorizontalOffset(int,float)">
			<summary>
			Sets a new horizontal offset of the viewport of the projector with the specified number. The offset measures the position of the image relative to the centerline of the lens.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="hoffset"> New horizontal offset to be set for the viewport of the specified projector, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getProjectorHorizontalOffset(int)">
			<summary>
			Returns the current horizontal offset of the viewport of the projector with the specified number. The offset measures the position of the image relative to the centerline of the lens.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>Current horizontal offset of the viewport of the specified projector, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setProjectorVerticalOffset(int,float)">
			<summary>
			Sets a new vertical offset of the viewport of the projector with the specified number. The offset measures the position of the image relative to the centerline of the lens.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param>
			<param name="voffset"> New vertical offset to be set for the viewport of the specified projector, in meters. </param> 
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.getProjectorVerticalOffset(int)">
			<summary>
			Returns the current vertical offset of the viewport of the projector with the specified number. The offset measures the position of the image relative to the centerline of the lens.
			</summary> 
			<param name="num"> Number of the projector in the range from 0 to the total number of projectors. </param> 
			<returns>Current vertical offset of the viewport of the specified projector, in meters.</returns>
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.setDefaultProjectionsEnabled(bool)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Plugins.Syncker.Projections.isDefaultProjectionsEnabled const">
			<summary>
			</summary>  
		</member>
	</members>
</doc>