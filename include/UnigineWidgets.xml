<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Widget.isCallback(int) const">
			<summary>
			Returns a value indicating if there are any callbacks of the specified type set for the widget.
			</summary> 
			<param name="callback"> Callback number: one of the Gui:: Enumeration (for example, SHOW, HIDE, etc). </param> 
			<returns>true if at least one callback of the specified type is set for the widget; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.addCallback(Unigine.Gui.CALLBACK_INDEX,Unigine.CallbackBase)">
			<summary>
			Adds a callback function of the specified type for the widget.
			The signature of the callback function must be as follows:
			</summary> 
			<param name="callback"> Callback type number. One of the callbacks defined in the Gui class (for example, CLICK, SHOW, HIDE, etc). </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Widget.addCallback(Unigine.Gui.CALLBACK_INDEX,Unigine.CallbackBase1{Unigine.Ptr{Unigine.Widget}})">
			<summary>
			Adds a callback function of the specified type for the widget.
			The signature of the callback function must be as follows:
			sender - the widget that caused the callback function to be called, i.e. the one on which the action took place (e.g. a button, that was clicked).
			</summary> 
			<param name="callback"> Callback type number. One of the callbacks defined in the Gui class (for example, CLICK, SHOW, HIDE, etc). </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Widget.addCallback(Unigine.Gui.CALLBACK_INDEX,Unigine.CallbackBase2{Unigine.Ptr{Unigine.Widget},Unigine.Ptr{Unigine.Widget}})">
			<summary>
			Adds a callback function of the specified type for the widget.
			The signature of the callback function must be as follows:
														sender - the widget that caused the callback function to be called, i.e. the one on which the action took place (e.g. a button, that was clicked).						pointer - this parameter is used to identify a target widget of a Drag-and-Drop operation. You can find an example in the widgets/sprite_03 UnigineScript sample included in the SDK.
			</summary> 
			<param name="callback"> Callback type number. One of the callbacks defined in the Gui class (for example, CLICK, SHOW, HIDE, etc). </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Widget.addCallback(Unigine.Gui.CALLBACK_INDEX,Unigine.CallbackBase3{Unigine.Ptr{Unigine.Widget},Unigine.Ptr{Unigine.Widget},int})">
			<summary>
			Adds a callback function of the specified type for the widget.
			The signature of the callback function must be as follows:
														sender - the widget that caused the callback function to be called, i.e. the one on which the action took place (e.g. a button, that was clicked).						pointer - this parameter is used to identify a target widget of a Drag-and-Drop operation. You can find an example in the widgets/sprite_03 UnigineScript sample included in the SDK.						data - this parameter is used for getting mouse or keyboard button state, when a widget is clicked or pressed (callbacks: CLICKED, PRESSED, KEY_PRESSED).
			</summary> 
			<param name="callback"> Callback type number. One of the callbacks defined in the Gui class (for example, CLICK, SHOW, HIDE, etc). </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Widget.removeCallback(Unigine.Gui.CALLBACK_INDEX,void)">
			<summary>
			Removes the specified callback from the list of callbacks of the specified type added for the widget.
			</summary> 
			<param name="callback"> Callback type number. One of the callbacks defined in the Gui class (for example, CLICK, SHOW, HIDE, etc). </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>true if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Widget.clearCallbacks(Unigine.Gui.CALLBACK_INDEX)">
			<summary>
			Clears all callbacks of the specified type added for the widget.
			</summary> 
			<param name="callback"> Callback type number. One of the callbacks defined in the Gui class (for example, CLICK, SHOW, HIDE, etc). </param> 
		</member>
		<member name="M:Unigine.Widget.setCallbackAccel(Unigine.Gui.CALLBACK_INDEX,unsignedint,int,int,int)">
			<summary>
			Assigns a hot key combination to a given callback function.
			</summary> 
			<param name="callback"> Callback number: one of the Gui:: Enumeration (for example, SHOW, HIDE, etc). </param>
			<param name="key"> ASCII key code: one of the Input::KEY_* values. </param>
			<param name="ctrl"> CTRL key modifier. </param>
			<param name="alt"> ALT key modifier. </param>
			<param name="shift"> SHIFT key modifier. </param> 
		</member>
		<member name="M:Unigine.Widget.getCallbackAccel(Unigine.Gui.CALLBACK_INDEX,unsignedint,int,int,int) const">
			<summary>
			Gets the current hot key combination for a given callback function.
			</summary> 
			<param name="callback"> Callback number: one of the Gui:: Enumeration (for example, SHOW, HIDE, etc). </param>
			<param name="key"> ASCII key code: one of the App:: Enumeration with KEY_* prefixes. </param>
			<param name="ctrl"> CTRL key modifier. </param>
			<param name="alt"> ALT key modifier. </param>
			<param name="shift"> SHIFT key modifier. </param> 
			<returns>true if the specified callback type exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.isCallbackAccel(unsignedint,int,int,int) const">
			<summary>
			Checks if the given key in combination with CTRL, ALT, or/and SHIFT buttons is assigned as a widget callback.
			</summary> 
			<param name="key"> ASCII key code: one of the Input::KEY_* values. </param>
			<param name="ctrl"> 1 if the CTRL key modifier is used; otherwise, 0. </param>
			<param name="alt"> 1 if the ALT key modifier is used; otherwise, 0. </param>
			<param name="shift"> 1 if the SHIFT key modifier is used; otherwise, 0. </param> 
			<returns>1 if it is used in combinations; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setCallbackEnabled(Unigine.Gui.CALLBACK_INDEX,bool)">
			<summary>
			Enables or disables a given callback function.
			</summary> 
			<param name="callback"> Callback number: one of the Gui:: Enumeration (for example, SHOW, HIDE, etc). </param>
			<param name="enabled"> true to enable the callback, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Widget.isCallbackEnabled(Unigine.Gui.CALLBACK_INDEX) const">
			<summary>
			Returns a value indicating if a given callback is enabled.
			</summary> 
			<param name="callback"> Callback number: one of the Gui:: Enumeration (for example, SHOW, HIDE, etc). </param> 
			<returns>Returns 1 if the callback is disabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.getChild(int) const">
			<summary>
			Returns the widget child by its number.
			</summary> 
			<param name="num"> Number of the child widget. </param> 
			<returns>Pointer to the child widget.</returns>
		</member>
		<member name="M:Unigine.Widget.isChild(Unigine.Ptr{Unigine.Widget}) const">
			<summary>
			Checks if a given widget is a child of the current widget.
			</summary> 
			<param name="w"> Widget to check. </param> 
			<returns>Returns 1 if the given widget is a child; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setData(char)">
			<summary>
			Sets user data associated with the widget.
			</summary> 
			<param name="data"> string data. Data can be an xml formatted string. </param> 
		</member>
		<member name="M:Unigine.Widget.getData const">
			<summary>
			Returns user data associated with the widget.
			</summary>  
			<returns>User string data. Data can be an xml formatted string.</returns>
		</member>
		<member name="M:Unigine.Widget.setEnabled(bool)">
			<summary>
			Enables or disables the widget.
			</summary> 
			<param name="enabled"> 1 to enable the widget, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Widget.isEnabled const">
			<summary>
			Returns a value indicating if the widget is enabled.
			</summary>  
			<returns>Returns 1 if the widget is disabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setFlags(int)">
			<summary>
			Sets widget flags.
			</summary> 
			<param name="flags"> flags. </param> 
		</member>
		<member name="M:Unigine.Widget.getFlags const">
			<summary>
			Returns widget flags.
			</summary>  
			<returns>Widget flags: one of the Gui:: Enumeration with ALIGN_* prefixes. This is an optional parameter.</returns>
		</member>
		<member name="M:Unigine.Widget.setFocus">
			<summary>
			Sets focus on the widget.
			</summary>  
		</member>
		<member name="M:Unigine.Widget.isFocused const">
			<summary>
			Returns a value indicating if the widget is in focus.
			</summary>  
			<returns>1 if the widget is in focus; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setFont(char)">
			<summary>
			Sets a font that will be used to render text on the widget.
			</summary> 
			<param name="name"> Path to the font file (*.ttf). </param> 
		</member>
		<member name="M:Unigine.Widget.setFontColor(Unigine.Math.vec4)">
			<summary>
			Sets a font color that will be used to render text on the widget.
			</summary> 
			<param name="color"> Font color. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontColor const">
			<summary>
			Returns the color of the font used by the widget.
			</summary>  
			<returns>Font color.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontHOffset(int)">
			<summary>
			Sets the horizontal offset of the font used by the widget.
			</summary> 
			<param name="hoffset"> Horizontal offset value in pixels. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontHOffset const">
			<summary>
			Returns the horizontal offset of the font used by the widget.
			</summary>  
			<returns>Horizontal offset value in pixels.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontHSpacing(int)">
			<summary>
			Sets the spacing (in pixels) between widget text characters.
			</summary> 
			<param name="hspacing"> Horizontal spacing value. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontHSpacing const">
			<summary>
			Returns the spacing (in pixels) between widget text characters.
			</summary>  
			<returns>Horizontal spacing value.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontOutline(int)">
			<summary>
			Sets a value indicating if widget text should be rendered casting a shadow. Positive or negative values set the distance in pixels to offset the font outline. The default is 0 (no outlining).
			</summary> 
			<param name="outline"> Outline offset:Positive values set offset in the bottom-right corner direction.Negative values set offset in the top-left corner direction (the outline will overlap widget text).0 is not to use font outlining. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontOutline const">
			<summary>
			Returns a value indicating if widget text is rendered casting a shadow. Positive or negative values determine the distance in pixels used to offset the font outline.
			</summary>  
			<returns>Positive value if outline is offset in the bottom-right corner direction. Negative value if outline is offset in the top-left corner direction. 0 if font is not outlined.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontPermanent(int)">
			<summary>
			Sets a flag to prevent color change for the widget text (for example, when the widget becomes non-active or loses focus).
			</summary> 
			<param name="permanent"> 1 not to change text color; 0 to change it. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontPermanent const">
			<summary>
			Returns a flag indicating if color of the widget text is not changed (for example, when the widget becomes non-active or loses focus).
			</summary>  
			<returns>1 if color of the widget text is not changed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontRich(int)">
			<summary>
			Sets a value indicating if rich text formatting should be used. The default is 0.
			</summary> 
			<param name="rich"> 1 to use rich text formatting, 0 to use plain text formatting. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontRich const">
			<summary>
			Returns a value indicating if rich text formatting is used.
			</summary>  
			<returns>1 if rich text formatting is used; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontSize(int)">
			<summary>
			Sets a font size that will be used to render text on the widget.
			</summary> 
			<param name="size"> Font size in pixels. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontSize const">
			<summary>
			Returns the size of the font used by the widget.
			</summary>  
			<returns>Font size.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontVOffset(int)">
			<summary>
			Sets the vertical offset of the font used by the widget.
			</summary> 
			<param name="voffset"> Vertical offset value, in pixels. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontVOffset const">
			<summary>
			Returns the vertical offset of the font, used by the widget.
			</summary>  
			<returns>Vertical offset value, in pixels.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontVSpacing(int)">
			<summary>
			Sets the spacing (in pixels) between widget text lines.
			</summary> 
			<param name="vspacing"> Vertical spacing value. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontVSpacing const">
			<summary>
			Returns the spacing (in pixels) between widget text lines.
			</summary>  
			<returns>Vertical spacing value.</returns>
		</member>
		<member name="M:Unigine.Widget.setFontWrap(int)">
			<summary>
			Enables or disables text wrapping to widget width.
			</summary> 
			<param name="wrap"> 1 to enable text wrapping, 0 to disable it. The default is 0. </param> 
		</member>
		<member name="M:Unigine.Widget.getFontWrap const">
			<summary>
			Returns a value indicating if text wrapping to widget width is enabled.
			</summary>  
			<returns>1 if text wrapping is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.getGui const">
			<summary>
			Returns a Gui instance that currently renders the widget. (This function can be used if the widget is created and used in two different GUIs, for example, in case of the Interface plugin.) It can be called only by root widgets. For child widgets, see getParentGui().
			</summary>  
			<returns>Current GUI instance used for the widget.</returns>
		</member>
		<member name="M:Unigine.Widget.setHeight(int)">
			<summary>
			Sets the minimal height of the widget, in pixels.					The widget cannot be smaller than its content (the texture, video, etc.). With setHeight() and setWidth() functions, it is only possible to make the widget bigger then the size of its content. For example, WidgetButton can be made bigger than its texture, but it cannot be made any smaller than the texture dimensions.
			</summary> 
			<param name="height"> Widget's minimal height. If a negative value is provided, the 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Widget.getHeight const">
			<summary>
			Returns the current widget height ,in pixels.					You may need to call arrange() first, if you have added a new widget and want to get its height in the same frame. Otherwise, zero will be returned.
			</summary>  
			<returns>Widget's height, in pixels.</returns>
		</member>
		<member name="M:Unigine.Widget.setHidden(bool)">
			<summary>
			Hides or shows the widget. When a widget is hidden, space occupied by it is left empty, and other widgets are not re-arranged.
			</summary> 
			<param name="hidden"> true to hide the widget, false to render it. </param> 
		</member>
		<member name="M:Unigine.Widget.isHidden const">
			<summary>
			Returns a value indicating if the widget is hidden. When a widget is hidden, space occupied by it is left empty, and other widgets are not re-arranged.
			</summary>  
			<returns>true if the widget is hidden; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.getIntersection(int,int) const">
			<summary>
			Checks for an intersection with the widget's bounds for the given point.
			</summary> 
			<param name="local_pos_x"> Local X coordinate. </param>
			<param name="local_pos_y"> Local Y coordinate. </param> 
			<returns>true if the input coordinate is inside the widget; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.getHierarchyIntersection(int,int)">
			<summary>
			Checks for an intersection with a widget that belongs to the hierarchy of the current widget.
			</summary> 
			<param name="screen_pos_x"> The X coordinate of the screen position. </param>
			<param name="screen_pos_y"> The Y coordinate of the screen position. </param> 
			<returns>Widget the intersection with which is found.</returns>
		</member>
		<member name="M:Unigine.Widget.setIntersectionEnabled(bool)">
			<summary>
			Sets a value indicating if intersection detection is enabled for the widget.
			</summary> 
			<param name="enabled"> true to enable intersection detection for the widget, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Widget.isIntersectionEnabled const">
			<summary>
			Returns a value indicating if intersection detection is enabled for the widget.
			</summary>  
			<returns>true if intersection detection is enabled for the widget; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.getKeyActivity(unsignedint) const">
			<summary>
			Checks if a given key already has a special purpose for the widget.
			</summary> 
			<param name="key"> ASCII key code: one of the Input::KEY_* values. </param> 
			<returns>1 if the key cannot be used; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Widget.setMouseCursor(int)">
			<summary>
			Sets a mouse pointer to display over a widget.
			</summary> 
			<param name="cursor"> Mouse pointer. See the list of available pointers with CURSOR_* prefixes in the article on Gui class functions. </param> 
		</member>
		<member name="M:Unigine.Widget.getMouseCursor const">
			<summary>
			Returns the type of mouse pointer displayed over a widget.
			</summary>  
			<returns>Mouse pointer. One of the available pointers with CURSOR_* prefixes described in the article on Gui class functions.</returns>
		</member>
		<member name="M:Unigine.Widget.getMouseX const">
			<summary>
			Returns the X coordinate of the mouse pointer position on the screen.
			</summary>  
			<returns>X coordinate of the mouse pointer position.</returns>
		</member>
		<member name="M:Unigine.Widget.getMouseY const">
			<summary>
			Returns the Y coordinate of the mouse pointer position on the screen.
			</summary>  
			<returns>Y coordinate of the mouse pointer position.</returns>
		</member>
		<member name="M:Unigine.Widget.setNextFocus(Unigine.Ptr{Unigine.Widget})">
			<summary>
			Sets a widget which will be focused next if the user presses TAB.
			</summary> 
			<param name="focus"> Next widget. </param> 
		</member>
		<member name="M:Unigine.Widget.getNextFocus const">
			<summary>
			Returns a widget which will be focused next if the user presses TAB.
			</summary>  
			<returns>Next widget.</returns>
		</member>
		<member name="M:Unigine.Widget.getNumChildren const">
			<summary>
			Returns the number of children of the widget.
			</summary>  
			<returns>Number of child widgets.</returns>
		</member>
		<member name="M:Unigine.Widget.setOrder(int)">
			<summary>
			Sets rendering order (Z-order) for the widget. The higher the value, the higher the order of the widget will be.					Works only for widgets added to GUI via the Gui::addChild() function with the Gui::ALIGN_OVERLAP flag specified (should not be Gui::ALIGN_FIXED).
			</summary> 
			<param name="order"> Rendering order (Z-order) of the widget, in the range [-128;127]. (126 for the Profiler, 127 for the Console). </param> 
		</member>
		<member name="M:Unigine.Widget.getOrder const">
			<summary>
			Returns rendering order (Z-order) for the widget.
			</summary>  
			<returns>Rendering order (Z-order) of the widget, in the range [-128;127]. (126 for the Profiler, 127 for the Console).</returns>
		</member>
		<member name="M:Unigine.Widget.setParent(Unigine.Ptr{Unigine.Widget})">
			<summary>
			Sets a parent widget for the current one.
			</summary> 
			<param name="parent"> Parent widget to set. </param> 
		</member>
		<member name="M:Unigine.Widget.getParent const">
			<summary>
			Returns the pointer to the parent widget.
			</summary>  
			<returns>Parent widget smart pointer.</returns>
		</member>
		<member name="M:Unigine.Widget.getParentGui const">
			<summary>
			Returns a Gui instance that currently renders the widget's parent, if the widget has a parent. (This function can be used if the widget is created and used in two different GUIs, for example, in case of the Interface plugin.)
			</summary>  
			<returns>Current GUI instance used for the widget's parent.</returns>
		</member>
		<member name="M:Unigine.Widget.setPermanentFocus">
			<summary>
			Sets permanent focus on the widget (it means that the widget is always in focus).
			</summary>  
		</member>
		<member name="M:Unigine.Widget.setPosition(int,int)">
			<summary>
			Sets a position of the widget relative to its parent.
			</summary> 
			<param name="x"> X coordinate of the upper left corner of the widget. </param>
			<param name="y"> Y coordinate of the upper left corner of the widget. </param> 
		</member>
		<member name="M:Unigine.Widget.getPositionX const">
			<summary>
			Returns the X coordinate of the widget position relative to its parent.
			</summary>  
			<returns>The relative X coordinate.</returns>
		</member>
		<member name="M:Unigine.Widget.getPositionY const">
			<summary>
			Returns the Y coordinate of the widget position relative to its parent.
			</summary>  
			<returns>Relative Y coordinate.</returns>
		</member>
		<member name="M:Unigine.Widget.getScreenPositionX const">
			<summary>
			Returns the screen position of the widget (its top left corner) on the screen along the X axis.
			</summary>  
			<returns>Screen position along the X axis in pixels.</returns>
		</member>
		<member name="M:Unigine.Widget.getScreenPositionY const">
			<summary>
			Returns the screen position of the widget (its top left corner) on the screen along the Y axis.
			</summary>  
			<returns>Screen position along the Y axis in pixels.</returns>
		</member>
		<member name="M:Unigine.Widget.setToolTip(char,int)">
			<summary>
			Sets a tooltip for the widget.
			</summary> 
			<param name="str"> Tooltip text. </param>
			<param name="reset"> 1 to recalculate a tooltip location if the mouse cursor was relocated; otherwise - 0(by default). </param> 
		</member>
		<member name="M:Unigine.Widget.getToolTip const">
			<summary>
			Returns the widget's tooltip text.
			</summary>  
			<returns>Tooltip text.</returns>
		</member>
		<member name="M:Unigine.Widget.getType const">
			<summary>
			Returns the type of the widget.
			</summary>  
			<returns>Widget type identifier.</returns>
		</member>
		<member name="M:Unigine.Widget.getTypeName const">
			<summary>
			Returns the name of the widget type.
			</summary>  
			<returns>Widget type name.</returns>
		</member>
		<member name="M:Unigine.Widget.setWidth(int)">
			<summary>
			Sets the minimal width of the widget, in pixels.					The widget cannot be smaller than its content (the texture, video, etc.). With setHeight() and setWidth() functions, it is only possible to make the widget bigger then the size of its content. For example, WidgetButton can be made bigger than its texture, but it cannot be made any smaller than the texture dimensions.
			</summary> 
			<param name="width"> Widget's minimal width. If a negative value is provided, the 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Widget.getWidth const">
			<summary>
			Returns the current widget width, in pixels.					You may need to call arrange() first, if you have added a new widget and want to get its width in the same frame. Otherwise, zero will be returned.
			</summary>  
			<returns>Widget width, in pixels.</returns>
		</member>
		<member name="M:Unigine.Widget.addAttach(Unigine.Ptr{Unigine.Widget},char,int,int)">
			<summary>
			Attaches a given widget to the current one. When applied to checkboxes, converts them into a group of radio buttons. A horizontal/vertical slider can be attached to a label or a text field. The text field can be attached to any of the sliders.
			</summary> 
			<param name="w"> Widget to attach. </param>
			<param name="format"> Format string or values entered into the attached widget. If none specified, "%d" is implied. This is an optional parameter. </param>
			<param name="multiplier"> Multiplier value, which is used to scale values provided by the attached widget. This is an optional parameter. </param>
			<param name="flags"> Attachment flags: one of the Gui:: Enumeration with ATTACH_* prefixes. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.Widget.addChild(Unigine.Ptr{Unigine.Widget},int)">
			<summary>
			Adds a child to the widget.
			</summary> 
			<param name="w"> Child widget. </param>
			<param name="flags"> Widget flags: one of the Gui:: Enumeration with ALIGN_* prefixes. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.Widget.arrange">
			<summary>
			Rearranges the widget and its children to lay them out neatly. This function forces to recalculate widget size and allows to get updated GUI layout data in the current frame. If this function is not called, widget modifications made in the current update() will be available only in the next frame (i.e. with one-frame lag), as GUI is calculated and rendered after the script update() function has been executed.
			</summary>  
		</member>
		<member name="M:Unigine.Widget.raise(Unigine.Ptr{Unigine.Widget})">
			<summary>
			Brings a given widget to the top.					Works only for widgets added to GUI via the Gui::addChild() function with the Gui::ALIGN_OVERLAP flag specified (should not be Gui::ALIGN_FIXED).
			</summary> 
			<param name="w"> Widget to be brought up. </param> 
		</member>
		<member name="M:Unigine.Widget.removeAttach(Unigine.Ptr{Unigine.Widget})">
			<summary>
			Detaches a given widget from the current one.
			</summary> 
			<param name="w"> Widget to detach. </param> 
		</member>
		<member name="M:Unigine.Widget.removeChild(Unigine.Ptr{Unigine.Widget})">
			<summary>
			Removes a child widget from the list of the widget's children.
			</summary> 
			<param name="w"> Child widget smart pointer. </param> 
		</member>
		<member name="M:Unigine.Widget.removeFocus">
			<summary>
			Removes focus from the widget.
			</summary>  
		</member>
		<member name="M:Unigine.Widget.replaceChild(Unigine.Ptr{Unigine.Widget},Unigine.Ptr{Unigine.Widget},int)">
			<summary>
			Replaces one child widget with another.
			</summary> 
			<param name="w"> New child widget smart pointer. </param>
			<param name="old_w"> Widget to be replaced. </param>
			<param name="flags"> Widget flags: one of the Gui:: Enumeration with ALIGN_* prefixes. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.Widget.runCallback(int) const">
			<summary>
			Runs a given callback function.
			</summary> 
			<param name="callback"> Callback number: one of the Gui:: Enumeration (for example, SHOW, HIDE, etc). </param> 
		</member>
		<member name="M:Unigine.Widget.isExpanded const">
			<summary>
			Returns a value indicating if the widget is expanded.
			</summary>  
			<returns>true if the widget is expanded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.isOverlapped const">
			<summary>
			Returns a value indicating if the widget is overlapped.
			</summary>  
			<returns>true if the widget is overlapped; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.isBackground const">
			<summary>
			Returns a value indicating if the widget is a background one.
			</summary>  
			<returns>true if the widget a background one; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.isFixed const">
			<summary>
			Returns a value indicating if the widget is fixed.
			</summary>  
			<returns>true if the widget is fixed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.isLayout const">
			<summary>
			Returns a value indicating if the widget is of a type that is responsible for the layout.
			</summary>  
			<returns>true if the widget is a layout; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Widget.getLifetimeSelf const">
			<summary>
			Returns the lifetime management type set for the widget.					Lifetime of each widget in the hierarchy is defined by it's root. Setting lifetime management type for a child widget different from the one set for the root has no effect.
			</summary>  
		</member>
		<member name="M:Unigine.Widget.setLifetime(Widget::LIFETIME)">
			<summary>
			Sets the lifetime management type for the widget. By default, the LIFETIME_ENGINE type is used.
			</summary> 
			<param name="lifetime"> Lifetime management type. </param> 
		</member>
		<member name="M:Unigine.Widget.getLifetime const">
			<summary>
			Returns the lifetime management type for the root of the widget, or for the widget itself (if it is not a child for another widget).					Lifetime of each widget in the hierarchy is defined by it's root. Thus, lifetime management type set for a child widget that differs from the one set for the root is ignored.
			</summary>  
		</member>
		<member name="F:Unigine.Widget.WIDGET_VBOX">
			<summary>
			Vertical box. See also: WidgetVBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_HBOX">
			<summary>
			Horizontal box. See also: WidgetHBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_GRID_BOX">
			<summary>
			Grid box. See also: WidgetGridBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_VPANED">
			<summary>
			Vertical box that allows resizing of its children. See also: WidgetVPaned.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_HPANED">
			<summary>
			Horizontal box that allows resizing of its children. See also: WidgetHPaned.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_LABEL">
			<summary>
			Text label. See also: WidgetLabel.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_BUTTON">
			<summary>
			Simple button. See also: WidgetButton.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_EDIT_LINE">
			<summary>
			Text field. See also: WidgetEditline.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_EDIT_TEXT">
			<summary>
			Multiline text field. See also: WidgetEdittext.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_CHECK_BOX">
			<summary>
			Checkbox. See also: WidgetCheckbox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_COMBO_BOX">
			<summary>
			Combobox. See also: WidgetCombobox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_CANVAS">
			<summary>
			Canvas widget for drawing text, lines and polygons. See also: WidgetCanvas.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_GROUP_BOX">
			<summary>
			Group box. See also: WidgetGroupBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_LIST_BOX">
			<summary>
			List box. See also: WidgetListBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_TREE_BOX">
			<summary>
			Tree box. See also: WidgetTreeBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_TAB_BOX">
			<summary>
			Tabbed box. See also: WidgetTabBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SCROLL">
			<summary>
			A scrollbar: horizontal or vertical one. See also: WidgetScroll.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SCROLL_BOX">
			<summary>
			Box with scrolling. See also: WidgetScrollBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPACER">
			<summary>
			Spacer: horizontal or vertical one. See also: WidgetSpacer.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SLIDER">
			<summary>
			A slider: horizontal or vertical one. See also: WidgetSlider.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPIN_BOX">
			<summary>
			Spinbox. See also: WidgetSpinBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPIN_BOX_DOUBLE">
			<summary>
			Spinbox with double values. See also: WidgetSpinBoxDouble.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_ICON">
			<summary>
			Icon. See also: WidgetIcon.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPRITE">
			<summary>
			Sprite. See also: WidgetSprite.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPRITE_VIDEO">
			<summary>
			Video Sprite. See also: WidgetSpriteVideo.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPRITE_SHADER">
			<summary>
			Shader Sprite. See also: WidgetSpriteShader.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPRITE_VIEWPORT">
			<summary>
			Viewport Sprite. See also: WidgetSpriteViewport.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_SPRITE_NODE">
			<summary>
			Node Sprite. See also: WidgetSpriteNode.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_MENU_BAR">
			<summary>
			Menu bar. See also: WidgetMenuBar.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_MENU_BOX">
			<summary>
			Menu. See also: WidgetMenuBox.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_WINDOW">
			<summary>
			Window. See also: WidgetWindow.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_DIALOG">
			<summary>
			Dialog window. See also: WidgetDialog.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_DIALOG_MESSAGE">
			<summary>
			Message Dialog. See also: WidgetDialogMessage.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_DIALOG_FILE">
			<summary>
			File Dialog. See also: WidgetDialogFile.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_DIALOG_COLOR">
			<summary>
			Color Dialog. See also: WidgetDialogColor.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_DIALOG_IMAGE">
			<summary>
			Image Dialog. See also: WidgetDialogImage.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_MANIPULATOR">
			<summary>
			Manipulator widget. See also: WidgetManipulator.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_MANIPULATOR_TRANSLATOR">
			<summary>
			Translator Manipulator. See also: WidgetManipulatorTranslator.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_MANIPULATOR_ROTATOR">
			<summary>
			Rotator Manipulator. See also: WidgetManipulatorRotator.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_MANIPULATOR_SCALER">
			<summary>
			Scaler Manipulator. See also: WidgetManipulatorScaler.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_EXTERN">
			<summary>
			External widget.
		</summary>
		</member>
		<member name="F:Unigine.Widget.WIDGET_ENGINE">
			<summary>
			Engine-specific widget (manipulator). See also: WidgetManipulator.
		</summary>
		</member>
		<member name="F:Unigine.Widget.NUM_WIDGETS">
			<summary>
			Total number of widget types.
		</summary>
		</member>
		<member name="F:Unigine.Widget.LIFETIME_WORLD">
			<summary>
			Lifetime of the widget or user interface is managed by the world. The widget/user interface will be deleted automatically on closing the world.
		</summary>
		</member>
		<member name="F:Unigine.Widget.LIFETIME_WINDOW">
			<summary>
			Lifetime of the widget or user interface is managed by the window. The widget/user interface will be deleted automatically on deleting the window.
		</summary>
		</member>
		<member name="F:Unigine.Widget.LIFETIME_ENGINE">
			<summary>
			Lifetime of the widget or user interface is managed by the Engine. The widget/user interface will be deleted automatically on Engine shutdown.					When using this lifetime management type, the GUI instance can be empty for the widget: it will be assigned automatically when adding the widget to a window. For a user interface, the Gui instance must be set via the setGui() method.
		</summary>
		</member>
		<member name="F:Unigine.Widget.LIFETIME_MANUAL">
			<summary>
			Lifetime of the widget or user interface is managed by the user. The widget/user interface should be deleted manually.					When using this lifetime management type, the GUI instance can be empty for the widget: it will be assigned automatically when adding the widget to a window. For a user interface, the Gui instance must be set via the setGui() method.
		</summary>
		</member>
		<member name="M:Unigine.WidgetButton.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a button with a given label and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new button will belong. </param>
			<param name="str"> Button label. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.#ctor(char)">
			<summary>
			Constructor. Creates a button with a given label and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Button label. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.setBackground(int)">
			<summary>
			Sets a value indicating if a background texture should be rendered for the button. By default, the background texture is always rendered. The default is 1.
			</summary> 
			<param name="background"> 1 to render the background texture, 0 not to render. The default is 1. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getBackground const">
			<summary>
			Returns a value indicating if a background texture is rendered for the button. The default is 1.
			</summary>  
			<returns>1 if a background texture is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets a new image for the button.The button is automatically stretched or shrinked to match the size of the current image. When you resize the button the size of the image does not change. In case you need to create a type of button widget with an auto-adjusted image size, or image rotation, please consider Widget Sprite instead.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getImage const">
			<summary>
			Returns the current button image.The button is automatically stretched or shrinked to match the size of the current image. When you resize the button the size of the image does not change. In case you need to create a type of button widget with an auto-adjusted image size, or image rotation, please consider Widget Sprite instead.
			</summary>  
			<returns>Button image.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setText(char)">
			<summary>
			Sets a button text label.
			</summary> 
			<param name="text"> Button label. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getText const">
			<summary>
			Returns the button text label.
			</summary>  
			<returns>Button label.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setTextAlign(int)">
			<summary>
			Sets alignment of the button label.
			</summary> 
			<param name="align"> One of the Gui:: Enumeration with ALIGN_* prefixes. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getTextAlign const">
			<summary>
			Returns alignment of the button label.
			</summary>  
			<returns>Alignment of the button label: one of the Gui:: Enumeration with ALIGN_* prefixes.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setTexture(char)">
			<summary>
			Sets a new texture to be used as the button image.The button is automatically stretched or shrinked to match the size of the current image. When you resize the button the size of the image does not change. In case you need to create a type of button widget with an auto-adjusted image size, or image rotation, please consider Widget Sprite instead.
			</summary> 
			<param name="texture"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getTexture const">
			<summary>
			Returns the path to the current button image texture.The button is automatically stretched or shrinked to match the size of the current image. When you resize the button the size of the image does not change. In case you need to create a type of button widget with an auto-adjusted image size, or image rotation, please consider Widget Sprite instead.
			</summary>  
			<returns>Path to the button image texture.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setToggleable(bool)">
			<summary>
			Sets a value indicating if the button is a toggle button or a simple one.
			</summary> 
			<param name="toggleable"> 1 to make the button a toggle button, 0 to make it a simple one. The default is 0. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.isToggleable const">
			<summary>
			Returns a value indicating if the button is a toggle button or a simple one. The default is 0.
			</summary>  
			<returns>1 if the button is a toggle button; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setToggled(bool)">
			<summary>
			Sets a state of the toggle button.
			</summary> 
			<param name="toggled"> 1 to press the button, 0 to release it. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.isToggled const">
			<summary>
			Returns a value indicating if the toggle button is pressed.
			</summary>  
			<returns>1 if the button is pressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setButtonColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for the button.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getButtonColor const">
			<summary>
			Returns the current color for the button.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setStyleImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets a button skin image.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getStyleImage const">
			<summary>
			Returns the button skin image.
			</summary>  
			<returns>Button skin image.</returns>
		</member>
		<member name="M:Unigine.WidgetButton.setStyleTexture(char)">
			<summary>
			Sets a button skin texture.
			</summary> 
			<param name="texture"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetButton.getStyleTexture const">
			<summary>
			Returns the path to the button skin texture.
			</summary>  
			<returns>Path to a texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a new canvas widget and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the canvas will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.#ctor">
			<summary>
			Constructor. Creates a new canvas widget and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetCanvas.setColor(Unigine.Math.vec4)">
			<summary>
			Sets a background color for the canvas widget.
			</summary> 
			<param name="color"> Background color. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getColor const">
			<summary>
			Returns the background color of the canvas widget.
			</summary>  
			<returns>Background color.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the image used as the default texture for new polygons added to the canvas widget.
			</summary> 
			<param name="image"> Texture image. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getImage const">
			<summary>
			Returns the current default texture image used for new polygons added to the canvas widget.
			</summary>  
			<returns>Texture image.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getLine(int) const">
			<summary>
			Returns the canvas element ID of the line by its number.
			</summary> 
			<param name="num"> Line number in range from 0 to the total number lines. </param> 
			<returns>Canvas element ID of the line.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setLineColor(int,Unigine.Math.vec4)">
			<summary>
			Updates the color of the specified line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="color"> Line color. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getLineColor(int) const">
			<summary>
			Returns the current color of the specified line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
			<returns>Line color.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getLineIndex(int,int) const">
			<summary>
			Returns the index of the point of the line segment by its number.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="num"> The number of the index of the point of the line segment. </param> 
			<returns>Index of the point of the line segment.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getLineIntersection(int,int,float) const">
			<summary>
			Checks whether the specified point (e.g. the mouse cursor) intersects with lines drawn in the canvas widget.
			</summary> 
			<param name="x"> X coordinate of the point. </param>
			<param name="y"> Y coordinate of the point. </param>
			<param name="distance"> Point radius acceptable for detecting intersection. </param> 
			<returns>Number of the first intersected line with the highest rendering order in the array of lines. If no intersections are found, -1 will be returned.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setLineOrder(int,int)">
			<summary>
			Updates the rendering order of the given line (the higher the value, the later the line will be rendered atop other elements).
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="order"> Rendering order. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getLineOrder(int) const">
			<summary>
			Returns the rendering order of the given line (the higher the value, the later the line is rendered atop other elements).
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
			<returns>Rendering order.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getLinePoint(int,int) const">
			<summary>
			Returns the coordinates of the specified line segment point.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="num"> Number of the line segment point. </param> 
			<returns>Segment point coordinates.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setLineTransform(int,Unigine.Math.mat4)">
			<summary>
			Updates the transformation matrix of the specified line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getLineTransform(int) const">
			<summary>
			Returns the current transformation matrix of the specified line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumLineIndices(int) const">
			<summary>
			Returns the total number of indices set for the points that form line segments.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
			<returns>The number of indices set for the points that form line segments.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumLinePoints(int) const">
			<summary>
			Returns the number of the points that create line segments.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
			<returns>Number of line segment points.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumLines const">
			<summary>
			Returns the number of lines drawn in the canvas widget.
			</summary>  
			<returns>Number of lines.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumPolygonIndices(int) const">
			<summary>
			Returns the total number of indices set for points of the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>The number of indices set for points that form polygons.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumPolygonPoints(int) const">
			<summary>
			Returns the number of points that form the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Number of polygon points.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumPolygons const">
			<summary>
			Returns the number of polygons drawn in the canvas widget.
			</summary>  
			<returns>Number of polygons.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getNumTexts const">
			<summary>
			Returns the number of text strings drawn in the canvas widget.
			</summary>  
			<returns>Number of text strings.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygon(int) const">
			<summary>
			Returns the canvas element ID of the polygon by its index.
			</summary> 
			<param name="num"> Polygon number in range from 0 to the total number of polygons. </param> 
			<returns>Canvas element ID of the polygon.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonBlendDestFunc(int) const">
			<summary>
			Returns the blending mode of the destination color for the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Blending mode of the destination color (one of the BLEND_*).</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonBlendFunc(int,int,int)">
			<summary>
			Updates the blending coefficients for specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="src"> Blending mode for the source screen buffer color (one of the BLEND_*). </param>
			<param name="dest"> Blending mode for the destination polygon color (one of the BLEND_*). </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonBlendSrcFunc(int) const">
			<summary>
			Returns the blending mode of the source screen buffer color for the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Blending mode of the source screen buffer color (one of the BLEND_*).</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonColor(int,Unigine.Math.vec4)">
			<summary>
			Updates the color of the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="color"> Polygon color. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonColor(int) const">
			<summary>
			Returns the current color of the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Polygon color.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonImage(int,Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an image for a given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonImage(int)">
			<summary>
			Returns the current image set for a given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Current image set for the specified polygon.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonIndex(int,int) const">
			<summary>
			Returns the index of the point of the polygon by its number.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="num"> The number of the index of the point of the polygon. </param> 
			<returns>Index of the point of the polygon.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonIntersection(int,int) const">
			<summary>
			Checks whether the specified point (e.g. the mouse cursor) intersects with widget polygons.
			</summary> 
			<param name="x"> X coordinate of the point. </param>
			<param name="y"> Y coordinate of the point. </param> 
			<returns>Number of the first intersected polygon with the highest rendering order in the array of polygons. If no intersections are found, -1 will be returned.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonOrder(int,int)">
			<summary>
			Updates the rendering order of the given polygon (the higher the value, the later the polygon will be rendered atop other elements).
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="order"> Rendering order. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonOrder(int) const">
			<summary>
			Returns the rendering order of the given polygon (the higher the value, the later the polygon is rendered atop other elements).
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Rendering order.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonPoint(int,int) const">
			<summary>
			Returns the coordinates of the specified polygon point.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="num"> Number of the polygon point. </param> 
			<returns>Polygon point coordinates.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonTexCoord(int,Unigine.Math.vec2)">
			<summary>
			Updates the texture coordinates for the last added point of the polygon. Before calling this function, the point should be added with addPolygonPoint().
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="texcoord"> Texture coordinates for the point. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonTexCoord(int,int) const">
			<summary>
			Returns the texture coordinates of the specified point of the polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="num"> Number of the polygon point. </param> 
			<returns>Texture coordinates of the point.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonTexture(int,char)">
			<summary>
			Sets a texture from a file for the given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonTexture(int) const">
			<summary>
			Returns the current texture set for a given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonTransform(int,Unigine.Math.mat4)">
			<summary>
			Updates the transformation matrix of the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonTransform(int) const">
			<summary>
			Returns the current transformation matrix of the specified polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonTwoSided(int,int)">
			<summary>
			Sets polygon two sided option.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="two_sided"> two sided option. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonTwoSided(int) const">
			<summary>
			Gets polygon two sided option.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>Returns two sided option.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonWrapRepeat(int,int)">
			<summary>
			Sets texture tiling for a given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="repeat"> Positive number to enable texture tiling; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonWrapRepeat(int) const">
			<summary>
			Returns a value indicating if texture tiling is enabled for the given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>1 if texture tiling is enabled; 0 if disabled.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getText(int) const">
			<summary>
			Returns the canvas element ID of the text string by its number.
			</summary> 
			<param name="num"> Number of the text element. </param> 
			<returns>Canvas element ID of the text string.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextAlign(int,int)">
			<summary>
			Updates the alignment of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="align"> Text alignment. One or a combination of the Gui::ALIGN_* values (TOP, BOTTOM, LEFT, RIGHT, CENTER). </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextAlign(int) const">
			<summary>
			Returns the current alignment of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Text alignment. One or a combination of the Gui::ALIGN_* values (TOP, BOTTOM, LEFT, RIGHT, CENTER).</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextColor(int,Unigine.Math.vec4)">
			<summary>
			Updates the color of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="color"> Font color. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextColor(int) const">
			<summary>
			Returns the current color of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Font color.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextHeight(int) const">
			<summary>
			Returns the height of the given text element on the canvas widget.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Text height in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextIntersection(int,int) const">
			<summary>
			Checks whether the specified point (e.g. the mouse cursor) intersects with a bounding box of widget text.
			</summary> 
			<param name="x"> coordinate of the point. </param>
			<param name="y"> coordinate of the point. </param> 
			<returns>ID of the intersected text lines array; otherwise, -1 is returned if no intersections are found.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextOrder(int,int)">
			<summary>
			Updates the rendering order of the given text element (the higher the value, the later the text will be rendered atop other elements).
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="order"> Rendering order. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextOrder(int) const">
			<summary>
			Returns the rendering order of the given text element (the higher the value, the later the text is rendered atop other elements).
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Rendering order.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextOutline(int,int)">
			<summary>
			Sets a value indicating if the text should be rendered casting a shadow. Positive or negative values set the distance in pixels to offset the outline. The default is 0 (no outlining).
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="outline"> Outline offset:Positive values set offset in the bottom-right corner direction.Negative values set offset in the top-left corner direction (the outline will overlap widget text).0 is not to use outlining. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextOutline(int) const">
			<summary>
			Returns a value indicating if the text is rendered casting a shadow. Positive or negative values determine the distance in pixels used to offset the outline.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Positive value if the outline is offset in the bottom-right corner direction. Negative value if the outline is offset in the top-left corner direction. 0 if font is not outlined.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextPosition(int,Unigine.Math.vec2)">
			<summary>
			Updates the position of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="position"> Text position coordinates. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextPosition(int) const">
			<summary>
			Returns the current position of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Text position coordinates.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextSize(int,int)">
			<summary>
			Updates the font size of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="size"> Font size. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextSize(int) const">
			<summary>
			Returns the current font size of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Font size.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextText(int,char)">
			<summary>
			Updates the text to be drawn in the given text element on the canvas widget.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="str"> Text string. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextText(int) const">
			<summary>
			Returns the current text drawn in the given text element on the canvas widget.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Text string.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextTransform(int,Unigine.Math.mat4)">
			<summary>
			Updates the transformation matrix of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param>
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextTransform(int) const">
			<summary>
			Returns the current transformation matrix of the specified text.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTexture(char)">
			<summary>
			Sets the texture that will be used by default for new polygons added to the canvas widget.
			</summary> 
			<param name="texture"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTexture const">
			<summary>
			Returns the path to the texture used by default for new polygons added to the canvas widget.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextWidth(int) const">
			<summary>
			Returns the width of the given text element on the canvas widget.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
			<returns>Text width in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTransform(Unigine.Math.mat4)">
			<summary>
			Sets a transformation matrix applied to all primitives on the canvas widget.
			</summary> 
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTransform const">
			<summary>
			Returns the transformation matrix applied to all primitives on the canvas widget.
			</summary>  
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addLine(int)">
			<summary>
			Adds a new line to the canvas widget. By default, it is rendered in white color.
			</summary> 
			<param name="order"> Rendering order (the higher the value, the later the line will be rendered atop other elements). </param> 
			<returns>Canvas element ID for the added line.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addLineIndex(int,int)">
			<summary>
			Adds an index for the point of the line segment in the canvas widget. Notice that before adding indices, you should add all points that form the line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="index"> Index of the point of the line segment. </param> 
			<returns>The number of the added index in the array of line indices.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addLinePoint(int,Unigine.Math.vec3)">
			<summary>
			Adds a new segment to the line in the canvas widget.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="point"> Segment point coordinates. </param> 
			<returns>Number of the added line segment point.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addLinePoint(int,Unigine.Math.vec2)">
			<summary>
			Adds a new segment to the line in the canvas widget.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="point"> Segment point coordinates. </param> 
			<returns>Number of the added line segment point.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setLinePoint(int,int,Unigine.Math.vec3)">
			<summary>
			Sets a line segment in the canvas widget.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="num"> Index of the point in the array of line points. </param>
			<param name="point"> Line point coordinates. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.setLinePoint(int,int,Unigine.Math.vec2)">
			<summary>
			Sets a line segment in the canvas widget.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="num"> Index of the point in the array of line points. </param>
			<param name="point"> Line point coordinates. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.addPolygon(int)">
			<summary>
			Adds a new polygon to the canvas widget. By default, it is rendered in white color. Texture tiling mode is disabled.
			</summary> 
			<param name="polygon"> Rendering order (the higher the value, the later the polygon will be rendered atop other elements). </param> 
			<returns>Canvas element ID for the added polygon.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addPolygonIndex(int,int)">
			<summary>
			Adds an index for the point of the polygon in the canvas widget. Notice that before adding indices, you should add all points that form the polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="index"> Index of the point of the polygon. </param> 
			<returns>The number of the added index in the array of polygon indices.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addPolygonPoint(int,Unigine.Math.vec3)">
			<summary>
			Adds a new point to the polygon in the canvas widget.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="point"> Polygon point coordinates. </param> 
			<returns>Number of the added polygon point.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.addText(int)">
			<summary>
			Adds a new text string to the canvas widget. By default, it is rendered in white color. If a font size is not set for the canvas widget, a default one is used. No shadow is cast from a text (no outlining). Text width and height on the canvas widget are equal to 0.
			</summary> 
			<param name="order"> Rendering order (the higher the value, the later the text will be rendered atop other elements). </param> 
			<returns>Canvas element ID of the added text string.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.clear">
			<summary>
			Clears the canvas widget: deletes all drawn lines, polygons and text.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetCanvas.clearLineIndices(int)">
			<summary>
			Clears the array of indices set for points that form the given line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.clearLinePoints(int)">
			<summary>
			Deletes all points that make up a given line.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.clearPolygonIndices(int)">
			<summary>
			Clears the array of indices set for points that form the given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.clearPolygonPoints(int)">
			<summary>
			Deletes all points that make up a given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removeLine(int)">
			<summary>
			Removes the line from the canvas widget.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removeLineIndex(int,int)">
			<summary>
			Removes the index with the given number from the array of the line indices.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="num"> The number of the index in the array of the line indices. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removeLinePoint(int,int)">
			<summary>
			Removes the segment of the line from the canvas widget.
			</summary> 
			<param name="line"> Canvas element ID of the line. </param>
			<param name="num"> Number of the point to remove. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removePolygon(int)">
			<summary>
			Removes the polygon from the canvas widget.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removePolygonIndex(int,int)">
			<summary>
			Removes the index with the given number from the array of the polygon indices.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="num"> The number of the index in the array of the polygon indices. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removePolygonPoint(int,int)">
			<summary>
			Removes the point of the polygon from the canvas widget.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="num"> Polygon point coordinates. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.removeText(int)">
			<summary>
			Removes the text from the canvas widget.
			</summary> 
			<param name="text"> Canvas element ID of the text string. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonGPUTexture(int,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets a GPU texture for the given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param>
			<param name="texture"> GPU texture </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonGPUTexture(int) const">
			<summary>
			Returns the current GPU texture for the given polygon.
			</summary> 
			<param name="polygon"> Canvas element ID of the polygon. </param> 
			<returns>GPU texture</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setTextPixelPerfect(int,bool)">
			<summary>
			Sets the text with the given ID as pixel perfect.
			</summary> 
			<param name="text"> ID of the text. </param>
			<param name="pixel_perfect"> true to make the text pixel perfect, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.getTextPixelPerfect(int) const">
			<summary>
			Returns a value indicating if the text with the given ID is pixel perfect.
			</summary> 
			<param name="text"> ID of the text. </param> 
			<returns>true if the text is pixel perfect, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonIntersection(int,bool)">
			<summary>
			Specifies whether the polygon with the given ID will participate in the intersection check.
			</summary> 
			<param name="polygon"> ID of the polygon. </param>
			<param name="intersection"> true to make the polygon participate in the intersection check, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.isPolygonIntersection(int) const">
			<summary>
			Returns a value indicating if the polygon with the given ID participates in the intersection check.
			</summary> 
			<param name="polygon"> ID of the polygon. </param> 
			<returns>true if the polygon participates in the intersection check, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.setPolygonRender(int,bool)">
			<summary>
			Sets the rendering state for the polygon with the given ID.
			</summary> 
			<param name="polygon"> ID of the polygon. </param>
			<param name="render"> true to render the polygon, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetCanvas.isPolygonRender(int) const">
			<summary>
			Returns a value indicating if the polygon with the given ID is rendered.
			</summary> 
			<param name="polygon"> ID of the polygon. </param> 
			<returns>true if the polygon is rendered, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonTextureWidth(int) const">
			<summary>
			Returns the width of the polygon texture.
			</summary> 
			<param name="polygon"> ID of the polygon. </param> 
			<returns>Width of the polygon texture.</returns>
		</member>
		<member name="M:Unigine.WidgetCanvas.getPolygonTextureHeight(int) const">
			<summary>
			Returns the height of the polygon texture.
			</summary> 
			<param name="polygon"> ID of the polygon. </param> 
			<returns>Height of the polygon texture.</returns>
		</member>
		<member name="M:Unigine.WidgetCheckBox.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a checkbox with a given text label and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new checkbox will belong. </param>
			<param name="str"> Checkbox label. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetCheckBox.#ctor(char)">
			<summary>
			Constructor. Creates a checkbox with a given text label and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Checkbox label. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetCheckBox.setChecked(bool)">
			<summary>
			Sets a value indicating if the checkbox is selected.
			</summary> 
			<param name="checked"> 1 to check (select) the checkbox, 0 to uncheck it. </param> 
		</member>
		<member name="M:Unigine.WidgetCheckBox.isChecked const">
			<summary>
			Returns a value indicating if the checkbox is selected.
			</summary>  
			<returns>1 if the checkbox is checked (selected); otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetCheckBox.setText(char)">
			<summary>
			Sets a checkbox text label.
			</summary> 
			<param name="text"> Checkbox label. </param> 
		</member>
		<member name="M:Unigine.WidgetCheckBox.getText const">
			<summary>
			Returns the checkbox text label.
			</summary>  
			<returns>Checkbox label.</returns>
		</member>
		<member name="M:Unigine.WidgetCheckBox.setCheckedColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for the checked widget's state.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetCheckBox.getCheckedColor const">
			<summary>
			Returns the current color used for the checked widget's state.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetCheckBox.setUncheckedColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for the unchecked widget's state.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetCheckBox.getUncheckedColor const">
			<summary>
			Returns the current color used for the unchecked widget's state.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates an empty combobox and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new combobox will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.#ctor">
			<summary>
			Constructor. Creates an empty combobox and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetComboBox.setCurrentItem(int)">
			<summary>
			Sets a given item as selected.
			</summary> 
			<param name="item"> Item number. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getCurrentItem const">
			<summary>
			Returns the currently selected item.
			</summary>  
			<returns>Item number.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.getCurrentItemData const">
			<summary>
			Returns the text data of the currently selected item. The data can be used as a text identifier of the item (instead of using the item number).
			</summary>  
			<returns>Item text data.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.getCurrentItemText const">
			<summary>
			Returns a text value of the currently selected item.
			</summary>  
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an image with mini icons to be used with items. The image is a vertical strip of square icons.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getImage const">
			<summary>
			Returns the image with mini icons, which are used for the combobox items.
			</summary>  
			<returns>Image with mini icons.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setItemData(int,char)">
			<summary>
			Sets the text data for the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Item text data to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getItemData(int) const">
			<summary>
			Returns the text data of the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item text data.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setItemText(int,char)">
			<summary>
			Sets a text for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Item text. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getItemText(int) const">
			<summary>
			Returns the text of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setItemTexture(int,int)">
			<summary>
			Sets an icon for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="texture"> Zero-based ID of the icon. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getItemTexture(int) const">
			<summary>
			Returns the icon of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Zero-based ID of the icon.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.getNumItems const">
			<summary>
			Returns the number of items in the combobox.
			</summary>  
			<returns>Number of items.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setTexture(char)">
			<summary>
			Sets a texture with mini icons to be used with items. The texture is a vertical strip of square icons.
			</summary> 
			<param name="texture"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getTexture const">
			<summary>
			Returns path to the image with mini icons, which are used with combobox items.
			</summary>  
			<returns>Path to the texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.addItem(char,int)">
			<summary>
			Adds a new item with a given text and an icon.
			</summary> 
			<param name="str"> Item text. </param>
			<param name="texture"> Zero-based ID of the icon. </param> 
			<returns>Number of the added item.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.clear">
			<summary>
			Removes all items from the combobox.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetComboBox.removeItem(int)">
			<summary>
			Removes a given item from the combobox.
			</summary> 
			<param name="num"> Item number in range from 0 to the total number of items. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.setMainBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget's text box.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getMainBackgroundColor const">
			<summary>
			Returns the current background color used for the widget's text box.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setListBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget's list items.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getListBackgroundColor const">
			<summary>
			Returns the current background color used for the widget's list items.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the current selection for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the current selection for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setButtonColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for the widget's button.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getButtonColor const">
			<summary>
			Returns the current color for the widget's button.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.findItemByText(char) const">
			<summary>
			Returns the number of the item the text of which is the same as in the argument.
			</summary> 
			<param name="str"> Item text. </param> 
			<returns>Number of the item with the matching text.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setStyleTextureIcon(char)">
			<summary>
			Sets a skin to be used for icons.
			</summary> 
			<param name="icon"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getStyleTextureIcon const">
			<summary>
			Returns the path to the skin used for icons.
			</summary>  
			<returns>Path to the texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setStyleTextureButton(char)">
			<summary>
			Sets a skin to be used for buttons.
			</summary> 
			<param name="button"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getStyleTextureButton const">
			<summary>
			Returns the path to the skin used for buttons.
			</summary>  
			<returns>Path to a texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setStyleTextureSelection(char)">
			<summary>
			Sets a skin used to highlight the current selection for the widget.
			</summary> 
			<param name="selection"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getStyleTextureSelection const">
			<summary>
			Returns the skin used to highlight the current selection for the widget.
			</summary>  
			<returns>Path to a texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setStyleTextureBackground(char)">
			<summary>
			Sets a skin to be used for the widget's background.
			</summary> 
			<param name="background"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getStyleTextureBackground const">
			<summary>
			Returns the skin used for the widget's background.
			</summary>  
			<returns>Path to a texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetComboBox.setStyleTextureBorder(char)">
			<summary>
			Sets a skin to be used for the widget's border.
			</summary> 
			<param name="border"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetComboBox.getStyleTextureBorder const">
			<summary>
			Returns the skin used for the widget's border.
			</summary>  
			<returns>Path to a texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.#ctor(Unigine.Ptr{Gui},char,int,int)">
			<summary>
			Constructor. Creates a dialog window with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the dialog will belong. </param>
			<param name="str"> Window title. This is an optional parameter. </param>
			<param name="x"> Horizontal space between widgets in the window and between them and the window border. This is an optional parameter. </param>
			<param name="y"> Vertical space between widgets in the window and between them and the window border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialog.#ctor(char,int,int)">
			<summary>
			Constructor. Creates a dialog window with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Window title. This is an optional parameter. </param>
			<param name="x"> Horizontal space between widgets in the window and between them and the window border. This is an optional parameter. </param>
			<param name="y"> Vertical space between widgets in the window and between them and the window border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialog.getCancelButton const">
			<summary>
			Returns the button that cancels an action.
			</summary>  
			<returns>Cancel button.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.isCancelClicked const">
			<summary>
			Returns a value indicating if the Cancel button is clicked.
			</summary>  
			<returns>1 if the Cancel button is clicked; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.setCancelText(char)">
			<summary>
			Sets a caption of the Cancel button.
			</summary> 
			<param name="text"> Cancel button caption. </param> 
		</member>
		<member name="M:Unigine.WidgetDialog.getCancelText const">
			<summary>
			Returns the caption of the Cancel button. The default is Cancel.
			</summary>  
			<returns>Cancel button caption.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.getCloseButton const">
			<summary>
			Returns the button that closes an action.
			</summary>  
			<returns>Close button.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.isCloseClicked const">
			<summary>
			Returns a value indicating if the Close button is clicked.
			</summary>  
			<returns>1 if the Close button is clicked; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.setCloseText(char)">
			<summary>
			Sets a caption of the Close button.
			</summary> 
			<param name="text"> Close button caption. </param> 
		</member>
		<member name="M:Unigine.WidgetDialog.getCloseText const">
			<summary>
			Returns the caption of the Close button. The default is empty.
			</summary>  
			<returns>Close button caption.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.isDone const">
			<summary>
			Returns a value indicating if the dialog window is closed.
			</summary>  
			<returns>1 if the dialog window is closed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.getOkButton const">
			<summary>
			Returns the button that approves an action.
			</summary>  
			<returns>OK button.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.isOkClicked const">
			<summary>
			Returns a value indicating if the OK button is clicked.
			</summary>  
			<returns>1 if the OK button is clicked; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.setOkText(char)">
			<summary>
			Sets a caption of the OK button.
			</summary> 
			<param name="text"> OK button caption. </param> 
		</member>
		<member name="M:Unigine.WidgetDialog.getOkText const">
			<summary>
			Returns the caption of the OK button. The default is OK.
			</summary>  
			<returns>OK button caption.</returns>
		</member>
		<member name="M:Unigine.WidgetDialog.getResult const">
			<summary>
			Returns a value indicating which button has been clicked.
			</summary>  
			<returns>1 if the OK button is clicked; -1 if the Cancel button is clicked; 0 if the Close button is clicked.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogColor.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a color picker dialog with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the dialog will belong. </param>
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogColor.#ctor(char)">
			<summary>
			Constructor. Creates a color picker dialog with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogColor.setColor(Unigine.Math.vec4)">
			<summary>
			Selects a given color.
			</summary> 
			<param name="color"> Color. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogColor.getColor const">
			<summary>
			Returns the currently selected color.
			</summary>  
			<returns>Current color.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogColor.setPaletteColors(char)">
			<summary>
			Fills the palette with given colors.
			</summary> 
			<param name="colors"> A list of colors in the Web format separated with semicolons. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogColor.getPaletteColors const">
			<summary>
			Returns the current palette colors.
			</summary>  
			<returns>List of colors in the Web format separated with semicolons.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogColor.setWebColor(char)">
			<summary>
			Selects a color in the web format.
			</summary> 
			<param name="color"> Color in the web format. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogColor.getWebColor const">
			<summary>
			Returns the currently selected color in the web format.
			</summary>  
			<returns>Current color.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogFile.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a file picker dialog with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the dialog will belong. </param>
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogFile.#ctor(char)">
			<summary>
			Constructor. Creates a file picker dialog with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogFile.setFile(char)">
			<summary>
			Selects a given file in the file picker.
			</summary> 
			<param name="file"> Absolute or relative (to the data folder) path. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogFile.getFile const">
			<summary>
			Returns the currently selected file.
			</summary>  
			<returns>Path to the file.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogFile.setFilter(char)">
			<summary>
			Sets a file name filter, which is used to display files of required types only.
			</summary> 
			<param name="filter"> List of file extensions with leading dots and without additional separators, for example: .mesh.smesh. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogFile.getFilter const">
			<summary>
			Returns the currently used file name filter.
			</summary>  
			<returns>List of file extensions with leading dots and without additional separators, for example: .mesh.smesh.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogFile.setPath(char)">
			<summary>
			Sets a path to the folder, contents of which should be displayed in the file picker.
			</summary> 
			<param name="path"> Absolute or relative (to the data folder) path. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogFile.getPath const">
			<summary>
			Returns the current path to the folder, contents of which is displayed in the file picker.
			</summary>  
			<returns>Current path to the folder.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogFile.setTabs(char)">
			<summary>
			Adds a set of tabs to the file picker dialog. The tabs allow the user to interact with several folders at once.
			</summary> 
			<param name="tabs"> List of paths separated with semicolons. Each path corresponds to a tab. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogFile.getTabs const">
			<summary>
			Returns a list of tabs in the file picker dialog. The tabs allow the user to interact several folders at once.
			</summary>  
			<returns>List of paths separated with semicolons. Each path corresponds to a tab.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogImage.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates an image dialog with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the dialog will belong. </param>
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogImage.#ctor(char)">
			<summary>
			Constructor. Creates an image dialog with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogImage.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the image, preview and properties of which should be displayed in the dialog.
			</summary> 
			<param name="image"> Image to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogImage.getImage const">
			<summary>
			Returns the image, preview and properties of which should be displayed in the dialog.
			</summary>  
			<returns>Image, preview and properties of which are displayed in the dialog.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogImage.setTexture(char)">
			<summary>
			Sets a name of the image, preview and properties of which should be displayed in the dialog.
			</summary> 
			<param name="texture"> Path to an image file. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogImage.getTexture const">
			<summary>
			Returns a name of the image, preview and properties of which should be displayed in the dialog.
			</summary>  
			<returns>Path to the image file.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogMessage.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a message dialog with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the dialog will belong. </param>
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.#ctor(char)">
			<summary>
			Constructor. Creates a message dialog with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Dialog title. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.setMessageFont(char)">
			<summary>
			Sets a font that will be used to display the text message in the widget.
			</summary> 
			<param name="name"> Font name. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.setMessageFontColor(Unigine.Math.vec4)">
			<summary>
			Sets a color of the font used to display the text message in the widget.
			</summary> 
			<param name="color"> Font color. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.setMessageFontRich(int)">
			<summary>
			Sets a value indicating if rich text formatting should be used for the text message in the widget.
			</summary> 
			<param name="rich"> Positive number to use rich text formatting, 0 to use plain text formatting. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.setMessageFontSize(int)">
			<summary>
			Sets a size of the font used to display the text message in the widget.
			</summary> 
			<param name="size"> Font size. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.setMessageHidden(bool)">
			<summary>
			Hides or shows the text message in the widget.
			</summary> 
			<param name="hidden"> 1 to hide the text message, 0 to show it. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.isMessageHidden const">
			<summary>
			Returns a value indicating if a text message in the widget is hidden or shown.
			</summary>  
			<returns>Returns 1 if the text message is hidden; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetDialogMessage.setMessageText(char)">
			<summary>
			Sets a text message of the dialog.
			</summary> 
			<param name="text"> message. </param> 
		</member>
		<member name="M:Unigine.WidgetDialogMessage.getMessageText const">
			<summary>
			Returns the text message of the dialog. The default is equal to the dialog title.
			</summary>  
			<returns>Text message.</returns>
		</member>
		<member name="M:Unigine.WidgetDragArea.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a drag area and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the drag area will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetDragArea.#ctor">
			<summary>
			Default constructor.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetDragArea.setBackground(int)">
			<summary>
			Enables/disables rendering of the background for the drag area.
			</summary> 
			<param name="background"> 1 to enable background rendering, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetDragArea.getBackground const">
			<summary>
			Returns the flag indicating if background rendering is enabled or disabled for the drag area.
			</summary>  
			<returns>1 if background rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetDragArea.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for the background of the drag area.
			</summary> 
			<param name="color"> Background color. </param> 
		</member>
		<member name="M:Unigine.WidgetDragArea.getBackgroundColor const">
			<summary>
			Returns the color of the drag area background.
			</summary>  
			<returns>Background color.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a text field and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the text field will belong. </param>
			<param name="str"> Initial value. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.#ctor(char)">
			<summary>
			Constructor. Creates a text field and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Initial value. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.setBackground(int)">
			<summary>
			Sets a value indicating if a background texture should be rendered for the text field. The default is 1.
			</summary> 
			<param name="background"> Positive number to render a background texture, 0 not to render. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getBackground const">
			<summary>
			Returns a value indicating if a background texture is rendered for the text field.
			</summary>  
			<returns>Positive number if a background texture is rendered; otherwise, 0. The default is 1.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setCapacity(int)">
			<summary>
			Sets a maximum length of a string entered into the text field. The default is 1024.
			</summary> 
			<param name="capacity"> Maximum number of characters. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getCapacity const">
			<summary>
			Returns the maximum length of a string entered into the text field.
			</summary>  
			<returns>Maximum number of characters. The default is 1024.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setCursor(int)">
			<summary>
			Sets a cursor position in the text field.
			</summary> 
			<param name="cursor"> Cursor position. The provided value will be saturated in the range from 0 to text field capacity. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getCursor const">
			<summary>
			Returns the current cursor position in the text field.
			</summary>  
			<returns>Cursor position.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setEditable(bool)">
			<summary>
			Sets a value indicating if the contents of the text field can be edited. The default is 1.
			</summary> 
			<param name="editable"> Positive number to make the text field editable, 0 to make it read-only. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.isEditable const">
			<summary>
			Returns a value indicating if the contents of the text field can be edited. The default is 1.
			</summary>  
			<returns>Positive number if the text field contents can be edited; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setPassword(bool)">
			<summary>
			Turns the widget into a generic text field or into a password field. The default is 0.
			</summary> 
			<param name="password"> Positive number to make the widget a password field, 0 to make it a generic text field. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.isPassword const">
			<summary>
			Returns a value indicating if the text field is a password field (all entered characters show up as dots).
			</summary>  
			<returns>Positive number if the widget is a password field; otherwise, 0. The default is 0.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setSelection(int)">
			<summary>
			Sets a position, from which a new selection will start.
			</summary> 
			<param name="selection"> Position, from which the selection will start. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getSelection const">
			<summary>
			Returns a position, from which the selection starts.
			</summary>  
			<returns>Position, from which the selection starts.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.getSelectionText const">
			<summary>
			Returns currently selected text.
			</summary>  
			<returns>Currently selected text.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setText(char)">
			<summary>
			Sets a text for the text field.
			</summary> 
			<param name="text"> Text string. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getText const">
			<summary>
			Returns the current contents of the text field.
			</summary>  
			<returns>Text string.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setValidator(int)">
			<summary>
			Sets a validator for the text filed contents.
			</summary> 
			<param name="validator"> One of the Gui:: Enumeration with VALIDATOR_* prefixes. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getValidator const">
			<summary>
			Returns the validator associated with the text field. The default is VALIDATOR_ANY.
			</summary>  
			<returns>One of the Gui:: Enumeration with VALIDATOR_* prefixes.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.clearSelectionText">
			<summary>
			Deletes currently selected text.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetEditLine.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getBackgroundColor const">
			<summary>
			Returns the current background color for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the current selection for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the current selection for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetEditLine.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetEditLine.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a multiline text field and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the text field will belong. </param>
			<param name="str"> Initial value. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.#ctor(char)">
			<summary>
			Constructor. Creates a multiline text field and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Initial value. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.setBackground(int)">
			<summary>
			Sets a value indicating if a background texture should be rendered for the text field.
			</summary> 
			<param name="background"> number to render a background texture, 0 not to render. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getBackground const">
			<summary>
			Returns a value indicating if a background texture is rendered for the text field. The default is 1.
			</summary>  
			<returns>Positive number if a background texture is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setCursor(int,int)">
			<summary>
			Sets the cursor to a given position in a given line.
			</summary> 
			<param name="position"> Position number. </param>
			<param name="line"> Line number. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getCursorLine const">
			<summary>
			Returns a number of the current line.
			</summary>  
			<returns>Line number.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.getCursorPosition const">
			<summary>
			Returns a cursor position in the current line.
			</summary>  
			<returns>Position number.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setEditable(bool)">
			<summary>
			Sets a value indicating if the contents of the text field can be edited.
			</summary> 
			<param name="editable"> Positive number to make the text field editable, 0 to make it read-only. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.isEditable const">
			<summary>
			Returns a value indicating if the contents of the text field can be edited. The default is 1.
			</summary>  
			<returns>Positive number if the text field contents can be edited; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setLineText(int,char)">
			<summary>
			Sets new contents for a given line.
			</summary> 
			<param name="line"> Line number. </param>
			<param name="str"> Text. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getLineText(int) const">
			<summary>
			Returns the text contained in a given line.
			</summary> 
			<param name="line"> Line number. </param> 
			<returns>Text contained in the line.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.getNumLines const">
			<summary>
			Returns the number of lines in the text field.
			</summary>  
			<returns>Number of lines.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setSelection(int,int)">
			<summary>
			Sets a line and a position, from which a new selection will start.
			</summary> 
			<param name="position"> Position number. </param>
			<param name="line"> Line number. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getSelectionLine const">
			<summary>
			Returns a number of the line where selection starts.
			</summary>  
			<returns>Line number.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.getSelectionPosition const">
			<summary>
			Returns a cursor position in the line where selection starts.
			</summary>  
			<returns>Position number.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.getSelectionText const">
			<summary>
			Returns the currently selected text.
			</summary>  
			<returns>Currently selected text.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setText(char)">
			<summary>
			Sets a text for the text field.
			</summary> 
			<param name="text"> Text for the text field. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getText const">
			<summary>
			Returns the current contents of the text field.
			</summary>  
			<returns>Text contained in the text field.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setTokenColor(char,Unigine.Math.vec4)">
			<summary>
			Sets a color for a given token. The token will be highlighted with the provided color.
			</summary> 
			<param name="token"> Token (i.e. keyword, identifier, etc). </param>
			<param name="color"> Color. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getTokenColor(char) const">
			<summary>
			Returns a color, which is used to highlight a given token.
			</summary> 
			<param name="token"> Token (i.e. keyword, identifier, etc). </param> 
			<returns>Color of the current token.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setTokensColor(char,Unigine.Math.vec4)">
			<summary>
			Sets a color to given tokens. Each token will be highlighted with the provided color.
			</summary> 
			<param name="tokens"> Comma-separated list of tokens (i.e. keywords, identifiers, etc). </param>
			<param name="color"> Color. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.addLine(char)">
			<summary>
			Adds a new line to the widget.
			</summary> 
			<param name="str"> Text to add. This is an optional argument. </param> 
			<returns>Number of the added line.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.clearSelectionText">
			<summary>
			Deletes the currently selected text.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetEditText.removeLine(int)">
			<summary>
			Deletes a given line.
			</summary> 
			<param name="line"> Line number. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getBackgroundColor const">
			<summary>
			Returns the current background color for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the current selection for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the current selection for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetEditText.setNumberColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for numbers.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetEditText.getNumberColor const">
			<summary>
			Returns a color which is used for numbers.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetExternBase.getClassID">
			<summary>
			Returns a unique class ID.
			</summary>  
			<returns>Unique class ID.</returns>
		</member>
		<member name="M:Unigine.WidgetExternBase.getGui const">
			<summary>
			Returns the Gui smart pointer.
			</summary>  
			<returns>Gui smart pointer.</returns>
		</member>
		<member name="M:Unigine.WidgetExternBase.getKeyActivity(unsignedint)">
			<summary>
			Checks the keyboard key.
			</summary> 
			<param name="key"> Key code. </param> 
			<returns>Returns 1 if the key is used by widget.</returns>
		</member>
		<member name="M:Unigine.WidgetExternBase.getWidget const">
			<summary>
			Returns the Widget smart pointer.
			</summary>  
			<returns>Widget smart pointer.</returns>
		</member>
		<member name="M:Unigine.WidgetExternBase.getWidgetExtern const">
			<summary>
			Returns the WidgetExtern smart pointer.
			</summary>  
			<returns>WidgetExtern smart pointer.</returns>
		</member>
		<member name="M:Unigine.WidgetExternBase.arrange">
			<summary>
			Calculates the widget size.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetExternBase.checkCallbacks(int,int)">
			<summary>
			Checks widget callbacks.
			</summary> 
			<param name="x"> Mouse X coordinate. </param>
			<param name="y"> Mouse Y coordinate. </param> 
		</member>
		<member name="M:Unigine.WidgetExternBase.destroy">
			<summary>
			Destroys the widget resources.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetExternBase.expand(int,int)">
			<summary>
			Expands the widget size.
			</summary> 
			<param name="width"> Maximum available width. </param>
			<param name="height"> Maximum available height. </param> 
		</member>
		<member name="M:Unigine.WidgetExternBase.keyPress(unsignedint)">
			<summary>
			Keyboard press event (scan code).
			</summary> 
			<param name="key"> Key code. </param> 
		</member>
		<member name="M:Unigine.WidgetExternBase.textPress(unsignedint)">
			<summary>
			Keyboard press event (virtual key).
			</summary> 
			<param name="unicode"> Virtual key code. </param> 
		</member>
		<member name="M:Unigine.WidgetExternBase.render">
			<summary>
			Renders the widget.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetExternBase.update(float)">
			<summary>
			Widget update function.
			</summary> 
			<param name="ifps"> Inverse FPS value. </param> 
		</member>
		<member name="M:Unigine.WidgetExternBase.updatePositions">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.WidgetExtern.#ctor(Unigine.Ptr{Gui},int)">
			<summary>
			Constructor. Creates a custom user-defined widget and adds it to the specified GUI.
			</summary> 
			<param name="gui"> Gui instance, to which the widget belongs. </param>
			<param name="class_id"> Unique class ID. </param> 
		</member>
		<member name="M:Unigine.WidgetExtern.#ctor(int)">
			<summary>
			Constructor. Creates a custom user-defined widget and adds it to the Engine GUI.
			</summary> 
			<param name="class_id"> Unique class ID. </param> 
		</member>
		<member name="M:Unigine.WidgetExtern.getClassID const">
			<summary>
			Returns a unique class ID.
			</summary>  
			<returns>Unique class ID if the widget exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetGridBox.#ctor(Unigine.Ptr{Gui},int,int,int)">
			<summary>
			Constructor. Creates a grid box with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new box will belong. </param>
			<param name="num"> Number of columns in the grid. This is an optional parameter. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetGridBox.#ctor(int,int,int)">
			<summary>
			Constructor. Creates a grid box with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="num"> Number of columns in the grid. This is an optional parameter. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetGridBox.setColumnRatio(int,int)">
			<summary>
			Sets the width-to-height ratio of the specified column.
			</summary> 
			<param name="num"> Column number in range from 0 to the total number of columns. </param>
			<param name="ratio"> Width-to-height ratio. </param> 
		</member>
		<member name="M:Unigine.WidgetGridBox.getColumnRatio(int) const">
			<summary>
			Returns the current width-to-height ratio of the specified column.
			</summary> 
			<param name="num"> Column number in range from 0 to the total number of columns. </param> 
			<returns>Width-to-height ratio.</returns>
		</member>
		<member name="M:Unigine.WidgetGridBox.setNumColumns(int)">
			<summary>
			Sets a number of columns in the grid.
			</summary> 
			<param name="columns"> Number of columns. </param> 
		</member>
		<member name="M:Unigine.WidgetGridBox.getNumColumns const">
			<summary>
			Returns the number of columns in the grid.
			</summary>  
			<returns>Number of columns.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.#ctor(Unigine.Ptr{Gui},char,int,int)">
			<summary>
			Constructor. Creates a group box with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new box will belong. </param>
			<param name="str"> Box title. This is an optional parameter. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.#ctor(char,int,int)">
			<summary>
			Constructor. Creates a group box with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Box title. This is an optional parameter. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.setBackground(int)">
			<summary>
			Sets a value indicating if a background texture should be rendered for the box.
			</summary> 
			<param name="background"> 1 to render a background texture, 0 not to render. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getBackground const">
			<summary>
			Returns a value indicating if a background texture is rendered for the box.
			</summary>  
			<returns>Returns 1 if a background texture is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setBorder(int)">
			<summary>
			Sets a flag indicating if a one-pixel border is rendered around the widget content (in a shape of a box). The default is 1 (use a border).
			</summary> 
			<param name="border"> Positive number to enable a border, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getBorder const">
			<summary>
			Returns a flag indicating if a one-pixel border is rendered around the widget content (in a shape of a box). The default is 1 (use a border).
			</summary>  
			<returns>Positive number if a border is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for the global color multiplier. The default is equivalent to vec4(1,1,1,1) (white).
			</summary> 
			<param name="color"> Color to set. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getColor const">
			<summary>
			Returns a color of the global color multiplier.
			</summary>  
			<returns>Color of the color multiplier.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setPadding(int,int,int,int)">
			<summary>
			Sets widget paddings for all sides. Padding clears an area around the content of a widget (inside of it).
			</summary> 
			<param name="l"> Left-side padding in pixels. </param>
			<param name="r"> Right-side padding in pixels. </param>
			<param name="t"> Top padding in pixels. </param>
			<param name="b"> Bottom padding in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getPaddingBottom const">
			<summary>
			Returns the current bottom padding for the widget content.
			</summary>  
			<returns>Bottom padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.getPaddingLeft const">
			<summary>
			Returns the current left-side padding for the widget content.
			</summary>  
			<returns>Left-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.getPaddingRight const">
			<summary>
			Returns the current right-side padding for the widget content.
			</summary>  
			<returns>Right-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.getPaddingTop const">
			<summary>
			Returns the current top padding for the widget content.
			</summary>  
			<returns>Top padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setSpace(int,int)">
			<summary>
			Sets a space between the widgets in the box and between them and the box border.
			</summary> 
			<param name="x"> Horizontal space. If a negative value is specified, 0 will be used instead. </param>
			<param name="y"> Vertical space. If a negative value is specified, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getSpaceX const">
			<summary>
			Returns the horizontal space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Horizontal space.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.getSpaceY const">
			<summary>
			Returns the vertical space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Vertical space.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setStencil(int)">
			<summary>
			Sets a value indicating if a widget cuts off its children along its bounds. Everything that lies outside of them, is not rendered. The default is 0.
			</summary> 
			<param name="stencil"> 1 to enable cutting; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getStencil const">
			<summary>
			Returns a value indicating if a widget cuts off its children along its set bounds. Everything that lies outside of them, is not rendered. This option works only if children have ALIGN_OVERLAP flag set (otherwise, they will expand the box widget bounds and no cutting will be done).
			</summary>  
			<returns>Returns 1 if cutting is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setText(char)">
			<summary>
			Sets a box title.
			</summary> 
			<param name="text"> Box title. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getText const">
			<summary>
			Returns the box title.
			</summary>  
			<returns>Box title.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getBackgroundColor const">
			<summary>
			Returns the current background color used for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetGroupBox.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetGroupBox.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetHBox.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates a horizontal box with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new box will belong. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetHBox.#ctor(int,int)">
			<summary>
			Constructor. Creates a horizontal box with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetHPaned.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a new horizontal box with an ability to resize its children and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new container will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetHPaned.#ctor">
			<summary>
			Constructor. Creates a new horizontal box with an ability to resize its children and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetIcon.#ctor(Unigine.Ptr{Gui},char,int,int)">
			<summary>
			Constructor. Creates an icon of the specified size using a given texture and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new icon will belong. </param>
			<param name="str"> The path to a texture file. </param>
			<param name="width"> Icon width. </param>
			<param name="height"> Icon height. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.#ctor(char,int,int)">
			<summary>
			Constructor. Creates an icon of the specified size using a given texture and adds it to the Engine GUI.
			</summary> 
			<param name="str"> The path to a texture file. </param>
			<param name="width"> Icon width. </param>
			<param name="height"> Icon height. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an icon image.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.getImage const">
			<summary>
			Returns the icon image.
			</summary>  
			<returns>Icon image.</returns>
		</member>
		<member name="M:Unigine.WidgetIcon.setText(char)">
			<summary>
			Sets the floating text over the icon.
			</summary> 
			<param name="text"> Floating text. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.getText const">
			<summary>
			Returns the current floating text set to be over the icon.
			</summary>  
			<returns>Floating text.</returns>
		</member>
		<member name="M:Unigine.WidgetIcon.setTextAlign(int)">
			<summary>
			Sets the alignment flag for the floating text over the icon. The default is ALIGN_CENTER.
			</summary> 
			<param name="align"> Alignment flag: one of the Gui Enumeration with ALIGN_* prefixes. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.getTextAlign const">
			<summary>
			Returns the current alignment flag set for the floating text over the icon.
			</summary>  
			<returns>Alignment flag: one of the Gui Enumeration with ALIGN_* prefixes.</returns>
		</member>
		<member name="M:Unigine.WidgetIcon.setTexture(char)">
			<summary>
			Sets a texture to be used as the icon image.
			</summary> 
			<param name="texture"> to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.getTexture const">
			<summary>
			Returns path to the icon image.
			</summary>  
			<returns>Path to a texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetIcon.setToggleable(bool)">
			<summary>
			Sets a value indicating if the icon is a toggle button or a simple button. The default is 0.
			</summary> 
			<param name="toggleable"> Positive number to make the icon a toggle button, 0 to make it a simple button. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.isToggleable const">
			<summary>
			Returns a value indicating if the icon is a toggle button or a simple button. The default is 0.
			</summary>  
			<returns>Positive number if the icon is a toggle button; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetIcon.setToggled(bool)">
			<summary>
			Sets a state of the icon as a toggle button.
			</summary> 
			<param name="toggled"> Positive number to press the button, 0 to release it. </param> 
		</member>
		<member name="M:Unigine.WidgetIcon.isToggled const">
			<summary>
			Returns a value indicating if the icon serving as a toggle button is pressed.
			</summary>  
			<returns>Returns 1 if the button is pressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetLabel.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a new text label and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new label will belong. </param>
			<param name="str"> Text of the label. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetLabel.#ctor(char)">
			<summary>
			Constructor. Creates a new text label and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Text of the label. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetLabel.setText(char)">
			<summary>
			Sets a text for the label.
			</summary> 
			<param name="text"> Label text. </param> 
		</member>
		<member name="M:Unigine.WidgetLabel.getText const">
			<summary>
			Returns the text of the label.
			</summary>  
			<returns>Label text.</returns>
		</member>
		<member name="M:Unigine.WidgetLabel.setTextAlign(int)">
			<summary>
			Sets alignment of the label.
			</summary> 
			<param name="align"> One of the Gui:: Enumeration with ALIGN_* prefixes. </param> 
		</member>
		<member name="M:Unigine.WidgetLabel.getTextAlign const">
			<summary>
			Returns alignment of the label.
			</summary>  
			<returns>Alignment of the label: one of the Gui:: Enumeration with ALIGN_* prefixes.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates an empty list box and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new list box will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.#ctor">
			<summary>
			Constructor. Creates an empty list box and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetListBox.setCurrentItem(int)">
			<summary>
			Places focus on a given item.
			</summary> 
			<param name="item"> Item number. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getCurrentItem const">
			<summary>
			Returns the number of the item, which is currently in focus.
			</summary>  
			<returns>Item number.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.getCurrentItemData const">
			<summary>
			Returns the text data of item, which is currently in focus. The data can be used as a text identifier of the item (instead of using the item number).
			</summary>  
			<returns>Item text data.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.getCurrentItemText const">
			<summary>
			Returns the text of item, which is currently in focus.
			</summary>  
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an image with mini-icons to be used with list items. The image is a vertical strip of square icons.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getImage const">
			<summary>
			Gets the image with mini-icons, which are used with the list items.
			</summary>  
			<returns>Image with mini-icons (the vertical strip of square icons).</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemColor(int,Unigine.Math.vec4)">
			<summary>
			Sets a custom color for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="color"> Color to set. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getItemColor(int) const">
			<summary>
			Returns a color set to a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item color.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemData(int,char)">
			<summary>
			Sets the text data for the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Item text data to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getItemData(int) const">
			<summary>
			Returns the text data of the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item text data if the item is in range from 0 to the total number of items; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemSelectable(int,int)">
			<summary>
			Sets a value indicating if a given item can be selected.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="selectable"> 1 to set the item as selectable; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.isItemSelectable(int) const">
			<summary>
			Returns a value indicating if a given item can be selected.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Returns 1 if the item is selectable; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemSelected(int,int)">
			<summary>
			Sets a value indicating if a given item is selected.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="selected"> 1 to select the item, 0 to deselect it. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.isItemSelected(int) const">
			<summary>
			Returns a value indicating if a given item is selected.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Returns 1 if the item is selected; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemText(int,char)">
			<summary>
			Sets a text for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Item text to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getItemText(int) const">
			<summary>
			Returns the text of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemTexture(int,int)">
			<summary>
			Sets an icon for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="texture"> Zero-based ID of the icon (i.e. number of the icon in the icon texture). </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getItemTexture(int) const">
			<summary>
			Returns the icon of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Zero-based ID of the icon (i.e. number of the icon in the icon texture).</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setMultiSelection(bool)">
			<summary>
			Enables or disables multiple selection of items. The default is 0.
			</summary> 
			<param name="selection"> 1 to enable multiple selection, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.isMultiSelection const">
			<summary>
			Returns a value indicating if multiple selection of items is enabled. The default is 0.
			</summary>  
			<returns>Returns 1 if several items can be selected at once; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.getNumItems const">
			<summary>
			Returns the total number of items in the list box.
			</summary>  
			<returns>Number of items.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.getNumSelectedItems const">
			<summary>
			Returns the number of selected items in the box.
			</summary>  
			<returns>Number of selected items.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.getSelectedItem(int) const">
			<summary>
			Returns ID of the selected item (multi-selection mode).
			</summary> 
			<param name="num"> Number in the list of the selected items in range from 0 to the total number of the selected items. </param> 
			<returns>ID of a selected item.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setTexture(char)">
			<summary>
			Sets a texture with mini-icons to be used with list items. The texture is a vertical strip of square icons.
			</summary> 
			<param name="texture"> Path to a texture with mini-icons (the vertical strip of square icons). </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getTexture const">
			<summary>
			Returns the path to the texture with mini-icons, which are used with the list items.
			</summary>  
			<returns>Path to the texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.addItem(char,int)">
			<summary>
			Adds a new item with a given text and an icon. By default, a new item is not selected.
			</summary> 
			<param name="str"> Item text. </param>
			<param name="texture"> Zero-based ID of the icon. -1 means that an item has no icon. </param> 
			<returns>Number of the added item.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.clear">
			<summary>
			Removes all items from the list box.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetListBox.clearSelection">
			<summary>
			Clears list of selected items.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetListBox.removeItem(int)">
			<summary>
			Removes a given item from the list box.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.showItem(int)">
			<summary>
			Scrolls a list box so that a given item is visible.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the current selection for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the current selection for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setIconsEnabled(bool)">
			<summary>
			Enables the icons display next to the items.
			</summary> 
			<param name="enabled"> true to enable the icons, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.isIconsEnabled const">
			<summary>
			Returns a value indicating if the icons display is enabled.
			</summary>  
			<returns>true if the icons are enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setIconsAlphaEnabled(bool)">
			<summary>
			Enables the alpha channel of the icons.
			</summary> 
			<param name="enabled"> true to enable the alpha channel, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.isIconsAlphaEnabled const">
			<summary>
			Returns a value indicating if the alpha channel of the icons is enabled.
			</summary>  
			<returns>true if the alpha channel is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setIconsResolution(int)">
			<summary>
			Sets the resolution of the icons.
			</summary> 
			<param name="resolution"> Desired resolution. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getIconsResolution const">
			<summary>
			Returns the current resolution of the icons.
			</summary>  
			<returns>Icon resolution.</returns>
		</member>
		<member name="M:Unigine.WidgetListBox.setItemIcon(int,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets the icon for a given list item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="texture"> Icon to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetListBox.getItemIcon(int) const">
			<summary>
			Returns the icon for a given list item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Icon of the item.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.#ctor(Unigine.Ptr{Gui})">
			<summary>
			WidgetManipulator constructor. Creates a manipulator widget and adds it to the specified GUI.
			</summary> 
			<param name="gui"> Pointer to GUI. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.#ctor">
			<summary>
			WidgetManipulator constructor. Creates a manipulator widget and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetManipulator.setBasis(Unigine.Math.Mat4)">
			<summary>
			Sets a basis of the coordinate system for the handler. It can either be the world coordinates (the identity matrix) or coordinates of the parent node if the manipulated node is a child.
			</summary> 
			<param name="basis"> Matrix, with columns specifying basis vectors. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getBasis const">
			<summary>
			Returns the current basis of the coordinate system for the handler. It can either be the world coordinates (the identity matrix) or coordinates of the parent node if the manipulated node is a child.
			</summary>  
			<returns>Matrix, with columns specifying basis vectors.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for a manipulator.
			</summary> 
			<param name="color"> Manipulator color. The provided value is clamped to a range [0;1]. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getColor const">
			<summary>
			Returns the current color for a manipulator.
			</summary>  
			<returns>Manipulator color.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setMask(int)">
			<summary>
			Hides axis arrows (along X, Y or Z) of the handler.
			</summary> 
			<param name="mask"> 3-bit mask for axes. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getMask const">
			<summary>
			Returns a mask that hides axis arrows (along X, Y or Z) of the handler.
			</summary>  
			<returns>3-bit mask for axes.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setModelview(Unigine.Math.Mat4)">
			<summary>
			Sets a model-view matrix for the handler.
			</summary> 
			<param name="modelview"> Model-view matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getModelview const">
			<summary>
			Returns the current projection matrix of the handler.
			</summary>  
			<returns>Model-view matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setProjection(Unigine.Math.mat4)">
			<summary>
			Sets a projection matrix for the handler.
			</summary> 
			<param name="projection"> Projection matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getProjection const">
			<summary>
			Returns the current model-view matrix of the handler.
			</summary>  
			<returns>Projection matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setRenderGui(Unigine.Ptr{Gui})">
			<summary>
			Sets the render GUI.
			</summary> 
			<param name="gui"> GUI smart pointer. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getRenderGui const">
			<summary>
			Returns the current render GUI.
			</summary>  
			<returns>GUI smart pointer.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setSize(int)">
			<summary>
			Sets a handle size of the manipulator. Depending on the handle shape, this can be a radius or an altitude.
			</summary> 
			<param name="size"> Size in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getSize const">
			<summary>
			Returns the current handle size of the manipulator. Depending on the handle shape, this can be a radius or an altitude.
			</summary>  
			<returns>Size in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setStep(float)">
			<summary>
			Sets a step, which is used to align objects.
			</summary> 
			<param name="step"> Step in units. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getStep const">
			<summary>
			Returns a step, which is used to align objects.
			</summary>  
			<returns>Step in units.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.setTransform(Unigine.Math.Mat4)">
			<summary>
			Sets a transformation matrix for the handler.
			</summary> 
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulator.getTransform const">
			<summary>
			Returns the current transformation matrix of the handler.
			</summary>  
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.getFocusedAxis const">
			<summary>
			Returns the number of the manipulator axis, that is currently in focus.
			</summary>  
			<returns>Number of the manipulator axis, that is currently in focus. The values depend on the manipulator's type:WidgetManipulatorRotator: one of the AXIS_* variables.WidgetManipulatorScaler: one of the AXIS_* variables.WidgetManipulatorTranslator: one of the AXIS_* variables.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.isFocusAxis const">
			<summary>
			Returns a value indicating if any axis of the manipulator is currently in focus.
			</summary>  
			<returns>true if any axis of the manipulator is currently in focus; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetManipulator.isHoverAxis const">
			<summary>
			Returns a value indicating if any axis of the manipulator is currently hovered.
			</summary>  
			<returns>true if any axis of the manipulator is currently hovered; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.WidgetManipulator.MASK_X">
			<summary>
			Bit mask for a X axis of the manipulator.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulator.MASK_XYZ">
			<summary>
			3-bit mask for axes of the manipulator.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulator.MASK_Y">
			<summary>
			Bit mask for a Y axis of the manipulator.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulator.MASK_Z">
			<summary>
			Bit mask for a Z axis of the manipulator.
		</summary>
		</member>
		<member name="M:Unigine.WidgetManipulatorRotator.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a rotating manipulator and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the rotator will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulatorRotator.#ctor">
			<summary>
			Constructor. Creates a rotating manipulator and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="F:Unigine.WidgetManipulatorRotator.AXIS_UNKNOWN">
			<summary>
			The selected axis of the manipulator is undefined.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorRotator.AXIS_X">
			<summary>
			The manipulator has the X axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorRotator.AXIS_Y">
			<summary>
			The manipulator has the Y axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorRotator.AXIS_Z">
			<summary>
			The manipulator has the Z axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorRotator.AXIS_T">
			<summary>
			The manipulator is controlled by the trackball.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorRotator.NUM_AXIS">
			<summary>
			Total number of axes of the manipulator.
		</summary>
		</member>
		<member name="M:Unigine.WidgetManipulatorScaler.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a scaling manipulator and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the scaler will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulatorScaler.#ctor">
			<summary>
			Constructor. Creates a scaling manipulator and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="F:Unigine.WidgetManipulatorScaler.AXIS_UNKNOWN">
			<summary>
			The selected axis of the manipulator is undefined.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorScaler.AXIS_X">
			<summary>
			The manipulator has the X axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorScaler.AXIS_Y">
			<summary>
			The manipulator has the Y axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorScaler.AXIS_Z">
			<summary>
			The manipulator has the Z axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorScaler.AXIS_XYZ">
			<summary>
			The manipulator has three axes selected: X, Y and Z.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorScaler.NUM_AXIS">
			<summary>
			Total number of axes of the manipulator.
		</summary>
		</member>
		<member name="M:Unigine.WidgetManipulatorTranslator.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a moving manipulator and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the translator will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetManipulatorTranslator.#ctor">
			<summary>
			Constructor. Creates a moving manipulator and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_UNKNOWN">
			<summary>
			The selected axis of the manipulator is undefined.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_X">
			<summary>
			The manipulator has the X axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_Y">
			<summary>
			The manipulator has the Y axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_Z">
			<summary>
			The manipulator has the Z axis selected.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_XY">
			<summary>
			The manipulator has two axes selected: X and Y.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_YZ">
			<summary>
			The manipulator has two axes selected: Y and Z.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.AXIS_ZX">
			<summary>
			The manipulator has two axes selected: Z and X.
		</summary>
		</member>
		<member name="F:Unigine.WidgetManipulatorTranslator.NUM_AXIS">
			<summary>
			Total number of axes of the manipulator.
		</summary>
		</member>
		<member name="M:Unigine.WidgetMenuBar.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates an empty menu bar and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the menu bar will belong. </param>
			<param name="x"> Offset along the X axis. </param>
			<param name="y"> Offset along the Y axis. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.#ctor(int,int)">
			<summary>
			Constructor. Creates an empty menu bar and adds it to the Engine GUI.
			</summary> 
			<param name="x"> Offset along the X axis. </param>
			<param name="y"> Offset along the Y axis. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.setItemData(int,char)">
			<summary>
			Sets the text data for the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param>
			<param name="str"> Item text data to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.getItemData(int) const">
			<summary>
			Returns the text data of the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item text data.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.setItemEnabled(int,bool)">
			<summary>
			Sets an enabled flag for the item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="enabled"> Enabled flag:1 - Item is enabled.0 - Item is disabled. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.isItemEnabled(int) const">
			<summary>
			Returns a value indicating if the given item is enabled.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param> 
			<returns>1 if the item is enabled; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.setItemMenu(int,Unigine.Ptr{WidgetMenuBox})">
			<summary>
			Sets a menu for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param>
			<param name="menu"> Menu box. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.getItemMenu(int) const">
			<summary>
			Returns the menu of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param> 
			<returns>Menu box.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.setItemSpace(int,int)">
			<summary>
			Sets a space between the given menu item and the next item located to the right.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param>
			<param name="space"> Item space to set, in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.getItemSpace(int) const">
			<summary>
			Returns the space between the given menu item and the next item located to the right.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param> 
			<returns>Item space, in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.setItemText(int,char)">
			<summary>
			Sets a title for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param>
			<param name="str"> Menu title. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.getItemText(int) const">
			<summary>
			Returns the title of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param> 
			<returns>Item title.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.getNumItems const">
			<summary>
			Returns the number of items in the menu bar.
			</summary>  
			<returns>Number of items.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.setSpace(int,int)">
			<summary>
			Sets a space between menu items and between them and menu borders.
			</summary> 
			<param name="x"> Horizontal space, in pixels. If a negative value is provided, 0 will be used instead. </param>
			<param name="y"> Vertical space, in pixels. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.getSpaceX const">
			<summary>
			Returns the horizontal space between menu items and menu borders.
			</summary>  
			<returns>Horizontal space, in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.getSpaceY const">
			<summary>
			Returns the vertical space between menu items and menu borders.
			</summary>  
			<returns>Vertical space, in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.addItem(char)">
			<summary>
			Adds an empty menu with a given title.
			</summary> 
			<param name="str"> Menu title. </param> 
			<returns>Number of the added menu.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.addItem(char,Unigine.Ptr{WidgetMenuBox})">
			<summary>
			Adds an empty menu with a given title.
			</summary> 
			<param name="str"> Menu title. </param>
			<param name="menu"> Menu box. </param> 
			<returns>Number of the added menu.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBar.clear">
			<summary>
			Removes all menus from the menu bar.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetMenuBar.removeItem(int)">
			<summary>
			Removes a given item from the menu bar.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu bar items. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the current selection for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBar.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the current selection for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates an empty menu box with specified spacing between menu items as well as items and menu borders and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the menu will belong. </param>
			<param name="x"> Horizontal space. </param>
			<param name="y"> Vertical space. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.#ctor(int,int)">
			<summary>
			Constructor. Creates an empty menu box with specified spacing between menu items as well as items and menu borders and adds it to the Engine GUI.
			</summary> 
			<param name="x"> Horizontal space. </param>
			<param name="y"> Vertical space. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.setCurrentItem(int)">
			<summary>
			Sets the item that is clicked last.
			</summary> 
			<param name="item"> Item number. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getCurrentItem const">
			<summary>
			Returns the item that is clicked last.
			</summary>  
			<returns>Item number.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.getCurrentItemData const">
			<summary>
			Returns the text data of the item that is clicked last. The data can be used as a text identifier of the item (instead of using the item number).
			</summary>  
			<returns>Item text data as a string, if the item is in range from 0 to the total number of items; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.getCurrentItemText const">
			<summary>
			Returns the text of the item that is clicked last.
			</summary>  
			<returns>Item text if the item is in range from 0 to the total number of items; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an image with mini icons to be used with items. The image is a vertical strip of square icons.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getImage const">
			<summary>
			Gets the image with mini icons that are used with menu items.
			</summary>  
			<returns>Image with mini icons (the vertical strip of square icons).</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemData(int,char)">
			<summary>
			Sets the text data for a given item. The data can be used as a text identifier of the item (instead of using the number of the item).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Item text data to set. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getItemData(int) const">
			<summary>
			Returns the text data of the item with the specified number. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item text data.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemEnabled(int,bool)">
			<summary>
			Sets a value indicating if a given item is enabled (i.e. can be clicked).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="enabled"> Positive number to enable the item, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.isItemEnabled(int) const">
			<summary>
			Returns a value indicating if a given item is enabled (i.e. can be clicked).
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Positive number if the item is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemSelectable(int,int)">
			<summary>
			Sets a value indicating if a given item can be selected.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="selectable"> 1 to set the item as selectable; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.isItemSelectable(int) const">
			<summary>
			Returns a value indicating if the given item can be selected. By default, the item is selectable.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Returns 1 if the item is selectable; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemSeparator(int,int)">
			<summary>
			Adds or removes a separator after a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="separator"> Positive number to add a separator, 0 to remove it. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.isItemSeparator(int) const">
			<summary>
			Checks whether a separator is placed after the given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Positive number if separator is placed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemSpace(int,int)">
			<summary>
			Sets a space after the given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="space"> Item space to set. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getItemSpace(int) const">
			<summary>
			Returns the space after the given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Item space.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemText(int,char)">
			<summary>
			Sets a text for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Item text. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getItemText(int) const">
			<summary>
			Returns the text of a given item in range from 0 to the total number of items.
			</summary> 
			<param name="item"> Item number. </param> 
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemTexture(int,int)">
			<summary>
			Sets an icon for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="texture"> Zero-based ID of the icon (i.e. number of the icon in the icon texture). </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getItemTexture(int) const">
			<summary>
			Returns the icon of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Zero-based ID of the icon (i.e. number of the icon in the icon texture).</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemToolTip(int,char)">
			<summary>
			Sets a tooltip for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="str"> Text of a tooltip to set. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getItemToolTip(int) const">
			<summary>
			Returns the tooltip of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
			<returns>Text of the item tooltip.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setItemWidget(int,Unigine.Ptr{Unigine.Widget})">
			<summary>
			Sets a menu widget for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu items. </param>
			<param name="w"> Menu widget. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getItemWidget(int) const">
			<summary>
			Returns the menu widget of a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of menu items. </param> 
			<returns>Menu widget.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.getNumItems const">
			<summary>
			Returns the total number of items in the menu.
			</summary>  
			<returns>Number of items.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setSpace(int,int)">
			<summary>
			Sets a space between menu items and between them and menu borders.
			</summary> 
			<param name="x"> Horizontal space. If a negative value is provided, 0 will be used instead. </param>
			<param name="y"> Vertical space. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getSpaceX const">
			<summary>
			Returns the horizontal space between menu items and between them and menu borders.
			</summary>  
			<returns>Horizontal space.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.getSpaceY const">
			<summary>
			Returns the vertical space between menu items and between them and menu borders.
			</summary>  
			<returns>Vertical space.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setTexture(char)">
			<summary>
			Sets a texture with mini icons to be used with items. The texture is a vertical strip of square icons.
			</summary> 
			<param name="texture"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getTexture const">
			<summary>
			Returns the path to the texture with mini icons, which are used with the list items. The texture is a vertical strip of square icons.
			</summary>  
			<returns>Path to the texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.addItem(char,int)">
			<summary>
			Adds a new item with a given text and an icon.
			</summary> 
			<param name="str"> Item text. </param>
			<param name="texture"> Zero-based ID of the icon (i.e. number of the icon in the icon texture). -1 means that an item has no icon. </param> 
			<returns>Number of the added item.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.clear">
			<summary>
			Removes all items from the menu.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetMenuBox.removeItem(int)">
			<summary>
			Removes a given item from the menu.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getBackgroundColor const">
			<summary>
			Returns the current background color used for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the selection for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the selection for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setCurrentItemHighlight(bool)">
			<summary>
			Sets the highlight flag for the item that is clicked last.
			</summary> 
			<param name="highlight"> true to enable highlight; false to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.isCurrentItemHighlight const">
			<summary>
			Returns the highlight flag for the item that is clicked last.
			</summary>  
			<returns>true if highlight is enabled; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.setCurrentItemColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of the highlight for item that is clicked last. The highlight state should be enabled.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetMenuBox.getCurrentItemColor const">
			<summary>
			Returns the color of the highlight for item that is clicked last. The highlight state should be enabled.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetMenuBox.resetCurrentItem">
			<summary>
			Resets the item clicked last.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetScroll.#ctor(Unigine.Ptr{Gui},int,int,int,int)">
			<summary>
			Constructor. Creates a scroller with the given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the scroll bar will belong. </param>
			<param name="object"> Width of the object to scroll in pixels. This is an optional argument. </param>
			<param name="frame"> Width of the visible area in pixels. This is an optional argument. </param>
			<param name="step"> Step of the scroller in pixels. This is an optional argument. </param>
			<param name="value"> Initial position of the scroller. This is an optional argument. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.#ctor(int,int,int,int)">
			<summary>
			Constructor. Creates a scroller with the given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="object"> Width of the object to scroll in pixels. This is an optional argument. </param>
			<param name="frame"> Width of the visible area in pixels. This is an optional argument. </param>
			<param name="step"> Step of the scroller in pixels. This is an optional argument. </param>
			<param name="value"> Initial position of the scroller. This is an optional argument. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.setFrameSize(int)">
			<summary>
			Sets the size of the currently visible area.
			</summary> 
			<param name="size"> Size of the visible area in pixels. The minimum is 1 pixel. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getFrameSize const">
			<summary>
			Returns the size of the currently visible area.
			</summary>  
			<returns>Size of the visible area in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setObjectSize(int)">
			<summary>
			Sets the size of the whole area to be scrolled through.
			</summary> 
			<param name="size"> Size of the object being scrolled in pixels. The minimum is 1 pixel. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getObjectSize const">
			<summary>
			Returns the size of the whole area that is scrolled through.
			</summary>  
			<returns>Size of the object being scrolled in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setOrientation(int)">
			<summary>
			Sets orientation of the scroller: horizontal (by default) or vertical one.
			</summary> 
			<param name="orientation"> 1 to set horizontal orientation; 0 to set vertical one. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getOrientation const">
			<summary>
			Returns the current orientation of the scroller: horizontal or vertical one.
			</summary>  
			<returns>1 if the orientation is horizontal; 0 if it is vertical.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setStepSize(int)">
			<summary>
			Sets the step of the scroller. This step is used to increment the scroll position.
			</summary> 
			<param name="size"> Step of the scroller in pixels. The minimum is 1 pixel. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getStepSize const">
			<summary>
			Returns the step of the scroller. This step is used to increment the scroll position.
			</summary>  
			<returns>Step of the scroller in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setValue(int)">
			<summary>
			Sets a value of the scroller, i.e. its position.
			</summary> 
			<param name="value"> Position of the scroller. The minimum value is 0, the maximum value is the difference between the object width and the frame width. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getValue const">
			<summary>
			Returns the value of the scroller, i.e. its position.
			</summary>  
			<returns>Position of the scroller.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setScrollColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for the widget's scroll.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getScrollColor const">
			<summary>
			Returns the current color used for the widget's scroll.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setSliderButton(bool)">
			<summary>
			Sets the display of slider buttons.
			</summary> 
			<param name="button"> true to display slider buttons, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.isSliderButton const">
			<summary>
			Returns a value indicating if slider buttons are displayed.
			</summary>  
			<returns>true if slider buttons are displayed, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetScroll.setMouseWheelOrientation(int)">
			<summary>
			Sets orientation of the mouse wheel scroll: horizontal or vertical (by default).
			</summary> 
			<param name="orientation"> 1 to set horizontal orientation; 0 to set vertical one. </param> 
		</member>
		<member name="M:Unigine.WidgetScroll.getMouseWheelOrientation const">
			<summary>
			Returns orientation of the mouse wheel scroll: horizontal or vertical.
			</summary>  
			<returns>1 if the orientation is horizontal; 0 if it is vertical.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates a box with scrolling based on given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new box will belong. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.#ctor(int,int)">
			<summary>
			Constructor. Creates a box with scrolling based on given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.setBorder(int)">
			<summary>
			Sets a flag indicating if a one-pixel border is rendered around the widget content (in a shape of a box). The default is 1 (use a border).
			</summary> 
			<param name="border"> Positive number to enable a border, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getBorder const">
			<summary>
			Returns a flag indicating if a one-pixel border is rendered around the widget content (in a shape of a box). The default is 1 (use a border).
			</summary>  
			<returns>Positive number if a border is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setHScrollEnabled(bool)">
			<summary>
			Sets a value indicating if horizontal scrolling is enabled.
			</summary> 
			<param name="enabled"> Positive number to enable horizontal scrolling, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.isHScrollEnabled const">
			<summary>
			Returns a value indicating if horizontal scrolling is enabled.
			</summary>  
			<returns>Positive number if scrolling is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHScrollFrameSize const">
			<summary>
			Returns the width of the currently visible area.
			</summary>  
			<returns>Width of the visible area in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setHScrollHidden(WidgetScrollBox::SCROLL_RENDER_MODE)">
			<summary>
			Sets a flag indicating if a horizontal scroll bar is hidden, disabled or always rendered.
			</summary> 
			<param name="hidden"> Hide mode:0 to always render a scroll bar.1 to automatically hide a scroll bar, if necessary. If the container area is big enough to show all elements, the scroll bar is not rendered. And vice versa, if not all elements can be shown at once, a scroll bar is rendered.2 to always hide a scroll bar. In this mode, scroll bar bounds, though a bar itself is not rendered, are still taken into account when the widget bounds are calculated.3 to always hide a scroll bar and not to add scroll bar size when calculating widget bounds. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHScrollHidden const">
			<summary>
			Returns a flag indicating if a horizontal scroll bar is hidden, disabled or always rendered.
			</summary>  
			<returns>Hide flag:0 if a scroll bar is always rendered.1 if a scroll bar is automatically hidden when necessary. For example, if the container area is big enough to show all elements, the scroll bar is not rendered. And vice versa, if not all elements can be shown at once, a scroll bar is rendered.2 if a scroll bar is always hidden. In this mode, scroll bar bounds, though a bar itself is not rendered, are still taken into account when the widget bounds are calculated.3 if a scroll bar is always hidden and its size is not added to widget bounds.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHScrollObjectSize const">
			<summary>
			Returns the width of the whole object that should be scrolled.
			</summary>  
			<returns>Width of the object being scrolled in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHScrollStepSize const">
			<summary>
			Returns the step of the horizontal scroller. This step is used to increment the scroll position.
			</summary>  
			<returns>Step of the horizontal scroller in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setHScrollValue(int)">
			<summary>
			Sets a position (and also the size) of the horizontal scroller. That is, it sets the width of the currently invisible area that determines the size of the slider.
			</summary> 
			<param name="value"> Position of the scroller. The minimum value is 0, the maximum value is the difference between the object width and the frame width. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHScrollValue const">
			<summary>
			Returns the current position (and also automatically the size) of the horizontal scroller. That is, it returns the width of the currently invisible area that determines the size of the slider.
			</summary>  
			<returns>Position of the horizontal scroller.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setPadding(int,int,int,int)">
			<summary>
			Sets widget paddings for all sides. Padding clears an area around the content of a widget (inside of it).
			</summary> 
			<param name="l"> Left-side padding in pixels. </param>
			<param name="r"> Right-side padding in pixels. </param>
			<param name="t"> Top padding in pixels. </param>
			<param name="b"> Bottom padding in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getPaddingBottom const">
			<summary>
			Returns the current bottom padding for the widget content.
			</summary>  
			<returns>Bottom padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getPaddingLeft const">
			<summary>
			Returns the current left-side padding for the widget content.
			</summary>  
			<returns>Left-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getPaddingRight const">
			<summary>
			Returns the current right-side padding for the widget content.
			</summary>  
			<returns>Right-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getPaddingTop const">
			<summary>
			Returns the current top padding for the widget content.
			</summary>  
			<returns>Top padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getScrollScale const">
			<summary>
			Returns the divisor used to convert integer values into floating point values.
			</summary>  
			<returns>Divisor used to scale integers.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setSpace(int,int)">
			<summary>
			Sets a space between the widgets in the box and between them and the box border.
			</summary> 
			<param name="x"> Horizontal space. If a negative value is specified, 0 will be used instead. </param>
			<param name="y"> Vertical space. If a negative value is specified, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getSpaceX const">
			<summary>
			Returns the horizontal space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Horizontal space.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getSpaceY const">
			<summary>
			Returns the vertical space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Vertical space.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setVScrollEnabled(bool)">
			<summary>
			Sets a value indicating if vertical scrolling is enabled.
			</summary> 
			<param name="enabled"> Positive number to enable vertical scrolling, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.isVScrollEnabled const">
			<summary>
			Returns a value indicating if vertical scrolling is enabled.
			</summary>  
			<returns>Positive number if scrolling is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVScrollFrameSize const">
			<summary>
			Returns the height of the currently visible area.
			</summary>  
			<returns>Height of the visible area in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setVScrollHidden(WidgetScrollBox::SCROLL_RENDER_MODE)">
			<summary>
			Sets a flag indicating if a vertical scroll bar is hidden, disabled or always rendered.
			</summary> 
			<param name="hidden"> Hide mode:0 to always render a scroll bar.1 to automatically hide a scroll bar, if necessary. If the container area is big enough to show all elements, the scroll bar is not rendered. And vice versa, if not all elements can be shown at once, a scroll bar is rendered.2 to always hide a scroll bar. In this mode, scroll bar bounds, though a bar itself is not rendered, are still taken into account when the widget bounds are calculated.3 to always hide a scroll bar and not to add scroll bar size when calculating widget bounds. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVScrollHidden const">
			<summary>
			Returns a flag indicating if a vertical scroll bar is hidden, disabled or always rendered.
			</summary>  
			<returns>Hide flag:0 if a scroll bar is always rendered.1 if a scroll bar is automatically hidden when necessary. For example, if the container area is big enough to show all elements, the scroll bar is not rendered. And vice versa, if not all elements can be shown at once, a scroll bar is rendered.2 if a scroll bar is always hidden. In this mode, scroll bar bounds, though a bar itself is not rendered, are still taken into account when the widget bounds are calculated.3 if a scroll bar is always hidden and its size is not added to widget bounds.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVScrollObjectSize const">
			<summary>
			Returns the height of the whole object that should be scrolled.
			</summary>  
			<returns>Height of the object being scrolled in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVScrollStepSize const">
			<summary>
			Returns the step of the vertical scroller. This step is used to increment the scroll position.
			</summary>  
			<returns>Step of the vertical scroller in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setVScrollValue(int)">
			<summary>
			Sets the position (and also the size) of the vertical scroller. That is, it sets the height of the currently invisible area that determines the size of the slider.
			</summary> 
			<param name="value"> Position of the scroller. The minimum value is 0, the maximum value is the difference between the object height and the frame height. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVScrollValue const">
			<summary>
			Returns the current position (and also the size) of the vertical scroller. That is, it returns the height of the currently invisible area that determines the size of the slider.
			</summary>  
			<returns>Position of the vertical scroller.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getBackgroundColor const">
			<summary>
			Returns the current background color used for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setHscrollColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for the widget's horizontal scroll.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHscrollColor const">
			<summary>
			Returns the current color used for the widget's horizontal scroll.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setVscrollColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for the widget's vertical scroll.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVscrollColor const">
			<summary>
			Returns the current color used for the widget's vertical scroll.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.setBackground(int)">
			<summary>
			Sets a value indicating if a background should be rendered.
			</summary> 
			<param name="background"> 1 to render a background, 0 not to render. </param> 
		</member>
		<member name="M:Unigine.WidgetScrollBox.getBackground const">
			<summary>
			Returns a value indicating if the background is rendered.
			</summary>  
			<returns>1 if the background is rendered, 0 if not.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getVScroll const">
			<summary>
			Returns the vetical scroller object.
			</summary>  
			<returns>Vetical scroller.</returns>
		</member>
		<member name="M:Unigine.WidgetScrollBox.getHScroll const">
			<summary>
			Returns the horizontal scroller object.
			</summary>  
			<returns>Horizontal scroller.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.#ctor(Unigine.Ptr{Gui},int,int,int)">
			<summary>
			Constructor. Creates a slider with given properties (horizontal one by default) and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the slider will belong. </param>
			<param name="min"> Minimum value. </param>
			<param name="max"> Maximum value. </param>
			<param name="value"> Initial value. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.#ctor(int,int,int)">
			<summary>
			Constructor. Creates a slider with given properties (horizontal one by default) and adds it to the Engine GUI.
			</summary> 
			<param name="min"> Minimum value. </param>
			<param name="max"> Maximum value. </param>
			<param name="value"> Initial value. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.setButtonHeight(int)">
			<summary>
			Sets the height of the slider handle in pixels (for a vertical slider).
			</summary> 
			<param name="height"> Height of the handle in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getButtonHeight const">
			<summary>
			Returns the height of the slider handle in pixels (for a vertical slider).
			</summary>  
			<returns>Height of the handle in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setButtonWidth(int)">
			<summary>
			Sets width of the slider handle in pixels (for a horizontal slider).
			</summary> 
			<param name="width"> Width of the handle in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getButtonWidth const">
			<summary>
			Returns the width of the slider handle in pixels (for a horizontal slider).
			</summary>  
			<returns>Width of the handle in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setMaxExpand(int)">
			<summary>
			Sets the maximum value, up to which the upper limit of the range of the slider values can be expanded.
			</summary> 
			<param name="expand"> Maximum value, up to which the slider's upper limit can be raised. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getMaxExpand const">
			<summary>
			Returns the current maximum value, up to which the upper limit of the range of the slider values can be expanded. The upper limit of the slider can be expanded only if the slider is attached to an editline with the Gui::ATTACH_MAX_EXPAND flag.
			</summary>  
			<returns>Maximum value, up to which the slider's upper limit can be raised.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setMaxValue(int)">
			<summary>
			Sets the maximum value for the slider.
			</summary> 
			<param name="value"> Maximum value. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getMaxValue const">
			<summary>
			Returns the maximum value of the slider.
			</summary>  
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setMinExpand(int)">
			<summary>
			Sets the minimum value, up to which the lower limit of the range of the slider values can be expanded.
			</summary> 
			<param name="expand"> Minimum value, up to which the slider's lower limit can be dropped. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getMinExpand const">
			<summary>
			Returns the minimum value, up to which the lower limit of the range of the slider values can be expanded. The lower limit of the slider can be expanded only if the slider is attached to an editline with the Gui::ATTACH_MIN_EXPAND flag.
			</summary>  
			<returns>Minimum value, up to which the slider's lower limit can be dropped.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setMinValue(int)">
			<summary>
			Sets the minimum value for the slider.
			</summary> 
			<param name="value"> Minimum value. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getMinValue const">
			<summary>
			Returns the minimum value of the slider.
			</summary>  
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setOrientation(int)">
			<summary>
			Sets orientation of the slider: horizontal (by default) or vertical one.
			</summary> 
			<param name="orientation"> 1 to set horizontal orientation; 0 to set vertical one. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getOrientation const">
			<summary>
			Returns the current orientation of the slider: horizontal or vertical one.
			</summary>  
			<returns>1 if the orientation is vertical; 0 if it is horizontal.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setValue(int)">
			<summary>
			Sets a new current value for the slider, i.e. its position.
			</summary> 
			<param name="value"> Slider value. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getValue const">
			<summary>
			Returns the current value of the slider, i.e. its position.
			</summary>  
			<returns>Current slider value.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getBackgroundColor const">
			<summary>
			Returns the current background color used for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetSlider.setButtonColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for the widget's button.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetSlider.getButtonColor const">
			<summary>
			Returns the current color for the widget's button.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetSpacer.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a spacer and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the spacer will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetSpacer.#ctor">
			<summary>
			Constructor. Creates a spacer and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetSpacer.setOrientation(int)">
			<summary>
			Sets orientation of the spacer: horizontal (by default) or vertical one.
			</summary> 
			<param name="orientation"> Positive value to set horizontal orientation; 0 to set vertical one. </param> 
		</member>
		<member name="M:Unigine.WidgetSpacer.getOrientation const">
			<summary>
			Returns the current orientation of the spacer: horizontal or vertical one.
			</summary>  
			<returns>Positive number if the orientation is vertical; 0 if it is horizontal.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.#ctor(Unigine.Ptr{Gui},int,int,int,int)">
			<summary>
			Constructor. Creates a spinbox with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the spinbox will belong. </param>
			<param name="min"> Minimum value. </param>
			<param name="max"> Maximum value. </param>
			<param name="value"> Initial value. </param>
			<param name="step"> Initial step. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.#ctor(int,int,int,int)">
			<summary>
			Constructor. Creates a spinbox with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="min"> Minimum value. </param>
			<param name="max"> Maximum value. </param>
			<param name="value"> Initial value. </param>
			<param name="step"> Initial step. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.setMaxExpand(int)">
			<summary>
			Sets the maximum value, up to which the upper limit of the range of the spinbox values can be expanded.
			</summary> 
			<param name="expand"> Maximum value, up to which the spinbox upper limit can be raised. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getMaxExpand const">
			<summary>
			Returns the current maximum value, up to which the upper limit of the range of the spinbox values can be expanded. The upper limit of the spinbox can be expanded only if the spinbox is attached to an editline with the Gui::ATTACH_MAX_EXPAND flag.
			</summary>  
			<returns>Maximum value, up to which the spinbox upper limit can be raised.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.setMaxValue(int)">
			<summary>
			Sets a maximum value of the spinbox.
			</summary> 
			<param name="value"> Maximum spinbox value. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getMaxValue const">
			<summary>
			Returns a maximum value of the spinbox.
			</summary>  
			<returns>Maximum spinbox value.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.setMinExpand(int)">
			<summary>
			Sets the minimum value, up to which the lower limit of the range of the spinbox values can be expanded.
			</summary> 
			<param name="expand"> Minimum value, up to which the spinbox lower limit can be dropped. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getMinExpand const">
			<summary>
			Returns the current minimum value, up to which the lower limit of the range of the spinbox values can be expanded. The lower limit of the spinbox can be expanded only if the spinbox is attached to an editline with the Gui::ATTACH_MIN_EXPAND flag.
			</summary>  
			<returns>Minimum value, up to which the spinbox lower limit can be dropped.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.setMinValue(int)">
			<summary>
			Sets a minimum value of the spinbox.
			</summary> 
			<param name="value"> Minimum spinbox value. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getMinValue const">
			<summary>
			Returns a minimum value of the spinbox.
			</summary>  
			<returns>Minimum spinbox value.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.setValue(int)">
			<summary>
			Updates the current value of the spinbox.
			</summary> 
			<param name="value"> New spinbox value. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getValue const">
			<summary>
			Returns the current value of the spinbox.
			</summary>  
			<returns>Current spinbox value.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.setStep(int)">
			<summary>
			Updates the current step of the spinbox.
			</summary> 
			<param name="step"> New spinbox step. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getStep const">
			<summary>
			Returns the current step of the spinbox.
			</summary>  
			<returns>Current spinbox step.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBox.setButtonColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for the widget's button.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBox.getButtonColor const">
			<summary>
			Returns the current color for the widget's button.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.#ctor(Unigine.Ptr{Gui},double,double,double,double)">
			<summary>
			Constructor. Creates a spinbox with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the spinbox will belong. </param>
			<param name="min"> Minimum value. </param>
			<param name="max"> Maximum value. </param>
			<param name="value"> Initial value. </param>
			<param name="step"> Initial step. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.#ctor(double,double,double,double)">
			<summary>
			Constructor. Creates a spinbox with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="min"> Minimum value. </param>
			<param name="max"> Maximum value. </param>
			<param name="value"> Initial value. </param>
			<param name="step"> Initial step. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setMaxExpand(double)">
			<summary>
			Sets the maximum value, up to which the upper limit of the range of the spinbox values can be expanded.
			</summary> 
			<param name="expand"> Maximum value, up to which the spinbox upper limit can be raised. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getMaxExpand const">
			<summary>
			Returns the current maximum value, up to which the upper limit of the range of the spinbox values can be expanded. The upper limit of the spinbox can be expanded only if the spinbox is attached to an editline with the Gui::ATTACH_MAX_EXPAND flag.
			</summary>  
			<returns>Maximum value, up to which the spinbox upper limit can be raised.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setMaxValue(double)">
			<summary>
			Sets a maximum value of the spinbox.
			</summary> 
			<param name="value"> Maximum spinbox value. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getMaxValue const">
			<summary>
			Returns a maximum value of the spinbox.
			</summary>  
			<returns>Maximum spinbox value.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setMinExpand(double)">
			<summary>
			Sets the minimum value, up to which the lower limit of the range of the spinbox values can be expanded.
			</summary> 
			<param name="expand"> Minimum value, up to which the spinbox lower limit can be dropped. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getMinExpand const">
			<summary>
			Returns the current minimum value, up to which the lower limit of the range of the spinbox values can be expanded. The lower limit of the spinbox can be expanded only if the spinbox is attached to an editline with the Gui::ATTACH_MIN_EXPAND flag.
			</summary>  
			<returns>Minimum value, up to which the spinbox lower limit can be dropped.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setMinValue(double)">
			<summary>
			Sets a minimum value of the spinbox.
			</summary> 
			<param name="value"> Minimum spinbox value. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getMinValue const">
			<summary>
			Returns a minimum value of the spinbox.
			</summary>  
			<returns>Minimum spinbox value.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setValue(double)">
			<summary>
			Updates the current value of the spinbox.
			</summary> 
			<param name="value"> New spinbox value. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getValue const">
			<summary>
			Returns the current value of the spinbox.
			</summary>  
			<returns>Current spinbox value.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setStep(double)">
			<summary>
			Updates the current step of the spinbox.
			</summary> 
			<param name="step"> New spinbox step. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getStep const">
			<summary>
			Returns the current step of the spinbox.
			</summary>  
			<returns>Current spinbox step.</returns>
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.setButtonColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for the widget's button.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetSpinBoxDouble.getButtonColor const">
			<summary>
			Returns the current color for the widget's button.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a sprite with a given texture and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new sprite will belong. </param>
			<param name="name"> Path to the texture. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.#ctor(char)">
			<summary>
			Constructor. Creates a sprite with a given texture and adds it to the Engine GUI.
			</summary> 
			<param name="name"> Path to the texture. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getBlendDestFunc const">
			<summary>
			Returns the blending mode of the destination widget colour set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Blending mode (one of the BLEND_* variables).</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setBlendFunc(int,int)">
			<summary>
			Sets blending coefficients for the first (bottom) layer of the sprite. This layer always exists in the sprite.
			</summary> 
			<param name="src"> Blending mode for the source screen buffer color (one of the BLEND_* variables). </param>
			<param name="dest"> Blending mode for the destination widget color (one of the BLEND_* variables). </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getBlendSrcFunc const">
			<summary>
			Returns the blending mode of the source screen buffer colour set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Blending mode (one of the BLEND_* variables).</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setBufferMask(int)">
			<summary>
			Sets a channel mask for the whole sprite. If a mask for a channel exists, one can draw in this channel.  The default is BUFFER_ALL.
			</summary> 
			<param name="mask"> Current channel mask (one of the BUFFER_* pre-defined variables). </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getBufferMask const">
			<summary>
			Returns the current channel mask for the whole sprite.
			</summary>  
			<returns>Current channel mask (one of the BUFFER_* pre-defined variables).</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for the first (bottom) layer of the sprite. This layer always exists in the sprite.
			</summary> 
			<param name="color"> Modulation color. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getColor const">
			<summary>
			Returns the current color set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Modulation color.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setImage(Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Sets a loaded into memory image for the first (bottom) layer of the sprite. This layer always exists in the sprite. An additional flag can be set in case the sprite image is going to be updated often or even each frame (for optimized memory management).
			</summary> 
			<param name="image"> Pointer to the image. </param>
			<param name="dynamic"> Positive number if the image will be updated each frame; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getImage const">
			<summary>
			Returns the loaded into memory image that is currently set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Pointer to the image.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerBlendDestFunc(int) const">
			<summary>
			Returns the blending mode of the destination widget colour set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Blending mode (one of the BLEND_* variables).</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerBlendFunc(int,int,int)">
			<summary>
			Sets blending coefficients for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="src"> Blending mode for the source color (one of the BLEND_* variables). </param>
			<param name="dest"> Blending mode for the destination color (one of the BLEND_* variables). </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerBlendSrcFunc(int) const">
			<summary>
			Returns the blending mode of the source screen buffer colour set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Blending mode (one of the BLEND_* variables).</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerBufferMask(int,int)">
			<summary>
			Sets a channel mask for a given layer of the sprite. If a mask for a channel exists, one can draw in this channel. The default is BUFFER_ALL.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="mask"> Channel mask. One of the BUFFER_* pre-defined variables. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerBufferMask(int) const">
			<summary>
			Returns the current channel mask set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Channel mask. One of the BUFFER_* pre-defined variables.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerColor(int,Unigine.Math.vec4)">
			<summary>
			Sets a color for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="color"> Modulation color. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerColor(int) const">
			<summary>
			Returns the current color set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers.. </param> 
			<returns>Modulation color.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerEnabled(int,bool)">
			<summary>
			Sets a value indicating if the layer is enabled for rendering.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="enabled"> 1 to enable the layer; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.isLayerEnabled(int) const">
			<summary>
			Returns a value indicating if the layer is enabled for rendering.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Returns 1 if the layer is enabled; 0 if disabled.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerHeight(int) const">
			<summary>
			Returns the current width of the layer (regardless of layer transformation).
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Width of the layer in units.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerImage(int,Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Sets an image for a given layer of the sprite. An additional flag can be set in case the sprite image is going to be updated often or even each frame (for optimized memory management).
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="image"> Image to set. </param>
			<param name="dynamic"> Positive number if the image will be updated each frame; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerImage(int) const">
			<summary>
			Returns the current image set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Current image set for the specified sprite layer.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerRender(int,Unigine.Ptr{Unigine.Texture},int)">
			<summary>
			Sets a texture for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="texture"> Pointer to the texture. </param>
			<param name="flipped"> Flipped flag. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerRender(int) const">
			<summary>
			Returns the current texture set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Pointer to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerTexCoord(int,Unigine.Math.vec4)">
			<summary>
			Sets the coordinates of the texture for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="texcoord"> Texture coordinates. The first pair of coordinates (x and y) is for the upper left corner, the second pair (z and w) is for the lower right corner. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerTexCoord(int) const">
			<summary>
			Returns the current coordinates of the texture set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Texture coordinates. The first pair of coordinates (x and y) is for the upper left corner, the second pair (z and w) is for the lower right corner.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerTexture(int,char)">
			<summary>
			Sets a texture for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerTexture(int) const">
			<summary>
			Returns the current texture set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerTransform(int,Unigine.Math.mat4)">
			<summary>
			Sets a transformation matrix for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerTransform(int) const">
			<summary>
			Returns the current transformation matrix set for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerWidth(int) const">
			<summary>
			Returns the current width of the layer (regardless of layer transformation).
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Width of the layer in units.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setLayerWrapRepeat(int,int)">
			<summary>
			Sets texture tiling for a given layer of the sprite. To see tiling in effect, you need to transform sprite texture coordinates via setLayerTexCoord().
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param>
			<param name="repeat"> Positive number to enable texture tiling; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getLayerWrapRepeat(int) const">
			<summary>
			Returns a value indicating if texture tiling is enabled for a given layer of the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 0 to the total number of sprite layers. </param> 
			<returns>Returns 1 if texture tiling is enabled; 0 if disabled.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.getNumLayers const">
			<summary>
			Returns the total number of layers in the sprite.
			</summary>  
			<returns>Number of layers.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setRender(Unigine.Ptr{Unigine.Texture},int)">
			<summary>
			Sets a texture to be rendered for the first (bottom) layer of the sprite.
			</summary> 
			<param name="texture"> Pointer to the texture. </param>
			<param name="flipped"> Flipped flag. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getRender const">
			<summary>
			Returns the pointer to the texture that is currently set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Pointer to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setTexCoord(Unigine.Math.vec4)">
			<summary>
			Sets the coordinates of the texture for the first (bottom) layer of the sprite. This layer always exists in the sprite.
			</summary> 
			<param name="coord"> Texture coordinates. The first pair of coordinates (x and y) is for the upper left corner, the second pair (z and w) is for the lower right corner. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getTexCoord const">
			<summary>
			Returns the current coordinates of the texture set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Texture coordinates. The first pair of coordinates (x and y) is for the upper left corner, the second pair (z and w) is for the lower right corner.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setTexture(char)">
			<summary>
			Sets a texture from a file for the first (bottom) layer of the sprite. This layer always exists in the sprite.
			</summary> 
			<param name="texture"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getTexture const">
			<summary>
			Returns the texture from a file that is currently set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setTransform(Unigine.Math.mat4)">
			<summary>
			Sets a transformation matrix for the first (bottom) layer of the sprite. This layer always exists in the sprite.
			</summary> 
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getTransform const">
			<summary>
			Returns the current transformation matrix set for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setWrapRepeat(int)">
			<summary>
			Sets texture tiling for the first (bottom) layer of the sprite. This layer always exists in the sprite. The default is 0 (no tiling). To see tiling in effect, you need to transform sprite texture coordinates via setTexCoord().
			</summary> 
			<param name="repeat"> 1 to enable texture tiling; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getWrapRepeat const">
			<summary>
			Returns a value indicating if texture tiling is enabled for the first (bottom) layer of the sprite.
			</summary>  
			<returns>Returns 1 if texture tiling is enabled; 0 if disabled.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.addLayer">
			<summary>
			Adds an empty layer with default properties to the sprite.
			</summary>  
			<returns>Number of the added layer.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.removeLayer(int)">
			<summary>
			Removes a given layer from the sprite.
			</summary> 
			<param name="layer"> Layer number in range from 1 to the total number of sprite layers. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.setIntersectionImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the specified image as a mask for defining intersections with the mouse.					The image is converted to the R8 format.
			</summary> 
			<param name="image"> Image to be used as a mask for defining intersections. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.setIntersectionImageName(char)">
			<summary>
			Sets the specified image as a mask for defining intersections with the mouse.					The image is converted to the R8 format.
			</summary> 
			<param name="name"> Name of the image to be used as a mask for defining intersections. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getIntersectionImage const">
			<summary>
			Returns the image used as a mask for defining intersections with the mouse.					The image is converted to the R8 format.
			</summary>  
			<returns>Image to be used as a mask for defining intersections.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setIntersectionImageTransform(Unigine.Math.mat4)">
			<summary>
			Sets the transformation for the image used as a mask for defining intersections with the mouse.
			</summary> 
			<param name="transform"> Image transformation. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getIntersectionImageTransform const">
			<summary>
			Returns the transformation for the image used as a mask for defining intersections with the mouse.
			</summary>  
			<returns>Image transformation.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setIntersectionImageThreshold(float)">
			<summary>
			Sets the threshold value for the pixel. If the pixel value in the intersection mask is higher that the threshold, the intersection is detected.
			</summary> 
			<param name="threshold"> Threshold value for the pixel. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.getIntersectionImageThreshold const">
			<summary>
			Sets the threshold value for the pixel. If the pixel value in the intersection mask is higher that the threshold, the intersection is detected.
			</summary>  
			<returns>Threshold value for the pixel.</returns>
		</member>
		<member name="M:Unigine.WidgetSprite.setIntersectionImageEnabled(bool)">
			<summary>
			Sets the flag defining if the intersection image is used as a mask for detecting intersections with the mouse.
			</summary> 
			<param name="enabled"> true to enable the intersection image; false to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetSprite.isIntersectionImageEnabled const">
			<summary>
			Returns the value showing if the intersection image is used as a mask for detecting intersections with the mouse.
			</summary>  
			<returns>true if the intersection image is enabled; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates a new sprite with given properties and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new sprite will belong. </param>
			<param name="width"> Width of the sprite. </param>
			<param name="height"> Height of the sprite. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.#ctor(int,int)">
			<summary>
			Constructor. Creates a new sprite with given properties and adds it to the Engine GUI.
			</summary> 
			<param name="width"> Width of the sprite. </param>
			<param name="height"> Height of the sprite. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setAspectCorrection(bool)">
			<summary>
			Sets the aspect correction for the WidgetSpriteNode. true enables correction, false disables.
			</summary> 
			<param name="correction"> true to enable aspect correction, false to disable. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.isAspectCorrection const">
			<summary>
			Returns the value indicating if the aspect correction enabled for WidgetSpriteNode.
			</summary>  
			<returns>true if the aspect correction enabled, otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setCamera(Unigine.Ptr{Unigine.Camera})">
			<summary>
			Copies parameters of the given Camera instance.
			</summary> 
			<param name="camera"> Camera to be copied. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getCamera const">
			<summary>
			Copies the instance of camera.
			</summary>  
			<returns>Camera instance.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setEnvironmentTexturePath(char)">
			<summary>
			Sets the given path for Environment texture.
			</summary> 
			<param name="path"> Texture path to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getEnvironmentTexturePath const">
			<summary>
			Returns the path of the Environment texture.
			</summary>  
			<returns>Texture path.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setIFps(float)">
			<summary>
			Sets a constant frame duration used to render WidgetSpriteNode viewport. For example, it can be used to decrease the frame rate to get higher performance.
			</summary> 
			<param name="ifps"> Frame duration in seconds (1/FPS). If a too small value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getIFps const">
			<summary>
			Returns the current frame duration used to render WidgetSpriteNode viewport.
			</summary>  
			<returns>Frame duration in seconds (1/FPS).</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setLightUsage(int)">
			<summary>
			Sets the type of the lighting for the WidgetSpriteNode.
			</summary> 
			<param name="usage"> The lighting type. Can be one of the following:USAGE_WORLD_LIGHTUSAGE_AUX_LIGHTUSAGE_NODE_LIGHT </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getLightUsage const">
			<summary>
			Returns the type of lighting for the WidgetSpriteNode.
			</summary>  
			<returns>The lighting type. Can be one of the following:USAGE_WORLD_LIGHTUSAGE_AUX_LIGHTUSAGE_NODE_LIGHT</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setModelview(Unigine.Math.Mat4)">
			<summary>
			Sets a model-view matrix.
			</summary> 
			<param name="modelview"> Model-view matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getModelview const">
			<summary>
			Returns the current model-view matrix.
			</summary>  
			<returns>Model-view matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets a node to be displayed.
			</summary> 
			<param name="node"> Node. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getNode const">
			<summary>
			Returns the current node set for displaying.
			</summary>  
			<returns>The node.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setProjection(Unigine.Math.mat4)">
			<summary>
			Sets a projection matrix.
			</summary> 
			<param name="projection"> Projection matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getProjection const">
			<summary>
			Returns the current projection matrix.
			</summary>  
			<returns>Projection matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setReflectionViewportMask(int)">
			<summary>
			Sets a bit mask for rendering reflections into the viewport. Reflections are rendered in the sprite viewport if masks of reflective materials match this one (one bit at least).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getReflectionViewportMask const">
			<summary>
			Returns the current bit mask for rendering reflections into the viewport. Reflections are rendered in the sprite viewport if masks of reflective materials match this one (one bit at least).
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setSkipFlags(int)">
			<summary>
			Sets the skip flag for the WidgetSpriteViewport viewport.
			</summary> 
			<param name="flags"> A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getSkipFlags const">
			<summary>
			Returns the skip flag set for the current viewport.
			</summary>  
			<returns>A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setTextureHeight(int)">
			<summary>
			Sets the height of the texture buffer used for a widget. This affects the widget size accordingly.
			</summary> 
			<param name="height"> Height of the texture buffer size. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getTextureHeight const">
			<summary>
			Returns the height of the texture buffer used for a widget that affects the widget size.
			</summary>  
			<returns>Height of the texture buffer size.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setTextureWidth(int)">
			<summary>
			Sets the width of the texture buffer used for a widget. This affects the widget size accordingly.
			</summary> 
			<param name="width"> Width of the texture buffer size. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getTextureWidth const">
			<summary>
			Returns the width of the texture buffer used for a widget that affects the widget size.
			</summary>  
			<returns>Width of the texture buffer size.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setUseTAAOffset(bool)">
			<summary>
			Sets a value indicating if skipping render mode check is enabled for using TAA. Can be used to ensure proper TAA calculation when rendering mode for the Viewport is set to RENDER_DEPTH.
			</summary> 
			<param name="offset"> true to enable skipping render mode check and use TAA; otherwise false. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.isUseTAAOffset const">
			<summary>
			Returns a value indicating if skipping render mode check is enabled for using TAA. Can be used to ensure proper TAA calculation when rendering mode for the Viewport is set to RENDER_DEPTH.
			</summary>  
			<returns>true if skipping render mode check is enabled for using TAA; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.setViewportMask(int)">
			<summary>
			Sets a bit mask for rendering into the viewport. Node is rendered in the sprite viewport if its mask matches this one.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.getViewportMask const">
			<summary>
			Returns the current bit mask for rendering into the viewport. Node is rendered in the sprite viewport if its mask matches this one.
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.appendSkipFlags(int)">
			<summary>
			Appends a new skip flag without rewriting already set.
			</summary> 
			<param name="flags"> A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.checkSkipFlags(int)">
			<summary>
			Checks if given flags are already set.
			</summary> 
			<param name="flags"> A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
			<returns>1 if flag/flags already set, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteNode.removeSkipFlags(int)">
			<summary>
			Removes the given skip flag without affecting other set flags.
			</summary> 
			<param name="flags"> A skip flag to be removed. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteNode.renderImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Renders the viewport into an image.
			</summary> 
			<param name="image"> Reference to a target image. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteShader.#ctor(Unigine.Ptr{Gui},char)">
			<summary>
			Constructor. Creates a new sprite with post-process material and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the sprite will belong. </param>
			<param name="name"> Post-process material name. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteShader.#ctor(char)">
			<summary>
			Constructor. Creates a new sprite with post-process material and adds it to the Engine GUI.
			</summary> 
			<param name="name"> Post-process material name. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteShader.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets a post-process material for the widget.
			</summary> 
			<param name="material"> Post-process material. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteShader.getMaterial const">
			<summary>
			Returns the current post-process material used for the widget.
			</summary>  
			<returns>Post-process material.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.#ctor(Unigine.Ptr{Gui},char,int)">
			<summary>
			Constructor. Creates a new sprite that plays video and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new sprite will belong. </param>
			<param name="name"> Path to a video file. </param>
			<param name="mode"> YUV flag: 1 if conversion to RGB should be performed by the GPU, 0 - if by the CPU. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.#ctor(char,int)">
			<summary>
			Constructor. Creates a new sprite that plays video and adds it to the Engine GUI.
			</summary> 
			<param name="name"> Path to a video file. </param>
			<param name="mode"> YUV flag: 1 if conversion to RGB should be performed by the GPU, 0 - if by the CPU. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.setAmbientSource(Unigine.Ptr{AmbientSource})">
			<summary>
			Synchronizes video playback to the ambient sound source playback.
			</summary> 
			<param name="source"> Ambient sound source according to which video playback will be synchronized. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.getAmbientSource const">
			<summary>
			Returns the ambient sound source according to which video playback is synchronized.
			</summary>  
			<returns>Ambient sound source.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.setLoop(int)">
			<summary>
			Sets a value indicating if the video should be looped.
			</summary> 
			<param name="loop"> Positive number to loop the video, 0 to play it only once. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.getLoop const">
			<summary>
			Returns a value indicating if the video is looped.
			</summary>  
			<returns>Positive number if the video is looped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.isPlaying const">
			<summary>
			Returns a value indicating if the video is being played at the moment.
			</summary>  
			<returns>1 if the video is being played; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.setSoundSource(Unigine.Ptr{SoundSource})">
			<summary>
			Synchronizes video playback to the sound source playback.
			</summary> 
			<param name="source"> Sound source according to which video playback will be synchronized. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.getSoundSource const">
			<summary>
			Returns the sound source according to which video playback is synchronized.
			</summary>  
			<returns>Sound source.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.isStopped const">
			<summary>
			Returns a value indicating if the video is stopped at the moment.
			</summary>  
			<returns>1 if the video is stopped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.setVideoTime(float)">
			<summary>
			Rewinds or fast-forwards the video to a given time.
			</summary> 
			<param name="time"> Time in seconds. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.getVideoTime const">
			<summary>
			Returns the time of the currently played frame.
			</summary>  
			<returns>Time in seconds.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.setYUV(int)">
			<summary>
			Sets a flag for YUV conversion.
			</summary> 
			<param name="yuv"> Mode flag: 1 if conversion to RGB should be performed by the GPU, 0 if it is converted by the CPU. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.getYUV const">
			<summary>
			Returns a flag for YUV conversion.
			</summary>  
			<returns>1 if conversion to RGB is performed by the GPU, 0 if it is converted by the CPU.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.play">
			<summary>
			Starts playing video.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetSpriteVideo.stop">
			<summary>
			Stops playing video. This function saves the playback position so that playing of the file can be resumed from the same point.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates a new viewport sprite with given properties and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new sprite will belong. </param>
			<param name="width"> Width of the sprite. </param>
			<param name="height"> Height of the sprite. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.#ctor(int,int)">
			<summary>
			Constructor. Creates a new viewport sprite with given properties and adds it to the Engine GUI.
			</summary> 
			<param name="width"> Width of the sprite. </param>
			<param name="height"> Height of the sprite. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setAspectCorrection(bool)">
			<summary>
			Sets the aspect correction for the WidgetSpriteViewport. true enables correction, false disables.
			</summary> 
			<param name="correction"> true to enable aspect correction, false to disable. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.isAspectCorrection const">
			<summary>
			Returns the value indicating if the aspect correction enabled for WidgetSpriteViewport.
			</summary>  
			<returns>true if the aspect correction enabled, otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setCamera(Unigine.Ptr{Unigine.Camera})">
			<summary>
			Copies parameters of the given Camera instance.
			</summary> 
			<param name="camera"> Camera to be copied. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getCamera const">
			<summary>
			Copies the instance of camera.
			</summary>  
			<returns>Camera instance.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setIFps(float)">
			<summary>
			Sets a constant frame duration used to render sprite viewport. It can be used to decrease the frame rate to get higher performance. (For example, if the widget is used to create a TV set, lowered frame rate makes no visual difference, but allows for faster rendering of the scene.)
			</summary> 
			<param name="ifps"> Frame duration in seconds (1/FPS). If a too small value is provided, 1E-6 will be used instead. 0 means that a widget is rendered at the same frame rate as the main application window. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getIFps const">
			<summary>
			Returns the current constant frame duration used to render WidgetSpriteViewport viewport.
			</summary>  
			<returns>Frame duration in seconds (1 / FPS).</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setModelview(Unigine.Math.Mat4)">
			<summary>
			Sets a model-view matrix for the associated camera.
			</summary> 
			<param name="modelview"> Model-view matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getModelview const">
			<summary>
			Returns the current model-view matrix of the associated camera.
			</summary>  
			<returns>Model-view matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setProjection(Unigine.Math.mat4)">
			<summary>
			Sets a projection matrix for the associated camera.
			</summary> 
			<param name="projection"> Projection matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getProjection const">
			<summary>
			Returns the current projection matrix of the associated camera.
			</summary>  
			<returns>Projection matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setReflectionViewportMask(int)">
			<summary>
			Sets a bit mask for rendering reflections into the viewport. Reflections are rendered in the sprite viewport if masks of reflective materials match this one (one bit at least).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getReflectionViewportMask const">
			<summary>
			Returns the current bit mask for rendering reflections into the viewport. Reflections are rendered in the sprite viewport if masks of reflective materials match this one (one bit at least).
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setSkipFlags(int)">
			<summary>
			Sets the skip flag for the WidgetSpriteViewport viewport.
			</summary> 
			<param name="flags"> A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getSkipFlags const">
			<summary>
			Returns the skip flag set for the current viewport.
			</summary>  
			<returns>A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setTextureHeight(int)">
			<summary>
			Sets the height of the texture buffer used for a widget. This affects the widget size accordingly.
			</summary> 
			<param name="height"> Height of the texture buffer size. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getTextureHeight const">
			<summary>
			Returns the height of the texture buffer used for a widget that affects the widget size.
			</summary>  
			<returns>Height of the texture buffer size.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setTextureWidth(int)">
			<summary>
			Sets the width of the texture buffer used for a widget. This affects the widget size accordingly.
			</summary> 
			<param name="width"> Width of the texture buffer size. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getTextureWidth const">
			<summary>
			Returns the width of the texture buffer used for a widget that affects the widget size.
			</summary>  
			<returns>Width of the texture buffer size.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setViewportMask(int)">
			<summary>
			Sets a bit mask for rendering into the viewport. Nodes are rendered in this sprite viewport if their masks match this one.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getViewportMask const">
			<summary>
			Returns the current bit mask for rendering into the viewport. Nodes are rendered in the sprite viewport if their masks match this one.
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.appendSkipFlags(int)">
			<summary>
			Appends a new skip flag without rewriting already set.
			</summary> 
			<param name="flags"> A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.checkSkipFlags(int)">
			<summary>
			Checks if given flags are already set.
			</summary> 
			<param name="flags"> A skip flag. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
			<returns>1 if flag/flags already set, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.removeSkipFlags(int)">
			<summary>
			Removes the given skip flag without affecting other set flags.
			</summary> 
			<param name="flags"> A skip flag to be removed. Available flags:SKIP_SHADOWSSKIP_VISUALIZERSKIP_POSTEFFECTSSKIP_DYNAMIC_REFLECTIONSSKIP_VELOCITY_BUFFERSKIP_SRGB </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.renderImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Renders the sprite viewport into the image.
			</summary> 
			<param name="image"> Source image. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setImage(Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Sets a loaded into memory image for the first (bottom) layer of the sprite. This layer always exists in the sprite. An additional flag can be set in case the sprite image is going to be updated often or even each frame (for optimized memory management).					This method is intended for changing the sprite's background texture and is valid only for the base WidgetSprite class. It cannot be used for the WidgetSpriteViewport!
			</summary> 
			<param name="image"> Pointer to the image. </param>
			<param name="dynamic"> Positive number if the image will be updated each frame; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getImage const">
			<summary>
			Returns the loaded into memory image that is currently set for the first (bottom) layer of the sprite.					This method is valid only for the base WidgetSprite class. It cannot be used for the WidgetSpriteViewport!
			</summary>  
			<returns>Pointer to the image.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setRender(Unigine.Ptr{Unigine.Texture},int)">
			<summary>
			Sets a texture to be rendered for the first (bottom) layer of the sprite.					This method is intended for changing the sprite's background texture and is valid only for the base WidgetSprite class. It cannot be used for the WidgetSpriteViewport!
			</summary> 
			<param name="texture"> Pointer to the texture. </param>
			<param name="flipped"> Flipped flag. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.getRender const">
			<summary>
			Returns the pointer to the texture that is currently set for the first (bottom) layer of the sprite.					This method is valid only for the base WidgetSprite class. It cannot be used for the WidgetSpriteViewport!
			</summary>  
			<returns>Pointer to the texture.</returns>
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.setUseTAAOffset(bool)">
			<summary>
			Sets a value indicating if skipping render mode check is enabled for using TAA. Can be used to ensure proper TAA calculation when rendering mode for the Viewport is set to RENDER_DEPTH.
			</summary> 
			<param name="offset"> true to enable skipping render mode check and use TAA; otherwise false. </param> 
		</member>
		<member name="M:Unigine.WidgetSpriteViewport.isUseTAAOffset const">
			<summary>
			Returns a value indicating if skipping render mode check is enabled for using TAA. Can be used to ensure proper TAA calculation when rendering mode for the Viewport is set to RENDER_DEPTH.
			</summary>  
			<returns>true if skipping render mode check is enabled for using TAA; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates a tabbed box with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new box will belong. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.#ctor(int,int)">
			<summary>
			Constructor. Creates a tabbed box with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.setCurrentTab(int)">
			<summary>
			Makes a given tab current.
			</summary> 
			<param name="tab"> Tab number in range from 0 to the total number of tabs. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getCurrentTab const">
			<summary>
			Returns the number of the current tab.
			</summary>  
			<returns>Tab number.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getCurrentTabData const">
			<summary>
			Returns the data of the current tab. The data can be used as a text identifier of the item (instead of using the number of the item).
			</summary>  
			<returns>Tab data.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getCurrentTabText const">
			<summary>
			Returns the title of the current tab.
			</summary>  
			<returns>Tab title.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets a tab icons atlas image. This atlas is a vertical strip of square icons.
			</summary> 
			<param name="image"> Tabs atlas. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getImage const">
			<summary>
			Returns the tab icons atlas image. This atlas is a vertical strip of square icons.
			</summary>  
			<returns>Tabs atlas.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getNumTabs const">
			<summary>
			Returns the total number of tabs in the box.
			</summary>  
			<returns>Number of tabs.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setPadding(int,int,int,int)">
			<summary>
			Sets widget paddings for all sides. Padding clears an area around the content of a widget (inside of it).
			</summary> 
			<param name="l"> Left-side padding in pixels. </param>
			<param name="r"> Right-side padding in pixels. </param>
			<param name="t"> Top padding in pixels. </param>
			<param name="b"> Bottom padding in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getPaddingBottom const">
			<summary>
			Returns the current bottom padding for the widget content.
			</summary>  
			<returns>Bottom padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getPaddingLeft const">
			<summary>
			Returns the current left-side padding for the widget content.
			</summary>  
			<returns>Left-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getPaddingRight const">
			<summary>
			Returns the current right-side padding for the widget content.
			</summary>  
			<returns>Right-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getPaddingTop const">
			<summary>
			Returns the current top padding for the widget content.
			</summary>  
			<returns>Top padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setSpace(int,int)">
			<summary>
			Sets a space between the widgets in the box and between them and the box border.
			</summary> 
			<param name="x"> Horizontal space. If a negative value is provided, 0 will be used instead. </param>
			<param name="y"> Vertical space. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getSpaceX const">
			<summary>
			Returns the horizontal space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Horizontal space.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.getSpaceY const">
			<summary>
			Returns the vertical space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Vertical space.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setTabData(int,char)">
			<summary>
			Sets the data for the given tab. The data can be used as a text identifier of the item (instead of using the number of the item).
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param>
			<param name="str"> Data to set. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getTabData(int) const">
			<summary>
			Returns the data of a given tab. The data can be used as a text identifier of the item (instead of using the number of the item).
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param> 
			<returns>Tab data.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setTabHidden(int,bool)">
			<summary>
			Sets a value indicating that a specified tab should not be rendered visible. By default all widget tabs are visible.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param>
			<param name="hidden"> 1 for the tab to be invisible; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.isTabHidden(int) const">
			<summary>
			Returns a value indicating if the specified tab is invisible.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param> 
			<returns>1 if the specified tab is invisible; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setTabText(int,char)">
			<summary>
			Sets a title for the current tab.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param>
			<param name="str"> Tab title. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getTabText(int) const">
			<summary>
			Returns the title of a given tab.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param> 
			<returns>Tab title.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setTabTexture(int,int)">
			<summary>
			Sets an icon for the specified tab.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param>
			<param name="texture"> Zero-based ID of the icon (icon number in the atlas column). -1 specifies that a tab has no icon. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getTabTexture(int) const">
			<summary>
			Returns the icon of the specified tab.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param> 
			<returns>Zero-based ID of the icon (icon number in the atlas column). -1 specifies that a tab has no icon.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setTabToolTip(int,char)">
			<summary>
			Sets a tooltip for the specified tab.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param>
			<param name="str"> Tooltip to display. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getTabToolTip(int) const">
			<summary>
			Returns the tooltip of the given tab.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param> 
			<returns>Displayed tooltip.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setTexture(char)">
			<summary>
			Sets a texture to be used as tab icons atlas. This atlas is a vertical strip of square icons.
			</summary> 
			<param name="texture"> Path to the atlas texture. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getTexture const">
			<summary>
			Returns the path to the tab icons atlas texture. This atlas is a vertical strip of square icons.
			</summary>  
			<returns>Path to the atlas texture.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.addTab(char,int)">
			<summary>
			Adds a new tab with a given title and icon to the box.
			</summary> 
			<param name="str"> Tab title. </param>
			<param name="texture"> Zero-based ID of the icon (icon number in the atlas column). -1 means that a tab has no icon. </param> 
			<returns>Number of the added tab.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.clear">
			<summary>
			Removes all tabs from the box.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetTabBox.removeTab(int)">
			<summary>
			Removes a given tab from the box.
			</summary> 
			<param name="num"> Tab number in range from 0 to the total number of tabs. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.setButtonColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for the widget's button.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getButtonColor const">
			<summary>
			Returns the current color for the widget's button.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetTabBox.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetTabBox.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates an empty tree box and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new tree box will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.#ctor">
			<summary>
			Constructor. Creates an empty tree box and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetTreeBox.setCurrentItem(int)">
			<summary>
			Places focus on a given item (multi-selection mode).
			</summary> 
			<param name="item"> Item ID. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getCurrentItem const">
			<summary>
			Returns the item currently in focus (multi-selection mode).
			</summary>  
			<returns>Item ID.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getCurrentItemData const">
			<summary>
			Returns the text data of the currently focused item (multi-selection mode). The data can be used as a text identifier of the item (instead of using the number of the item).
			</summary>  
			<returns>Item data.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getCurrentItemText const">
			<summary>
			Returns the text of the currently focused item (multi-selection mode).
			</summary>  
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setEditable(bool)">
			<summary>
			Sets a value indicating if item hierarchy can be edited.
			</summary> 
			<param name="editable"> 1 to make the hierarchy editable, 0 to make it read-only. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isEditable const">
			<summary>
			Returns a value indicating if item hierarchy can be edited. The default is 0.
			</summary>  
			<returns>1 if the hierarchy can be edited; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an image with mini-icons to be used with items. The image is a vertical strip of square icons.
			</summary> 
			<param name="image"> Image to set. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getImage const">
			<summary>
			Returns the image with mini-icons.
			</summary>  
			<returns>Image with mini-icons (the vertical strip of square icons).</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItem(int) const">
			<summary>
			Returns the ID of a given item by its number. The IDs are unique, and the numbers simply point at the place in the list of all items.
			</summary> 
			<param name="num"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Item ID.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemChild(int,int) const">
			<summary>
			Returns a child of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="num"> Child number in the list of children in range from 0 to the total number. </param> 
			<returns>Child item ID.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.isItemChild(int,int) const">
			<summary>
			Checks if a given item is a child of another specified item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="child"> Child item ID. </param> 
			<returns>1 if child is actually a child of the item; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemColor(int,Unigine.Math.vec4)">
			<summary>
			Sets a custom color for a given item.
			</summary> 
			<param name="item"> Item number in range from 0 to the total number of items. </param>
			<param name="color"> Color to set. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemColor(int) const">
			<summary>
			Returns a color set to a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Color.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemData(int,char)">
			<summary>
			Sets a custom text data for the given item. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="str"> Text data to be set. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemData(int) const">
			<summary>
			Returns the text data of the item with the specified ID. The data can be used as a text identifier of the item (instead of using the item number).
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Item text data.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemFolded(int,int)">
			<summary>
			Expands or collapses an hierarchy of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="folded"> 1 to collapse the item hierarchy, 0 to expand it. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isItemFolded(int) const">
			<summary>
			Returns a value indicating if a given item is collapsed.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>1 if the item is collapsed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemHidden(int,int)">
			<summary>
			Sets a value indicating if a given item is hidden.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="hidden"> 1 to hide the item, 0 to show it. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isItemHidden(int) const">
			<summary>
			Returns a value indicating if an item is hidden or not.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>1 if the item is hidden; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemParent(int,int)">
			<summary>
			Sets a parent for a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="parent"> Parent item ID. -1 removes the current parent. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemParent(int) const">
			<summary>
			Returns the parent of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Parent item ID.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItems(Unigine.Vector{int,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns all items in the tree box.
			</summary> 
			<param name="items"> An array with item IDs. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemSelectable(int,int)">
			<summary>
			Sets a value indicating if a given item can be selected.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="selectable"> 1 to set the item as selectable, 0 to set it as unselectable. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isItemSelectable(int) const">
			<summary>
			Returns a value indicating if a given item can be selected.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>1 if the item is selectable; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemSelected(int,int)">
			<summary>
			Selects or deselects a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="selected"> 1 to select the item, 0 to deselect it. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isItemSelected(int) const">
			<summary>
			Returns a value indicating if a given item is selected.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>1 if the item is selected; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemText(int,char)">
			<summary>
			Sets a text for a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="str"> Item text. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemText(int) const">
			<summary>
			Returns the text of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Item text.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setItemTexture(int,int)">
			<summary>
			Sets an icon for a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="texture"> Zero-based ID of the icon (i.e. number of the icon in the icon texture). </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemTexture(int) const">
			<summary>
			Returns the icon of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Zero-based ID of the icon (i.e. number of the icon in the icon texture).</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setMultiSelection(bool)">
			<summary>
			Enables or disables multiple selection of items.
			</summary> 
			<param name="selection"> true to enable multiple selection, false to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isMultiSelection const">
			<summary>
			Returns a value indicating if multiple selection of items is enabled. The default is 0.
			</summary>  
			<returns>true if several items can be selected at once; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getNumItemChildren(int) const">
			<summary>
			Returns the number of child items of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
			<returns>Number of child items.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getNumItems const">
			<summary>
			Returns the number of visible items in the tree box. Items that are currently collapsed to a parent level are not returned.
			</summary>  
			<returns>Number of items.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getNumSelectedItems const">
			<summary>
			Returns number of selected items in the box (multi-selection mode).
			</summary>  
			<returns>Number of selected items.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getSelectedItem(int) const">
			<summary>
			Returns ID of a selected item (multi-selection mode).
			</summary> 
			<param name="num"> Number of an item in the list of selected items. </param> 
			<returns>ID of the selected item.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setTexture(char)">
			<summary>
			Sets a texture with mini-icons to be used with items. The texture is a vertical strip of square icons.
			</summary> 
			<param name="texture"> Path to a texture file. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getTexture const">
			<summary>
			Returns file name of the image with mini-icons. The texture is a vertical strip of square icons.
			</summary>  
			<returns>Path to the texture file.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.addItem(char,int)">
			<summary>
			Adds a new item with a given text and and an icon.
			</summary> 
			<param name="str"> Item text. </param>
			<param name="texture"> Zero-based ID of the icon (i.e. number of the icon in the icon texture). -1 means that an item has no icon. </param> 
			<returns>ID of the added item.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.addItemChild(int,int)">
			<summary>
			Adds a child to a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="child"> Child item ID. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.clear">
			<summary>
			Removes all items from the tree box.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetTreeBox.clearSelection">
			<summary>
			Clears list of selected items.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetTreeBox.removeItem(int)">
			<summary>
			Removes a given item from the tree box. Children items will be kept.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.removeItemChild(int,int)">
			<summary>
			Removes a child of a given item.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param>
			<param name="child"> Child item ID. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.showItem(int)">
			<summary>
			Scrolls a tree box so that a given item is visible.
			</summary> 
			<param name="item"> Item ID in range from 0 to the total number of items. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.setSelectionColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used to highlight the current selection for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.getSelectionColor const">
			<summary>
			Returns the current color used to highlight the current selection for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.getItemUnderCursor const">
			<summary>
			Returns the ID of the item, over which the cursor is currently hovering.
			</summary>  
			<returns>Item ID in range from 0 to the total number of items.</returns>
		</member>
		<member name="M:Unigine.WidgetTreeBox.setNeedSortChildren(bool)">
			<summary>
			Sets the value specifying if sorting of children is required. Sorting is performed with the default compare algorithm.
			</summary> 
			<param name="children"> true to enable sorting of children, false to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetTreeBox.isNeedSortChildren const">
			<summary>
			Returns the value specifying if sorting of children is required. Sorting is performed with the default compare algorithm.
			</summary>  
			<returns>true if sorting of children is enabled, otherwise false.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.#ctor(Unigine.Ptr{Gui},int,int)">
			<summary>
			Constructor. Creates a vertical box with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new box will belong. </param>
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.#ctor(int,int)">
			<summary>
			Constructor. Creates a vertical box with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="x"> Horizontal space between the widgets in the box and between them and the box border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the box and between them and the box border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.setBackground(int)">
			<summary>
			Sets a value indicating if a background texture should be rendered for the box.
			</summary> 
			<param name="background"> 1 to render a background texture, 0 not to render. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.getBackground const">
			<summary>
			Returns a value indicating if a background texture is rendered for the box.
			</summary>  
			<returns>1 if a background texture is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.setColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for the global color multiplier. The default is equivalent to vec4(1,1,1,1) (white).
			</summary> 
			<param name="color"> Multiplier color. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.getColor const">
			<summary>
			Returns a color of the global color multiplier.
			</summary>  
			<returns>Multiplier color.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.setPadding(int,int,int,int)">
			<summary>
			Sets widget paddings for all sides. Padding clears an area around the content of a widget (inside of it).
			</summary> 
			<param name="l"> Left-side padding in pixels. </param>
			<param name="r"> Right-side padding in pixels. </param>
			<param name="t"> Top padding in pixels. </param>
			<param name="b"> Bottom padding in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.getPaddingBottom const">
			<summary>
			Returns the current bottom padding for the widget content.
			</summary>  
			<returns>Bottom padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.getPaddingLeft const">
			<summary>
			Returns the current left-side padding for the widget content.
			</summary>  
			<returns>Left-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.getPaddingRight const">
			<summary>
			Returns the current right-side padding for the widget content.
			</summary>  
			<returns>Right-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.getPaddingTop const">
			<summary>
			Returns the current top padding for the widget content.
			</summary>  
			<returns>Top padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.setSpace(int,int)">
			<summary>
			Sets a space between the widgets in the box and between them and the box border.
			</summary> 
			<param name="x"> Horizontal space. If a negative value is specified, 0 will be used instead. </param>
			<param name="y"> Vertical space. If a negative value is specified, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.getSpaceX const">
			<summary>
			Returns the horizontal space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Horizontal space.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.getSpaceY const">
			<summary>
			Returns the vertical space between the widgets in the box and between them and the box border.
			</summary>  
			<returns>Vertical space.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.setStencil(int)">
			<summary>
			Sets a value indicating if a widget cuts off its children along its bounds. Everything that lies outside of them, is not rendered. The default is 0.
			</summary> 
			<param name="stencil"> 1 to enable cutting, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.getStencil const">
			<summary>
			Returns a value indicating if a widget cuts off its children along its set bounds. Everything that lies outside of them, is not rendered. This option works only if children have ALIGN_OVERLAP flag set (otherwise, they will expand the box widget bounds and no cutting will be done).
			</summary>  
			<returns>1 if cutting is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget.
			</summary> 
			<param name="color"> Four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.getBackgroundColor const">
			<summary>
			Returns the current background color used for the widget.
			</summary>  
			<returns>Four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetVBox.setBorder(bool)">
			<summary>
			Sets the border display state for the widget.
			</summary> 
			<param name="border"> true to display the border, otherwise, false. </param> 
		</member>
		<member name="M:Unigine.WidgetVBox.isBorder const">
			<summary>
			Returns the current value indicating if the border is displayed.
			</summary>  
			<returns>true if the border is displayed, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetVPaned.#ctor(Unigine.Ptr{Gui})">
			<summary>
			Constructor. Creates a new vertical box with an ability to resize its children and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new container will belong. </param> 
		</member>
		<member name="M:Unigine.WidgetVPaned.#ctor">
			<summary>
			Constructor. Creates a new vertical box with an ability to resize its children and adds it to the Engine GUI.
			</summary>  
		</member>
		<member name="M:Unigine.WidgetVPaned.setFirstSize(int)">
			<summary>
			Sets the size of the first child.
			</summary> 
			<param name="size"> Size of the first child in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetVPaned.getFirstSize const">
			<summary>
			Returns the size of the first child.
			</summary>  
			<returns>Size of the first child in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetVPaned.setFixed(int)">
			<summary>
			Sets the number of the child with the fixed size. The default is 0.
			</summary> 
			<param name="fixed"> Number of the child:0 - size of both children is not fixed.1 - size of the first child is fixed.2 - size of the second child is fixed. </param> 
		</member>
		<member name="M:Unigine.WidgetVPaned.getFixed const">
			<summary>
			Returns the number of the child with the fixed size.
			</summary>  
			<returns>Number of the child. 0 means that the size of both children is not fixed.</returns>
		</member>
		<member name="M:Unigine.WidgetVPaned.setSecondSize(int)">
			<summary>
			Sets the size of the second child.
			</summary> 
			<param name="size"> Size of the second child in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetVPaned.getSecondSize const">
			<summary>
			Returns the size of the second child.
			</summary>  
			<returns>Size of the second child in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetVPaned.setValue(int)">
			<summary>
			Specifies how child widgets will be resized. The default is 0.
			</summary> 
			<param name="value"> Value in range [-32767; 32767]. -32767 means that during resize the upper child will remain fixed. 32767 means that during resize the lower child will remain fixed. 0 means that both children will be resized equally. Other values specify proportions, in which the children are resized. </param> 
		</member>
		<member name="M:Unigine.WidgetVPaned.getValue const">
			<summary>
			Returns a value specifying how child widgets will be resized.
			</summary>  
			<returns>Value in range [-32767; 32767]. -32767 means that during resize the upper child will remain fixed. 32767 means that during resize the lower child will remain fixed. 0 means that both children will be resized equally. Other values specify proportions, in which the children are resized.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.#ctor(Unigine.Ptr{Gui},char,int,int)">
			<summary>
			Constructor. Creates a window with given parameters and adds it to the specified GUI.
			</summary> 
			<param name="gui"> GUI, to which the new window will belong. </param>
			<param name="str"> Window title. This is an optional parameter. </param>
			<param name="x"> Horizontal space between the widgets in the window and between them and the window border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the window and between them and the window border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.#ctor(char,int,int)">
			<summary>
			Constructor. Creates a window with given parameters and adds it to the Engine GUI.
			</summary> 
			<param name="str"> Window title. This is an optional parameter. </param>
			<param name="x"> Horizontal space between the widgets in the window and between them and the window border. This is an optional parameter. </param>
			<param name="y"> Vertical space between the widgets in the window and between them and the window border. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.setBlendable(bool)">
			<summary>
			Sets a value indicating if the window can fade in and out when changing to the minimized state and back.
			</summary> 
			<param name="blendable"> 1 to allow fading in and out, 0 to disallow it. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.isBlendable const">
			<summary>
			Returns a value indicating if the window can fade in and out when changing to the minimized state and back. The default is 0.
			</summary>  
			<returns>1 if the window can fade in and out; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for the global color multiplier. The default is equivalent to vec4(1,1,1,1) (white).
			</summary> 
			<param name="color"> Multiplier color. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getColor const">
			<summary>
			Returns a color of the global color multiplier.
			</summary>  
			<returns>Multiplier color.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setFloatable(bool)">
			<summary>
			Sets a value indicating if the window is animated when changing to the minimized state and back.
			</summary> 
			<param name="floatable"> 1 to allow animating the window, 0 not to make it. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.isFloatable const">
			<summary>
			Returns a value indicating if the window is animated when changing to the minimized state and back. The default is 0.
			</summary>  
			<returns>1 if the window is animated; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setMaxHeight(int)">
			<summary>
			Sets the maximum height value for the window.
			</summary> 
			<param name="height"> Maximum height value. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getMaxHeight const">
			<summary>
			Returns the maximum height value of the window.
			</summary>  
			<returns>Maximum height value.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setMaxWidth(int)">
			<summary>
			Sets the maximum width value for the window.
			</summary> 
			<param name="width"> Maximum width value. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getMaxWidth const">
			<summary>
			Returns the maximum width value of the window.
			</summary>  
			<returns>Maximum width value.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setMoveable(bool)">
			<summary>
			Sets a value indicating if the window is movable.
			</summary> 
			<param name="moveable"> 1 to set the window as movable; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.isMoveable const">
			<summary>
			Returns a value indicating if the window is movable. The default is 1.
			</summary>  
			<returns>1 if the window is movable; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setPadding(int,int,int,int)">
			<summary>
			Sets widget paddings for all sides. Padding clears an area around the content of a widget (inside of it).
			</summary> 
			<param name="l"> Left-side padding in pixels. </param>
			<param name="r"> Right-side padding in pixels. </param>
			<param name="t"> Top padding in pixels. </param>
			<param name="b"> Bottom padding in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getPaddingBottom const">
			<summary>
			Returns the current bottom padding for the widget content.
			</summary>  
			<returns>Bottom padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getPaddingLeft const">
			<summary>
			Returns the current left-side padding for the widget content.
			</summary>  
			<returns>Left-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getPaddingRight const">
			<summary>
			Returns the current right-side padding for the widget content.
			</summary>  
			<returns>Right-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getPaddingTop const">
			<summary>
			Returns the current top padding for the widget content.
			</summary>  
			<returns>Top padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setSizeable(bool)">
			<summary>
			Sets a value indicating if the window is resizeable.
			</summary> 
			<param name="sizeable"> 1 to allow resizing the window, 0 to disallow it. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.isSizeable const">
			<summary>
			Returns a value indicating if the window is resizeable. The default is 0.
			</summary>  
			<returns>1 if the window is resizeable; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setSnapDistance(int)">
			<summary>
			Sets a distance, at which the window snaps to another window or screen edge.
			</summary> 
			<param name="distance"> Distance in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getSnapDistance const">
			<summary>
			Returns the distance, at which the window snaps to another window or screen edge. The default is 0 (do not snap).
			</summary>  
			<returns>Distance in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setSpace(int,int)">
			<summary>
			Sets a space between the widgets in the window and between them and the window border.
			</summary> 
			<param name="x"> Horizontal space. If a negative value is provided, 0 will be used instead. </param>
			<param name="y"> Vertical space. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getSpaceX const">
			<summary>
			Returns the horizontal space between the widgets in the window and between them and the window border.
			</summary>  
			<returns>Horizontal space.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getSpaceY const">
			<summary>
			Returns the vertical space between the widgets in the window and between them and the window border.
			</summary>  
			<returns>Vertical space.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setText(char)">
			<summary>
			Sets a window title.
			</summary> 
			<param name="text"> Window title. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getText const">
			<summary>
			Returns the current window title.
			</summary>  
			<returns>Window title.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setTextAlign(int)">
			<summary>
			Sets alignment of the window title.
			</summary> 
			<param name="align"> One of the ALIGN_* pre-defined variables. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getTextAlign const">
			<summary>
			Returns the alignment of the window title.
			</summary>  
			<returns>One of the ALIGN_* pre-defined variables.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setTitleable(bool)">
			<summary>
			Sets a value indicating if the window is minimized when double-clicking on it. The default is 0.
			</summary> 
			<param name="titleable"> 1 to allow minimization, 0 to disallow it. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.isTitleable const">
			<summary>
			Returns a value indicating if the window is minimized when double-clicking on it. The default is 0.
			</summary>  
			<returns>1 if the window is minimized when double-clicking on it; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setTransform(Unigine.Math.mat4)">
			<summary>
			Sets the global widget transformation matrix. This 2D matrix can be tilted, rotated, moved or modified in many ways in 3D space.
			</summary> 
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getTransform const">
			<summary>
			Returns the global widget transformation matrix.
			</summary>  
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color to be used for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getBackgroundColor const">
			<summary>
			Returns the current background color used for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setBorderColor(Unigine.Math.vec4)">
			<summary>
			Sets the border color for the widget.
			</summary> 
			<param name="color"> The four-component vector specifying the color in the RGBA format. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getBorderColor const">
			<summary>
			Returns the current border color for the widget.
			</summary>  
			<returns>The four-component vector specifying the color in the RGBA format.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setDragAreaEnabled(bool)">
			<summary>
			Sets a value indicating if the drag area of the window is enabled.
			</summary> 
			<param name="enabled"> true to enable the drag area, false to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.isDragAreaEnabled const">
			<summary>
			Returns the value indicating if the drag area of the window is enabled.
			</summary>  
			<returns>Value indicating if the drag area of the window is enabled: true if the drag area is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setDragAreaBackground(int)">
			<summary>
			Enables/disables rendering of the background for the drag area.
			</summary> 
			<param name="background"> 1 to enable background rendering, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getDragAreaBackground const">
			<summary>
			Returns the value indicating if background rendering is enabled or disabled for the drag area.
			</summary>  
			<returns>Value indicating if rendering of the background is enabled: 1 if background rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setDragAreaBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets a color for the background of the drag area.
			</summary> 
			<param name="color"> Background color. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getDragAreaBackgroundColor const">
			<summary>
			Returns the color of the drag area background.
			</summary>  
			<returns>Background color.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.setDragAreaPadding(int,int,int,int)">
			<summary>
			Sets paddings for all sides of the drag area.
			</summary> 
			<param name="l"> Left-side padding in pixels. </param>
			<param name="r"> Right-side padding in pixels. </param>
			<param name="t"> Top padding in pixels. </param>
			<param name="b"> Bottom padding in pixels. </param> 
		</member>
		<member name="M:Unigine.WidgetWindow.getDragAreaPaddingLeft const">
			<summary>
			Returns the current left-side padding for the drag area.
			</summary>  
			<returns>Left-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getDragAreaPaddingRight const">
			<summary>
			Returns the current right-side padding for the drag area.
			</summary>  
			<returns>Right-side padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getDragAreaPaddingTop const">
			<summary>
			Returns the current top padding for the drag area.
			</summary>  
			<returns>Top padding in pixels.</returns>
		</member>
		<member name="M:Unigine.WidgetWindow.getDragAreaPaddingBottom const">
			<summary>
			Returns the current bottom padding for the drag area.
			</summary>  
			<returns>Bottom padding in pixels.</returns>
		</member>
	</members>
</doc>