<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.TileSet.getImageType">
			<summary>
			Returns a numerical code of the image type used in the tileset.
			</summary>  
			<returns>Image type identifier. See the FORMAT_* variables.</returns>
		</member>
		<member name="M:Unigine.TileSet.setTileData(Unigine.Math.ivec2,Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the data for the specified tile by copying from the source image.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="data"> Source image containing a new tile data to be set. </param> 
			<returns>1 if the data of the tile was successfully set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileData(Unigine.Math.ivec2,Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Copies the data of the specified tile to the given image instance.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="data"> Image to which the tile data is to be copied. </param>
			<param name="force"> Force flag.If 1 is specified, the data will be copied immediately.If 0 is specified, data copy operation will be queued to a separate thread.It is recommended to set this flag to 0 when possible to avoid spikes. </param> 
			<returns>1 if the tile data was successfully copied to the image; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileDataState(Unigine.Math.ivec2)">
			<summary>
			Returns the state of the data for the tile with specified coordinates.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>Tile data state. One of the TILE_STATE_* values.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileResolution">
			<summary>
			Returns the tile resolution of the tileset.
			</summary>  
			<returns>Tile resolution, in pixels.Tiles are square and have the same number of pixels in both dimensions.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileCoord(Unigine.Math.dvec2)">
			<summary>
			Returns the coordinates of the tile containing the given point on the terrain.
			</summary> 
			<param name="flat_position"> Coordinates of the point on the terrain (X, Y). </param> 
			<returns>Tile coordinates in the tileset (X, Y).</returns>
		</member>
		<member name="M:Unigine.TileSet.reloadTileData(Unigine.Math.ivec2)">
			<summary>
			Reloads the data for the tile with specified coordinates from the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if the tile data was successfully loaded from the tileset file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTilePixelFlatPosition(Unigine.Math.ivec2,Unigine.Math.vec2,int)">
			<summary>
			Returns the coordinates of the point on the terrain (X, Y) corresponding to the specified pixel of the given tile.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="pixel_coord"> Pixel coordinates on the tile (X, Y). </param>
			<param name="use_half_pixel_offset"> 1 to use half-pixel offset; 0 to use zero-offset. </param> 
			<returns>Coordinates of the point on the terrain (X, Y).</returns>
		</member>
		<member name="M:Unigine.TileSet.isTileMaskLoaded(Unigine.Math.ivec2)">
			<summary>
			Returns a value indicating if a mask is loaded for the tile with the specified coordinates.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if a mask is loaded for the tile; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTilePixelCoord(Unigine.Math.dvec2,int)">
			<summary>
			Returns the local tile coordinates of the pixel corresponding to the specified point on the terrain. To determine the tile that contains this pixel use the getTileCoord() method.
			</summary> 
			<param name="flat_position"> Coordinates of the point on the terrain (X, Y). </param>
			<param name="use_half_pixel_offset"> 1 to use half-pixel offset; 0 to use zero-offset. </param> 
			<returns>Local tile coordinates of the pixel (X, Y).</returns>
		</member>
		<member name="M:Unigine.TileSet.saveTile(Unigine.Math.ivec2,int)">
			<summary>
			Saves changes of the specified tile to the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="force"> Force flag.If 1 is specified, the changes will be saved immediately.If 0 is specified, the saving operation will be queued to a separate thread.It is recommended to set this flag to 0 when possible to avoid spikes. </param> 
			<returns>1 if changes of the specified tile were successfully saved to the tileset file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.saveAll(int)">
			<summary>
			Saves changes of all tiles to the tileset file.
			</summary> 
			<param name="force"> Force flag.If 1 is specified, the changes will be saved immediately.If 0 is specified, the saving operation will be queued to a separate thread.It is recommended to set this flag to 0 when possible to avoid spikes. </param> 
			<returns>1 if all changes were successfully saved to the tileset file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getLifeTime(Unigine.Math.ivec2)">
			<summary>
			Returns the current lifetime of the tile. This parameter determines how long the specified tile will be kept in the RAM without being accessed.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>Tile lifetime, in seconds.</returns>
		</member>
		<member name="M:Unigine.TileSet.getDataFormat">
			<summary>
			Returns a value indicating current image format for the tile data.
			</summary>  
			<returns>Tile data image format. One of the Image::FORMAT_* values.</returns>
		</member>
		<member name="M:Unigine.TileSet.getMaskFormat">
			<summary>
			Returns a value indicating current image format for the tile mask.
			</summary>  
			<returns>Tile mask image format. One of the Image::FORMAT_* values.</returns>
		</member>
		<member name="M:Unigine.TileSet.getPath">
			<summary>
			Returns the path to the tileset file.
			</summary>  
			<returns>Path to the tileset file.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileMask(Unigine.Math.ivec2,Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Copies the mask of the specified tile to the given image instance.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="mask"> Image to which the tile mask is to be copied. </param>
			<param name="force"> Force flag.If 1 is specified, the mask will be copied immediately.If 0 is specified, mask copy operation will be queued to a separate thread.It is recommended to set this flag to 0 when possible to avoid spikes. </param> 
			<returns>1 if the tile mask was successfully copied to the image; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.removeTileMask(Unigine.Math.ivec2)">
			<summary>
			Removes the mask of the tile with specified coordinates from the tileset.					This method does not remove the mask from the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if the mask of the tile was successfully removed from the tileset; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.setTileMask(Unigine.Math.ivec2,Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the mask for the specified tile by copying it from the source image.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="mask"> Source image containing a new tile mask to be set. </param> 
			<returns>1 if the mask of the tile was successfully set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.reloadTileMask(Unigine.Math.ivec2)">
			<summary>
			Reloads the mask for the tile with specified coordinates from the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if the tile mask was successfully loaded from the tileset file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileDensity">
			<summary>
			Returns the tile density (number of pixels per unit) of the tileset.
			</summary>  
			<returns>Tile density, in pixels per unit.</returns>
		</member>
		<member name="M:Unigine.TileSet.hasTileFileMask(Unigine.Math.ivec2)">
			<summary>
			Returns a value indicating if the tile with specified coordinates has a mask in the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if the specified tile has a mask in the tileset file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.hasTileMask(Unigine.Math.ivec2)">
			<summary>
			Returns a value indicating if the tile with specified coordinates has a mask in the tileset.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if the specified tile has a mask in the tileset; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.isTileDataLoaded(Unigine.Math.ivec2)">
			<summary>
			Returns a value indicating if data is loaded for the tile with the specified coordinates.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if data is loaded for the tile; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileMaskState(Unigine.Math.ivec2)">
			<summary>
			Returns the state of the mask for the tile with specified coordinates.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>Tile mask state. One of the TILE_STATE_* values.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileSize">
			<summary>
			Returns actual tile size in the tileset.
			</summary>  
			<returns>Tile size, in units.</returns>
		</member>
		<member name="M:Unigine.TileSet.hasTile(Unigine.Math.ivec2)">
			<summary>
			Returns a value indicating if there is a tile with specified coordinates in the tileset.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if there is a tile with specified coordinates in the tileset; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.hasTileFile(Unigine.Math.ivec2)">
			<summary>
			Returns a value indicating if there is a tile with specified coordinates in the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if there is a tile with specified coordinates in the tileset file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.removeTile(Unigine.Math.ivec2)">
			<summary>
			Removes the tile with specified coordinates from the tileset.					This method does not remove the tile from the tileset file.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>1 if the tile was successfully removed from the tileset; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.setLifeTime(Unigine.Math.ivec2,float)">
			<summary>
			Sets the lifetime for the specified tile This parameter determines how long the specified tile will be kept in the RAM without being accessed.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param>
			<param name="seconds"> Tile lifetime, in seconds. </param> 
			<returns>1 if the lifetime for the specified tile was successfully set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TileSet.getTileFlatPosition(Unigine.Math.ivec2)">
			<summary>
			Returns the coordinates of the point on the terrain (X, Y) corresponding to the top-left corner of the specified tile.
			</summary> 
			<param name="tile_coord"> Tile coordinates in the tileset (X, Y). </param> 
			<returns>Coordinates of the point on the terrain (X, Y).</returns>
		</member>
		<member name="M:Unigine.TileSet.fetchData(Unigine.Math.Vec2,Unigine.Math.vec4,int,bool)">
			<summary>
			Fetches the data for the specified point on the terrain and puts it to the output vector.
			</summary> 
			<param name="position"> Coordinates of the point on the terrain (X, Y). </param>
			<param name="result"> Output vector to store the data retrieved for the specified point. </param>
			<param name="layer"> Layer number. </param>
			<param name="force"> Force flag.If 1 is specified, the data will be fetched immediately.If 0 is specified, the operation will be queued to a separate thread.It is recommended to set this flag to 0 when possible to avoid spikes. </param> 
			<returns>1.0f if the data was fetched successfully; otherwise, 0.0f.</returns>
		</member>
		<member name="F:Unigine.TileSet.TILE_STATE_NONE">
			<summary>
			The tile in the tileset does not differ from the tile in the tileset file (standard tile state).
		</summary>
		</member>
		<member name="F:Unigine.TileSet.TILE_STATE_MODIFIED">
			<summary>
			The tile in the tileset is modified.
		</summary>
		</member>
		<member name="F:Unigine.TileSet.TILE_STATE_REMOVED">
			<summary>
			The tile in the tileset is removed.
		</summary>
		</member>
	</members>
</doc>