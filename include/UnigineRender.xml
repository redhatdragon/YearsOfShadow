<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.BakeLighting.bake(Unigine.Vector{Unigine.Ptr{LightVoxelProbe},int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Ptr{LightEnvironmentProbe},int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Ptr{Light},int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Ptr{ObjectMeshStatic},int,Unigine.VectorAllocator},Unigine.Vector{int,int,Unigine.VectorAllocator})">
			<summary>
			Starts the process of light baking for all voxel and environment probes, shadow baking for light sources in static light mode and lightmaps baking for surfaces of Mesh Static objects in the given list.
			</summary> 
			<param name="voxel_lights"> List of voxel probes for which the process of light baking is to be performed. The order of nodes added for baking is not important. </param>
			<param name="env_lights"> List of environment probes for which the process of light baking is to be performed. The order of nodes added for baking is not important. </param>
			<param name="shadow_lights"> List of light sources in static light mode for which the process of shadow baking is to be performed. The order of lights added for baking is not important. </param>
			<param name="objects"> List of Mesh Static objects for which the process of lightmaps baking is to be performed. </param>
			<param name="surfaces"> List of surfaces of Mesh Static objects for which the process of lightmaps baking is to be performed.The number of objects and surfaces added for baking must be equal. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.bakeAll(bool,bool,bool,bool)">
			<summary>
			Starts the process of light baking for all enabled voxel and environment probes, shadow baking for eanbled light sources in static light mode and lightmaps baking for enabled surfaces of Mesh Static objects in the scene.
			</summary> 
			<param name="voxel_probes"> 1 to enable light baking for voxel probes; otherwise, 0. </param>
			<param name="env_probes"> 1 to enable light baking for environment probes; otherwise, 0. </param>
			<param name="shadow"> 1 to enable shadow baking for light sources in static light mode; otherwise, 0. </param>
			<param name="lightmap"> 1 to enable lightmaps baking for surfaces of Mesh Static objects; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.isBaking const">
			<summary>
			Returns a value indicating if the process of baking is being performed at the moment.
			</summary>  
			<returns>1 if lighting is being baked; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentBounce const">
			<summary>
			Returns a bounce being calculated at the moment.					If the process of baking is not being performed at the moment, 1 is returned.
			</summary>  
			<returns>Bounce number.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getBounces const">
			<summary>
			Returns number of all bounces.
			</summary>  
			<returns>Number of bounces.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getProgress const">
			<summary>
			Returns overall progress of light baking.					If the process of baking is not being performed at the moment, 0 is returned.
			</summary>  
			<returns>Overall baking progress, in percents.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getProgressBounce const">
			<summary>
			Returns a value showing progress of calculating current bounce.
			</summary>  
			<returns>Bounce calculating progress, in percents.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getVoxelSizeMultiplier const">
			<summary>
			Returns the value of the voxel size multiplier parameter. By default, it is equal to 1.0f.
			</summary>  
			<returns>Voxel size multiplier.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setBounces(int)">
			<summary>
			Sets number of bounces.
			</summary> 
			<param name="bounces"> Number of bounces within the [1, 32] range. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getProgressLight const">
			<summary>
			Returns progress of light baking for the current LightVoxelProbe at the moment.
			</summary>  
			<returns>LightVoxelProbe progress, in percents.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getTimer const">
			<summary>
			Returns the time elapsed from the start of the process of baking.
			</summary>  
			<returns>Elapsed time, in seconds.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setVoxelSizeMultiplier(float)">
			<summary>
			Sets the value of the voxel size multiplier parameter.
			</summary> 
			<param name="multiplier"> Voxel size multiplier within the [0.0f, 8.0f] range. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.stop(bool)">
			<summary>
			Interrupts the process of light baking, if it is in performing state.
			</summary> 
			<param name="save_results"> 1 to save the obtained result; 0 to restore the previous content. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentLight const">
			<summary>
			Returns an instance of the LightVoxelProbe being calculated at the moment.
			</summary>  
			<returns>Current LightVoxelProbe.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.addReadOnlyTexture(Unigine.UGUID)">
			<summary>
			Adds a read-only texture with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the read-only texture to be added. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.removeReadOnlyTexture(Unigine.UGUID)">
			<summary>
			Removes the read-only texture with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the read-only texture to be removed. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.setSamplesPerFrame(int)">
			<summary>
			Sets number of voxels for voxel probes and samples for environment probes, light sources and surfaces computed and visualized per single frame.
			</summary> 
			<param name="frame"> Number of samples per frame within the [1, 500] range. The default value is 1.High values cause longer user interface response. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getSamplesPerFrame const">
			<summary>
			Returns number of voxels for voxel probes and samples for environment probes, light sources and surfaces computed and visualized per single frame.
			</summary>  
			<returns>Number of samples.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setLightmapQuality(BakeLighting::LIGHTMAP_QUALITY)">
			<summary>
			Sets the global baking quality for lightmaps.
			</summary> 
			<param name="quality"> One of LIGHTMAP_QUALITY values. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getLightmapQuality const">
			<summary>
			Returns the current global baking quality for lightmaps.
			</summary>  
			<returns>LIGHTMAP_QUALITY preset.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setLightmapViewportMask(int)">
			<summary>
			Sets the viewport mask for the lightmapper. For a light or surface to contribute to static GI, their viewport masks should match the baking viewport mask.
			</summary> 
			<param name="mask"> Viewport mask (integer, each bit of which is used to represent a mask). </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getLightmapViewportMask const">
			<summary>
			Returns the current viewport mask set for lightmapper.
			</summary>  
			<returns>Viewport mask (integer, each bit of which is used to represent a mask).</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setLightmapZFar(float)">
			<summary>
			Sets the far clipping distance for light rays used when baking lightmaps.
			</summary> 
			<param name="zfar"> Far clipping distance. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getLightmapZFar const">
			<summary>
			Returns the far clipping distance for light rays.
			</summary>  
			<returns>Far clipping distance.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setCacheDir(char)">
			<summary>
			Sets the path to the directory that stores temporary cache textures during lightmaps baking process. By default, the bin/unigine_bake_lighting_cache project's folder is set.It is recommended to specify a path to a non-existing folder to avoid losing files.
			</summary> 
			<param name="dir"> An absolute path or a relative path to the bin folder. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getCacheDir const">
			<summary>
			Returns the current path set for the directory that stores temporary cache textures during lightmaps baking process. By default, the bin/unigine_bake_lighting_cache project's folder is set.
			</summary>  
			<returns>Path to the cache folder.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentObject const">
			<summary>
			Returns the object currently being processed when baking lightmaps.
			</summary>  
			<returns>Object pointer during lightmaps baking; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentSurface const">
			<summary>
			Returns the index of the surface currently being processed when baking lightmaps.
			</summary>  
			<returns>Index of the surface during lightmaps baking; otherwise, -1.</returns>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_ULTRA">
			<summary>
			Ultra baking quality. Might be useful to get rid of even small inconsistencies. Intended for the release production.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_HIGH">
			<summary>
			Ultra baking quality. Corresponds to high sampling quality and number of light rays simulated intended for release production.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_MEDIUM">
			<summary>
			Ultra baking quality. Corresponds to stable quality level which is good for most cases.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_LOW">
			<summary>
			Ultra baking quality. Provides low sampling quality and number of light rays.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_DRAFT">
			<summary>
			Ultra baking quality. Provides the highest iterativity with the lowest sampling quality and number of rays.
		</summary>
		</member>
		<member name="M:Unigine.Render.setEnabled(int) const">
			<summary>
			Enables or disables the render.
			</summary> 
			<param name="arg1"> 1 to enable the render, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isEnabled const">
			<summary>
			Returns a value indicating if the render is enabled.
			</summary>  
			<returns>1 if the render is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.isAPISupported(int)">
			<summary>
			Returns a value indicating if the specified graphics API (Null/OpenGL/DirectX) is currently supported.
			</summary> 
			<param name="api"> Graphics API ID. One of the API_* values. </param> 
			<returns>true if the specified graphics API is currently supported; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.beginDebugGroup(char)">
			<summary>
			Starts a GPU debug group with a specified name in Microprofiler.
			</summary> 
			<param name="name"> Name of debug group. </param> 
		</member>
		<member name="M:Unigine.Render.endDebugGroup">
			<summary>
			Ends a GPU debug group previously started via the beginDebugGroup() method.
			</summary>  
		</member>
		<member name="M:Unigine.Render.destroyCacheTexture(Unigine.UGUID)">
			<summary>
			Deletes cache (images and metadata) stored on disk for the texture with the specified GUID. Corresponding files in the data/.cache_textures will be  removed.
			</summary> 
			<param name="guid"> Texture file GUID. </param> 
		</member>
		<member name="M:Unigine.Render.createCacheTexture(Unigine.UGUID)">
			<summary>
			Generates cache for the texture with the specified GUID.										Texture cache generated by this method is incomplete, only images are created, as all metadata (flags, etc.) is stored in materials.
			</summary> 
			<param name="guid"> Texture file GUID. </param> 
		</member>
		<member name="M:Unigine.Render.destroyCacheTextures">
			<summary>
			Clears texture cache (images and metadata) stored on disk. All files in the data/.cache_textures will be  removed.
			</summary>  
		</member>
		<member name="M:Unigine.Render.unloadCacheTextures">
			<summary>
			Unloads texture cache from the memory. This method does not delete files in the data/.cache_textures.
			</summary>  
		</member>
		<member name="M:Unigine.Render.createCacheTextures">
			<summary>
			Generates texture cache for all textures used in the project.					Texture cache generated by this method is incomplete, only images are created, as all metadata (flags, etc.) is stored in materials.
			</summary>  
		</member>
		<member name="M:Unigine.Render.loadCacheTextures">
			<summary>
			Loads texture cache from the disk. Texture cache always remains in memory after loading.
			</summary>  
		</member>
		<member name="M:Unigine.Render.getBlack2DArrayTexture const">
			<summary>
			Returns black 2D array texture.
			</summary>  
			<returns>Black 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlack2DTexture const">
			<summary>
			Returns black 2D texture.
			</summary>  
			<returns>Black 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlack2DUIntTexture const">
			<summary>
			Returns black 2D UInt texture.
			</summary>  
			<returns>Black 2D UInt texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlack3DTexture const">
			<summary>
			Returns black 3D texture.
			</summary>  
			<returns>Black 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlackCubeTexture const">
			<summary>
			Returns black Cube texture.
			</summary>  
			<returns>Black Cube texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGray2DArrayTexture const">
			<summary>
			Returns gray 2D array texture.
			</summary>  
			<returns>Gray 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGray2DTexture const">
			<summary>
			Returns gray 2D texture.
			</summary>  
			<returns>Gray 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGray2DUIntTexture const">
			<summary>
			Returns gray 2D UInt texture.
			</summary>  
			<returns>Gray 2D UInt texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGray3DTexture const">
			<summary>
			Returns gray 3D texture.
			</summary>  
			<returns>Gray 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGrayCubeTexture const">
			<summary>
			Returns gray Cube texture.
			</summary>  
			<returns>Gray Cube texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite2DArrayTexture const">
			<summary>
			Returns white 2D array texture.
			</summary>  
			<returns>White 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite2DTexture const">
			<summary>
			Returns white 2D texture.
			</summary>  
			<returns>White 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite2DUIntTexture const">
			<summary>
			Returns white 2D UInt texture.
			</summary>  
			<returns>White 2D UInt texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite3DTexture const">
			<summary>
			Returns white 3D texture.
			</summary>  
			<returns>White 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhiteCubeTexture const">
			<summary>
			Returns white Cube texture.
			</summary>  
			<returns>White Cube texture.</returns>
		</member>
		<member name="M:Unigine.Render.getMaxTextureBufferSize">
			<summary>
			Returns the maximum size of the texture buffer.
			</summary>  
			<returns>Maximum size of the texture buffer.</returns>
		</member>
		<member name="M:Unigine.Render.addCallback(int,Unigine.CallbackBase1{Unigine.Renderer})">
			<summary>
			Adds a callback for the specified stage of the rendering sequence. Callback functions can be used to get access to buffers and matrices at intermediate stages of the rendering sequence. Some of them are read-only, but most of them can be modified ad hoc.
			Callback function must be as follows:
			</summary> 
			<param name="callback"> Stage of the rendering sequence for which a callback is to be added. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the rendering pass, _END - to its completion. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Render.clearCallbacks(int)">
			<summary>
			Clears all added callbacks for the specified stage of the rendering sequence. Callback functions can be used to get access to buffers and matrices at intermediate stages of the rendering sequence. Some of them are read-only, but most of them can be modified ad hoc.
			</summary> 
			<param name="callback"> Stage of the rendering sequence for which the callbacks are to be cleared. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the rendering pass, _END - to its completion. </param> 
		</member>
		<member name="M:Unigine.Render.removeCallback(int,void)">
			<summary>
			Removes the specified callback from the list of callbacks for the specified stage of the rendering sequence. Callback functions can be used to get access to buffers and matrices at intermediate stages of the rendering sequence. Some of them are read-only, but most of them can be modified ad hoc.
			</summary> 
			<param name="callback"> Stage of the rendering sequence for which the callback is to be removed. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the rendering pass, _END - to its completion. </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.addScriptableMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Adds a new global scriptable material. To apply a scriptable material per-camera or per-player, use the addScriptableMaterial() method of the Camera class or the same method of the Player class respectively. The order of execution for scripts assigned to scriptable materials is defined by material's number in the list of materials applied globally.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="material"> Scriptable material to be applied globally. </param> 
		</member>
		<member name="M:Unigine.Render.insertScriptableMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Inserts a new global scriptable material to the list of globally applied scriptable materials. To apply a scriptable material per-camera or per-player, use the insertScriptableMaterial() method of the Camera class or the same method of the Player class respectively. The order of execution for scripts assigned to scriptable materials is defined by material's number in the list of materials applied globally.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="num"> Position at which a new scriptable material is to be inserted. </param>
			<param name="material"> Scriptable material to be inserted into the list of globally applied scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Render.removeScriptableMaterial(int)">
			<summary>
			Removes the global scriptable material with the specified number.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Render.findScriptableMaterial(Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Returns the number of the specified scriptable material applied globally. This number determines the order in which the assigned expressions are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="material"> Scriptable material for which a number is to be found. </param> 
			<returns>Scriptable material number in the range from 0 to the total number of scriptable materials, or -1 if the specified material was not found.</returns>
		</member>
		<member name="M:Unigine.Render.setScriptableMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Replaces the scriptable material with the specified number with the new scriptable material specified. The number of material determines the order in which the expressions assigned to it are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param>
			<param name="material"> New scriptable material to replace the one with the specified number. </param> 
		</member>
		<member name="M:Unigine.Render.getScriptableMaterial(int) const">
			<summary>
			Returns a scriptable material applied globally by its number.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
			<returns>Scriptable material applied globally with the specified number.</returns>
		</member>
		<member name="M:Unigine.Render.setScriptableMaterialEnabled(int,bool)">
			<summary>
			Enables or disables the scriptable material with the specified number. When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param>
			<param name="enabled"> 1 to enable the scriptable material with the specified number, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.getScriptableMaterialEnabled(int) const">
			<summary>
			Returns a value indicating if the scriptable material with the specified number is enabled (active). When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
			<returns>1 if the scriptable material with the specified number is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.swapScriptableMaterials(int,int)">
			<summary>
			Swaps two scriptable materials with specified numbers. The number of material determines the order in which the expressions assigned to it are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="num_0"> Number of the first scriptable material in the range from 0 to the total number of scriptable materials. </param>
			<param name="num_1"> Number of the second scriptable material in the range from 0 to the total number of scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Render.clearScriptableMaterials">
			<summary>
			Clears all global scriptable materials.
			</summary>  
		</member>
		<member name="M:Unigine.Render.getHDRTextureFormat const">
			<summary>
			Returns the currently used HDR texture format.
			</summary>  
			<returns>Current HDR texture format. One of the following values:FORMAT_RGBA16FFORMAT_RG11B10F</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
								Allocates a temporary render texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="texture"> Source texture for which a temporary texture is to be allocated in the pool. </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(Unigine.Ptr{Unigine.Texture},char)">
			<summary>
								Allocates a temporary render texture for the specified source texture (using all its parameters: resolution, flags, etc.). This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="texture"> Source texture for which a temporary texture is to be allocated in the pool. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(Unigine.Ptr{Unigine.Texture},char,int)">
			<summary>
								Allocates a temporary render texture for the specified source texture (using all its parameters: resolution, flags, etc.). This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="texture"> Source texture for which a temporary texture is to be allocated in the pool. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(int,int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary render texture with the specified width, height, depth, format, flags, and type. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="type"> Texture type (2D, 3D, Cube, etc.): one of the Texture::TEXTURE_* values. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(int,int,int,int,int,int,char)">
			<summary>
								Allocates a temporary render texture with the specified width, height, depth, format, flags, and type. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="type"> Texture type (2D, 3D, Cube, etc.): one of the Texture::TEXTURE_* values. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(int,int,int,int,int,int)">
			<summary>
								Allocates a temporary render texture with the specified width, height, depth, format, flags, and type. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="type"> Texture type (2D, 3D, Cube, etc.): one of the Texture::TEXTURE_* values. </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture2D(int,int,int,int,char,int)">
			<summary>
								Allocates a temporary 2D texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary> 
			<param name="width"> Width of the 2D texture, in pixels. </param>
			<param name="height"> Height of the 2D texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary 2D texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture2DArray(int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary 2D array texture with the specified width, height, number of layers, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary> 
			<param name="width"> Width of the 2D array texture, in pixels. </param>
			<param name="height"> Height of the 2D array texture, in pixels. </param>
			<param name="depth"> Number of layers in the 2D array texture. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary 2D array texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture3D(int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary 3D texture with the specified width, height, depth, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary> 
			<param name="width"> Width of the 3D texture, in pixels. </param>
			<param name="height"> Height of the 3D texture, in pixels. </param>
			<param name="depth"> Depth of the 3D texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary 3D texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTextureCube(int,int,int,int,char,int)">
			<summary>
								Allocates a temporary cubemap texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary> 
			<param name="width"> Width of the cubemap texture, in pixels. </param>
			<param name="height"> Height of the cubemap texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary cubemap texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary cubemap texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture(Unigine.Ptr{Unigine.Material},int,int,int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary render texture from the previous frame with the specified width, height, depth, format, flags, and accessory type. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="type"> Texture type (2D, 3D, Cube, etc.): one of the Texture::TEXTURE_* values. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture(Unigine.Ptr{Unigine.Material},int,int,int,int,int,int,int,char)">
			<summary>
								Allocates a temporary render texture from the previous frame with the specified width, height, depth, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="type"> Texture type (2D, 3D, Cube, etc.): one of the Texture::TEXTURE_* values. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture(Unigine.Ptr{Unigine.Material},int,int,int,int,int,int,int)">
			<summary>
								Allocates a temporary render texture from the previous frame with the specified width, height, depth, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="type"> Texture type (2D, 3D, Cube, etc.): one of the Texture::TEXTURE_* values. </param> 
			<returns>Temporary texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture(Unigine.Ptr{Unigine.Material},int,Unigine.Ptr{Unigine.Texture},char,int)">
			<summary>
								Allocates a temporary render texture from the previous frame for the specified source texture (using all its parameters: resolution, flags, etc.). This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="texture"> Source texture for which a temporary texture is to be allocated in the pool. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture(Unigine.Ptr{Unigine.Material},int,Unigine.Ptr{Unigine.Texture},char)">
			<summary>
								Allocates a temporary render texture from the previous frame for the specified source texture (using all its parameters: resolution, flags, etc.). This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="texture"> Source texture for which a temporary old texture is to be allocated in the pool. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture(Unigine.Ptr{Unigine.Material},int,Unigine.Ptr{Unigine.Texture})">
			<summary>
								Allocates a temporary render texture from the previous frame for the specified source texture (using all its parameters: resolution, flags, etc.). This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="texture"> Source texture for which a temporary old texture is to be allocated in the pool. </param> 
			<returns>Temporary texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture2D(Unigine.Ptr{Unigine.Material},int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary 2D texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary 2D texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture2DArray(Unigine.Ptr{Unigine.Material},int,int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary 2D array texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary 2D array texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTexture3D(Unigine.Ptr{Unigine.Material},int,int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary 3D texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="depth"> Depth of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary 3D texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryOldTextureCube(Unigine.Ptr{Unigine.Material},int,int,int,int,int,char,int)">
			<summary>
								Allocates a temporary cubemap texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. This texture doesn't require to be released.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.					You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.					It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="mat"> Material that will use the texture with the specified ID. </param>
			<param name="texture_id"> Texture ID set by the user, value in the range [0, 255]. </param>
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="accessory"> Texture render sequence accessory type. One of the TEXTURE_ACCESSORY_* values. </param> 
			<returns>Temporary cubemap texture from the previous frame.</returns>
		</member>
		<member name="M:Unigine.Render.releaseTemporaryTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Releases the temporary texture previously obtained via getTemporaryTexture(), getTemporaryTexture2D(), getTemporaryTexture2DArray(), getTemporaryTexture3D(), or getTemporaryTextureCube() method and returns it to the pool.
			</summary> 
			<param name="texture"> Temporary texture or texture array to be returned to the pool. </param> 
		</member>
		<member name="M:Unigine.Render.getTemporaryRenderTarget">
			<summary>
								Allocates a temporary render target. This function can be used when you need a quick render target to perform some temporary calculations. Release it using releaseTemporaryRenderTarget() as soon as you're done with it, so another call can start reusing it if necessary. In any case such render target shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render targets, so a call to this method most often just returns an already created one (if the size and format matches). These temporary render targets are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render targets for each blit, instead of getting one or two render targets upfront and reusing them.						You can't depend on any particular contents of a temporary render target obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary>  
			<returns>Temporary render target.</returns>
		</member>
		<member name="M:Unigine.Render.releaseTemporaryRenderTarget(Unigine.Ptr{RenderTarget})">
			<summary>
			Releases the temporary render target previously obtained via getTemporaryRenderTarget() method and returns it to the pool.
			</summary> 
			<param name="render_target"> Temporary render target to be returned to the pool. </param> 
		</member>
		<member name="M:Unigine.Render.compressImage(Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Converts the image to a specified compressed format. If compression by the GPU is not supported, the Image::compress() method will be called instead.
			</summary> 
			<param name="image"> Image to compress. </param>
			<param name="quality"> Compression quality:0 - fast compression, low compressed image quality.1 - high compressed image quality, slow compression (by default). </param>
			<param name="new_image_format"> Compressed texture format: one of the Texture::FORMAT_* variables. This is an optional argument. If no format is specified, default conversion will be performed (depending on the type of the source image). </param>
			<param name="use_mip_maps"> Flag indicating whether texture mipmaps should be generated for the compressed image: 1 to generate mipmaps, 0 not to generate. This is an optional argument. If no value is specified, mipmaps will be generated only if the source image has the mipmaps. </param> 
			<returns>1 if the image has been compressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.compressTexture(Unigine.Ptr{Unigine.Texture},Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Compresses the given texture to the specified format.					Only 2d and 2d array textures can be compressed.
			</summary> 
			<param name="texture"> Source texture to compress. </param>
			<param name="destination"> Image into which the compressed texture will be saved. </param>
			<param name="quality"> Compression quality:0 - fast compression, low compressed image quality.1 - high compressed image quality, slow compression (by default). </param>
			<param name="new_texture_format"> Compressed texture format: one of the Texture::FORMAT_*  variables. This is an optional argument. If no format is specified, default conversion will be performed (depending on the type of the source image). </param>
			<param name="use_mip_maps"> Flag indicating whether texture mipmaps should be generated for the compressed image: 1 to generate mipmaps, 0 not to generate. This is an optional argument. If no value is specified, mipmaps will be generated only if the source image has the mipmaps. </param> 
			<returns>1 if the texture has been compressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.convertColorSpecularToMetalness(Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Performs color conversion from the specular workflow (diffuse, specular) to the metalness workflow (albedo, shading).
			</summary> 
			<param name="diffuse"> Input diffuse color. </param>
			<param name="specular"> Input specular color. </param>
			<param name="albedo"> Output albedo color. </param>
			<param name="shading"> Output shading color. </param> 
		</member>
		<member name="M:Unigine.Render.convertImageSpecularToMetalness(Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image})">
			<summary>
			Performs texture conversion from the specular workflow (diffuse, specular) to the metalness workflow (albedo, shading).
			</summary> 
			<param name="diffuse"> Input diffuse texture. </param>
			<param name="specular"> Input specular texture. </param>
			<param name="albedo"> Output albedo texture. </param>
			<param name="shading"> Output shading texture. </param> 
		</member>
		<member name="M:Unigine.Render.createMipmapsCubeGGXImage(Unigine.Ptr{Unigine.Image},float)">
			<summary>
			Generates mipmaps for a cubemap image using GGX BRDF microfacet model.
			</summary> 
			<param name="image"> Cubemap image. IMAGE_CUBE or IMAGE_CUBE_ARRAY types are accepted. </param>
			<param name="quality"> Quality value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Render.createMipmapsCubeGGXTexture(Unigine.Ptr{Unigine.Texture},float)">
			<summary>
			Generates mipmaps for a cubemap texture using GGX BRDF microfacet model.
			</summary> 
			<param name="texture"> Cubemap texture. TEXTURE_CUBE or TEXTURE_CUBE_ARRAY types are accepted. </param>
			<param name="quality"> Quality value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Render.createShorelineDistanceField(Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Grabs a shoreline distance field texture with the specified parameters.
			</summary> 
			<param name="image"> Image to grab a shoreline texture to. </param>
			<param name="mask"> An R16 mask texture Image. Each pixel of the mask has the following color value:0 if water level at this point of the grid is above the terrain level; otherwise, 65535. </param>
			<param name="shoreline_radius"> Shoreline radius value within the [4; 128] range. Padding distance (from the shore to the beginning of swash zone). </param>
			<param name="blur_radius"> Blur radius value within the [0; 32] range. Higher values make shoreline smoother. </param>
			<param name="downsample_resolution"> Texture resolution value, can be one of the following: 16, 32, 64, 128, 256, 512, 1024, 2048. </param> 
			<returns>1 if the shoreline distance field texture is grabbed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionHueShiftIndex(int,float)">
			<summary>
			Sets the hue (color shift) value for the specified major color of the spectre (one of 12). This method can be used for fine-adjustment of color shift correction.
			</summary> 
			<param name="index"> Index of the desired major color of the spectre in the range [0; 11] (Red, Orange, Yellow, Chartreuse, Green, Spring Green, Cyan, Azure, Blue, Violet, Magenta, Rose).  </param>
			<param name="value"> Hue (color shift) value to be set for the specified major color of the spectre in the range [0.0f; 1.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionHueShiftIndex(int)">
			<summary>
			Returns the current hue (color shift) value for the specified major color of the spectre (one of 12).
			</summary> 
			<param name="index"> Index of the desired major color of the spectre in the range [0; 11] (Red, Orange, Yellow, Chartreuse, Green, Spring Green, Cyan, Azure, Blue, Violet, Magenta, Rose).  </param> 
			<returns>Current hue (color shift) value for the specified major color of the spectre in the range [0.0f; 1.0f].</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionLUTImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets a new color transformation image (LUT). This function resets a LUT texture name to null if it has been previously set via setColorCorrectionLUTPath().
			</summary> 
			<param name="image"> Color transformation image. </param> 
			<returns>1 if the image is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.getColorCorrectionLUTImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Return the current color transformation image (LUT).
			</summary> 
			<param name="image"> Image to store the color transformation texture in. </param> 
			<returns>1 if an image is successfully received; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.resetColorCorrectionRamp">
			<summary>
			Resets the Color Correction ramp to the default value.
			</summary>  
		</member>
		<member name="M:Unigine.Render.resetColorCorrectionSaturationRamp">
			<summary>
			Resets the Saturation Correction ramp to the default value.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setColorCorrectionSaturationIndex(int,float)">
			<summary>
			Sets the saturation value for the specified major color of the spectre (one of 12). This method can be used for fine-adjustment of color saturation correction.
			</summary> 
			<param name="index"> Index of the desired major color of the spectre in the range [0; 11] (Red, Orange, Yellow, Chartreuse, Green, Spring Green, Cyan, Azure, Blue, Violet, Magenta, Rose).  </param>
			<param name="value"> Saturation value to be set for the specified major color of the spectre in the range [0.0f; 1.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionSaturationIndex(int)">
			<summary>
			Returns the current saturation value for the specified major color of the spectre (one of 12).
			</summary> 
			<param name="index"> Index of the desired major color of the spectre in the range [0; 11] (Red, Orange, Yellow, Chartreuse, Green, Spring Green, Cyan, Azure, Blue, Violet, Magenta, Rose).  </param> 
			<returns>Current saturation value for the specified major color of the spectre in the range [0.0f; 1.0f].</returns>
		</member>
		<member name="M:Unigine.Render.loadSettings(char,bool)">
			<summary>
			Loads render settings from a given file.
			</summary> 
			<param name="file"> Path to an XML file with desired settings. </param>
			<param name="clear"> Clear flag. Set true to clear settings before loading (new settings shall be applied right after loading them), or false not to clear. </param> 
			<returns>1 if the settings are loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads render state from the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>true if the state is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.renderComputeMaterial(Render::PASS,Unigine.Ptr{Unigine.Material},int,int,int)">
			<summary>
			Sets up a material and dispatches to compute shader. The material must have a post shader associated with it.
			</summary> 
			<param name="pass"> Rendering pass number in range [0;NUM_PASSES) (one of the PASS_* variables). </param>
			<param name="material"> Material to be used. </param>
			<param name="width"> Local X work-group size of the compute shader. </param>
			<param name="height"> Local Y work-group size of the compute shader. </param>
			<param name="depth"> Local Z work-group size of the compute shader. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.renderImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Renders the scene into a 2D image in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param> 
		</member>
		<member name="M:Unigine.Render.renderImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int,int,int,int)">
			<summary>
			Renders the scene into a 2D image of the given size in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="width"> Width of the projected image, in units. </param>
			<param name="height"> Height of the projected image, in units. </param>
			<param name="hdr"> 1 - enable HDR, 0 - disable HDR. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param> 
		</member>
		<member name="M:Unigine.Render.renderImageCube(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Renders the scene into a cube map image in accordance with the specified parameters.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param> 
		</member>
		<member name="M:Unigine.Render.renderImageCube(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int,int,int,bool)">
			<summary>
			Renders the scene into a cube map in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="size"> Texture dimensions (cube map edge size). </param>
			<param name="hdr"> 1 - enable HDR; 0 - disable HDR. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param>
			<param name="local_space"> 1 - local space coordinates; 0 - world space coordinates. </param> 
		</member>
		<member name="M:Unigine.Render.renderNodeImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Node},Unigine.Ptr{Unigine.Image},int,int,char)">
			<summary>
			Renders the given node into a 2D image in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class. The node can be rendered using the specific type of lighting and environment cubemap.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="node"> Node to be rendered. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="skip_flags"> Skip the effects. One of the SKIP_* variables should be specified. 0 enables all the effects. </param>
			<param name="light_usage"> Sets the light sources that will affect the node (one of the USAGE_*_LIGHTING Viewport class variables.) </param>
			<param name="environment_texture_name"> Path to the environment cubemap to be used. Takes effect if the first (auxiliary light) or second (node light) lighting mode is used (see the light_usage argument above). In case LightWorld is used (zero mode), the environment cubemap used for the current world will be used. </param> 
		</member>
		<member name="M:Unigine.Render.renderNodeImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Node},Unigine.Ptr{Unigine.Image},int,int,int,int,int,char)">
			<summary>
			Renders the 2D image of the given node in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class. The node can be rendered using the specific type of lighting and environment cubemap.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="node"> Node to be rendered. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="width"> Width of the image, in units. </param>
			<param name="height"> Height of the image, in units. </param>
			<param name="hdr"> HDR flag. This parameter determines the format of the 2D image:1 - image format will be set to RGBA16F. It means that the HDR image buffer will store pixel values outside the [0;1] range (i.e. both negative and positive values).0 - image format will be set to RGBA8. </param>
			<param name="skip_flags"> Skip the effects. One of the SKIP_* variables should be specified. 0 enables all the effects. </param>
			<param name="light_usage"> Sets the light sources that will affect the node (one of the USAGE_*_LIGHTING Viewport class variables). </param>
			<param name="environment_texture_name"> Path to the environment cubemap to be used. Takes effect if the first (auxiliary light) or second (node light) lighting mode is used (see the light_usage argument above). In case LightWorld is used (zero mode), the environment cubemap used for the current world will be used. </param> 
		</member>
		<member name="M:Unigine.Render.renderScreenMaterial(char)">
			<summary>
			Renders a screen-space material with the given name.
			</summary> 
			<param name="material_name"> Material name. </param> 
		</member>
		<member name="M:Unigine.Render.renderScreenMaterial(char,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Renders a screen-space material with the specified name and the color texture.
			</summary> 
			<param name="material_name"> Material name. </param>
			<param name="color_texture"> Color texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.Render.renderScreenMaterial(char,char,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Renders a screen-space material with the given texture. For example:
			</summary> 
			<param name="material_name"> Material smart pointer. </param>
			<param name="texture_name"> Material texture name. </param>
			<param name="texture"> Texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.Render.renderTAA(Unigine.Ptr{Unigine.Texture},Unigine.Ptr{Unigine.Texture})">
			<summary>
			Renders the TAA filter.
			</summary> 
			<param name="color_texture"> Color texture smart pointer. </param>
			<param name="color_old_texture"> Old color texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.Render.saveSettings(char) const">
			<summary>
			Saves the current renderer settings to a given file.
			</summary> 
			<param name="file"> Path to a target file. </param> 
			<returns>true if the settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.saveState(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves a render state into the stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreState() method is used:
			</summary> 
			<param name="stream"> Stream to save a state into. </param> 
			<returns>true if the state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores a render state from the stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveState() method:
			</summary> 
			<param name="stream"> Stream to restore a state from. </param> 
			<returns>true if the state is restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.saveWorld(Unigine.Ptr{Unigine.Xml}) const">
			<summary>
			Saves the render state into the given Xml node.
			</summary> 
			<param name="xml"> Xml node. </param> 
			<returns>true if the state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentPreset(int)">
			<summary>
			Returns the environment preset of the given number.
			</summary> 
			<param name="num"> The number of the environment preset. The value is clamped to the [0;2] range. </param> 
			<returns>Environment preset.</returns>
		</member>
		<member name="M:Unigine.Render.getCloudsQualityPresetName(int)">
			<summary>
			Returns the Clouds Quality preset name by given index.
			</summary> 
			<param name="num"> Clouds Quality preset index. </param> 
			<returns>Clouds Quality preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getAAPresetName(int)">
			<summary>
			Returns the AA (Anti-Aliasing) preset name by given index.
			</summary> 
			<param name="num"> AA preset index. </param> 
			<returns>AA preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getTAAPresetName(int)">
			<summary>
			Returns the TAA (Temporal Anti-Aliasing) preset name by given index.
			</summary> 
			<param name="num"> TAA preset index. </param> 
			<returns>TAA preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getGIPresetName(int)">
			<summary>
			Returns the GI (Global Illumination) preset name by given index.
			</summary> 
			<param name="num"> GI preset index. </param> 
			<returns>GI preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRTGIPresetName(int)">
			<summary>
			Returns the SSRTGI (Screen-Space Ray-Traced Global Illumination) preset name by given index.
			</summary> 
			<param name="num"> SSRTGI preset index. </param> 
			<returns>SSRTGI preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getSSAOPresetName(int)">
			<summary>
			Returns the SSAO (Screen Space Ambient Occlusion) preset name by given index.
			</summary> 
			<param name="num"> SSAO preset index. </param> 
			<returns>SSAO preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getSSGIPresetName(int)">
			<summary>
			Returns the SSGI (Screen-Space Global Illumination) preset name by given index.
			</summary> 
			<param name="num"> SSGI preset index. </param> 
			<returns>SSGI preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getBentNormalPresetName(int)">
			<summary>
			Returns the Bent Normal preset name by given index.
			</summary> 
			<param name="num"> Bent Normal preset index. </param> 
			<returns>Bent Normal preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRPresetName(int)">
			<summary>
			Returns the SSR preset name by given index.
			</summary> 
			<param name="num"> SSR preset index. </param> 
			<returns>SSR preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getSSSSSPresetName(int)">
			<summary>
			Returns the SSSSS preset name by given index.
			</summary> 
			<param name="num"> SSSSS preset index. </param> 
			<returns>SSSSS preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getMotionBlurPresetName(int)">
			<summary>
			Returns the Motion Blur preset name by given index.
			</summary>  
			<returns>Motion Blur preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getDOFPresetName(int)">
			<summary>
			Returns the DOF preset name by given index.
			</summary>  
			<returns>DOF preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryPresetName(int)">
			<summary>
			Returns the Landscape Terrain Geometry preset name by given index.
			</summary> 
			<param name="num"> Landscape Terrain Geometry preset index. </param> 
			<returns>Landscape Terrain Geometry preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainStreamingPresetName(int)">
			<summary>
			Returns the Landscape Terrain Streaming preset name by given index.
			</summary> 
			<param name="num"> Landscape Terrain Streaming preset index. </param> 
			<returns>Landscape Terrain Streaming preset name.</returns>
		</member>
		<member name="M:Unigine.Render.getWaterGeometryPresetName(int) const">
			<summary>
			Returns the Global Water Geometry preset name by given index.
			</summary> 
			<param name="num"> Global Water Geometry preset index. </param> 
			<returns>Global Water Geometry preset name.</returns>
		</member>
		<member name="M:Unigine.Render.isViewportModeStereo(Render::VIEWPORT_MODE)">
			<summary>
			Returns a value indicating if the specified mode is one of the stereo rendering modes.
			</summary> 
			<param name="mode"> Viewport mode to be checked. One of the VIEWPORT_MODE_* values. </param> 
			<returns>true if the specified mode is one of the stereo rendering modes; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.isViewportModePanorama(Render::VIEWPORT_MODE)">
			<summary>
			Returns a value indicating if the specified mode is one of the panorama rendering modes.
			</summary> 
			<param name="mode"> Viewport mode to be checked. One of the VIEWPORT_MODE_* values. </param> 
			<returns>true if the specified mode is one of the panorama rendering modes; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.clearDebugMaterials">
			<summary>
			Clears all global debug materials.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setDebugMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Replaces the debug material with the specified number with the new debug material specified. The number of material determines the order in which the expressions assigned to it are executed.
			</summary> 
			<param name="num"> Debug material number in the range from 0 to the total number of debug materials. </param>
			<param name="material"> New debug material to replace the one with the specified number. </param> 
		</member>
		<member name="M:Unigine.Render.getDebugMaterial(int) const">
			<summary>
			Returns a debug material applied globally by its number.
			</summary> 
			<param name="num"> Debug material number in the range from 0 to the total number of debug materials. </param> 
			<returns>Debug material applied globally with the specified number.</returns>
		</member>
		<member name="M:Unigine.Render.insertDebugMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Inserts a new global debug material to the list of globally applied debug materials.
			</summary> 
			<param name="num"> Position at which a new debug material is to be inserted. </param>
			<param name="material"> Debug material to be inserted into the list of globally applied debug materials. </param> 
		</member>
		<member name="M:Unigine.Render.findDebugMaterial(Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Returns the number of the specified debug material applied globally. This number determines the order in which the assigned expressions are executed.
			</summary> 
			<param name="material"> Debug material for which a number is to be found. </param> 
			<returns>Debug material number in the range from 0 to the total number of debug materials, or -1 if the specified material was not found.</returns>
		</member>
		<member name="M:Unigine.Render.addDebugMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Adds a new global debug material.
			</summary> 
			<param name="material"> Debug material to be applied globally. </param> 
		</member>
		<member name="M:Unigine.Render.removeDebugMaterial(int)">
			<summary>
			Removes the global debug material with the specified number.
			</summary> 
			<param name="num"> Debug material number in the range from 0 to the total number of debug materials. </param> 
		</member>
		<member name="M:Unigine.Render.swapDebugMaterials(int,int)">
			<summary>
			Swaps two debug materials with specified numbers. The number of material determines the order in which the expressions assigned to it are executed.
			</summary> 
			<param name="num_0"> Number of the first debug material in the range from 0 to the total number of debug materials. </param>
			<param name="num_1"> Number of the second debug material in the range from 0 to the total number of debug materials. </param> 
		</member>
		<member name="M:Unigine.Render.setDebugMaterialEnabled(int,bool)">
			<summary>
			Enables or disables the debug material with the specified number. When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Debug material number in the range from 0 to the total number of debug materials. </param>
			<param name="enabled"> 1 to enable the debug material with the specified number, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.getDebugMaterialEnabled(int) const">
			<summary>
			Returns a value indicating if the debug material with the specified number is enabled (active). When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Debug material number in the range from 0 to the total number of debug materials. </param> 
			<returns>1 if the debug material with the specified number is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.getCacheTexture(Unigine.UGUID)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.getD3D11Factory const">
			<summary>
			Returns the pointer to the D3D11Factory.
			</summary>  
			<returns>D3D11 Factory pointer.</returns>
		</member>
		<member name="M:Unigine.Render.getD3D11Device const">
			<summary>
			Returns the D3D11 device associated with D3D11 renderer.
			</summary>  
			<returns>D3D11 device associated with given renderer.</returns>
		</member>
		<member name="M:Unigine.Render.getD3D11Context const">
			<summary>
			Returns a pointer to the existing ID3D11DeviceContext interface.
			</summary>  
			<returns>ID3D11Device interface pointer.</returns>
		</member>
		<member name="M:Unigine.Render.getGLContext const">
			<summary>
			Returns the pointer to the OpenGL context.
			</summary>  
			<returns>OpenGL context pointer.</returns>
		</member>
		<member name="F:Unigine.Render.API_UNKNOWN">
			<summary>
			Unknown API.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_NULL">
			<summary>
			Null API name.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_OPENGL">
			<summary>
			OpenGL API.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_DIRECT3D11">
			<summary>
			DIRECT3D 11 API.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_DIRECT3D12">
			<summary>
			DIRECT3D 12 API.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_VULKAN">
			<summary>
			VULKAN API.
		</summary>
		</member>
		<member name="F:Unigine.Render.ENVIRONMENT_NUM_PRESETS">
			<summary>
			Number of environment presets.
		</summary>
		</member>
		<member name="F:Unigine.Render.EXPOSURE_DISABLED">
			<summary>
			Rendering of the adaptive exposure effect is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Render.EXPOSURE_LOGARITHMIC">
			<summary>
			The logarithmic exposure effect is used.
		</summary>
		</member>
		<member name="F:Unigine.Render.EXPOSURE_QUADRATIC">
			<summary>
			The adaptive exposure effect is rendered using quadratic function.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_AMD">
			<summary>
			AMD GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_APPLE">
			<summary>
			Apple GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_ARM">
			<summary>
			ARM GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_IMGTEC">
			<summary>
			Imagination Technologies GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_INTEL">
			<summary>
			Intel GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_NVIDIA">
			<summary>
			NVIDIA GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_QUALCOMM">
			<summary>
			Qualcomm GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_UNKNOWN">
			<summary>
			Unknown GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.HAZE_DISABLED">
			<summary>
			Rendering of the haze effect is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Render.HAZE_SCATTERING">
			<summary>
			Haze colored according to the sky LUT textures. This mode is recommended to achieve higher realism.
		</summary>
		</member>
		<member name="F:Unigine.Render.HAZE_SOLID">
			<summary>
			Solid color haze. The haze color is set by setHazeColor().
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN">
			<summary>
			Beginning of the callback range.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_ENVIRONMENT">
			<summary>
			Callback before the Environment rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_ENVIRONMENT">
			<summary>
			Callback after the Environment rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SHADOWS">
			<summary>
			Callback before the shadows rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WORLD_SHADOW">
			<summary>
			Callback before the stage of rendering shadows from World light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WORLD_SHADOW">
			<summary>
			Callback after the stage of rendering shadows from World light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_PROJ_SHADOW">
			<summary>
			Callback before the stage of rendering shadows from Projected light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_PROJ_SHADOW">
			<summary>
			Callback after the stage of rendering shadows from Projected light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OMNI_SHADOW">
			<summary>
			Callback before the stage of rendering shadows from Omni light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OMNI_SHADOW">
			<summary>
			Callback after the stage of rendering shadows from Omni light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SHADOWS">
			<summary>
			Callback after the shadows rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SCREEN">
			<summary>
			Callback before the stage of rendering each screen (a stereo image has 2 screens, while a cubemap will have 6).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_GBUFFER">
			<summary>
			Callback before filling the Gbuffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_GBUFFER">
			<summary>
			Callback after filling the Gbuffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_DECALS">
			<summary>
			Callback before the opacity decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_DECALS">
			<summary>
			Callback after the opacity decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CURVATURE">
			<summary>
			Callback before the SSBevel effect rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CURVATURE">
			<summary>
			Callback after the SSBevel effect rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CURVATURE_COMPOSITE">
			<summary>
			Callback before the curvature rendering stage for the SSDirt effect.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CURVATURE_COMPOSITE">
			<summary>
			Callback after the curvature rendering stage for the SSDirt effect.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSRTGI">
			<summary>
			Callback before the SSRTGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSRTGI">
			<summary>
			Callback after the SSRTGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_LIGHTS">
			<summary>
			Callback before the opacity lightgs rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_LIGHTS">
			<summary>
			Callback after the opacity lightgs rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_VOXEL_PROBES">
			<summary>
			Callback before the opacity voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_VOXEL_PROBES">
			<summary>
			Callback after the opacity voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_ENVIRONMENT_PROBES">
			<summary>
			Callback before the opacity environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_ENVIRONMENT_PROBES">
			<summary>
			Callback after the opacity environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_PLANAR_PROBES">
			<summary>
			Callback before the opacity planar probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_PLANAR_PROBES">
			<summary>
			Callback after the opacity planar probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_AUXILIARY_BUFFER">
			<summary>
			Callback before filling the auxiliary buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_AUXILIARY_BUFFER">
			<summary>
			Callback after filling the auxiliary buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_REFRACTION_BUFFER">
			<summary>
			Callback before filling the refraction buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_REFRACTION_BUFFER">
			<summary>
			Callback after filling the refraction buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_TRANSPARENT_BLUR_BUFFER">
			<summary>
			Callback before filling the transparent blur buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_TRANSPARENT_BLUR_BUFFER">
			<summary>
			Callback after filling the transparent blur buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSSS">
			<summary>
			Callback before the Screen-Space Shadow Shafts rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSSS">
			<summary>
			Callback after the Screen-Space Shadow Shafts rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSR">
			<summary>
			Callback before the SSR rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSR">
			<summary>
			Callback after the SSR rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSAO">
			<summary>
			Callback before the SSAO rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSAO">
			<summary>
			Callback after the SSAO rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSGI">
			<summary>
			Callback before the SSGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSGI">
			<summary>
			Callback after the SSGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SKY">
			<summary>
			Callback after the sky rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SKY">
			<summary>
			Callback after the sky rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_COMPOSITE_DEFERRED">
			<summary>
			Callback before the clouds deferred composite stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_COMPOSITE_DEFERRED">
			<summary>
			Callback after the clouds deferred composite stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_TRANSPARENT">
			<summary>
			Callback before the transparent objects rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CLOUDS">
			<summary>
			Callback before the clouds rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CLOUDS">
			<summary>
			Callback after the clouds rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER">
			<summary>
			Callback before the water rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_DECALS">
			<summary>
			Callback before the water decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_DECALS">
			<summary>
			Callback after the water decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_LIGHTS">
			<summary>
			Callback before the water lights rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_LIGHTS">
			<summary>
			Callback after the water lights rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_VOXEL_PROBES">
			<summary>
			Callback before the water voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_VOXEL_PROBES">
			<summary>
			Callback after the water voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_ENVIRONMENT_PROBES">
			<summary>
			Callback before the water environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_ENVIRONMENT_PROBES">
			<summary>
			Callback after the water environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_PLANAR_PROBES">
			<summary>
			Callback before the water planar probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_PLANAR_PROBES">
			<summary>
			Callback after the water planar probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER">
			<summary>
			Callback after the water rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_TRANSPARENT">
			<summary>
			Callback after the transparent objects rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SRGB_CORRECTION">
			<summary>
			Callback before the sRGB correction stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SRGB_CORRECTION">
			<summary>
			Callback after the sRGB correction stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_ADAPTATION_COLOR_AVERAGE">
			<summary>
			Callback before the calculation of automatic exposure and white balance correction.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_ADAPTATION_COLOR_AVERAGE">
			<summary>
			Callback after the calculation of automatic exposure and white balance correction.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_ADAPTATION_COLOR">
			<summary>
			Callback before the color adaptation rendering stage (automatic exposure and white balance correction).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_ADAPTATION_COLOR">
			<summary>
			Callback after the color adaptation rendering stage (automatic exposure and white balance correction).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_TAA">
			<summary>
			Callback before the Temporal Anti-Aliasing (TAA) pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_TAA">
			<summary>
			Callback after the Temporal Anti-Aliasing (TAA) pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CAMERA_EFFECTS">
			<summary>
			Callback before the camera effects stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CAMERA_EFFECTS">
			<summary>
			Callback after the camera effects stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_POST_MATERIALS">
			<summary>
			Callback before the post materials rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_POST_MATERIALS">
			<summary>
			Callback after the post materials rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_DEBUG_MATERIALS">
			<summary>
			Callback before the debug materials stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_DEBUG_MATERIALS">
			<summary>
			Callback after the debug materials stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_VISUALIZER">
			<summary>
			Callback before the visualizer rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_VISUALIZER">
			<summary>
			Callback after the visualizer rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SCREEN">
			<summary>
			Callback after the stage of rendering each screen (a stereo image has 2 screens, while a cubemap will have 6).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END">
			<summary>
			End of the callback range.
		</summary>
		</member>
		<member name="F:Unigine.Render.NUM_CALLBACKS">
			<summary>
			Callback counter.
		</summary>
		</member>
		<member name="F:Unigine.Render.TONEMAPPER_FILMIC">
			<summary>
			Filmic - basic customizable filmic tone mapping mode.
		</summary>
		</member>
		<member name="F:Unigine.Render.TONEMAPPER_ACES">
			<summary>
			ACES - tone mapping in accordance with the industry standard set by the Academy Color Encoding System (ACES) for television and film.
		</summary>
		</member>
		<member name="F:Unigine.Render.TONEMAPPER_MIX_ACES_WITH_REINHARD">
			<summary>
			Mix ACES With Reinhard - Combination of ACES and Reinhard tone mapping.
		</summary>
		</member>
		<member name="F:Unigine.Render.TONEMAPPER_REINHARD">
			<summary>
			Reinhard - Simple Reinhard. C/(1+C) formula applied to each of the channels. May cause slight desaturation.
		</summary>
		</member>
		<member name="F:Unigine.Render.TONEMAPPER_REINHARD_LUMA_BASED">
			<summary>
			Reinhard Luma-Based - Luma-based Reinhard tone mapping, applied to luminance only. More accurate representation of colors.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_WIREFRAME">
			<summary>
			Wireframe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_VISUALIZER_SOLID">
			<summary>
			Visualizer pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_DEFERRED">
			<summary>
			Deferred pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_AUXILIARY">
			<summary>
			Auxiliary pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_EMISSION">
			<summary>
			Emission pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_REFRACTION">
			<summary>
			Refraction pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_TRANSPARENT_BLUR">
			<summary>
			Transparent blur pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_AMBIENT">
			<summary>
			Ambient pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_VOXEL_PROBE">
			<summary>
			Light voxel probe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_ENVIRONMENT_PROBE">
			<summary>
			Light environment probe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_PLANAR_PROBE">
			<summary>
			Light planar probe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_OMNI">
			<summary>
			Omni light pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_PROJ">
			<summary>
			Proj light pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_WORLD">
			<summary>
			World light pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_SHADOW">
			<summary>
			Shadow pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_DEPTH_PRE_PASS">
			<summary>
			Depth pre-pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_MS_DEPTH">
			<summary>
			MS depth pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_POST">
			<summary>
			Post materials pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHTMAP_DATA">
			<summary>
			Lightmap data rendering pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_PROCEDURAL_DECALS">
			<summary>
			Pass for rendering of particles into procedural textures to be used by orthographic decals.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_PROCEDURAL_FIELDS">
			<summary>
			Pass for rendering of particles into procedural textures to be used by height fields.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_0">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_1">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_2">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_3">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_4">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_5">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_6">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_7">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_8">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_9">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_10">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_11">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_12">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_13">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_14">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_15">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_16">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_17">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_18">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_19">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_20">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_21">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_22">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_23">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_24">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_25">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_26">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_27">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_28">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_29">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_30">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_31">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_32">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.NUM_PASSES">
			<summary>
			Total number of rendering passes.
		</summary>
		</member>
		<member name="F:Unigine.Render.QUALITY_HIGH">
			<summary>
			High quality of textures.
		</summary>
		</member>
		<member name="F:Unigine.Render.QUALITY_LOW">
			<summary>
			Low quality of textures. 1/16 of the original texture will be used.
		</summary>
		</member>
		<member name="F:Unigine.Render.QUALITY_MEDIUM">
			<summary>
			Medium quality of textures. 1/4 of the original texture will be used.
		</summary>
		</member>
		<member name="F:Unigine.Render.STREAMING_FORCE">
			<summary>
			Forced mode enabling force-loading of all meshes and/or textures required for each frame at once.					Can be used for grabbing frame sequences, rendering node previews, warmup, etc.
		</summary>
		</member>
		<member name="F:Unigine.Render.STREAMING_ASYNC">
			<summary>
			Asynchronous streaming mode for meshes and textures.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_DISABLED">
			<summary>
			Disabled roughness correction.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_LOW">
			<summary>
			Roughness correction of minimum quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_MEDIUM">
			<summary>
			Roughness correction of medium quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_HIGH">
			<summary>
			Roughness correction of high quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_ULTRA">
			<summary>
			Roughness correction of ultra-high quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_DEFAULT">
			<summary>
			Enables the default stereo mode - no stereo and panoramic rendering in the current viewport is available. This mode is set by default for a new viewport.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_CURVED_180">
			<summary>
			Enables rendering of the viewport as a panorama with curved edges with an angle of 180 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_CURVED_360">
			<summary>
			Enables rendering of the viewport as a panorama with curved edges with an angle of 360 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_LINEAR_180">
			<summary>
			Enables rendering of the viewport as a linear panorama without distortion at the edges with an angle of 180 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_LINEAR_360">
			<summary>
			Enables rendering of the viewport as a linear panorama without distortion at the edges with an angle of 360 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_ORTHOGRAPHIC">
			<summary>
			Enables rendering of the viewport as an orthographic spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_EQUDISTANT">
			<summary>
			Enables rendering of the viewport as an equidistant spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_STEREOGRAPHIC">
			<summary>
			Enables rendering of the viewport as an stereographic spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_EQUISOLID">
			<summary>
			Enables rendering of the viewport as an equisolid spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_ANAGLYPH">
			<summary>
			Enables the anaglyph stereo mode that is viewed with red-cyan anaglyph glasses.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_INTERLACED">
			<summary>
			Enables the interlaced stereo mode that is used with interlaced stereo monitors and polarized 3D glasses.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_HORIZONTAL">
			<summary>
			Enables the horizontal stereo mode that is supported on mobile devices.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_VERTICAL">
			<summary>
			Enables the vertical stereo mode that is supported on mobile devices.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_SEPARATE">
			<summary>
			Enables the replicate images stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_REPLICATE">
			<summary>
			Enables the separate images stereo mode. This mode serves to output two separate images for each of the eye. It can be used with any VR/AR output devices that support separate images output, e.g. for 3D video glasses or helmets (HMD).
		</summary>
		</member>
		<member name="F:Unigine.Render.VSYNC_DISABLE">
			<summary>
			Vertical FPS synchronization is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Render.VSYNC_STRICT">
			<summary>
			Strict vertical FPS synchronization.
		</summary>
		</member>
		<member name="F:Unigine.Render.VSYNC_ADAPTIVE">
			<summary>
			Adaptive vertical FPS synchronization (OpenGL only).
		</summary>
		</member>
		<member name="F:Unigine.Render.TEXTURE_ACCESSORY_NONE">
			<summary>
			Ordinary non-accessory textures.
		</summary>
		</member>
		<member name="F:Unigine.Render.TEXTURE_ACCESSORY_GBUFFER">
			<summary>
			GBuffer textures (gbuffer_albedo, gbuffer_shading, gbuffer_normal, etc.).
		</summary>
		</member>
		<member name="F:Unigine.Render.TEXTURE_ACCESSORY_WBUFFER">
			<summary>
			Water buffer (WBuffer) textures (wbuffer_diffuse, wbuffer_normal, etc.).
		</summary>
		</member>
		<member name="F:Unigine.Render.TEXTURE_ACCESSORY_RENDER">
			<summary>
			Render textures (clouds, scene depth, etc.).
		</summary>
		</member>
		<member name="F:Unigine.Render.TEXTURE_ACCESSORY_OCCLUDERS">
			<summary>
			Textures used for occluders (occluders, occluder shadows, etc.).
		</summary>
		</member>
		<member name="F:Unigine.Render.TEXTURE_ACCESSORY_EXTERNAL">
			<summary>
			External textures.
		</summary>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getNum const">
			<summary>
			Returns the number of the preset.
			</summary>  
			<returns>Preset number. Available values: 0, 1, 2.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setIntensity(float)">
			<summary>
			Sets the intensity of the given preset. The preset intensity is used to blend the given environment preset with the other ones.					Presets overlay each other: the first preset overlays the zero one, the second overlays the first and the zero ones.
			</summary> 
			<param name="intensity"> Intensity of the preset. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getIntensity const">
			<summary>
			Returns the intensity of the preset. The preset intensity is used to blend the environment preset with the other ones.					Presets overlay each other: the first preset overlays the zero one, the second overlays the first and the zero ones.
			</summary>  
			<returns>Intensity of the preset.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setScatteringMieLUTName(char)">
			<summary>
			Sets the path to the Mie LUT texture (the texture for setting the color of the light round the sun) for the preset. The Mie texture is used for both sun and moon.
			</summary> 
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getScatteringMieLUTName const">
			<summary>
			Returns the path to the Mie LUT texture (the texture for setting the color of the light round the sun) set for the preset. The Mie texture is used for both sun and moon.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setScatteringLightColorLUTName(char)">
			<summary>
			Sets the path to the light color texture (the texture defining the color of the LightWorld for different times of the day) for the preset.
			</summary> 
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getScatteringLightColorLUTName const">
			<summary>
			Returns the path to the light color texture (the texture defining the color of the LightWorld for different times of the day).
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setScatteringBaseLUTName(char)">
			<summary>
			Sets the path to the base LUT texture (the texture defining the base color of the sky) for the preset.
			</summary> 
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getScatteringBaseLUTName const">
			<summary>
			Returns the path to the base LUT texture (the texture defining the base color of the sky) set for the preset.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeMaxDistance(float)">
			<summary>
			Sets the distance starting at which the haze becomes completely solid, so nothing will be seen behind. For large terrains it is recommended to the this parameter equal to your camera's Far parameter. This is required for distant objects to fade into the distance instead of being cut sharply.
			</summary> 
			<param name="distance"> Haze maximum visibility distance. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeMaxDistance const">
			<summary>
			Returns the distance starting at which the haze becomes completely solid, so nothing will be seen behind.
			</summary>  
			<returns>Haze maximum visibility distance.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of the haze for the preset. This function will take effect only if the HAZE_SOLID mode is set via setEnvironmentHazeMode().
			</summary> 
			<param name="color"> Haze color. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeColor const">
			<summary>
			Returns the haze color for the preset.					This function will return color only if the HAZE_SOLID mode is set via setEnvironmentHazeMode().
			</summary>  
			<returns>Haze color.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeDensity(float)">
			<summary>
			Sets the density of the haze for the preset.
			</summary> 
			<param name="density"> Haze density. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeDensity const">
			<summary>
			Returns the haze density set for the preset.
			</summary>  
			<returns>Haze density.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setReflectionIntensity(float)">
			<summary>
			Sets intensity of the environment reflection for the preset. 0 value means no environment reflection for the preset.					It is recommended to use the default value of the parameter to keep the image realistic.
			</summary> 
			<param name="intensity"> Intensity value of the environment reflection. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getReflectionIntensity const">
			<summary>
			Returns the intensity of the environment reflections for the preset. 0 value means no environment reflections for the preset.
			</summary>  
			<returns>The intensity value of the environment reflections.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSkyIntensity(float)">
			<summary>
			Sets intensity of the environment sky for the preset. 0.0f value means no environment sky for the preset.					It is recommended to use the default value of the parameter to keep the image realistic. If, for example, the sky looks too dark in contrast with lighting from it, you should check exposure and tone mapping settings before changing the environment intensity.
			</summary> 
			<param name="intensity"> Intensity value of the environment sky. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSkyIntensity const">
			<summary>
			Returns the intensity of the environment sky set for the preset.
			</summary>  
			<returns>Intensity value of the environment sky.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setAmbientIntensity(float)">
			<summary>
			Sets the intensity of the environment ambient lighting for the preset. 0 value means no environment ambient lighting for the preset. The higher the value, the more ambient lighting affects environment.					It is recommended to use the default value of the parameter to keep the image realistic.
			</summary> 
			<param name="intensity"> Intensity value of the environment ambient lighting. The value can be greater than 1.0f (useful for dark scenes). </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getAmbientIntensity const">
			<summary>
			Returns the intensity of the environment ambient lighting for the preset. 0 value means no environment ambient lighting for the preset. The higher the value, the more ambient lighting affects environment.
			</summary>  
			<returns>The intensity value of environment ambient lighting. The value can be greater than 1.0f.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets the cubemap defining the environment color for the preset. This texture is used for imitating landscape reflections and lighting in accordance with the ground mask.
			</summary> 
			<param name="texture"> Cubemap defining the environment color. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTexture const">
			<summary>
			Returns the cubemap defining the environment color set for the preset. This texture is used for imitating landscape reflections and lighting in accordance with the ground mask.
			</summary>  
			<returns>Cubemap defining the environment color.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureName(char)">
			<summary>
			Sets the path to the cubemap defining the environment color for the preset. This texture is used for imitating landscape reflections and lighting in accordance with the ground mask.
			</summary> 
			<param name="name"> Path to the cubemap defining the environment color. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureName const">
			<summary>
			Returns the path to the cubemap defining the environment color set for the preset. This texture is used for imitating landscape reflections and lighting in accordance with the ground mask.
			</summary>  
			<returns>Path to the cubemap defining the environment color.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureColor(Unigine.Math.vec4)">
			<summary>
			Sets the environment color multiplier for the preset. The alpha channel defines visibility of the environment cubemap above scattering. The color multiplier is required when you need to display a sky with a photo texture and dynamic gradients at the same time.
			</summary> 
			<param name="color"> The environment color multiplier. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureColor const">
			<summary>
			Returns the environment color multiplier set for the preset. The alpha channel defines visibility of the environment cubemap above scattering. The color multiplier is required when you need to display a sky with a photo texture and dynamic gradients at the same time.
			</summary>  
			<returns>The environment color multiplier.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureRotation(Unigine.Math.vec3)">
			<summary>
			Sets rotation of the environment texture along three axes.
			</summary> 
			<param name="rotation"> Rotation of the texture along X, Y, Z axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureRotation const">
			<summary>
			Returns rotation of the environment texture along three axes, in degrees.
			</summary>  
			<returns>Rotation of the texture along X, Y, Z axes, in degrees.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureBlur(float)">
			<summary>
			Sets the blur intensity for the environment texture. This value can be used to make blurred panorama at the background.					Reflections and ambient lighting aren't blurred.
			</summary> 
			<param name="blur"> Blur intensity. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureBlur const">
			<summary>
			Returns the blur intensity for the environment texture.					Reflections and ambient lighting aren't blurred.
			</summary>  
			<returns>Blur intensity.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonTextureIntensity const">
			<summary>
			Returns the intensity multiplier of the Moon texture. It allows increasing/reducing brightness of the Moon.
			</summary>  
			<returns>Intensity of the Moon texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonTextureIntensity(float)">
			<summary>
			Sets the intensity multiplier of the Moon texture. It allows increasing/reducing brightness of the Moon.
			</summary> 
			<param name="intensity"> Intensity of the Moon texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunTextureColor(Unigine.Math.vec4)">
			<summary>
			Sets the color multiplier for the current Sun texture. By default, it is (1,1,1,1).
			</summary> 
			<param name="color"> Color multiplier. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonAngularSize const">
			<summary>
			Returns the current angular size of the Moon in degrees as seen from the Earth. By default, the size of the Moon is 0.5 degrees.
			</summary>  
			<returns>Angular size of the Moon.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunTextureIntensity const">
			<summary>
			Returns the intensity multiplier of the Sun texture. It allows increasing/reducing brightness of the Sun.
			</summary>  
			<returns>Intensity of the sun texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonTextureColor const">
			<summary>
			Returns the color multiplier of the Moon texture.
			</summary>  
			<returns>Color multiplier.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunTextureName(char)">
			<summary>
			Sets the Sun texture with the given name.
			</summary> 
			<param name="name"> Name of the Sun texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonTextureColor(Unigine.Math.vec4)">
			<summary>
			Sets the color multiplier for the current Moon texture. By default, it is (1,1,1,1).
			</summary> 
			<param name="color"> Color multiplier. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunTextureIntensity(float)">
			<summary>
			Sets the intensity multiplier of the Sun texture. It allows increasing/reducing brightness of the Sun.
			</summary> 
			<param name="intensity"> Intensity of the Sun texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonAngularSize(float)">
			<summary>
			Sets the angular size of the Moon in degrees. The value is set for an observer on the Earth. By default, the size of the Moon is 0.5 degrees as seen from the Earth..
			</summary> 
			<param name="size"> Angular size of the Moon. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunTextureColor const">
			<summary>
			Returns the color multiplier of the Sun texture. By default, it is (1,1,1,1).
			</summary>  
			<returns>Color multiplier.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonTextureName(char)">
			<summary>
			Sets a name of the Moon texture.
			</summary> 
			<param name="name"> Name of the Moon texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunAngularSize(float)">
			<summary>
			Sets the angular size of the Sun in degrees. The value is set for an observer on the Earth. By default, the size of the Sun is 0.5 degrees as seen from the Earth.
			</summary> 
			<param name="size"> Angular size of the Sun. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunAngularSize const">
			<summary>
			Returns the angular size of the Sun in degrees as seen from the Earth. By default, the size of the Sun is 0.5 degrees.
			</summary>  
			<returns>Angular size of the Sun.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunTextureName const">
			<summary>
			Returns the name of the Sun texture.
			</summary>  
			<returns>Name of the Sun texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonTextureName const">
			<summary>
			Returns the name of the Moon texture.
			</summary>  
			<returns>Name of the Moon texure.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalStartHeight(float)">
			<summary>
			Sets a new reference height value for the two parameters (Half Visibility Distance and Half Faloff Height).
			</summary> 
			<param name="height"> New reference height value to be set, in units. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalStartHeight const">
			<summary>
			Returns the current reference height value for the two parameters (Half Visibility Distance and Half Faloff Height).
			</summary>  
			<returns>Current reference height value, in units.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalHalfVisibilityDistance(float)">
			<summary>
			Sets the distance to the boundary at which the visibility comprises 50%. There is no zero-visibility in the real world, so the half-visibility boundary is used to adjust haze distance.
			</summary> 
			<param name="distance"> New distance value to be set, in units. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalHalfVisibilityDistance const">
			<summary>
			Returns the current distance to the boundary at which the visibility comprises 50%. There is no zero-visibility in the real world, so the half-visibility boundary is used to adjust haze distance.
			</summary>  
			<returns>Current distance to the boundary at which the visibility comprises 50%, in units.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalHalfFalloffHeight(float)">
			<summary>
			Sets the height of the haze density gradient. The higher the value, the longer the haze desity reduces as the height grows, making the transition between the clear sky and haze smoother.
			</summary> 
			<param name="height"> New height of the haze density gradient to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalHalfFalloffHeight const">
			<summary>
			Returns the current height of the haze density gradient. The higher the value, the longer the haze desity reduces as the height grows, making the transition between the clear sky and haze smoother.
			</summary>  
			<returns>Current height of the haze density gradient.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalAmbientLightIntensity(float)">
			<summary>
			Sets the new intensity of the impact of the ambient lighting on haze (how much the ambient lighting affects the haze).
			</summary> 
			<param name="intensity"> New value of intensity of the ambient lighting impact to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalAmbientLightIntensity const">
			<summary>
			Returns the current intensity of the impact of the ambient lighting on haze (how much the ambient lighting affects the haze).
			</summary>  
			<returns>Current value of intensity of the ambient lighting impact.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalAmbientColorSaturation(float)">
			<summary>
			Sets the new intensity of the ambient color's contribution to the haze (how much the sunlight affects the haze).
			</summary> 
			<param name="saturation"> New value of intensity of the ambient color's contribution to the haze to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalAmbientColorSaturation const">
			<summary>
			Returns the current intensity of the ambient color's contribution to the haze (how much the sunlight affects the haze).
			</summary>  
			<returns>Current value of intensity of the ambient color's contribution to the haze.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalSunLightIntensity(float)">
			<summary>
			Sets the new intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).
			</summary> 
			<param name="intensity"> New value of intensity of the sunlight impact to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalSunLightIntensity const">
			<summary>
			Returns the current intensity of the impact of the sunlight on haze defining how much the sunlight affects the haze.
			</summary>  
			<returns>Current value of intensity of the sunlight impact.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalSunColorSaturation(float)">
			<summary>
			Sets the new intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).					"Sunlight color" here does not simply mean the color multiplier of the WorldLight source, but rather the Scattering LUT Light Color.
			</summary> 
			<param name="saturation"> New value of intensity of the sunlight color's contribution to the haze to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalSunColorSaturation const">
			<summary>
			Returns the current intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).
			</summary>  
			<returns>Current intensity of the sunlight color's contribution to the haze.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeScatteringMieIntensity(float)">
			<summary>
			Sets the minimum Mie intensity value for geometry-occluded areas. This value specifies the fraction of Mie intensity visible when the surface is viewed from straight on. Setting this value to 1 disables the Fresnel effect. You can use this parameter together with Mie Frontside Intensity and Mie Fresnel Power to control light occlusion from World light sources. Works for both, opaque and transparent objects.
			</summary> 
			<param name="intensity"> New minimum Mie intensity value for geometry-occluded areas to be set in the [0.0f, 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeScatteringMieIntensity const">
			<summary>
			Returns the current minimum Mie intensity value for geometry-occluded areas. This value specifies the fraction of Mie intensity visible when the surface is viewed from straight on. Setting this value to 1 disables the Fresnel effect. You can use this parameter together with Mie Frontside Intensity and Mie Fresnel Power to control light occlusion from World light sources. Works for both, opaque and transparent objects.
			</summary>  
			<returns>Current minimum Mie intensity value for geometry-occluded areas in the [0.0f, 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeScatteringMieFrontSideIntensity(float)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeScatteringMieFrontSideIntensity const">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeScatteringMieFresnelPower(float)">
			<summary>
			Sets the power of the Fresnel effect for Mie visibility. Higher values will tighten up the areas affected, while lower ones will allow more areas to be affected by the Fresnel effect.
			</summary> 
			<param name="power"> New power of the Fresnel effect to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeScatteringMieFresnelPower const">
			<summary>
			Returns the current power of the Fresnel effect for Mie visibility. Higher values will tighten up the areas affected, while lower ones will allow more areas to be affected by the Fresnel effect.
			</summary>  
			<returns>Current power of the Fresnel effect.</returns>
		</member>
		<member name="M:Unigine.Renderer.clearStates">
			<summary>
			Clears rendering states and textures.					The shader will also be cleared.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.clearShader">
			<summary>
			Clears the shader.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.setBlendFunc(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets the light blending function for a given rendering pass and material.
			</summary> 
			<param name="pass"> Rendering pass. One of the following values:PASS_AMBIENTPASS_LIGHT_OMNIPASS_LIGHT_PROJPASS_LIGHT_WORLDPASS_EMISSION </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.setBufferMask(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets the buffer mask for a given rendering pass and material.					If the material does not use a depth mask and ambient pass is specified, the BUFFER_COLOR mask will be set; otherwise, the BUFFER_ALL mask will be set.
			</summary> 
			<param name="pass"> Rendering pass. One of the following values:PASS_DEFERREDPASS_AMBIENT </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.setCameraPosition(Unigine.Math.Vec3)">
			<summary>
			Sets a new camera position.
			</summary> 
			<param name="position"> New camera position. </param> 
		</member>
		<member name="M:Unigine.Renderer.getCameraPosition const">
			<summary>
			Returns current camera position.
			</summary>  
			<returns>Current camera position.</returns>
		</member>
		<member name="M:Unigine.Renderer.setDepthFunc(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets depth function for a given rendering pass and material.					If the depth_test option of the material is enabled, the DEPTH_GEQUAL function will be used; otherwise the depth comparison function will be disabled.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables, except the following: PASS_DEFERRED, PASS_SHADOW, PASS_DEPTH_PRE_PASS, PASS_EMISSION. </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.hasGeodeticPivot">
			<summary>
			Returns a value indicating if the rendering scene has a GeodeticPivot.
			</summary>  
			<returns>1 if the rendering scene has a GeodeticPivot; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getHeight const">
			<summary>
			Returns current screen height.
			</summary>  
			<returns>Screen height.</returns>
		</member>
		<member name="M:Unigine.Renderer.getWidth const">
			<summary>
			Returns current screen width.
			</summary>  
			<returns>Screen width.</returns>
		</member>
		<member name="M:Unigine.Renderer.getIModelview const">
			<summary>
			Returns current inverse view matrix.
			</summary>  
			<returns>Returns current inverse view matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.setMaterial(Render::PASS,Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets material and initialize all material textures for the specified rendeting pass.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.setModelview(Unigine.Math.Mat4)">
			<summary>
			Sets current view matrix.
			</summary> 
			<param name="modelview"> New view matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getModelview const">
			<summary>
			Returns current view matrix.
			</summary>  
			<returns>Returns current view matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.isNode const">
			<summary>
			Returns a value indicating if node rendering is in progress.
			</summary>  
			<returns>1 if the node rendering is in progress, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getObjects">
			<summary>
			Retrieves the list of all rendering scene objects and puts it to the buffer.
			</summary>  
			<returns>Buffer containing all scene objects.</returns>
		</member>
		<member name="M:Unigine.Renderer.setObliqueFrustum(bool)">
			<summary>
			Enables or disables obliqueness of the viewing frustum.					It is recommended to set oblique viewing frustum using this method, as it doesn't affect the projection matrix. To specify the near clipping plane use the setObliqueFrustumPlane() method.
			</summary> 
			<param name="frustum"> 1 to enable oblique viewing frustum; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Renderer.isObliqueFrustum const">
			<summary>
			Returns a value indicating if the viewing frustum is oblique.
			</summary>  
			<returns>1 if the viewing frustum is oblique; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.setObliqueFrustumPlane(Unigine.Math.Vec4)">
			<summary>
			Sets the oblique near clipping plane of the viewing frustum.					This method does not affect the projection matrix. To enable the oblique frustum use the setObliqueFrustum() method.
			</summary> 
			<param name="plane"> World coordinates of the oblique near clipping plane to set (Nx, Ny, Nz, D), where Nx, Ny, Nz - coordinates of the plane normal, D - distance from the origin to the plane. </param> 
		</member>
		<member name="M:Unigine.Renderer.getObliqueFrustumPlane const">
			<summary>
			Returns the oblique near clipping plane of the viewing frustum.
			</summary>  
			<returns>World coordinates of the oblique near clipping plane to set (Nx, Ny, Nz, D), where Nx, Ny, Nz - coordinates of the plane normal, D - distance from the origin to the plane.</returns>
		</member>
		<member name="M:Unigine.Renderer.setOldModelview(Unigine.Math.Mat4)">
			<summary>
			Updates the old view matrix.
			</summary> 
			<param name="modelview"> Old view matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getOldModelview const">
			<summary>
			Returns the old view matrix.
			</summary>  
			<returns>Old view matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.setOldProjection(Unigine.Math.mat4)">
			<summary>
			Updates the old projection matrix.
			</summary> 
			<param name="projection"> Old projection matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getOldProjection const">
			<summary>
			Returns the old projection matrix.
			</summary>  
			<returns>Old projection matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.setPolygonCull(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets the polygon culling mode for a given rendering pass and material.					If the material is one-sided, the back-facing polygons will be culled; otherwise, polygon culling for the material will be disabled.
			</summary> 
			<param name="pass"> Rendering pass. One of the RENDER_PASS_* variables. </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.getProjectionWithoutTAA const">
			<summary>
			Returns current projection matrix without TAA.
			</summary>  
			<returns>Projection matrix without TAA.</returns>
		</member>
		<member name="M:Unigine.Renderer.setProjection(Unigine.Math.mat4)">
			<summary>
			Updates the current projection matrix.					It is not recommended to use this method for setting obliqueness of the near clipping plane of the frustum, as in this case a number of features (such as clouds, shadows, TAA, a number of engine optimizations, etc.) will not function properly. Please, use the setObliqueFrustum() method instead.
			</summary> 
			<param name="projection"> Projection matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getProjection const">
			<summary>
			Returns current projection matrix.
			</summary>  
			<returns>Current projection matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.isReflection const">
			<summary>
			Returns a value indicating if reflection rendering is in progress.
			</summary>  
			<returns>1 if reflection rendering is in progress, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getReflectionViewportMask const">
			<summary>
			Returns the current reflection viewport mask.
			</summary>  
			<returns>Current reflection viewport mask.</returns>
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Shader},bool)">
			<summary>
			Sets the parameters of the specified shader for a given rendering pass.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="shader"> Shader smart pointer. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Shader},Unigine.Ptr{Unigine.Material},bool)">
			<summary>
			Sets the parameters of the specified shader for a given rendering pass and material.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="shader"> Shader smart pointer. </param>
			<param name="material"> Material smart pointer. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Shader},Unigine.Ptr{Unigine.Material},Unigine.Ptr{Unigine.Object},int,bool)">
			<summary>
			Sets the parameters of the specified shader for a given rendering pass, material, object and surface.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="shader"> Shader smart pointer. </param>
			<param name="material"> Material smart pointer. </param>
			<param name="object"> Object smart pointer. </param>
			<param name="surface"> Surface number. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Unigine.Material},bool)">
			<summary>
			Sets the parameters of the shader for a given rendering pass and material.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="material"> Material smart pointer. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Unigine.Object},int,bool)">
			<summary>
			Sets the parameters of the shader for a given rendering pass, object and surface.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="object"> Object smart pointer. </param>
			<param name="surface"> Surface number. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.isShadow const">
			<summary>
			Returns a value indicating if shadows are rendered.
			</summary>  
			<returns>1 if shadows are rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.checkSkipFlags(int) const">
			<summary>
			Returns a value indicating if the specified skip flag is set.
			</summary> 
			<param name="flags"> Skip flag. </param> 
			<returns>1 if the specified skip flag is set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getSkipFlags const">
			<summary>
			Returns the skip flag set for the rendering viewport.
			</summary>  
			<returns>Skip flag.</returns>
		</member>
		<member name="M:Unigine.Renderer.isStereo const">
			<summary>
			Returns a value indicating if stereo rendering is enabled.
			</summary>  
			<returns>1 if the stereo rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getStereoMode const">
			<summary>
			Returns the current stereo mode.
			</summary>  
			<returns>One of the RENDER_STEREO_* variables.</returns>
		</member>
		<member name="M:Unigine.Renderer.getStereoCurrentEye const">
			<summary>
			Returns the current stereo eye.
			</summary>  
			<returns>One of the RENDER_STEREO_EYE_* variables.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureAutoExposure const">
			<summary>
			Returns the autoexposure texture.
			</summary>  
			<returns>Autoexposure texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureAuxiliary const">
			<summary>
			Returns the auxiliary texture.
			</summary>  
			<returns>Auxiliary texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureBentNormal const">
			<summary>
			Returns the bent normal texture. This texture is used during the Screen-Space Global Illumination stage.
			</summary>  
			<returns>Bent normal texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureClouds const">
			<summary>
			Returns the clouds texture. This texture is rendered during the separate clouds pass.
			</summary>  
			<returns>Clouds texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColor const">
			<summary>
			Returns the color texture.
			</summary>  
			<returns>Color texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColorOld const">
			<summary>
			Returns the color old texture.
			</summary>  
			<returns>Color old texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColorOldReprojection const">
			<summary>
			Returns the color old reprojection texture.
			</summary>  
			<returns>Color old reprojection texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColorOpacity const">
			<summary>
			Returns the color opacity texture.
			</summary>  
			<returns>Color opacity texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureCurrentDepth const">
			<summary>
			Returns the current depth texture.
			</summary>  
			<returns>Current depth texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureDOFMask const">
			<summary>
			Returns the DoF mask texture. This texture is used at the camera effects stage.
			</summary>  
			<returns>DoF mask texture</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferFeatures const">
			<summary>
			Returns the texture that stores intensity of the screen-space bevel effect.
			</summary>  
			<returns>Texture storing intensity of the bevels. The texture is RGBA8, the intensity value is written to the R channel.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferAlbedo const">
			<summary>
			Returns the Gbuffer albedo texture.
			</summary>  
			<returns>Gbuffer albedo texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferMaterialMask const">
			<summary>
			Returns the Gbuffer material mask texture.
			</summary>  
			<returns>Gbuffer material mask texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferNormal const">
			<summary>
			Returns the Gbuffer normal texture.
			</summary>  
			<returns>Gbuffer normal texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferShading const">
			<summary>
			Returns the Gbuffer shading texture.
			</summary>  
			<returns>Gbuffer shading texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferVelocity const">
			<summary>
			Returns the Gbuffer velocity texture.
			</summary>  
			<returns>Gbuffer velocity texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureLights const">
			<summary>
			Returns the array texture storing contents of the deferred light buffer and the deferred reflections buffer. The texture contains four RG11B10F textures: the first layer stores the diffuse light, the second layer stores the specular light, the third one is for the environment reflection color, and the fourth one is for the environment ambient light.
			</summary>  
			<returns>A texture storing contents of the deferred light buffer and the deferred reflections buffer.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureOpacityDepth const">
			<summary>
			Returns the opacity depth texture.
			</summary>  
			<returns>Opacity depth texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureRefraction const">
			<summary>
			Returns the refraction texture.
			</summary>  
			<returns>Refraction texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSR const">
			<summary>
			Returns the SSR texture.
			</summary>  
			<returns>SSR texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSAO const">
			<summary>
			Returns the SSAO texture.
			</summary>  
			<returns>SSAO texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSGI const">
			<summary>
			Returns the SSGI texture.
			</summary>  
			<returns>SSGI texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSShadowShafts const">
			<summary>
			Returns the Screen-Space Shadow Shafts texture.
			</summary>  
			<returns>Screen-Space Shadow Shafts texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureTransparentBlur const">
			<summary>
			Returns the transparent blur texture. This texture is rendered during the transparent blur pass.
			</summary>  
			<returns>Transparent blur texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getRenderTarget const">
			<summary>
			Returns the render target.
			</summary>  
			<returns>Render target.</returns>
		</member>
		<member name="M:Unigine.Renderer.getPostRenderTarget const">
			<summary>
			Returns the post texture render.
			</summary>  
			<returns>Post render target.</returns>
		</member>
		<member name="M:Unigine.Renderer.getViewport const">
			<summary>
			Returns the rendering viewport.
			</summary>  
			<returns>Rendering viewport smart pointer.</returns>
		</member>
		<member name="M:Unigine.Renderer.getViewportMask const">
			<summary>
			Returns current viewport mask.
			</summary>  
			<returns>Returns current viewport mask.</returns>
		</member>
		<member name="M:Unigine.Renderer.getZFar const">
			<summary>
			Return current far clipping plane.
			</summary>  
			<returns>Returns current far clipping plane.</returns>
		</member>
		<member name="M:Unigine.Renderer.getZNear const">
			<summary>
			Returns current near clipping plane.
			</summary>  
			<returns>Returns current near clipping plane.</returns>
		</member>
		<member name="M:Unigine.Renderer.saveState">
			<summary>
			Saves current renderer matrices.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.restoreState">
			<summary>
			Restores current renderer matrices.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.useDynamicReflections const">
			<summary>
			Returns a value indicating if rendering of dynamic reflections is enabled.
			</summary>  
			<returns>1 if rendering of dynamic reflections is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useOcclusionQueries const">
			<summary>
			Returns a value indicating if the occlusion query test is enabled.
			</summary>  
			<returns>1 if the occlusion query test is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.usePostEffects const">
			<summary>
			Returns a value indicating if rendering of post effects is enabled.
			</summary>  
			<returns>1 if rendering of post effects is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useShadows const">
			<summary>
			Returns a value indicating if rendering of shadows is enabled.
			</summary>  
			<returns>1 if rendering of shadows is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useTAA const">
			<summary>
			Returns a value indicating if the Temporal Anti-Aliasing (TAA) is enabled.
			</summary>  
			<returns>1 if the Temporal Anti-Aliasing (TAA) is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.setUseTAAOffset(bool)">
			<summary>
			Sets a value indicating if skipping render mode check is enabled for using TAA. Can be used to ensure proper TAA calculation when rendering mode for the Viewport is set to RENDER_DEPTH.
			</summary> 
			<param name="offset"> true to enable skipping render mode check and use TAA; otherwise false. </param> 
		</member>
		<member name="M:Unigine.Renderer.isUseTAAOffset const">
			<summary>
			Returns a value indicating if skipping render mode check is enabled for using TAA. Can be used to ensure proper TAA calculation when rendering mode for the Viewport is set to RENDER_DEPTH.
			</summary>  
			<returns>true if skipping render mode check is enabled for using TAA; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Renderer.useVelocityBuffer const">
			<summary>
			Returns a value indicating if rendering to the velocity buffer is enabled.
			</summary>  
			<returns>1 if rendering to the velocity buffer is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useVisualizer const">
			<summary>
			Returns a value indicating if rendering of the visualizer is enabled.
			</summary>  
			<returns>1 if rendering of the visualizer is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSCurvature const">
			<summary>
			Returns the texture used by the Screen-Space Dirt (SSDirt) effect.
			</summary>  
			<returns>Curvature texture used by the Screen-Space Dirt (SSDirt) effect.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureAutoWhiteBalance const">
			<summary>
			Returns the auto white balance texture.
			</summary>  
			<returns>Auto-white-balance texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureRefractionMask const">
			<summary>
			Returns the refraction mask texture.
			</summary>  
			<returns>Refraction mask texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.createCustomTexture3D(char,int,int,int,int,int)">
			<summary>
			Creates a custom 3D texture. Such textures can be used in your materials.					In your base material:											Create a corresponding custom texture via code:
			</summary> 
			<param name="name"> Texture name. </param>
			<param name="width"> Texture width, in pixels. </param>
			<param name="height"> Texture height, in pixels. </param>
			<param name="depth"> Texture depth, in pixels. </param>
			<param name="format"> Texture format, one of the Texture::FORMAT_ values. </param>
			<param name="flags"> Texture flags. A combination of flags (such as Texture::FORMAT_USAGE_, Texture::SAMPLER_WRAP_, etc.) </param> 
			<returns>New created custom 3D texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.createCustomTexture2D(char,int,int,int,int)">
			<summary>
			Creates a custom 2D texture array. Such texture can be used in your materials.					In your base material:											Create a corresponding custom texture via code:
			</summary> 
			<param name="name"> Texture name. </param>
			<param name="width"> Texture width, in pixels. </param>
			<param name="height"> Texture height, in pixels. </param>
			<param name="format"> Texture format, one of the Texture::FORMAT_ values. </param>
			<param name="flags"> Texture flags. A combination of flags (such as Texture::FORMAT_USAGE_, Texture::SAMPLER_WRAP_, etc.) </param> 
			<returns>New created custom 2D texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.createCustomTexture2DArray(char,int,int,int,int,int)">
			<summary>
			Creates a custom 2D texture array. Such texture can be used in your materials.																Create a corresponding custom texture via code:
			</summary> 
			<param name="name"> Texture name. </param>
			<param name="width"> Texture width, in pixels. </param>
			<param name="height"> Texture height, in pixels. </param>
			<param name="depth"> Number of elements in the array. </param>
			<param name="format"> Texture format, one of the Texture::FORMAT_ values. </param>
			<param name="flags"> Texture flags. A combination of flags (such as Texture::FORMAT_USAGE_, Texture::SAMPLER_WRAP_, etc.) </param> 
			<returns>New created custom 2D texture array.</returns>
		</member>
		<member name="M:Unigine.Renderer.getCustomTexture(char)">
			<summary>
			Returns a custom texture by its name. Custom textures can be created using createCustomTexture3D(), createCustomTexture3D(), and createCustomTexture3D() methods.
			</summary> 
			<param name="name"> Custom texture name. </param> 
			<returns>Custom texture corresponding to the specified name, if it exists, otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Renderer.getShaderCBufferCamera const">
			<summary>
			Returns a buffer containing camera parameters to be passed to a custom shader. This method can be used in a callback to obtain camera parameters at a certain stage of the rendering sequence and pass them to a custom shader.
			</summary>  
			<returns>Buffer containing camera parameters to be passed to a custom shader.</returns>
		</member>
		<member name="M:Unigine.Renderer.getShaderCBufferScattering const">
			<summary>
			Returns a buffer containing scattering parameters to be passed to a custom shader. This method can be used in a callback to obtain scattering parameters at a certain stage of the rendering sequence and pass them to a custom shader.
			</summary>  
			<returns>Buffer containing scattering parameters to be passed to a custom shader.</returns>
		</member>
		<member name="M:Unigine.Renderer.getCurrentLight const">
			<summary>
			Returns the currently rendered light source. This method can be used to obtain shadow maps for a certain light source in a callback (see BEGIN_SHADOWS callbacks).
			</summary>  
			<returns>Currently rendered light source.</returns>
		</member>
		<member name="M:Unigine.Renderer.setOverlapEnvironmentTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets a new environment cubemap texture.
			</summary> 
			<param name="texture"> Environment cubemap texture to be used. </param> 
		</member>
		<member name="M:Unigine.Renderer.getOverlapEnvironmentTexture const">
			<summary>
			Returns the currently used environment cubemap texture.
			</summary>  
			<returns>Currently used environment cubemap texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.resetOverlapEnvironmentTexture">
			<summary>
			Resets the environment cubemap texture to default (no environment texture is used).
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.getTextureNormalUnpack const">
			<summary>
			Returns the texture that stores unpacked normals. Available for the following post-effects: SSR, SSGI, SSRTGI, Shadows screen space.
			</summary>  
			<returns>The texture that stores unpacked normals.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureLinearDepth const">
			<summary>
			Returns the texture that stores linear depth data.
			</summary>  
			<returns>The texture that stores linear depth data.</returns>
		</member>
		<member name="M:Unigine.Renderer.renderMeshStatic(Unigine.Ptr{MeshStatic},Unigine.Ptr{Unigine.Material},char,Unigine.Math.Mat4,Unigine.Ptr{Unigine.Camera})">
			<summary>
			Renders the specified static mesh with the specified material applied to it during the specified render pass as viewed from by specified camera.
			</summary> 
			<param name="mesh"> Static mesh to be rendered. </param>
			<param name="material"> Material to be used to render the mesh. </param>
			<param name="pass_name"> Name of the rendering pass during which the mesh is to be rendered. </param>
			<param name="transform"> Transformation to be passed to shader for rendering. </param>
			<param name="camera"> Camera to be used for mesh rendering. </param> 
		</member>
		<member name="M:Unigine.Renderer.isStereoPeripheral const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_VERTICAL">
			<summary>
			Vertical split stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_HORIZONTAL">
			<summary>
			Horizontal split stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_DEFAULT">
			<summary>
			Default stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_EYE_NONE">
			<summary>
			None of the stereo eyes.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_EYE_LEFT">
			<summary>
			Left stereo eye.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_EYE_RIGHT">
			<summary>
			Right stereo eye.
		</summary>
		</member>
		<member name="M:Unigine.RenderState.setAnisotropy(int)">
			<summary>
			Sets the texture anisotropy level (degree of anisotropic filtering).
			</summary> 
			<param name="anisotropy"> Texture anisotropy level to be set:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4.3 - anisotropy level 8.4 - anisotropy level 16. </param> 
		</member>
		<member name="M:Unigine.RenderState.getAnisotropy">
			<summary>
			Returns the current texture anisotropy level (degree of anisotropic filtering).
			</summary>  
			<returns>Current texture anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4.3 - anisotropy level 8.4 - anisotropy level 16.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBlendDestFunc(int)">
			<summary>
			Sets a new destination blending function.
			</summary> 
			<param name="func"> New destination blending function to be set. One of the BLEND_* variables. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBlendDestFunc">
			<summary>
			Returns the destination blending function.
			</summary>  
			<returns>Destination blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.getBlendDestFuncBuffer(int)">
			<summary>
			Returns the destination blending function for the specified buffer.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Destination blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBlendFunc(int,int,int)">
			<summary>
			Sets blending function.
			</summary> 
			<param name="src"> Source blending function. One of the BLEND_* variables. </param>
			<param name="dest"> Destination blending function. One of the BLEND_* variables. </param>
			<param name="blend_op"> Blending operation to be used. One of the BLEND_OP_* variables. BLEND_OP_ADD is used by default. </param> 
		</member>
		<member name="M:Unigine.RenderState.setBlendFuncBuffer(int,int,int,int)">
			<summary>
			Sets blending function for the specified buffer.
			</summary> 
			<param name="num"> Buffer number. </param>
			<param name="src"> Source blending function. One of the BLEND_* variables. </param>
			<param name="dest"> Destination blending function. One of the BLEND_* variables. </param>
			<param name="blend_op"> Blending operation to be used. One of the BLEND_OP_* variables. BLEND_OP_ADD is used by default. </param> 
		</member>
		<member name="M:Unigine.RenderState.setBlendSrcFunc(int)">
			<summary>
			Sets a new source blending function.
			</summary> 
			<param name="func"> New source blending function to be set. One of the BLEND_* variables. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBlendSrcFunc">
			<summary>
			Returns the source blending function.
			</summary>  
			<returns>Source blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.getBlendSrcFuncBuffer(int)">
			<summary>
			Returns the source blending function for the specified buffer.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Source blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBlendOperation(int)">
			<summary>
			Sets a new blending operation.
			</summary> 
			<param name="operation"> New blending operation to be set. One of the BLEND_OP_* variables. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBlendOperation">
			<summary>
			Returns the current blending operation.
			</summary>  
			<returns>Current blending operation. One of the BLEND_OP_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.getBlendOperationBuffer(int)">
			<summary>
			Returns the current blending operation for the given buffer.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Current blending operation for the given buffer. One of the BLEND_OP_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBufferMask(int,int)">
			<summary>
			Sets the buffer mask.
			</summary> 
			<param name="num"> Buffer number. </param>
			<param name="mask"> Buffer mask. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBufferMask(int)">
			<summary>
			Returns buffer mask.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Buffer mask.</returns>
		</member>
		<member name="M:Unigine.RenderState.setDepthFunc(int)">
			<summary>
			Sets the depth function.
			</summary> 
			<param name="func"> Depth function </param> 
		</member>
		<member name="M:Unigine.RenderState.getDepthFunc">
			<summary>
			Returns the current depth function.
			</summary>  
			<returns>The depth function (one of the DEPTH_* variables).</returns>
		</member>
		<member name="M:Unigine.RenderState.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets the specified material to be used.
			</summary> 
			<param name="material"> Material to be set. </param> 
		</member>
		<member name="M:Unigine.RenderState.setMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets the specified material to be used for the specified rendering pass.
			</summary> 
			<param name="pass"> Rendering pass for which the material is to be set. </param>
			<param name="material"> Material to be used. </param> 
		</member>
		<member name="M:Unigine.RenderState.getMaterial">
			<summary>
			Returns the current material.
			</summary>  
			<returns>Material smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonBias(float)">
			<summary>
			Sets a new polygon bias offset.
			</summary> 
			<param name="bias"> New polygon bias offset to be set. </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonBias">
			<summary>
			Returns the polygon bias offset.
			</summary>  
			<returns>Polygon bias offset.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonCull(int)">
			<summary>
			Sets the polygon cull mode.
			</summary> 
			<param name="cull"> The polygon cull mode (one of the CULL_* variables). </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonCull">
			<summary>
			Returns the polygon cull mode.
			</summary>  
			<returns>Polygon cull mode (one of the CULL_* variables).</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonFill(int)">
			<summary>
			Sets the polygon fill mode.
			</summary> 
			<param name="fill"> Polygon fill mode (one of the FILL_* variables). </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonFill">
			<summary>
			Returns the polygon fill mode.
			</summary>  
			<returns>Polygon fill mode.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonFront(int)">
			<summary>
			Set the polygon mode to front.
			</summary> 
			<param name="front"> 1 - enable the front mode; 0 - disable it. </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonFront">
			<summary>
			Returns value indicating if the polygon front mode is set.
			</summary>  
			<returns>1 if the polygon front mode is set; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonOffset(float,float)">
			<summary>
			Sets the polygon offset value.
			</summary> 
			<param name="bias"> Polygon bias offset. </param>
			<param name="offset"> Polygon slope offset. </param> 
		</member>
		<member name="M:Unigine.RenderState.setPolygonSlope(float)">
			<summary>
			Sets a new polygon slope offset.
			</summary> 
			<param name="slope"> New polygon slope offset. </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonSlope">
			<summary>
			Returns the polygon slope offset.
			</summary>  
			<returns>Polygon slope offset.</returns>
		</member>
		<member name="M:Unigine.RenderState.setScissorTest(float,float,float,float)">
			<summary>
			Sets scissor test.
			</summary> 
			<param name="x"> The X coordinate. </param>
			<param name="y"> The Y coordinate. </param>
			<param name="width"> Viewport width. </param>
			<param name="height"> Viewport height. </param> 
		</member>
		<member name="M:Unigine.RenderState.setScissorTest(Unigine.Math.ivec4)">
			<summary>
			Sets scissor test by using rectangle coordinates.
			</summary> 
			<param name="rectangle"> Rectangle coordinates. </param> 
		</member>
		<member name="M:Unigine.RenderState.setScissorTest(Unigine.Math.vec4)">
			<summary>
			Sets scissor test by using rectangle coordinates.
			</summary> 
			<param name="rectangle"> Rectangle coordinates. </param> 
		</member>
		<member name="M:Unigine.RenderState.getScissorTest">
			<summary>
			Returns the scissors test status.
			</summary>  
			<returns>Scissors test status.</returns>
		</member>
		<member name="M:Unigine.RenderState.getScreenColorTexture">
			<summary>
			Returns the screen color texture.
			</summary>  
			<returns>Texture smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.getScreenDepthTexture">
			<summary>
			Returns the screen depth texture.
			</summary>  
			<returns>Texture smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setShader(Unigine.Ptr{Shader})">
			<summary>
			Sets the specified shader.
			</summary> 
			<param name="shader"> Shader smart pointer. </param> 
		</member>
		<member name="M:Unigine.RenderState.getShader">
			<summary>
			Returns the shader.
			</summary>  
			<returns>Shader smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setStencilFunc(int)">
			<summary>
			Sets the stencil function.
			</summary> 
			<param name="func"> Stencil function. </param> 
		</member>
		<member name="M:Unigine.RenderState.getStencilFunc">
			<summary>
			Returns the stencil function.
			</summary>  
			<returns>Stencil function.</returns>
		</member>
		<member name="M:Unigine.RenderState.setStencilPass(int)">
			<summary>
			Sets a new stencil mode.
			</summary> 
			<param name="pass"> New stencil mode to be set (one of the STENCIL_* variables.) </param> 
		</member>
		<member name="M:Unigine.RenderState.getStencilPass">
			<summary>
			Returns the stencil mode.
			</summary>  
			<returns>The stencil mode (one of the STENCIL_* variables.)</returns>
		</member>
		<member name="M:Unigine.RenderState.setStencilRef(int)">
			<summary>
			Sets a new stencil reference value.
			</summary> 
			<param name="ref"> New stencil reference value to be set. </param> 
		</member>
		<member name="M:Unigine.RenderState.getStencilRef">
			<summary>
			Returns the stencil reference value.
			</summary>  
			<returns>Stencil reference value.</returns>
		</member>
		<member name="M:Unigine.RenderState.setStructuredBuffer(int,Unigine.Ptr{Unigine.StructuredBuffer})">
			<summary>
			Sets given StructuredBuffer to the render state.
			</summary> 
			<param name="num"> StructuredBuffer unit number. </param>
			<param name="buffer"> A pointer to the StructuredBuffer. </param> 
		</member>
		<member name="M:Unigine.RenderState.setTexture(int,int,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets the texture.
			</summary> 
			<param name="binding"> Binding. </param>
			<param name="num"> Texture unit number (texture slot). </param>
			<param name="texture"> Texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.RenderState.setTexture(int,int,Unigine.Ptr{Unigine.Texture},int)">
			<summary>
			</summary> 
			<param name="num"> Texture unit number (texture slot). </param> 
		</member>
		<member name="M:Unigine.RenderState.getTexture(int)">
			<summary>
			Returns the current texture.
			</summary> 
			<param name="num"> Texture unit number (texture slot). </param> 
			<returns>Texture smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setViewport(int,int,int,int)">
			<summary>
			Sets the viewport size and position.
			</summary> 
			<param name="x"> The X coordinate. </param>
			<param name="y"> The Y coordinate. </param>
			<param name="width"> The width. </param>
			<param name="height"> The height. </param> 
		</member>
		<member name="M:Unigine.RenderState.getCoordX">
			<summary>
			Returns the X-coordinate of the viewport.
			</summary>  
			<returns>X-coordinate of the viewport.</returns>
		</member>
		<member name="M:Unigine.RenderState.getCoordY">
			<summary>
			Returns the Y-coordinate of the viewport.
			</summary>  
			<returns>Y-coordinate of the viewport.</returns>
		</member>
		<member name="M:Unigine.RenderState.getHeight">
			<summary>
			Returns the viewport height.
			</summary>  
			<returns>Viewport height.</returns>
		</member>
		<member name="M:Unigine.RenderState.getWidth">
			<summary>
			Returns the viewport width.
			</summary>  
			<returns>Viewport width.</returns>
		</member>
		<member name="M:Unigine.RenderState.clearBuffer(int,Unigine.Math.vec4,float,int)">
			<summary>
			Clears the specified buffer.
			</summary> 
			<param name="buffer"> Buffer mask determines which buffers are to be cleared. One or combination of BUFFER_* variables.clearBuffer(BUFFER_COLOR); // clears color bufferclearBuffer(BUFFER_DEPTH); // clears depth bufferclearBuffer(BUFFER_STENCIL); // clears stencil buffer//masks can be combined:clearBuffer(BUFFER_COLOR | BUFFER_STENCIL); // clears color and stencil buffer//there is a separate BUFFER_DEPTH_STENCIL mask for convenienceclearBuffer(BUFFER_DEPTH_STENCIL); </param>
			<param name="color"> Color value to be used. </param>
			<param name="depth"> Depth value to be used. </param>
			<param name="stencil"> Stencil value to be used. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearStates(bool)">
			<summary>
			Clears all current render states. This method is used to prevent certain rendering code segment from being affected by other segments. See the usage example, that illustrates the typical use case.
			</summary> 
			<param name="clear_all"> Clear flag: true - to clear current shader, material, textures, and structured buffers as well, or false to clear render states only. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearStructuredBuffer(Unigine.Ptr{Unigine.StructuredBuffer})">
			<summary>
			Clears the specified structured buffer.
			</summary> 
			<param name="buffer"> Structured buffer to be cleared. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearStructuredBuffers">
			<summary>
			Clears all current structured buffers.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.clearTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Clears the specified texture.
			</summary> 
			<param name="texture"> Texture to be cleared. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearTextures">
			<summary>
			Clears all textures.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.flushRender">
			<summary>
			Flushes the render.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.flushStates">
			<summary>
			Flushes the current render state to GPU. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.saveState">
			<summary>
			Saves the current render state. This method is to be used together with the restoreState() method to enclose a segment of code, that changes the render state. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.restoreState">
			<summary>
			Restores the current render state, that was saved by calling the saveState() method. These two methods are used together to enclose a segment of code, that changes the render state. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.dispatch(int,int,int)">
			<summary>
			Executes commands in a compute shader (similar to ID3D11DeviceContext::Dispatch() method). A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z).
			</summary> 
			<param name="group_threads_x"> Local X work-group size of the compute shader. </param>
			<param name="group_threads_y"> Local Y work-group size of the compute shader. </param>
			<param name="group_threads_z"> Local Z work-group size of the compute shader. </param> 
		</member>
		<member name="F:Unigine.RenderState.BIND_ALL">
			<summary>
			A flag indicating that texture should be bound to all shaders.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BIND_FRAGMENT">
			<summary>
			A flag indicating that texture should be bound to fragment shaders only.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_NONE">
			<summary>
			None blending factor.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ZERO">
			<summary>
			Zero blending factor. Each component of the color is multiplied by (0, 0, 0, 0).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE">
			<summary>
			One blending factor. Each component of the color is multiplied by (1, 1, 1, 1).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC_COLOR">
			<summary>
			Source color blending factor. Each component of the color is multiplied by the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC_COLOR">
			<summary>
			Inverse source color blending factor. Each component of the color is multiplied by the inverse of the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC_ALPHA">
			<summary>
			Source alpha blending factor. Each component of the color is multiplied by the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC_ALPHA">
			<summary>
			Inverse source alpha blending factor. Each component of the color is multiplied by the inverse of the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_DEST_COLOR">
			<summary>
			Destination color blending factor. Each component of the color is multiplied by the destination color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_DEST_COLOR">
			<summary>
			Inverse destination color blending factor. Each component of the color is multiplied by the inverse of the destination color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_DEST_ALPHA">
			<summary>
			Destination alpha blending factor. Each component of the color is multiplied by the alpha value of the destination.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_DEST_ALPHA">
			<summary>
			Inverse destination alpha blending factor. Each component of the color is multiplied by the inverse of the alpha value of the destination.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC1_COLOR">
			<summary>
			Source color blending factor (for dual source blending). Each component of the color is multiplied by the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC1_COLOR">
			<summary>
			Inverse source color blending factor (for dual source blending). Each component of the color is multiplied by the inverse of the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC1_ALPHA">
			<summary>
			Source alpha blending factor. Each component of the color is multiplied by the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC1_ALPHA">
			<summary>
			Inverse source alpha blending factor (for dual source blending). Each component of the color is multiplied by the inverse of the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_ALL">
			<summary>
			Buffer mask indicating that all color channels, depth, and stencil buffers are available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_ALPHA">
			<summary>
			Buffer mask indicating that A channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_BLUE">
			<summary>
			Buffer mask indicating that B channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_COLOR">
			<summary>
			Buffer mask indicating that all color channels of the buffer are available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_DEPTH">
			<summary>
			Buffer mask indicating that depth buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_DEPTH_STENCIL">
			<summary>
			Buffer mask indicating that depth and stencil buffers are available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_GREEN">
			<summary>
			Buffer mask indicating that G channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_NONE">
			<summary>
			Buffer mask indicating that all color channels, depth, and stencil buffers are not available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_RED">
			<summary>
			Buffer mask indicating that R channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_STENCIL">
			<summary>
			Buffer mask indicating that stencil buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.CULL_BACK">
			<summary>
			A flag indicating that back-facing polygons should be culled.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.CULL_FRONT">
			<summary>
			A flag indicating that front-facing polygons should be culled.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.CULL_NONE">
			<summary>
			A flag tat disables the polygon culling.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_ALWAYS">
			<summary>
			A flag indicating depth function that performs the comparison which always succeeds (always passes).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_EQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is an equal-to operation (passes if the incoming depth value is equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_NOT_EQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is a not-equal-to operation (passes if the incoming depth value is not equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_GEQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is a greater-than or equal-to operation (passes if the incoming depth value is greater than or equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_LEQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is a less-than or equal-to operation (passes if the incoming depth value is less than or equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_NONE">
			<summary>
			A flag that disables the depth comparison function.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FILL_SOLID">
			<summary>
			A flag that specifies how polygons will be rasterized (the interior of the polygon is filled)
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FILL_WIREFRAME">
			<summary>
			A flag that specifies how polygons will be rasterized (boundary edges of the polygon are drawn as line segments.)
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FRONT_CCW">
			<summary>
			Counterclockwise orientation mode of the front-facing polygon.s
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FRONT_CW">
			<summary>
			Clockwise orientation mode of the front-facing polygons.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FRONT_INVERT">
			<summary>
			Back-facing mode for polygons.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_KEEP">
			<summary>
			A flag indicating stencil buffer operation that does not update the entry in the stencil buffer (stencil value unchanged).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_INCR">
			<summary>
			A flag indicating stencil buffer operation that increments the stencil-buffer entry (stencil value incremented).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_DECR">
			<summary>
			A flag indicating stencil buffer operation that decrements the stencil-buffer entry (stencil value decremented).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_REPLACE">
			<summary>
			A flag indicating stencil buffer operation that replaces the stencil-buffer entry with a reference value (stencil value replaced by stencil reference value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_NONE">
			<summary>
			A flag that disables the stencil test.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_LESS">
			<summary>
			A flag indicating stencil function that performs a comparison which is a less-than operation (passes if reference value is less than stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is an equal-to operation (passes if reference value is equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_LESS_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is a less-than-or-equal-to operation (passes if reference value is less than or equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_GREATER">
			<summary>
			A flag indicating stencil function that performs a comparison which is a greater-than operation (passes if reference value is greater than stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_NOT_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is an not-equal-to operation (passes if reference value is not equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_GREATER_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is a greater-than-or-equal-to operation (passes if reference value is greater than or equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_ALWAYS">
			<summary>
			A flag indicating stencil function that performs the comparison which always succeeds.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_ADD">
			<summary>
			ADD blending operation: source and destination colors are added to each other. O = sS + dD. The source and dest are multiplied by blending parameters.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_SUBTRACT">
			<summary>
			SUBTRACT blending operation: subtracts the destination from the source. O = sS - dD. The source and dest are multiplied by blending parameters.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_REVERSE_SUBTRACT">
			<summary>
			REVERSE SUBTRACT blending operation: subtracts the source from the destination. O = dD - sS. The source and dest are multiplied by blending parameters.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_MIN">
			<summary>
			MIN blending operation: output color is the component-wise minimum value of the source and dest colors. So for RGB it means that Or = min(Sr, Dr), Og = min(Sg, Dg), and so forth.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_MAX">
			<summary>
			MAX blending operation: output color is the component-wise maximum  value of the source and dest colors. So for RGB it means that Or = max(Sr, Dr), Og = max(Sg, Dg), and so forth.
		</summary>
		</member>
	</members>
</doc>