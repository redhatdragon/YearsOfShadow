<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Sound.setAdaptation(float)">
			<summary>
			Sets sound occlusion with the specified adaptation time.
			</summary> 
			<param name="adaptation"> Time for sound adaptation to a filter, used when the sound source becomes occluded or other way round. </param> 
		</member>
		<member name="M:Unigine.Sound.getAdaptation">
			<summary>
			Returns the current time set for sound adaptation, that is used when the sound source becomes occluded or other way round.
			</summary>  
			<returns>Time for sound adaptation to a filter.</returns>
		</member>
		<member name="M:Unigine.Sound.setAttenuation(int)">
			<summary>
			Sets the specified sound attenuation mode. Attenuation is the ability of a sound to lower in volume as the player moves away from it.
			</summary> 
			<param name="attenuation"> One of the ATTENUATION_* variables. The default value is ATTENUATION_LINEAR_CLAMPED. </param> 
		</member>
		<member name="M:Unigine.Sound.getAttenuation">
			<summary>
			Returns the current sound attenuation mode.
			</summary>  
			<returns>One of the ATTENUATION_* variables.</returns>
		</member>
		<member name="M:Unigine.Sound.setData(char)">
			<summary>
			Sets user data associated with the world. This string is written directly into a *.world file, into the data child tag of the sound tag, for example:
			</summary> 
			<param name="data"> New user data. Data can contain an XML formatted string </param> 
		</member>
		<member name="M:Unigine.Sound.getData">
			<summary>
			Returns user string data associated with the world. This string is written directly into the data tag of the *.world file, into the data child tag of the sound tag, for example:
			</summary>  
			<returns>User data. Data can contain an XML formatted string.</returns>
		</member>
		<member name="M:Unigine.Sound.setDoppler(float)">
			<summary>
			Sets the Doppler factor. This parameter allows you to exaggerate or tone-down the Doppler shift effect. By default, it is set to 1.0f.
			</summary> 
			<param name="doppler"> Doppler factor. </param> 
		</member>
		<member name="M:Unigine.Sound.getDoppler">
			<summary>
			Returns the current Doppler factor. This parameter allows you to exaggerate or tone-down the Doppler shift effect. The default value is 1.0f.
			</summary>  
			<returns>Doppler factor.</returns>
		</member>
		<member name="M:Unigine.Sound.setEnabled(int)">
			<summary>
			Enables or disables all sounds in the scene.
			</summary> 
			<param name="enabled"> 1 to enable all sounds, 0 to disable them. </param> 
		</member>
		<member name="M:Unigine.Sound.isEnabled">
			<summary>
			Returns a value indicating if sounds in the scene are enabled.
			</summary>  
			<returns>1 if sounds are enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Sound.setHRTF(int)">
			<summary>
			Enables or disables the HRTF (Head Related Transfer Function) mode. This mode provides imitation of the surround sound for the stereo wired headset.
			</summary> 
			<param name="hrtf"> 1 to enable binaural sound; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Sound.isHRTF">
			<summary>
			Returns a value indicating if the binaural HRTF (Head Related Transfer Function) sound is enabled. An HRTF provides imitation of the surround sound for the stereo wired headset.
			</summary>  
			<returns>1 if the binaural sound is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Sound.setSourceReverbMode(int)">
			<summary>
			Sets sound reverberation mode.
			</summary> 
			<param name="mode"> Reverberation mode. One of the REVERB_* variables. The default value is REVERB_MULTIPLE. </param> 
		</member>
		<member name="M:Unigine.Sound.getSourceReverbMode">
			<summary>
			Returns current sound reverberation mode.
			</summary>  
			<returns>Current sound reverberation mode. One of the REVERB_* variables. The default value is REVERB_MULTIPLE.</returns>
		</member>
		<member name="M:Unigine.Sound.setSourceOcclusion(int)">
			<summary>
			Enables or disables occlusion for sounds. When enabled, the sound will be occluded when there are other nodes between the listener and the sound source.
			</summary> 
			<param name="occlusion"> 1 to enable occlusion for sounds, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Sound.isSourceOcclusion">
			<summary>
			Returns a value indicating if occlusion for sounds is enabled. When enabled, the sound will be occluded when there are other nodes between the listener and the sound source.
			</summary>  
			<returns>1 if sound occlusion for sounds is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Sound.setScale(float)">
			<summary>
			Set the time scale for the sound playing.
			</summary> 
			<param name="scale"> Sound time scale. The provided value is clamped in the range [0; 2]. </param> 
		</member>
		<member name="M:Unigine.Sound.getScale">
			<summary>
			Returns the current time scale for the sound playing.
			</summary>  
			<returns>Sound time scale.</returns>
		</member>
		<member name="M:Unigine.Sound.setSourceLimit(int,int)">
			<summary>
			Limits the number of simultaneously played sound sources per one mixer channel. This setting is also available in the Editor global sound settings.
			</summary> 
			<param name="source"> Number of the mixer channel (from 0 to 31). </param>
			<param name="limit"> The maximum number of sound sources that can be played simultaneously. </param> 
		</member>
		<member name="M:Unigine.Sound.getSourceLimit(int)">
			<summary>
			Returns the current number of simultaneously played sound sources per one mixer channel.
			</summary> 
			<param name="source"> Number of the mixer channel (from 0 to 31). </param> 
			<returns>The maximum number of sound sources that can be played simultaneously.</returns>
		</member>
		<member name="M:Unigine.Sound.setSourceVolume(int,float)">
			<summary>
			Sets the volume of the specified mixer channel.
			</summary> 
			<param name="source"> Number of the mixer channel (from 0 to 31). </param>
			<param name="volume"> Channel volume. The provided value is clamped within [0;1] range, where 0 means muted sound and 1 is the maximum volume. </param> 
		</member>
		<member name="M:Unigine.Sound.getSourceVolume(int)">
			<summary>
			Returns the current volume of the specified mixer channel.
			</summary> 
			<param name="source"> Number of the mixer channel (from 0 to 31). </param> 
			<returns>Volume of the specified mixer channel. The returning value is in range [0;1], where 0 means muted sound and 1 is the maximum volume.</returns>
		</member>
		<member name="M:Unigine.Sound.getTotalTime">
			<summary>
			Returns the total time of asynchronous loading sounds.
			</summary>  
			<returns>The total time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Sound.setVelocity(float)">
			<summary>
			Sets the velocity value the Doppler shift calculation is based upon. By default, it is set to 343.3f. If you have players moving really fast, then you may want to adjust this to prevent the Doppler shift from distorting the sound too much.
			</summary> 
			<param name="velocity"> New velocity value for the Doppler shift calculation to be set. </param> 
		</member>
		<member name="M:Unigine.Sound.getVelocity">
			<summary>
			Returns the current velocity value the Doppler shift calculation is based upon. By default, it is set to 343.3f. If you have players moving really fast, then you may want to adjust this to prevent the Doppler shift from distorting the sound too much.
			</summary>  
			<returns>Current velocity value for the Doppler shift calculation.</returns>
		</member>
		<member name="M:Unigine.Sound.setVolume(float)">
			<summary>
			Sets the sound volume. By default, it is set to 1.0f.
			</summary> 
			<param name="volume"> Sound volume. 0 means the muted sound, 1 means the maximum volume. </param> 
		</member>
		<member name="M:Unigine.Sound.getVolume">
			<summary>
			Returns the current sound volume. The default value is 1.0f.
			</summary>  
			<returns>Sound volume. 0 means the muted sound, 1 means the maximum volume.</returns>
		</member>
		<member name="M:Unigine.Sound.loadSettings(char,bool)">
			<summary>
			Loads the sound settings from the given file.
			</summary> 
			<param name="name"> Path to a sound settings file (*.sound). </param>
			<param name="clear"> Clear flag. Set true to clear settings before loading (new settings shall be applied right after loading them), or false not to clear. </param> 
			<returns>1 if the sound settings are loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Sound.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads a sound state from the Xml. The sound state includes such settings as the volume, velocity, adaptation, Doppler factor, time scale and number of sound sources and their volumes.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>1 if the sound state is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Sound.renderWorld(int)">
			<summary>
			Forces update of the sound system: all sound changes (such as play() or stop() events and change of parameters) will be applied at once.					The sound thread is updated at 30 FPS. Imagine, you have a sound sample playing and you want to update the time, from which the sample should be played. But playback won't stop immediately, so the a new time value won't be set. You need force updating of the sound thread after stopping it:
			</summary> 
			<param name="force"> 1 to force update of the sound system; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.Sound.saveSettings(char,int)">
			<summary>
			Saves the current sound settings to the given file.
			</summary> 
			<param name="name"> Path to a sound settings file (*.sound). </param>
			<param name="force"> Force flag indcating if forced saving of sound settings is enabled. </param> 
			<returns>true if the sound settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Sound.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves a sound state into the stream. The sound state includes such settings as the volume, velocity, adaptation, Doppler factor, time scale and number of sound sources and their volumes.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the sound state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Sound.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores a sound state from the stream. The sound state includes such settings as the volume, velocity, adaptation, Doppler factor, time scale and number of sound sources and their volumes.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the sound state is restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Sound.saveWorld(Unigine.Ptr{Unigine.Xml},int)">
			<summary>
			Saves a sound state into the given Xml node. The sound state includes such settings as the volume, velocity, adaptation, Doppler factor, time scale and number of sound sources and their volumes.
			</summary> 
			<param name="xml"> Xml smart pointer. </param>
			<param name="force"> Force flag indicating if forced saving of the sound state is enabled. </param> 
			<returns>true if the sound state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.Sound.ATTENUATION_EXPONENT">
			<summary>
			Exponential distance rolloff model, modeling an exponential dropoff in gain as distance increases between the source and listener.
		</summary>
		</member>
		<member name="F:Unigine.Sound.ATTENUATION_EXPONENT_CLAMPED">
			<summary>
			Exponential Distance clamped model.
		</summary>
		</member>
		<member name="F:Unigine.Sound.ATTENUATION_INVERSE">
			<summary>
			Inverse distance rolloff model.
		</summary>
		</member>
		<member name="F:Unigine.Sound.ATTENUATION_INVERSE_CLAMPED">
			<summary>
			Inverse distance clamped model.
		</summary>
		</member>
		<member name="F:Unigine.Sound.ATTENUATION_LINEAR">
			<summary>
			Linear distance rolloff model.
		</summary>
		</member>
		<member name="F:Unigine.Sound.ATTENUATION_LINEAR_CLAMPED">
			<summary>
			Linear distance clamped model.
		</summary>
		</member>
		<member name="F:Unigine.Sound.NUM_SOURCES">
			<summary>
			Number of sound sources.
		</summary>
		</member>
		<member name="F:Unigine.Sound.REVERB_DISABLED">
			<summary>
			Reverberation is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Sound.REVERB_MULTIPLE">
			<summary>
			Multiple-environment reverberation.
		</summary>
		</member>
		<member name="F:Unigine.Sound.REVERB_SINGLE">
			<summary>
			Single-environment reverberation.
		</summary>
		</member>
		<member name="M:Unigine.Sounds.setCurrentDeviceName(char)">
			<summary>
			Changes the current device name thus changing the used current device. Only names got by the getDeviceName() method are supported.
			</summary> 
			<param name="name"> The new name of the device. </param> 
		</member>
		<member name="M:Unigine.Sounds.getCurrentDeviceName">
			<summary>
			Returns the name of the currently used device.
			</summary>  
			<returns>Current device name.</returns>
		</member>
		<member name="M:Unigine.Sounds.getDefaultDeviceName">
			<summary>
			Returns the name of the device set in its system by default.
			</summary>  
			<returns>The default device name.</returns>
		</member>
		<member name="M:Unigine.Sounds.isDeviceConnected">
			<summary>
			Returns the value indicating if the device is currently connected.
			</summary>  
			<returns>true if device is connected; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Sounds.isDeviceEnumerationSupported">
			<summary>
			Returns the value indicating if the device enumeration is supported. If it is not, the further actions (for example, getting the device name) won't be possible.
			</summary>  
		</member>
		<member name="M:Unigine.Sounds.getDeviceName(int)">
			<summary>
			Returns the name of the device by its index.
			</summary> 
			<param name="num"> The index of the device. </param> 
			<returns>The name of the device.</returns>
		</member>
		<member name="M:Unigine.Sounds.getNumDevices">
			<summary>
			Returns the total number of the available devices.
			</summary>  
			<returns>Number of devices.</returns>
		</member>
		<member name="M:Unigine.Sounds.updateDeviceList">
			<summary>
			Updates the list of available devices each 5 seconds.
			</summary>  
		</member>
		<member name="M:Unigine.AmbientSource.#ctor(char,int)">
			<summary>
			Constructor. Creates a new ambient sound source using a given sound file.
			</summary> 
			<param name="name"> Path to the sound file. </param>
			<param name="stream"> Positive value to create a streaming source, 0 to create a static source. If the flag is set, the sample will not be fully loaded into memory. Instead, its successive parts will be read one by one into a memory buffer.  </param> 
		</member>
		<member name="M:Unigine.AmbientSource.setGain(float)">
			<summary>
			Sets volume of the sound.
			</summary> 
			<param name="gain"> Volume. 0 means muted, 1 means maximum volume.  </param> 
		</member>
		<member name="M:Unigine.AmbientSource.getGain const">
			<summary>
			Returns volume of the sound.
			</summary>  
			<returns>Volume. 0 means muted, 1 means maximum volume. </returns>
		</member>
		<member name="M:Unigine.AmbientSource.getLength const">
			<summary>
			Returns the total length of the sound sample.
			</summary>  
			<returns>Length of the sample in seconds.</returns>
		</member>
		<member name="M:Unigine.AmbientSource.setLoop(int)">
			<summary>
			Sets a value indicating if the sample should be looped.
			</summary> 
			<param name="loop"> Positive number to loop the sample, 0 to play it only once.  </param> 
		</member>
		<member name="M:Unigine.AmbientSource.getLoop const">
			<summary>
			Returns a value indicating if the sample is looped.
			</summary>  
			<returns>Positive number if the sample is looped; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.AmbientSource.setPitch(float)">
			<summary>
			Sets a sound pitch.
			</summary> 
			<param name="pitch"> Factor, by which the current pitch will be multiplied. </param> 
		</member>
		<member name="M:Unigine.AmbientSource.getPitch const">
			<summary>
			Returns a sound pitch.
			</summary>  
			<returns>Factor, by which the current pitch will be multiplied.</returns>
		</member>
		<member name="M:Unigine.AmbientSource.isPlaying const">
			<summary>
			Returns a value indicating if the sample is being played.
			</summary>  
			<returns>true if the sample is being played; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.AmbientSource.setSampleName(char)">
			<summary>
			Sets a new sound file for the ambient sound.					To change the sound file of the currently played ambient sound, first, you should stop the playback, set the sample name, and then resume the playback.
			</summary> 
			<param name="name"> Path to the sound file. </param> 
		</member>
		<member name="M:Unigine.AmbientSource.getSampleName const">
			<summary>
			Returns the name of the sound file.
			</summary>  
			<returns>Path to the sound file.</returns>
		</member>
		<member name="M:Unigine.AmbientSource.setSourceMask(int)">
			<summary>
			Updates a bit mask that determines to what sound channels the source belongs to. For a sound source to be heard, its mask should match with the player's sound mask in at least one bit.
			</summary> 
			<param name="mask"> Integer, each bit of which specifies a sound channel. </param> 
		</member>
		<member name="M:Unigine.AmbientSource.getSourceMask const">
			<summary>
			Returns a bit mask that determines to what sound channels the source belongs to. For a sound source to be heard, its mask should match at least with the player's sound mask in at least one bit.
			</summary>  
			<returns>Integer, each bit of which specifies a sound channel.</returns>
		</member>
		<member name="M:Unigine.AmbientSource.isStopped const">
			<summary>
			Returns a value indicating if playback is stopped.
			</summary>  
			<returns>true if the sample is stopped; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.AmbientSource.setTime(float)">
			<summary>
			Sets time, from which the sample should be played.					This function is ineffective if the sample is already playing. At first it is necessary to stop the playback, set the time, and then resume the playback.
			</summary> 
			<param name="time"> Time in seconds. </param> 
		</member>
		<member name="M:Unigine.AmbientSource.getTime const">
			<summary>
			Returns the current time, at which the sample is being played.
			</summary>  
			<returns>Time in seconds.</returns>
		</member>
		<member name="M:Unigine.AmbientSource.play">
			<summary>
			Starts playing the sample.
			</summary>  
		</member>
		<member name="M:Unigine.AmbientSource.stop">
			<summary>
			Stops playback. This function saves the playback position so that playing of the file can be resumed from the same point.					The playback won't stop immediately, as the sound thread is updated at 30 FPS. So, when you need to perform operations that require stopping of the playback (for example, updating the time, from which the sample should be played), you need to force update the sound thread after stopping the playback.
			</summary>  
		</member>
		<member name="M:Unigine.SoundReverb.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a new reverberation zone of specified size.
			</summary> 
			<param name="size"> Size of the reverberation zone in units. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.setAirAbsorption(float)">
			<summary>
			Updates the air absorption value determining the distance-dependent attenuation at high frequencies caused by the propagation medium. The value of 0.994 per unit represents normal atmospheric humidity and temperature.
			</summary> 
			<param name="absorption"> Air absorption value in range [0.892;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getAirAbsorption const">
			<summary>
			Returns the current air absorption value determining the distance-dependent attenuation at high frequencies caused by the propagation medium.
			</summary>  
			<returns>Air absorption value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setDecayHFRatio(float)">
			<summary>
			Updates the ratio of high-frequency decay time relative to the time set by general reverberation decay time. The value 1.0 is neutral.
			</summary> 
			<param name="ratio"> High-frequency decay ratio in range [0.1;2.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getDecayHFRatio const">
			<summary>
			Returns the current ratio of high-frequency decay time relative to the time set by general reverberation decay time. The value 1.0 is neutral.
			</summary>  
			<returns>High-frequency decay ratio.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setDecayLFRatio(float)">
			<summary>
			Updates the ratio of low-frequency decay time relative to the time set by general reverberation decay time. The value 1.0 is neutral.
			</summary> 
			<param name="ratio"> Low-frequency decay ratio in range [0.1;2.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getDecayLFRatio const">
			<summary>
			Returns the current ratio of low-frequency decay time relative to the time set by general reverberation decay time. The value 1.0 is neutral.
			</summary>  
			<returns>Low-frequency decay ratio.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setDecayTime(float)">
			<summary>
			Updates the reverberation decay time.
			</summary> 
			<param name="time"> Decay time in range [0.1;20.0] seconds. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getDecayTime const">
			<summary>
			Returns the current reverberation decay time.
			</summary>  
			<returns>Decay time in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setDensity(float)">
			<summary>
			Updates the density of the resonances making up the reverberation sound.
			</summary> 
			<param name="density"> Density value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getDensity const">
			<summary>
			Returns the current density of the resonances making up the reverberation sound.
			</summary>  
			<returns>Density value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setDiffusion(float)">
			<summary>
			Updates the diffusion determining the rate at which the reverberation resonances increase in density after the original sound.
			</summary> 
			<param name="diffusion"> Diffusion value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getDiffusion const">
			<summary>
			Returns the current diffusion determining the rate at which the reverberation resonances increase in density after the original sound.
			</summary>  
			<returns>Diffusion value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setEchoDepth(float)">
			<summary>
			Updates the depth value determining how long the cyclic echo will persist along the reverberation decay.
			</summary> 
			<param name="depth"> Echo depth value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getEchoDepth const">
			<summary>
			Returns the current depth value determining how long the cyclic echo persists along the reverberation decay.
			</summary>  
			<returns>Echo depth value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setEchoTime(float)">
			<summary>
			Updates the time period for cyclic echo to repeat itself along the reverberation decay.
			</summary> 
			<param name="time"> Echo repeating time in range [0.075,0.25] seconds. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getEchoTime const">
			<summary>
			Returns the current time period for cyclic echo to repeat itself along the reverberation decay.
			</summary>  
			<returns>Echo repeating time in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setGain(float)">
			<summary>
			Updates the gain controlling the overall amount of the initial reflections and later reverberations. Setting the value to 0.0 mutes the reverberation sound.
			</summary> 
			<param name="gain"> Gain value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getGain const">
			<summary>
			Returns the current gain controlling the overall amount of the initial reflections and later reverberations. If set to 0.0, the reverberation sound is muted.
			</summary>  
			<returns>Gain value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setGainHF(float)">
			<summary>
			Updates the gain filter value for attenuating the reverberation sound at high frequencies. When setting the value to 1.0, no filter is applied.
			</summary> 
			<param name="gainhf"> High frequencies gain value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getGainHF const">
			<summary>
			Returns the current gain filter value for attenuating the reverberation sound at high frequencies. If set to 1.0, no filter is applied.
			</summary>  
			<returns>High-frequency gain value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setGainLF(float)">
			<summary>
			Updates the gain filter value for attenuating the reverberation sound at low frequencies. When setting the value to 1.0, no filter is applied.
			</summary> 
			<param name="gainlf"> Low frequencies gain value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getGainLF const">
			<summary>
			Returns the current gain filter value for attenuating the reverberation sound at low frequencies. If set to 1.0, no filter is applied.
			</summary>  
			<returns>Low-frequency gain value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setLateReverbDelay(float)">
			<summary>
			Updates the late reverberation delay determining the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections).
			</summary> 
			<param name="delay"> Late reverberation delay in range [0.0;0.1] seconds. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getLateReverbDelay const">
			<summary>
			Returns the current late reverberation delay determining the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections).
			</summary>  
			<returns>Late reverberation delay in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setLateReverbGain(float)">
			<summary>
			Updates the gain controlling the amount of later reverberation relative to the general reverberation gain. Setting the value to 0.0 will result in sound having no late reverberation at all.
			</summary> 
			<param name="gain"> Late reverberation gain value in range [0.0;10.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getLateReverbGain const">
			<summary>
			Returns the current gain controlling the amount of later reverberation relative to the general reverberation gain. If set to 0.0, the sound has no late reverberation at all.
			</summary>  
			<returns>Late reverberation gain value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setModulationDepth(float)">
			<summary>
			Updates the modulation depth determining the amount of pitch change.
			</summary> 
			<param name="depth"> Modulation depth value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getModulationDepth const">
			<summary>
			Returns the current modulation depth determining the amount of pitch change.
			</summary>  
			<returns>Modulation depth value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setModulationTime(float)">
			<summary>
			Updates the time for repeating the pitch modulation in the reverberation sound.
			</summary> 
			<param name="time"> Modulation repeating time in range [0.0;1.0] seconds. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getModulationTime const">
			<summary>
			Returns the current time for repeating the pitch modulation in the reverberation sound.
			</summary>  
			<returns>Modulation repeating time in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setReflectionDelay(float)">
			<summary>
			Updates the initial reflection delay determining the begin time of the first reflection from the source relative to the arrival time of the original sound.
			</summary> 
			<param name="delay"> Initial reflection delay in range [0.0;0.3] seconds. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getReflectionDelay const">
			<summary>
			Returns the current initial reflection delay determining the begin time of the first reflection from the source relative to the arrival time of the original sound.
			</summary>  
			<returns>Initial reflection delay in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setReflectionGain(float)">
			<summary>
			Updates the gain controlling the amount of initial reflections relative to the general reverberation gain. Setting the value to 0.0 will result in sound having no initial reflections at all.
			</summary> 
			<param name="gain"> Initial reflections gain value in range [0.0;3.1]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getReflectionGain const">
			<summary>
			Returns the current gain controlling the amount of initial reflections relative to the general reverberation gain. If set to 0.0, the sound has no initial reflections at all.
			</summary>  
			<returns>Initial reflections gain value.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setReverbMask(int)">
			<summary>
			Updates the bit mask that determines what reverberation zones can be heard. For sound to reverberate, at least one bit of this mask should match with the player's reverberation mask. At the same time, reverb mask of the sound source should also match with the player's one (but not necessarily in the same bit as this mask matches it).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask for reverberating sound sources and reverberation zones. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getReverbMask const">
			<summary>
			Returns the current bit mask that determines what reverberation zones can be heard. For sound to reverberate, at least one bit of this mask should match with the player's reverberation mask. At the same time, reverb mask of the sound source should also match with the player's one (but not necessarily in the same bit as this mask matches it).
			</summary>  
			<returns>Integer, each bit of which is a mask for reverberating sound sources and reverberation zones.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setRoomRolloff(float)">
			<summary>
			Updates the scaling room rolloff factor determining attenuation of the reflected sound (containing both reflections and reverberation) over distance.
			</summary> 
			<param name="rolloff"> Room rolloff factor in range [0.0;10.0]. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getRoomRolloff const">
			<summary>
			Returns the current scaling room rolloff factor determining attenuation of the reflected sound (containing both reflections and reverberation) over distance.
			</summary>  
			<returns>Room rolloff factor.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setSize(Unigine.Math.vec3)">
			<summary>
			Updates the size of the reverberation zone.
			</summary> 
			<param name="size"> Size of the reverberation zone in units. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getSize const">
			<summary>
			Returns the current size of the reverberation zone.
			</summary>  
			<returns>Size of the reverberation zone in units.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.setThreshold(Unigine.Math.vec3)">
			<summary>
			Updates the threshold size values along the coordinates axes relative to the reverberation zone size. It determines the distance of changing from partial to full reverberation audibility.
			</summary> 
			<param name="threshold"> Threshold size in units. </param> 
		</member>
		<member name="M:Unigine.SoundReverb.getThreshold const">
			<summary>
			Returns the current threshold size values along the coordinates axes relative to the reverberation zone size. It determines the distance of changing from partial to full reverberation audibility.
			</summary>  
			<returns>Threshold size in units.</returns>
		</member>
		<member name="M:Unigine.SoundReverb.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Sound type identifier.</returns>
		</member>
		<member name="M:Unigine.SoundSource.#ctor(char,int)">
			<summary>
			Constructor. Creates a new world sound source using a given sound sample file.
			</summary> 
			<param name="name"> Path to the sound sample file. </param>
			<param name="stream"> Positive value to create a streaming source, 0 to create a static source. If the flag is set, the sample will not be fully loaded into memory. Instead, its successive parts will be read one by one into a memory buffer. </param> 
		</member>
		<member name="M:Unigine.SoundSource.setAirAbsorption(float)">
			<summary>
			Updates the air absorption value for the sound source that determines the distance-dependent attenuation of the reverberation sound at high frequencies caused by the propagation medium.
			</summary> 
			<param name="absorption"> Air absorption value in range [0.0;10.0]. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getAirAbsorption const">
			<summary>
			Returns the current air absorption value for the sound source that determines the distance-dependent attenuation of the reverberation sound at high frequencies caused by the propagation medium.
			</summary>  
			<returns>Air absorption value.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setConeInnerAngle(float)">
			<summary>
			Updates an angle of the inner sound cone. Sound volume in the inner cone does not change. 360 degrees represents an omnidirectional sound source.
			</summary> 
			<param name="angle"> Cone inner angle in degrees. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getConeInnerAngle const">
			<summary>
			Returns the current angle of the inner sound cone. Sound volume in the inner cone does not change.
			</summary>  
			<returns>Cone inner angle in degrees.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setConeOuterAngle(float)">
			<summary>
			Updates an angle of the outer sound cone. When moving to the edge of the outer cone, sound volume is fading up to the gain value outside the oriented cone.
			</summary> 
			<param name="angle"> Cone outer angle in degrees. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getConeOuterAngle const">
			<summary>
			Returns the current angle of the outer sound cone. When moving to the edge of the outer cone, sound volume is fading up to the outside the cone gain value.
			</summary>  
			<returns>Cone outer angle in degrees.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setConeOuterGain(float)">
			<summary>
			Updates the gain controlling the sound intensity outside the oriented cone defined by the outer angle.
			</summary> 
			<param name="gain"> Cone outer gain in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getConeOuterGain const">
			<summary>
			Returns the current gain controlling the sound intensity outside the oriented cone defined by the outer angle.
			</summary>  
			<returns>Cone outer gain.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setConeOuterGainHF(float)">
			<summary>
			Updates the gain filter value for the sound source that attenuates the reverberation sound at high frequencies outside the oriented cone.
			</summary> 
			<param name="coneoutergainhf"> High-frequency reverberation gain value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getConeOuterGainHF const">
			<summary>
			Returns the current gain filter value for the sound source that attenuates the reverberation sound at high frequencies outside the oriented cone.
			</summary>  
			<returns>High-frequency reverberation gain value.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setGain(float)">
			<summary>
			Updates the gain controlling the sound intensity. Setting the value to 0.0 mutes the sound source.
			</summary> 
			<param name="gain"> Gain value in range [0.0;1.0]. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getGain const">
			<summary>
			Returns the current gain controlling the sound intensity. Is set to 0, the sound source is muted.
			</summary>  
			<returns>Gain value.</returns>
		</member>
		<member name="M:Unigine.SoundSource.getLength const">
			<summary>
			Returns the total length of the sound sample.
			</summary>  
			<returns>Length of the sample in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setLoop(int)">
			<summary>
			Updates a value indicating if the sample should be looped.
			</summary> 
			<param name="loop"> Positive number to loop the sample, 0 to play it only once.  </param> 
		</member>
		<member name="M:Unigine.SoundSource.getLoop const">
			<summary>
			Returns a value indicating if the sample is looped.
			</summary>  
			<returns>Positive number if the sample is currently looped; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.SoundSource.setMaxDistance(float)">
			<summary>
			Updates a distance, at which the sound completely fades out, in units.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getMaxDistance const">
			<summary>
			Returns a distance, at which the sound completely fades out, in units.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setMinDistance(float)">
			<summary>
			Updates a distance, at which the sound starts to fade, in units.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getMinDistance const">
			<summary>
			Returns a distance, at which the sound starts to fade, in units.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setOcclusion(int)">
			<summary>
			Updates a value indicating if the sound source should be muffled when being occluded.
			</summary> 
			<param name="occlusion"> Positive number if the sound should be muffled by occlusion; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getOcclusion const">
			<summary>
			Returns a value indicating if sound source should be muffled when being occluded.
			</summary>  
			<returns>Positive number if the sound is muffled by occlusion; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setOcclusionMask(int)">
			<summary>
			Updates the bit mask, that determines which objects occlude the sound source. For a sound to be occluded by an object's surface, at least one bit of this mask should match the occlusion mask of object's surface. Each surface has its own occlusion value, that determines how much it affects sounds in case of occlusion.					Sound occlusion must be enabled.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask for sound source occlusion. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getOcclusionMask const">
			<summary>
			Returns the current bit mask that determines which objects occlude the sound source. For a sound to be occluded by an object's surface, at least one bit of this mask should match the occlusion mask of object's surface. Each surface has its own occlusion value, that determines how much it affects sounds in case of occlusion.					Sound occlusion must be enabled.
			</summary>  
			<returns>Integer, each bit of which is a mask for sound source occlusion.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setPitch(float)">
			<summary>
			Updates a sound pitch.
			</summary> 
			<param name="pitch"> Factor, by which the current pitch will be multiplied in range [0.1;10.0]. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getPitch const">
			<summary>
			Returns the current sound pitch.
			</summary>  
			<returns>Factor, by which the pitch is multiplied.</returns>
		</member>
		<member name="M:Unigine.SoundSource.isPlaying const">
			<summary>
			Returns a value indicating if the sample is currently being played.
			</summary>  
			<returns>true if the sample is being played; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.SoundSource.setPlayOnEnable(bool)">
			<summary>
			Enables or disables playback start on enabling the sound source.					Playback will begin from the moment it was previously stopped. To enable playback from the beginning use the setRestartOnEnable() method.
			</summary> 
			<param name="enable"> true to enable playback start on enabling the sound source, false to disable it. </param> 
		</member>
		<member name="M:Unigine.SoundSource.isPlayOnEnable const">
			<summary>
			Returns a value indicating if playback is to be started each time the sound source is enabled.					Playback will begin from the moment it was previously stopped. To enable playback from the beginning use the setRestartOnEnable() method.
			</summary>  
			<returns>true if playback is to be started each time the sound source is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setRestartOnEnable(bool)">
			<summary>
			Enables or disables playback restart on enabling the sound source.
			</summary> 
			<param name="enable"> true to enable playback restart on enabling the sound source, false to disable it. </param> 
		</member>
		<member name="M:Unigine.SoundSource.isRestartOnEnable const">
			<summary>
			Returns a value indicating if playback is to be restarted from the beginning each time the sound source is enabled.
			</summary>  
			<returns>true if playback is to be restarted from the beginning each time the sound source is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setReverbMask(int)">
			<summary>
			Updates the bit mask that determines what reverberation zones can be heard. For sound to reverberate, at least one bit of this mask should match with the player's reverberation mask. At the same time, reverb mask of the reverberation zone should also match with the player's one (but not necessarily in the same bit as this mask matches it).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask for reverberating sound sources. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getReverbMask const">
			<summary>
			Returns the current bit mask that determines what reverberation zones can be heard. For sound to reverberate, at least one bit of this mask should match with the player's reverberation mask. At the same time, reverb mask of the reverberation zone should also match with the player's one (but not necessarily in the same bit as this mask matches it).
			</summary>  
			<returns>Integer, each bit of which is a mask for reverberating sound sources.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setRoomRolloff(float)">
			<summary>
			Updates the scaling room rolloff factor for the sound source that determines attenuation of the reverberation sound over distance.
			</summary> 
			<param name="rolloff"> Room rolloff factor in range [0.0; 10.0]. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getRoomRolloff const">
			<summary>
			Returns the current scaling room rolloff factor for the sound source that determines attenuation of the reverberation sound over distance.
			</summary>  
			<returns>Room rolloff factor.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setSampleName(char)">
			<summary>
			Sets a new sound file for the ambient sound.
			</summary> 
			<param name="name"> Path to the sound sample file. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getSampleName const">
			<summary>
			Returns the sound sample file of the sound source.
			</summary>  
			<returns>Path to the sound sample file.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setSourceMask(int)">
			<summary>
			Updates a bit mask that determines to what sound channels the source belongs to. For a sound source to be heard, its mask should match with the player's sound mask in at least one bit.
			</summary> 
			<param name="mask"> Integer, each bit of which specifies a sound channel. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getSourceMask const">
			<summary>
			Returns a bit mask that determines to what sound channels the source belongs to. For a sound source to be heard, its mask should match at least with the player's sound mask in at least one bit.
			</summary>  
			<returns>Integer, each bit of which specifies a sound channel.</returns>
		</member>
		<member name="M:Unigine.SoundSource.isStopped const">
			<summary>
			Returns a value indicating if playback is currently stopped.
			</summary>  
			<returns>true if the sample is stopped; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.SoundSource.setStream(bool)">
			<summary>
			Set a value indicating whether the sound is streamed or not.
			</summary> 
			<param name="stream"> true if the sound is a streamed one; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.SoundSource.isStream const">
			<summary>
			Returns a value indicating whether the sound is streamed or not.
			</summary>  
			<returns>true if the sound is a streamed one; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setTime(float)">
			<summary>
			Updates time, from which the sample should be played.					This function is ineffective if the sample is already playing. At first it is necessary to stop the playback, set the time, and then resume the playback.
			</summary> 
			<param name="time"> Time in seconds. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getTime const">
			<summary>
			Returns the current time, at which the sample is being played.
			</summary>  
			<returns>Time in seconds.</returns>
		</member>
		<member name="M:Unigine.SoundSource.play">
			<summary>
			Starts playing the sample.
			</summary>  
		</member>
		<member name="M:Unigine.SoundSource.stop">
			<summary>
			Stops playback. This function doesn't reset the playback position so that playing of the file can be resumed from the same point.					The playback won't stop immediately, as the sound thread is updated at 30 FPS. So, when you need to perform operations that require stopping of the playback (for example, updating the time, from which the sample should be played), you need to force update the sound thread after stopping the playback.
			</summary>  
		</member>
		<member name="M:Unigine.SoundSource.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Sound type identifier.</returns>
		</member>
		<member name="M:Unigine.SoundSource.setAdaptation(float)">
			<summary>
			Sets the new adaptation time period for the sound source, during which the volume of the occluded sound gradually changes (fading in and out). This parameter is used to make sounds fade in and out smoothly.
			</summary> 
			<param name="adaptation"> Adaptation time to be set, in seconds. 0.0f means instant adaptation. </param> 
		</member>
		<member name="M:Unigine.SoundSource.getAdaptation const">
			<summary>
			Returns the current adaptation time period for the sound source, during which the volume of the occluded sound gradually changes (fading in and out). This parameter is used to make sounds fade in and out smoothly.
			</summary>  
			<returns>Current adaptation time, in seconds. 0.0f means instant adaptation.</returns>
		</member>
	</members>
</doc>