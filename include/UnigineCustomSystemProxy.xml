<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.CustomSystemProxy.CustomSystemProxy(int)">
			<summary>
			Constructor. Creates an instance of the CustomSustemProxy class and specifies the supported features (mouse, keyboard, joystick, etc.).
			</summary> 
			<param name="features"> Supported features. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.get">
			<summary>
			Returns the CustomSystemProxy instance.
			</summary>  
			<returns>CustomSystemProxy instance.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getFeatures const">
			<summary>
			Returns the set of features CustomSystemProxy can perform.
			</summary>  
			<returns>Mask specifying the set of SYSTEM_PROXY_* features CustomSystemProxy can perform.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isWindowsSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy supports windows creation.
			</summary>  
			<returns>true if CustomSystemProxy supports windows creation, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isMouseSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy supports work with the mouse.
			</summary>  
			<returns>true if CustomSystemProxy supports work with the mouse, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isKeyboardSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy supports work with the keyboard.
			</summary>  
			<returns>true if CustomSystemProxy supports work with the keyboard, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isTouchesSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy supports work with the sensor input.
			</summary>  
			<returns>true if CustomSystemProxy supports work with the sensor input, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isDisplaysSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy can provide information on displays.
			</summary>  
			<returns>true if CustomSystemProxy can provide information on displays, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isJoysticksSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy supports work with the joystick input.
			</summary>  
			<returns>true if CustomSystemProxy supports work with the joystick input, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isGamepadsSupported const">
			<summary>
			Returns the value indicating if CustomSystemProxy supports work with the gamepad input.
			</summary>  
			<returns>true if CustomSystemProxy supports work with the gamepad input, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.initExternalWindowBuffers(WIN_HANDLE,Unigine.ivec2)">
			<summary>
			Initialization of the resources for rendering to the external window.
			</summary> 
			<param name="win_handle"> Window handle. </param>
			<param name="size"> Window size. </param> 
			<returns>true if the operation is successful, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.resizeExternalWindowBuffers(WIN_HANDLE,Unigine.ivec2)">
			<summary>
			Resizing of the external window in order to update the internal textures.
			</summary> 
			<param name="win_handle"> Window handle. </param>
			<param name="size"> Window size. </param> 
			<returns>true if the operation is successful, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.shutdownExternalWindowBuffers(WIN_HANDLE)">
			<summary>
			Shutdown of all resources required for rendering to the external window upon closing the window.
			</summary> 
			<param name="win_handle"> Window handle. </param> 
			<returns>true if the operation is successful, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.onExternalWindowRender(WIN_HANDLE)">
			<summary>
			Rendering into the specified external window.
			</summary> 
			<param name="win_handle"> Handle of the window into which the image is rendered. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.invokeWindowEvent(WindowEventPtr)">
			<summary>
			Conveys the window event to Window Manager.
			</summary> 
			<param name="e"> Window event. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.invokeInputEvent(InputEventPtr)">
			<summary>
			Conveys the input event to Window Manager.
			</summary> 
			<param name="e"> Input event. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.mainUpdate">
			<summary>
			Callback from the main thread before the update.
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.createWindow(int,int)">
			<summary>
			Returns the engine handle of the created window.
			</summary> 
			<param name="width"> Window width. </param>
			<param name="height"> Window height. </param> 
			<returns>Engine window handle.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.removeWindow(WIN_HANDLE)">
			<summary>
			Destroys the window using its handle.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowTitle(WIN_HANDLE,char)">
			<summary>
			Sets the window title.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="title"> Window title. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowIcon(WIN_HANDLE,ImagePtr)">
			<summary>
			Sets the window icon.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="image"> Image to be used as the icon. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowSize(WIN_HANDLE,Unigine.ivec2)">
			<summary>
			Sets the window size.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="size"> Window size (width and height). </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowMinSize(WIN_HANDLE,Unigine.ivec2)">
			<summary>
			Sets the minimum possible size of the window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="size"> Window size (width and height). </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowMaxSize(WIN_HANDLE,Unigine.ivec2)">
			<summary>
			Sets the maximum possible size of the window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="size"> Window size (width and height). </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowPosition(WIN_HANDLE,Unigine.ivec2)">
			<summary>
			Sets the window position (top left corner) in screen coordinates.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="pos"> Window position. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.showWindow(WIN_HANDLE)">
			<summary>
			Renders the window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.hideWindow(WIN_HANDLE)">
			<summary>
			Hides the window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowFocus(WIN_HANDLE)">
			<summary>
			Sets the focus to the engine window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowMouseGrab(WIN_HANDLE,bool)">
			<summary>
			Sets a value indicating if the mouse pointer is bound to the window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="state"> true if the mouse cannot leave the window; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowResizable(WIN_HANDLE,bool)">
			<summary>
			Sets a value indicating if the window can be resized.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="state"> true if the window can be resized; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowBordered(WIN_HANDLE,bool)">
			<summary>
			Sets a value indicating if the window has borders.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="state"> true if the window has borders; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.disableWindowFullscreen(WIN_HANDLE)">
			<summary>
			Disables the fullscreen mode for the window with the specified handle and returns it to window mode.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.enableWindowFullscreen(WIN_HANDLE,int,int)">
			<summary>
			Maximizes the window with the specified handle to the fullscreen mode on the specified display with the specified mode.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="display"> Display index. </param>
			<param name="mode"> Mode index. </param> 
			<returns>true if the window with the specified handle is successfully maximized to the fullscreen mode on the specified display with the specified mode; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.minimizeWindow(WIN_HANDLE)">
			<summary>
			Minimizes the window to tray.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.maximizeWindow(WIN_HANDLE)">
			<summary>
			Maximizes the window to the whole screen.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.restoreWindow(WIN_HANDLE)">
			<summary>
			Restores the window from the minimized or maximized state.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowOpacity(WIN_HANDLE,float)">
			<summary>
			Sets the window opacity.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="opacity"> Window opacity. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getWindowDisplayIndex(WIN_HANDLE) const">
			<summary>
			Returns the index of the display in which the window is rendered.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
			<returns>Display index.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getWindowHitTestResult(WIN_HANDLE)">
			<summary>
			Returns a value indicating in which area of the engine window the mouse is located.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
			<returns>Value indicating the window area, one of the HITTEST_* values.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getWindowSystemBorderSize(WIN_HANDLE)">
			<summary>
			Returns the size of the system window borders.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
			<returns>Size of the system window borders.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowResizeBorderSize(WIN_HANDLE,int)">
			<summary>
			Sets the size of the border that is manipulated to resize the window.
			</summary> 
			<param name="win_handle"> Engine window handle. </param>
			<param name="size"> Size of the border resize area. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.isDragAreaIntersection(uint64_t,int,int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.setGlobalMousePosition(Unigine.ivec2)">
			<summary>
			Sets the mouse position in global coordinates relative to the main system display.
			</summary> 
			<param name="pos"> Mouse position in global coordinates. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getGlobalMousePosition const">
			<summary>
			Returns the mouse position in global coordinates relative to the main system display.
			</summary>  
			<returns>Mouse position in global coordinates.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.showCursor(bool)">
			<summary>
			Sets a value indicating if the cursor is shown.
			</summary> 
			<param name="state"> true to show the cursor, false to hide it. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.showMouseCursorSystemArrow">
			<summary>
			Sets the system arrow as the mouse cursor.
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.setMouseCursorSkinCustom(ImagePtr)">
			<summary>
			Sets the specified skin image as the mouse cursor.
			</summary> 
			<param name="mouse_skin"> Image containing pointer shapes to be set for the mouse cursor (e.g., select, move, resize, etc.). </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setMouseCursorSkinSystem">
			<summary>
			Sets the current OS cursor skin (pointer shapes like select, move, resize, etc.).
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.setMouseCursorCustom(ImagePtr,int,int)">
			<summary>
			Sets a custom image for the OS mouse cursor. The image must be of the square size and					RGBA8 format. This method of setting cursor has the priority over other cursor setting methods. The image set by this method can be cleared only using the					clearMouseCursorCustom() method.
			</summary> 
			<param name="image"> Image containing pointer shapes to be set for the mouse cursor (e.g., select, move, resize, etc.). </param>
			<param name="x"> X coordinate of the cursor's hot spot. </param>
			<param name="y"> Y coordinate of the cursor's hot spot. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.clearMouseCursorCustom">
			<summary>
			Clears the custom mouse cursor set via the setMouseCursorCustom() method.
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.changeMouseCursorSkinNumber(int)">
			<summary>
			Changes the cursor skin using the skin number.
			</summary> 
			<param name="number"> Cursor skin number, one of the CURSOR_* pre-defined variables. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayDefaultSystemDPI const">
			<summary>
			Returns the default system dots/pixels-per-inch value.
			</summary>  
			<returns>Dots/pixels-per-inch value.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getNumDisplays const">
			<summary>
			Returns the total number of displays.
			</summary>  
			<returns>Number of displays.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayPosition(int) const">
			<summary>
			Returns the position of the specified display.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Display position.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayResolution(int) const">
			<summary>
			Returns the resolution of the specified display.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Display resolution.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayDPI(int) const">
			<summary>
			Returns the DPI of the specified display.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Display DPI.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getMainDisplay const">
			<summary>
			Returns the index of the main display.
			</summary>  
			<returns>Display index.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayNumModes(int) const">
			<summary>
			Returns the total number of available display modes.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Number of available display modes.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayModeResolution(int,int) const">
			<summary>
			Returns the DPI of the specified mode for the selected display.
			</summary> 
			<param name="display_index"> Display index. </param>
			<param name="mode_index"> Index of the display mode. </param> 
			<returns>Display DPI.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayModeRefreshRate(int,int) const">
			<summary>
			Returns the refresh rate of the specified display mode.
			</summary> 
			<param name="display_index"> Display index. </param>
			<param name="mode_index"> Index of the display mode. </param> 
			<returns>Refresh rate of the specified display mode.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayName(int) const">
			<summary>
			Returns the system name of the specified display.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Display name.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.hasClipboardText const">
			<summary>
			Returns the value showing if the clipboard contains anything.
			</summary>  
			<returns>true if there is text in the clipboard, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.setClipboardText(char)">
			<summary>
			Updates the contents of the system clipboard.
			</summary> 
			<param name="str"> Contents to set. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getClipboardText">
			<summary>
			Retrieves the contents of the system clipboard.
			</summary>  
			<returns>Contents of the system clipboard.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.showDialogMessage(char,char,WIN_HANDLE)">
			<summary>
			Displays a message dialog with the specified title and text.
			</summary> 
			<param name="title"> Title of the message window. </param>
			<param name="message"> Text of the message. </param>
			<param name="parent_window_handle"> Handle of the parent window. </param> 
			<returns>true if the dialog message is displayed successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.showDialogWarning(char,char,WIN_HANDLE)">
			<summary>
			Displays a warning dialog with the specified title and text.
			</summary> 
			<param name="title"> Title of the warning window. </param>
			<param name="warning"> Text of the warning. </param>
			<param name="parent_window_handle"> Handle of the parent window. </param> 
			<returns>true if the dialog warning is displayed successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.showDialogError(char,char,WIN_HANDLE)">
			<summary>
			Displays an error dialog with the specified title and text.
			</summary> 
			<param name="title"> Title of the error window. </param>
			<param name="error"> Text of the error. </param>
			<param name="parent_window_handle"> Handle of the parent window. </param> 
			<returns>true if the dialog error is displayed successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.needRenderExternalWindow(WIN_HANDLE)">
			<summary>
			Checks rendering of the external window. If the window is minimized, occluded by other windows and so on, this information can be passed to the Engine (to stop rendering, for example).
			</summary> 
			<param name="win_handle"> Handle of the external window into which the image is rendered. </param> 
			<returns>true if the window is rendered, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowModal(WIN_HANDLE,WIN_HANDLE)">
			<summary>
			Sets the window as a modal for the parent window.
			</summary> 
			<param name="win_handle"> Window to be set modal. </param>
			<param name="parent_handle"> Parent window for the modal window. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.setWindowAlwaysOnTop(WIN_HANDLE,bool)">
			<summary>
			Places the window above all other windows. The window maintains its topmost position even when it is deactivated.
			</summary> 
			<param name="win_handle"> Window to be set modal. </param>
			<param name="state"> true to make the engine window topmost, false to set the default engine window behavior. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getConnectedJoysticks(Unigine.Vector{int32_t,int,Unigine.VectorAllocator})">
			<summary>
			Returns identifiers of all connected joysticks.
			</summary> 
			<param name="connected_ids"> Vector of IDs. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickPlayerIndex(int32_t) const">
			<summary>
			Returns the joystick player index.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Player index.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickDeviceType(int32_t) const">
			<summary>
			Returns the type of the joystick.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Joystick type.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickVendor(int32_t) const">
			<summary>
			Returns the vendor ID of the joystick.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Joystick vendor ID.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickProduct(int32_t) const">
			<summary>
			Returns the product ID of the joystick.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Joystick product ID.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickProductVersion(int32_t) const">
			<summary>
			Returns the product version of the joystick.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Joystick product version.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickName(int32_t) const">
			<summary>
			Returns the name of the joystick.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Joystick name.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickModelGUID(int32_t) const">
			<summary>
			Returns the name of the joystick.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Model GUID of the joystick.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickNumButtons(int32_t) const">
			<summary>
			Returns the number of the joystick buttons.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Number of buttons.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickNumAxes(int32_t) const">
			<summary>
			Returns the number of the joystick axes.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Number of axes.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickNumPovs(int32_t) const">
			<summary>
			Returns the number of the joystick POV hats.
			</summary> 
			<param name="joy_id"> Joystick ID. </param> 
			<returns>Number of POV hats.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickAxisInitValue(int32_t,int) const">
			<summary>
			Returns the initial value of the joystick axis control.
			</summary> 
			<param name="joy_id"> Joystick ID. </param>
			<param name="axis"> Axis index. </param> 
			<returns>Initial value of the axis control.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickButtonName(int32_t,int)">
			<summary>
			Returns the name of the joystick button.
			</summary> 
			<param name="joy_id"> Joystick ID. </param>
			<param name="button"> Button index. </param> 
			<returns>Button name.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickAxisName(int32_t,int)">
			<summary>
			Returns the name of the joystick axis.
			</summary> 
			<param name="joy_id"> Joystick ID. </param>
			<param name="axis"> Axis index. </param> 
			<returns>Axis name.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getJoystickPovName(int32_t,int)">
			<summary>
			Returns the name of the joystick POV hat.
			</summary> 
			<param name="joy_id"> Joystick ID. </param>
			<param name="pov"> POV hat index. </param> 
			<returns>POV hat name.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getConnectedGamepads(Unigine.Vector{int32_t,int,Unigine.VectorAllocator})">
			<summary>
			Returns identifiers of all connected gamepads.
			</summary> 
			<param name="connected_ids"> Vector of IDs. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getGamepadPlayerIndex(int32_t) const">
			<summary>
			Returns the player index of the gamepad.
			</summary> 
			<param name="pad_id"> Gamepad ID. </param> 
			<returns>Player index.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getGamepadDeviceType(int32_t) const">
			<summary>
			Returns the type of the gamepad.
			</summary> 
			<param name="pad_id"> Gamepad ID. </param> 
			<returns>Gamepad type.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getGamepadModelType(int32_t) const">
			<summary>
			Returns the model type of the joystick.
			</summary> 
			<param name="pad_id"> Gamepad ID. </param> 
			<returns>Model type.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getGamepadName(int32_t) const">
			<summary>
			Return the name of the gamepad.
			</summary> 
			<param name="pad_id"> Gamepad ID. </param> 
			<returns>Gamepad name.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getGamepadModelGUID(int32_t) const">
			<summary>
			Returns the model GUID of the gamepad.
			</summary> 
			<param name="pad_id"> Gamepad ID. </param> 
			<returns>Model GUID.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.setGamepadVibration(int32_t,float,float,float)">
			<summary>
			Starts vibration of the gamepad.
			</summary> 
			<param name="pad_id"> Gamepad ID. </param>
			<param name="low_frequency"> Low-frequency (left) motor speed. </param>
			<param name="high_frequency"> High-frequency (right) motor speed. </param>
			<param name="duration_ms"> Duration of vibration, in milliseconds. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayRefreshRate(int) const">
			<summary>
			Returns the refresh rate of the display.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Refresh rate.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayCurrentMode(int) const">
			<summary>
			Returns the number of the current display mode.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Number of the current display mode.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayDesktopMode(int) const">
			<summary>
			Returns the number of the desktop's display mode.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Number of the desktop's display mode.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDisplayOrientation(int) const">
			<summary>
			Returns the orientation of the display.
			</summary> 
			<param name="display_index"> Display index. </param> 
			<returns>Display orientation.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isKeyboardModifierEnabled(int) const">
			<summary>
			Returns a value indicating if the specified keyboard modifier is enabled.
			</summary> 
			<param name="modifier"> Keyboard modifier (one of the Input::MODIFIER_* variables). </param> 
			<returns>true if the keyboard modifier is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.keyToUnicode(unsignedint) const">
			<summary>
			Returns the specified key transformed to Unicode.
			</summary> 
			<param name="key"> Key (one of the Input::KEY_* variables). </param> 
			<returns>Unicode symbol.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.unicodeToKey(unsignedint) const">
			<summary>
			Returns the key transformed from the specified Unicode symbol.
			</summary> 
			<param name="unicode"> Unicode symbol. </param> 
			<returns>Key (one of the Input::KEY_* variables).</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.isFocus">
			<summary>
			Returns the value indicating if focus is set on the window.
			</summary>  
			<returns>true if focus is set on the window; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.focusGained">
			<summary>
			The focus is set on the window.
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.focusLost">
			<summary>
			The focus is removed from the window.
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.updateWindowOrders">
			<summary>
			Updates the Z order of all windows.It is recommended to use this method only when required, because it is very slow.
			</summary>  
		</member>
		<member name="M:Unigine.CustomSystemProxy.getWindowOrder(WIN_HANDLE) const">
			<summary>
			Returns the window Z-order.
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
			<returns>Window order (a lower value means that the window is closer to the viewer).</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.windowToTop(WIN_HANDLE)">
			<summary>
			Brings the window with the specified handle to top (atop of all other windows).
			</summary> 
			<param name="win_handle"> Engine window handle. </param> 
		</member>
		<member name="M:Unigine.CustomSystemProxy.getWindowIntersection(Unigine.ivec2,Unigine.Vector{WIN_HANDLE,int,Unigine.VectorAllocator})">
			<summary>
			Returns the handle of the window the intersection with which is detected.
			</summary> 
			<param name="global_pos"> The coordinates of the intersection point in global coordinates. </param>
			<param name="excludes"> The windows to be excluded from the intersection detection. </param> 
			<returns>The handle of the window the intersection with which is detected.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getDraggableWindow const">
			<summary>
			Returns the handle of the draggable window.
			</summary>  
			<returns>Handle of the draggable window.</returns>
		</member>
		<member name="M:Unigine.CustomSystemProxy.getResizableWindow const">
			<summary>
			Returns the handle of the resizable window.
			</summary>  
			<returns>Handle of the resizable window.</returns>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_WINDOWS">
			<summary>
			CustomSystemProxy can create windows.
		</summary>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_MOUSE">
			<summary>
			CustomSystemProxy can work with the mouse.
		</summary>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_KEYBOARD">
			<summary>
			CustomSystemProxy can work with the keyboard.
		</summary>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_TOUCHES">
			<summary>
			CustomSystemProxy can work with the sensor input.
		</summary>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_DISPLAYS">
			<summary>
			CustomSystemProxy can provide information on displays.
		</summary>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_JOYSTICKS">
			<summary>
			CustomSystemProxy can work with the joysticks input.
		</summary>
		</member>
		<member name="F:Unigine.CustomSystemProxy.SYSTEM_PROXY_GAMEPADS">
			<summary>
			CustomSystemProxy can work with the gamepad input.
		</summary>
		</member>
	</members>
</doc>