<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Player.setCamera(Unigine.Ptr{Unigine.Camera})">
			<summary>
			Sets given Camera instance to the Player.
			</summary> 
			<param name="camera"> Smart pointer to a Camera to be set. </param> 
		</member>
		<member name="M:Unigine.Player.getCamera const">
			<summary>
			Returns the Camera instance of the Player node.
			</summary>  
			<returns>The camera of the player.</returns>
		</member>
		<member name="M:Unigine.Player.setControlled(bool)">
			<summary>
			Disables or enables the player controls.
			</summary> 
			<param name="controlled"> true to enable player controls, false to disable (player stops responding to them). </param> 
		</member>
		<member name="M:Unigine.Player.isControlled const">
			<summary>
			Returns a value indicating whether player controls are disabled (player does not respond to them) or enabled.
			</summary>  
			<returns>true if player controls are enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Player.setControls(Unigine.Ptr{Controls})">
			<summary>
			Sets a Controls object that will hold settings of input controls relevant to the player.
			</summary> 
			<param name="controls"> Controls object used to handle input controls.  </param> 
		</member>
		<member name="M:Unigine.Player.getControls const">
			<summary>
			Returns a Controls object that holds settings of input controls relevant to the player.
			</summary>  
			<returns>Controls object used to handle input controls. </returns>
		</member>
		<member name="M:Unigine.Player.getDirectionFromScreen(Unigine.Math.Vec3,Unigine.Math.Vec3,int,int,int,int,int,int) const">
			<summary>
			Casts the ray to a certain position on the screen and returns coordinates of the start (p0) and end (p1) points of the ray.
			</summary> 
			<param name="p0"> Start coordinates of the ray. </param>
			<param name="p1"> End coordinates of the ray. </param>
			<param name="mouse_x"> X-coordinate of the mouse position. </param>
			<param name="mouse_y"> Y-coordinate of the mouse position. </param>
			<param name="screen_x"> X-coordinate of the screen position. </param>
			<param name="screen_y"> X-coordinate of the screen position. </param>
			<param name="screen_width"> Screen width. </param>
			<param name="screen_height"> Screen height. </param> 
		</member>
		<member name="M:Unigine.Player.getDirectionFromScreen(int,int,int,int,int,int) const">
			<summary>
			Casts the ray to a certain position on the screen and returns a vector in the direction of this position.
			</summary> 
			<param name="mouse_x"> X-coordinate of the mouse position. </param>
			<param name="mouse_y"> Y-coordinate of the mouse position. </param>
			<param name="screen_x"> X-coordinate of the screen position. </param>
			<param name="screen_y"> X-coordinate of the screen position. </param>
			<param name="screen_width"> Screen width. </param>
			<param name="screen_height"> Screen height. </param> 
			<returns>Vector coordinates.</returns>
		</member>
		<member name="M:Unigine.Player.setFov(float)">
			<summary>
								Sets a vertical field of view of the player.					Horizontal FOV cannot be used since it varies depending on the viewport's aspect ratio. Setting FOV recalculates projection matrix with aspect ratio = 1.					You can use the following formula to calculate horizontal FOV from the vertical one for the given aspect ratio (width/height): FOV_h = 2 × atan ( (width / height) × tan(FOV_v / 2)).
			</summary> 
			<param name="fov"> New vertical field of view in degrees. The provided value will be saturated in the range [0; 180]. The default is 60 degrees. </param> 
		</member>
		<member name="M:Unigine.Player.getFov const">
			<summary>
								Returns the current vertical field of view of the player.					Horizontal FOV cannot be used since it varies depending on the viewport's aspect ratio.					You can use the following formula to calculate horizontal FOV from the vertical one for the given aspect ratio (width/height): FOV_h = 2 × atan ( (width / height) × tan(FOV_v / 2)).
			</summary>  
			<returns>Vertical field of view in degrees. The default is 60 degrees.</returns>
		</member>
		<member name="M:Unigine.Player.setObliqueFrustum(bool)">
			<summary>
			Enables or disables obliqueness of the viewing frustum.					It is recommended to set oblique viewing frustum using this method, as it doesn't affect the projection matrix. To specify the near clipping plane use the setObliqueFrustumPlane() method.
			</summary> 
			<param name="frustum"> true to enable oblique viewing frustum; false to disable it. </param> 
		</member>
		<member name="M:Unigine.Player.isObliqueFrustum const">
			<summary>
			Returns a value indicating if the viewing frustum is oblique.
			</summary>  
			<returns>true if the viewing frustum is oblique; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Player.setObliqueFrustumPlane(Unigine.Math.Vec4)">
			<summary>
			Sets the oblique near clipping plane of the viewing frustum.					This method does not affect the projection matrix. To enable the oblique frustum use the setObliqueFrustum() method.
			
			</summary> 
			<param name="plane"> World coordinates of the oblique near clipping plane to set (Nx, Ny, Nz, D), where Nx, Ny, Nz - coordinates of the plane normal, D - distance from the origin to the plane. </param> 
		</member>
		<member name="M:Unigine.Player.getObliqueFrustumPlane const">
			<summary>
			Returns the oblique near clipping plane of the viewing frustum.
			</summary>  
			<returns>World coordinates of the oblique near clipping plane to set (Nx, Ny, Nz, D), where Nx, Ny, Nz - coordinates of the plane normal, D - distance from the origin to the plane.</returns>
		</member>
		<member name="M:Unigine.Player.setProjection(Unigine.Math.mat4)">
			<summary>
			Updates the current projection matrix.					It is not recommended to use this method for setting obliqueness of the near clipping plane of the frustum, as in this case a number of features (such as clouds, shadows, TAA, a number of engine optimizations, etc.) will not function properly. Please, use the setObliqueFrustum() method instead.
			</summary> 
			<param name="projection"> New projection matrix. </param> 
		</member>
		<member name="M:Unigine.Player.getProjection const">
			<summary>
			Returns the current projection matrix with unit (1.0) aspect ratio.
			</summary>  
			<returns>Current projection matrix.</returns>
		</member>
		<member name="M:Unigine.Player.getProjectionFromScreen(int,int,int,int,int,int) const">
			<summary>
			Creates a projection matrix out of 2 screen positions . This is required for the frame selection.
			</summary> 
			<param name="x0"> X-coordinate of the first screen position. </param>
			<param name="y0"> Y-coordinate of the first screen position. </param>
			<param name="x1"> X-coordinate of the second screen position. </param>
			<param name="y1"> Y-coordinate of the second screen position. </param>
			<param name="screen_width"> Screen width. </param>
			<param name="screen_height"> Screen height. </param> 
			<returns>Projection matrix.</returns>
		</member>
		<member name="M:Unigine.Player.setReflectionViewportMask(int)">
			<summary>
			Sets a bit mask for rendering reflections into the viewport. Reflections are rendered in the viewport if masks of reflective materials match this one (one bit at least).
			</summary> 
			<param name="mask"> Reflection viewport mask (an integer, each bit of which is a mask). </param> 
		</member>
		<member name="M:Unigine.Player.getReflectionViewportMask const">
			<summary>
			Returns the current bit mask for rendering reflections into the viewport. Reflections are rendered in the viewport if masks of reflective materials match this one (one bit at least).
			</summary>  
			<returns>Reflection viewport mask (an integer, each bit of which is a mask).</returns>
		</member>
		<member name="M:Unigine.Player.setReverbMask(int)">
			<summary>
			Sets a reverb mask that determines reverberation zones, which can be heard. For sound to reverberate, at least one bit of this mask should match with a reverb mask of the sound source and a reverb mask of the reverberation zone. Masks of a sound source and reverberation zone can match with the player's one in different bits, not necessarily one.
			</summary> 
			<param name="mask"> Reverb mask (integer, each bit of which is a mask for reverberating sound sources and reverberation zones). </param> 
		</member>
		<member name="M:Unigine.Player.getReverbMask const">
			<summary>
			Returns the current bit mask that determines what reverberation zones can be heard. For sound to reverberate, at least one bit of this mask should match with a reverb mask of the sound source and a reverb mask of the reverberation zone. (Masks of a sound source and reverberation zone can match with the player's one in different bits, not necessarily one).
			</summary>  
			<returns>Reverb mask (integer, each bit of which is a mask for reverberating sound sources and reverberation zones).</returns>
		</member>
		<member name="M:Unigine.Player.getScreenPosition(int,int,Unigine.Math.Vec3,int,int) const">
			<summary>
			Projects the point in world coordinates to the screen. Screen coordinates are written into the first 2 variables passed to the method.
			</summary> 
			<param name="x"> X-coordinate of the screen position. </param>
			<param name="y"> Y-coordinate of the screen position. </param>
			<param name="point"> Point coordinates. </param>
			<param name="screen_width"> Screen width. </param>
			<param name="screen_height"> Screen height. </param> 
			<returns>1 if the point has been projected successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Player.setSourceMask(int)">
			<summary>
			Sets a source mask that determines sound sources, which can be heard. For a sound source to be heard, its mask should match with this one in at least one bit. Plus, the volume of sound channel in which the sound plays (its number also depends on this mask) should not be equal to 0.
			</summary> 
			<param name="mask"> Source mask (integer, each bit of which specifies a sound channel). </param> 
		</member>
		<member name="M:Unigine.Player.getSourceMask const">
			<summary>
			Returns the source mask that determines sound sources, which can be heard. For a sound source to be heard, its mask should match with this one in at least one bit. Plus, the volume of sound channel in which the sound plays (its number also depends on this mask) should not be equal to 0.
			</summary>  
			<returns>Source mask (integer, each bit of which specifies a sound channel).</returns>
		</member>
		<member name="M:Unigine.Player.setUp(Unigine.Math.vec3)">
			<summary>
			Sets an up direction of the player's viewport (i.e. tilt of the player's viewport).					In case of PlayerActor, its transformation forces it to recalculate its inner state (position, direction, angles and so on), so the up direction of the player's viewport may become "negative forward". And then transformation will be recalculated by using this direction, causing flip of the basis of the player actor. To avoid such flipping, the theta and phi angles should be recalculated by using the current viewing orientation of the player.
			</summary> 
			<param name="up"> New upward direction vector. The vector is normalized to 1. </param> 
		</member>
		<member name="M:Unigine.Player.getUp const">
			<summary>
			Returns the current up direction of the player's viewport (i.e. tilt of the player's viewport).
			</summary>  
			<returns>Upward direction vector.</returns>
		</member>
		<member name="M:Unigine.Player.setVelocity(Unigine.Math.vec3)">
			<summary>
			Sets a player's velocity.					In case of PlayerActor, this function is valid only when the player is not simulated physically (setPhysical() is set to 0). If it is, moving PlayerActor is done via accessing its body.
			</summary> 
			<param name="velocity"> New velocity in units per second. </param> 
		</member>
		<member name="M:Unigine.Player.getVelocity const">
			<summary>
			Returns the current velocity of the player.
			</summary>  
			<returns>Velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.Player.setViewDirection(Unigine.Math.vec3)">
			<summary>
			Sets given view direction vector to the Player instance.
			</summary> 
			<param name="direction"> A view direction vector. </param> 
		</member>
		<member name="M:Unigine.Player.getViewDirection const">
			<summary>
			Returns Player's view direction vector.
			</summary>  
			<returns>A view direction vector.</returns>
		</member>
		<member name="M:Unigine.Player.setViewportMask(int)">
			<summary>
			Sets a viewport mask. Object surfaces, materials, decals, lights and GUI objects will be rendered into the viewport only if their viewport mask matches the player's one (one matching bit is enough).
			</summary> 
			<param name="mask"> Viewport mask (integer, each bit of which is a mask). </param> 
		</member>
		<member name="M:Unigine.Player.getViewportMask const">
			<summary>
			Returns the current viewport mask. Object surfaces, materials, decals, lights and GUI objects will be rendered into the viewport only if their viewport mask matches the player's one (one matching bit is enough).
			</summary>  
			<returns>Viewport mask (integer, each bit of which is a mask).</returns>
		</member>
		<member name="M:Unigine.Player.setZFar(float)">
			<summary>
			Sets a distance to the far clipping plane of the player's viewing frustum. The default is 10000 units.
			</summary> 
			<param name="zfar"> Distance to the far clipping plane in units. The minimum value is 0. </param> 
		</member>
		<member name="M:Unigine.Player.getZFar const">
			<summary>
			Returns the current distance to the far clipping plane of the player's viewing frustum. The default is 10000 units.
			</summary>  
			<returns>Distance to the far clipping plane in units.</returns>
		</member>
		<member name="M:Unigine.Player.setZNear(float)">
			<summary>
			Sets a distance to the near clipping plane of the player's viewing frustum. The default is 0.1 units.
			</summary> 
			<param name="znear"> Distance to the near clipping plane in units. The minimum value is 0. </param> 
		</member>
		<member name="M:Unigine.Player.getZNear const">
			<summary>
			Returns the distance to the near clipping plane of the player's viewing frustum. The default is 0.1 units.
			</summary>  
			<returns>Distance to the near clipping plane in units.</returns>
		</member>
		<member name="M:Unigine.Player.flushTransform const">
			<summary>
			Forces to immediately set transformations to the player. This function should be called manually after user input has been updated via updateControls().
			</summary>  
		</member>
		<member name="M:Unigine.Player.updateControls(float) const">
			<summary>
			Gets the current player's parameters (impulse, direction, velocity etc) according to user input. After the input has been updated, flushTransform() should be called manually to apply it to the player.
			</summary> 
			<param name="ifps"> Frame duration in seconds. </param> 
		</member>
		<member name="M:Unigine.Player.setFovMode(int)">
			<summary>
			Sets the value indicating the type of FOV that is used for the player:											For the standard player, the vertical FOV should be set. In this case, FOV is directly set in degrees.						For the physically-based player, the horizontal FOV should be set. In this case, FOV is calculated depending on the film gate and focal length of the player.
			</summary> 
			<param name="mode"> FOV_MODE_VERTICAL for the player with the vertical FOV; FOV_MODE_PHYSICALLY_BASED_CAMERA for the physically-based player with the horizontal FOV. </param> 
		</member>
		<member name="M:Unigine.Player.getFovMode const">
			<summary>
			Returns the value indicating the type of FOV that is used for the player.
			</summary>  
			<returns>0 if the player with the vertical FOV is used; 1 if the physically-based player with the horizontal FOV is used.</returns>
		</member>
		<member name="M:Unigine.Player.setFilmGate(float)">
			<summary>
			Sets a film gate for the physically-based camera with horizontal FOV.
			</summary> 
			<param name="gate"> Film gate. </param> 
		</member>
		<member name="M:Unigine.Player.getFilmGate const">
			<summary>
			Returns a film gate for the physically-based camera with horizontal FOV.
			</summary>  
			<returns>Film gate.</returns>
		</member>
		<member name="M:Unigine.Player.setFocalLength(float)">
			<summary>
			Sets a focal length of the physically-based camera lens.
			</summary> 
			<param name="length"> Camera lens focal length. </param> 
		</member>
		<member name="M:Unigine.Player.getFocalLength const">
			<summary>
			Returns the focal length of the physically-based camera lens.
			</summary>  
			<returns>Camera lens focal length.</returns>
		</member>
		<member name="M:Unigine.Player.getAspectCorrectedProjection(int,int) const">
			<summary>
			Returns projection matrix after correction for the specified aspect ratio (screen width / screen height). Currently fixed FOV component is taken into account.
			</summary> 
			<param name="width"> Screen width. </param>
			<param name="height"> Screen height. </param> 
			<returns>Projection matrix after correction for the specified aspect ratio (screen width / screen height).</returns>
		</member>
		<member name="M:Unigine.Player.getFovFixed const">
			<summary>
			Returns a value indicating which FOV component (horizontal or vertical) is currently fixed.
			</summary>  
			<returns>Current fixed FOV component, one of the Camera::FOV_FIXED_* values.</returns>
		</member>
		<member name="M:Unigine.Player.addScriptableMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Attaches a new scriptable material to the player. To apply a scriptable material globally, use the addScriptableMaterial() method of the Render class. The order of execution for scripts assigned to scriptable materials is defined by material's number in the list of the player.Scriptable materials applied globally have their expressions executed before the ones that are applied per-player.
			</summary> 
			<param name="material"> Scriptable material to be attached to the player. </param> 
		</member>
		<member name="M:Unigine.Player.insertScriptableMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Inserts a new scriptable material into the list of the ones assigned to the player. To apply a scriptable material globally, use the insertScriptableMaterial() method of the Render class. The order of execution for scripts assigned to scriptable materials is defined by material's number in the player's list.Scriptable materials applied globally have their expressions executed before the ones that are applied per-player.
			</summary> 
			<param name="num"> Position at which a new scriptable material is to be inserted. </param>
			<param name="material"> Scriptable material to be inserted. </param> 
		</member>
		<member name="M:Unigine.Player.removeScriptableMaterial(int)">
			<summary>
			Removes the scriptable material with the specified number from the player.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Player.getNumScriptableMaterials const">
			<summary>
			Returns the total number of scriptable materials attached to the player.
			</summary>  
			<returns>Total number of scriptable materials attached to the player.</returns>
		</member>
		<member name="M:Unigine.Player.findScriptableMaterial(Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Returns the number of the specified scriptable material for the player. This number is player-specific (valid for this player only) and determines the order in which the assigned expressions are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-player.
			</summary> 
			<param name="material"> Scriptable material for which a number is to be found. </param> 
			<returns>Scriptable material number in the range from 0 to the total number of scriptable materials, or -1 if the specified material was not found.</returns>
		</member>
		<member name="M:Unigine.Player.setScriptableMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Replaces the scriptable material with the specified number with the new scriptable material specified. The number of material determines the order in which the expressions assigned to it are executed. This number is player-specific (valid for this player only).					Scriptable materials applied globally have their expressions executed before the ones that are applied per-player.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param>
			<param name="material"> New scriptable material to replace the one with the specified number. </param> 
		</member>
		<member name="M:Unigine.Player.getScriptableMaterial(int) const">
			<summary>
			Returns a scriptable material attached to the player by its number.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
			<returns>Scriptable material attached to the player with the specified number.</returns>
		</member>
		<member name="M:Unigine.Player.setScriptableMaterialEnabled(int,bool)">
			<summary>
			Enables or disables the scriptable material with the specified number. When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param>
			<param name="enabled"> true to enable the scriptable material with the specified number, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Player.getScriptableMaterialEnabled(int) const">
			<summary>
			Returns a value indicating if the scriptable material with the specified number attached to the player is enabled (active). When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
			<returns>true if the scriptable material with the specified number is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Player.swapScriptableMaterials(int,int)">
			<summary>
			Swaps two scriptable materials with specified numbers. The number of material determines the order in which the expressions assigned to it are executed.					The number is player-specific (valid for this player only).
			</summary> 
			<param name="num_0"> Number of the first scriptable material in the range from 0 to the total number of scriptable materials. </param>
			<param name="num_1"> Number of the second scriptable material in the range from 0 to the total number of scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Player.clearScriptableMaterials">
			<summary>
			Clears all scriptable materials attached to the player.
			</summary>  
		</member>
		<member name="M:Unigine.Player.setMainPlayer(bool)">
			<summary>
			Sets a player as a main player.
			</summary> 
			<param name="player"> true to set the player as the main player, false to unset it. </param> 
		</member>
		<member name="M:Unigine.Player.isMainPlayer const">
			<summary>
			Checks if the player is a main player.
			</summary>  
			<returns>true if the player is a main player; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Player.setListener(bool)">
			<summary>
			Sets the player as the listener.
			</summary> 
			<param name="listener"> true to set the player as the listener, false to unset it. </param> 
		</member>
		<member name="M:Unigine.Player.isListener const">
			<summary>
			Checks if the player is a listener.
			</summary>  
			<returns>true if the player is a listener; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Player.getDirectionFromMainWindow(Unigine.Math.Vec3,Unigine.Math.Vec3,int,int) const">
			<summary>
			Casts the ray to a certain position on the screen and returns coordinates of the start (p0) and end (p1) points of the ray relative to the current main window.
			</summary> 
			<param name="p0"> Start coordinates of the ray. </param>
			<param name="p1"> End coordinates of the ray. </param>
			<param name="mouse_x"> X-coordinate of the mouse position in world coordinates. </param>
			<param name="mouse_y"> Y-coordinate of the mouse position in world coordinates. </param> 
		</member>
		<member name="M:Unigine.Player.getDirectionFromMainWindow(int,int) const">
			<summary>
			Casts the ray to a certain position on the screen and returns a vector in the direction of this position relative to the current main window.
			</summary> 
			<param name="mouse_x"> X-coordinate of the mouse position in world coordinates. </param>
			<param name="mouse_y"> Y-coordinate of the mouse position in world coordinates. </param> 
			<returns>Vector coordinates.</returns>
		</member>
		<member name="M:Unigine.Player.getDirectionFromWindow(Unigine.Math.Vec3,Unigine.Math.Vec3,int,int,Unigine.Ptr{EngineWindow}) const">
			<summary>
			Casts the ray to a certain position on the screen and returns coordinates of the start (p0) and end (p1) points of the ray relative to the specified window.
			</summary> 
			<param name="p0"> Start coordinates of the ray. </param>
			<param name="p1"> End coordinates of the ray. </param>
			<param name="mouse_x"> X-coordinate of the mouse position in world coordinates. </param>
			<param name="mouse_y"> Y-coordinate of the mouse position in world coordinates. </param>
			<param name="window"> Window relative to which the directon is returned. </param> 
		</member>
		<member name="M:Unigine.Player.getDirectionFromWindow(int,int,Unigine.Ptr{EngineWindow}) const">
			<summary>
			Casts the ray to a certain position on the screen and returns a vector in the direction of this position relative to the specified window.
			</summary> 
			<param name="mouse_x"> X-coordinate of the mouse position in world coordinates. </param>
			<param name="mouse_y"> Y-coordinate of the mouse position in world coordinates. </param>
			<param name="window"> Window relative to which the directon is returned. </param> 
			<returns>Vector coordinates.</returns>
		</member>
		<member name="M:Unigine.Player.getProjectionFromMainWindow(int,int,int,int) const">
			<summary>
			Creates a projection matrix out of 2 screen positions relative to the current main window. This is required for the frame selection.
			</summary> 
			<param name="x0"> X-coordinate of the first screen position. </param>
			<param name="y0"> Y-coordinate of the first screen position. </param>
			<param name="x1"> X-coordinate of the second screen position. </param>
			<param name="y1"> Y-coordinate of the second screen position. </param> 
			<returns>Projection matrix.</returns>
		</member>
		<member name="M:Unigine.Player.getProjectionFromWindow(int,int,int,int,Unigine.Ptr{EngineWindow}) const">
			<summary>
			Creates a projection matrix out of 2 screen positions relative to the specified window. This is required for the frame selection.
			</summary> 
			<param name="x0"> X-coordinate of the first screen position. </param>
			<param name="y0"> Y-coordinate of the first screen position. </param>
			<param name="x1"> X-coordinate of the second screen position. </param>
			<param name="y1"> Y-coordinate of the second screen position. </param>
			<param name="window"> Window relative to which the projection is returned. </param> 
			<returns>Projection matrix.</returns>
		</member>
		<member name="M:Unigine.Player.getMainWindowPosition(int,int,Unigine.Math.Vec3) const">
			<summary>
			Projects the point in world coordinates relative to the main window. The coordinates are written into the first 2 variables passed to the method.
			</summary> 
			<param name="x"> X-coordinate of the screen position. </param>
			<param name="y"> Y-coordinate of the screen position. </param>
			<param name="point"> Point coordinates. </param> 
			<returns>1 if the point has been projected successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Player.getWindowPosition(int,int,Unigine.Math.Vec3,Unigine.Ptr{EngineWindow}) const">
			<summary>
			Projects the point in world coordinates relative to the specified window. The coordinates are written into the first 2 variables passed to the method.
			</summary> 
			<param name="x"> X-coordinate of the screen position. </param>
			<param name="y"> Y-coordinate of the screen position. </param>
			<param name="point"> Point coordinates. </param>
			<param name="window"> Window relative to which the projection is returned. </param> 
			<returns>1 if the point has been projected successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.#ctor">
			<summary>
			Constructor. Creates a new actor with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.PlayerActor.setAcceleration(float)">
			<summary>
			Sets an acceleration of the actor.
			</summary> 
			<param name="acceleration"> New acceleration in units per second squared. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getAcceleration const">
			<summary>
			Returns the current acceleration of the actor.
			</summary>  
			<returns>Acceleration in units per second squared.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getBody const">
			<summary>
			Returns a rigid body, if the body is simulated physically (isPhysical(1)); otherwise a dummy body will be returned (isPhysical(0)).
			</summary>  
			<returns>Actor body.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setCeiling(int)">
			<summary>
			Sets a value indicating if the actor touches the ceiling surface with its head.
			</summary> 
			<param name="ceiling"> 1 to indicate that an actor touches the ceiling; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getCeiling const">
			<summary>
			Returns a value indicating if the actor touches the ceiling surface with its head.
			</summary>  
			<returns>1 if the actor touches the ceiling; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setCollision(int)">
			<summary>
			Sets a value indicating if collisions with a player's capsule should be taken into account. This method is valid only in case setPhysical() is set to 0 and does not handle collisions automatically.
			</summary> 
			<param name="collision"> 1 to enable collisions, 0 not to handle collisions with the actor. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getCollision const">
			<summary>
			Returns a value indicating if collisions with a player's capsule should be taken into account. This method is valid only in case setPhysical() is set to 0 and does not handle collisions automatically.
			</summary>  
			<returns>1 if collisions are taken into account; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setCollisionHeight(float)">
			<summary>
			Sets a height of actor's capsule.
			</summary> 
			<param name="height"> New height in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getCollisionHeight const">
			<summary>
			Returns the height of actor's capsule.
			</summary>  
			<returns>Height in units.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setCollisionMask(int)">
			<summary>
			Sets a collision mask for the actor. Two objects collide, if they both have matching masks (i.e. at least one bit matches).
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a bit mask. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getCollisionMask const">
			<summary>
			Returns the collision mask of the actor. Two objects collide, if they both have matching masks (i.e. at least one bit matches).
			</summary>  
			<returns>An integer value, each bit of which is used to set a bit mask.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setCollisionRadius(float)">
			<summary>
			Sets a radius of actor's capsule.
			</summary> 
			<param name="radius"> New radius in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getCollisionRadius const">
			<summary>
			Returns the radius of actor's capsule.
			</summary>  
			<returns>Radius in units.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getContactDepth(int) const">
			<summary>
			Returns penetration depth by the given contact.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Penetration depth.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getContactNormal(int) const">
			<summary>
			Returns a normal of the contact point, in world coordinates.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Normal of the contact point.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getContactObject(int) const">
			<summary>
			Returns an object participating in the contact with the player (used for collisions with physical object).
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Object in contact.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getContactPoint(int) const">
			<summary>
			Returns world coordinates of the contact point.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Contact point.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getContactShape(int) const">
			<summary>
			Returns a shape that collided with the player's capsule.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Shape in contact.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getContactSurface(int) const">
			<summary>
			Returns the surface of the current object, which is in contact (used for collisions with non-physical object).
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Surface number.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setDamping(float)">
			<summary>
			Sets actor's velocity damping with the time.
			</summary> 
			<param name="damping"> New velocity damping. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getDamping const">
			<summary>
			Returns actor's velocity damping with the time.
			</summary>  
			<returns>Velocity damping.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setGround(int)">
			<summary>
			Sets a flag indicating that the actor currently stands on the ground surface. This flag is used to set actor state, i.e. play the corresponding skinned animation of standing/walking instead of being in the air.
			</summary> 
			<param name="ground"> 1 to indicate that the actor is on the ground; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getGround const">
			<summary>
			Returns a flag indicating if the actor currently stands on the ground surface. This flag is used to determine the actor state, i.e. play the corresponding skinned animation of standing/walking instead of being in the air.
			</summary>  
			<returns>1 if the actor is on the ground; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setPhysicsIntersectionMask(int)">
			<summary>
			Sets a physics intersection mask for a player (masks are considered matching if at least one bit matches).
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a bit mask. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getPhysicsIntersectionMask const">
			<summary>
			Returns the current physics intersection mask for a player (masks are considered matching if at least one bit matches).
			</summary>  
			<returns>An integer value, each bit of which is used to set a bit mask.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setJumping(float)">
			<summary>
			Sets a jumping coefficient. The greater the value, the higher the actor jumps.
			</summary> 
			<param name="jumping"> Jumping coefficient. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getJumping const">
			<summary>
			Returns the current jumping coefficient.
			</summary>  
			<returns>Jumping coefficient.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMaxFriction(float)">
			<summary>
			Sets a friction value for the actor that is used when the actor doesn't move, i.e. stands still on the ground. See also setMinFriction().
			</summary> 
			<param name="friction"> Friction value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMaxFriction const">
			<summary>
			Returns the friction value set for the actor that is used when the actor doesn't move, i.e. stands still on the ground. See also getMinFriction().
			</summary>  
			<returns>Friction value.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMaxThetaAngle(float)">
			<summary>
			Sets the maximum theta angle (zenith angle, also known as pitch angle) that determines how far downward the player can look.
			</summary> 
			<param name="angle"> New maximum angle in degrees in range [0;90]. The higher the value, the further down the player can look. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMaxThetaAngle const">
			<summary>
			Returns the maximum theta angle (zenith angle, also known as pitch angle) that determines how far downward the player can look. The higher the value, the further down the player can look.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMaxVelocity(float)">
			<summary>
			Sets the velocity of the actor, which is used while the actor runs.
			</summary> 
			<param name="velocity"> New velocity in units per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMaxVelocity const">
			<summary>
			Returns the velocity of the actor, which is used while the actor runs.
			</summary>  
			<returns>Velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMinFriction(float)">
			<summary>
			Sets a friction value for the actor that is used when the actor walks upon the ground. See also setMaxFriction().
			</summary> 
			<param name="friction"> Friction value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMinFriction const">
			<summary>
			Returns the friction value set for the actor that is used when the actor walks upon the ground. See also getMaxFriction().
			</summary>  
			<returns>Friction value.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMinThetaAngle(float)">
			<summary>
			Sets the minimum theta angle (zenith angle, also known as pitch angle) that determines how far upward the player can look.
			</summary> 
			<param name="angle"> New minimum angle in degrees in range [-90;0]. The lower the value, the further up the player can look. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMinThetaAngle const">
			<summary>
			Returns the minimum theta angle (zenith angle, also known as pitch angle) that determines how far upward the player can look. The lower the value, the further up the player can look.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMinVelocity(float)">
			<summary>
			Sets the default velocity of the actor.
			</summary> 
			<param name="velocity"> New velocity in units per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMinVelocity const">
			<summary>
			Returns the default velocity of the actor.
			</summary>  
			<returns>Velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getNumContacts const">
			<summary>
			Returns the number of contacts, in which the player's capsule participates.
			</summary>  
			<returns>Number of contacts.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setPhiAngle(float)">
			<summary>
			Sets the phi angle (azimuth angle, also known as yaw angle). This angle determines the horizontal viewing direction, i.e. left or right.
			</summary> 
			<param name="angle"> New angle in degrees. Positive values rotate the player to the right; negative values rotate it to the left. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getPhiAngle const">
			<summary>
			Returns the phi angle (azimuth angle, also known as yaw angle). This angle determines the horizontal viewing direction, i.e. left or right. Positive values rotate the player to the right; negative values rotate it to the left.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setPhysical(bool)">
			<summary>
			Sets a value indicating whether the actor should interact with the environment as a physical object or not (enables or disables its rigid body). If disabled, collisions can be handled using setCollision() method.
			</summary> 
			<param name="physical"> Physical flag: true to enable rigid body model, false to disable it.  </param> 
		</member>
		<member name="M:Unigine.PlayerActor.isPhysical const">
			<summary>
			Returns a value indicating whether the actor interacts with the environment as a physical object or not.
			</summary>  
			<returns>Physical flag: true if rigid body model is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setPhysicalMask(int)">
			<summary>
			Sets the bit mask for interaction with physicals. Two objects interact, if they both have matching masks (i.e. at least one bit matches).
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a bit mask. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getPhysicalMask const">
			<summary>
			Returns the bit mask for interaction with physicals. Two objects interact, if they both have matching masks (i.e. at least one bit matches).
			</summary>  
			<returns>An integer value, each bit of which is used to set a bit mask.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setPhysicalMass(float)">
			<summary>
			Sets a mass of the actor. If g (Earth's gravity) equals to 9.8 m/s2, and 1 unit equals to 1 meter, the mass is measured in kilograms.
			</summary> 
			<param name="mass"> New mass value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getPhysicalMass const">
			<summary>
			Returns the current mass of the actor. If g (Earth's gravity) equals to 9.8 m/s2, and 1 unit equals to 1 meter, the mass is measured in kilograms.
			</summary>  
			<returns>Mass value.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getShape const">
			<summary>
			Returns a shape, which approximates the actor in physical interactions.
			</summary>  
			<returns>Actor shape.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getState(int) const">
			<summary>
			Returns a value indicating if the actor is in a given state.
			</summary> 
			<param name="arg1"> One of the available states with the STATE_* prefix. </param> 
			<returns>1 if the actor is in the given state; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.getStateTime(int) const">
			<summary>
			Returns time spent by the actor in a given state.
			</summary> 
			<param name="arg1"> One of the available states with the STATE_* prefix. </param> 
			<returns>Time in seconds spent by the actor in a given state.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setThetaAngle(float)">
			<summary>
			Sets the theta angle of the player (zenith angle, also known as pitch angle). This angle determines the vertical viewing direction, i.e. upward and downward. The value will be clamped between the minimum and the maximum theta angle.
			</summary> 
			<param name="angle"> New angle in degrees in range [-90;90]. If a positive value is specified, the player will look upwards; if a negative value is specified, the player will look downwards. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getThetaAngle const">
			<summary>
			Returns the theta angle (zenith angle, also known as pitch angle). This angle determines the vertical viewing direction, i.e. upwards or downwards. If a positive value is returned, the player looks upwards; if a negative value is returned, the player looks downwards. The value is clamped between the minimum and the maximum theta angle.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setTurning(float)">
			<summary>
			Sets a velocity of player turning.
			</summary> 
			<param name="turning"> Turning velocity in degrees per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getTurning const">
			<summary>
			Returns a velocity of player turning.
			</summary>  
			<returns>Turning velocity in degrees per second.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setViewDirection(Unigine.Math.vec3)">
			<summary>
			Sets a new Player's view direction vector.
			</summary> 
			<param name="direction"> New view direction vector to be set. </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getViewDirection const">
			<summary>
			Returns the current Player's view direction vector.
			</summary>  
			<returns>Current Player's view direction vector.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.type">
			<summary>
			Returns the type of the player.
			</summary>  
			<returns>PlayerActor type identifier.</returns>
		</member>
		<member name="M:Unigine.PlayerActor.setMaxStepHeight(float)">
			<summary>
			Sets the maximum step height. The value defines the maximum height of a surface to which the player can make a step; it can be used for walking up and down the stairs and over curbs.
			</summary> 
			<param name="height"> Maximum step height.Used only when the body is not simulated physically (isPhysical(0)).  </param> 
		</member>
		<member name="M:Unigine.PlayerActor.getMaxStepHeight const">
			<summary>
			Returns the maximum height of a surface to which the player can make a step.
			</summary>  
			<returns>Maximum step height.</returns>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_BACKWARD">
			<summary>
			A state, in which the player moves backwards.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_BEGIN">
			<summary>
			A state, which denotes a beginning of another state like moving forward.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_CROUCH">
			<summary>
			A state, in which the player crouches.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_DISABLED">
			<summary>
			A state, which means that another state is disabled.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_ENABLED">
			<summary>
			A state, which means that another state is enabled.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_END">
			<summary>
			A state, which denotes an end of another state.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_FIRE">
			<summary>
			A state, in which the player fires their weapon.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_FORWARD">
			<summary>
			A state, in which the player moves forwards.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_JUMP">
			<summary>
			A state, in which the player jumps.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_MOVE_LEFT">
			<summary>
			A state, in which the player moves left.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_MOVE_RIGHT">
			<summary>
			A state, in which the player moves right.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_RUN">
			<summary>
			A state, in which the player runs.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_TURN_DOWN">
			<summary>
			A state, in which the player turns down.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_TURN_LEFT">
			<summary>
			A state, in which the player turns left.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_TURN_RIGHT">
			<summary>
			A state, in which the player turns right.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_TURN_UP">
			<summary>
			A state, in which the player turns up.
		</summary>
		</member>
		<member name="F:Unigine.PlayerActor.STATE_USE">
			<summary>
			A state, in which the player utilizes some object.
		</summary>
		</member>
		<member name="M:Unigine.PlayerDummy.#ctor">
			<summary>
			Constructor. Creates a new dummy player.
			</summary>  
		</member>
		<member name="M:Unigine.PlayerDummy.setViewDirection(Unigine.Math.vec3)">
			<summary>
			Sets a new Player's view direction vector.
			</summary> 
			<param name="direction"> New view direction vector to be set. </param> 
		</member>
		<member name="M:Unigine.PlayerDummy.getViewDirection const">
			<summary>
			Returns the current Player's view direction vector.
			</summary>  
			<returns>Current Player's view direction vector.</returns>
		</member>
		<member name="M:Unigine.PlayerDummy.type">
			<summary>
			Returns the type of the player.
			</summary>  
			<returns>PlayerDummy type identifier.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.#ctor">
			<summary>
			Constructor. Creates a new persecutor with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.PlayerPersecutor.setAnchor(Unigine.Math.vec3)">
			<summary>
			Sets coordinates of an anchor point (in the target node local coordinates), to which the persecutor is bound.
			</summary> 
			<param name="anchor"> Anchor coordinates. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getAnchor const">
			<summary>
			Returns coordinates of an anchor point (in the target node local coordinates), to which the persecutor is bound.
			</summary>  
			<returns>Anchor coordinates.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setCollision(int)">
			<summary>
			Sets a value indicating if collisions with persecutor's sphere should be taken into account.
			</summary> 
			<param name="collision"> 1 to enable collisions, 0 to let the persecutor fly through objects. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getCollision const">
			<summary>
			Returns a value indicating if collisions with persecutor's sphere should be taken into account.
			</summary>  
			<returns>1 if collisions are taken into account; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setCollisionMask(int)">
			<summary>
			Sets a collision mask for the persecutor's collision sphere. Two objects collide, if they both have matching masks.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a bit mask. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getCollisionMask const">
			<summary>
			Returns a collision mask of the persecutor's collision sphere. Two objects collide, if they both have matching masks.
			</summary>  
			<returns>An integer value, each bit of which is used to set a bit mask.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setCollisionRadius(float)">
			<summary>
			Sets the radius of the persecutor's collision sphere.
			</summary> 
			<param name="radius"> New radius of the collision sphere. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getCollisionRadius const">
			<summary>
			Returns radius of the persecutor's collision sphere.
			</summary>  
			<returns>Radius of the collision sphere in units.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getContactDepth(int) const">
			<summary>
			Returns penetration depth by the given contact.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Penetration depth.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getContactNormal(int) const">
			<summary>
			Returns a normal of the contact point, in world coordinates.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Normal of the contact point..</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getContactObject(int) const">
			<summary>
			Returns an object participating in the contact with the player (used for collisions with physical object).
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Object in contact.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getContactPoint(int) const">
			<summary>
			Returns world coordinates of the contact point.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Contact point.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getContactShape(int) const">
			<summary>
			Returns a shape that collided with the player.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Shape in contact.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getContactSurface(int) const">
			<summary>
			Returns the surface of the current object, which is in contact (used for collisions with non-physical object).
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Surface number.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setDistance(float)">
			<summary>
			Sets a distance between the target node and the persecutor. The value will be clamped between the minimum and the maximum distance values.
			</summary> 
			<param name="distance"> New distance in units. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getDistance const">
			<summary>
			Returns the current distance between the target and the persecutor. The value is clamped between the minimum and the maximum distance values.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setFixed(bool)">
			<summary>
			Sets a value indicating if the persecutor can freely rotate around its target or it is oriented strictly in one direction. The fixed viewing direction is the same direction the persecutor was looking in when this function is called, though it can be reset to another one afterwards.
			</summary> 
			<param name="fixed"> true to orient the player strictly in one direction, false to let it rotate freely.  </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.isFixed const">
			<summary>
			Returns a value indicating if the persecutor can freely rotate around its target or it is oriented strictly in one direction. The fixed viewing direction is the same direction the persecutor was looking in when setFixed() function is called, though it can be reset to another one afterwards.
			</summary>  
			<returns>true if the persecutor is oriented strictly in one direction; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setMaxDistance(float)">
			<summary>
			Sets the maximum possible distance between the persecutor and the target.
			</summary> 
			<param name="distance"> New distance in units. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getMaxDistance const">
			<summary>
			Returns the maximum possible distance between the persecutor and the target.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setMaxThetaAngle(float)">
			<summary>
			Sets the maximum theta angle (zenith angle, also known as pitch angle) that determines how far downward the player can look.
			</summary> 
			<param name="angle"> New angle in degrees in range [0;90]. The higher the value, the further down the player can look. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getMaxThetaAngle const">
			<summary>
			Returns the maximum theta angle (zenith angle, also known as pitch angle) that determines how far downward the player can look. The higher the value, the further down the player can look.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setMinDistance(float)">
			<summary>
			Sets the minimum possible distance between the persecutor and the target.
			</summary> 
			<param name="distance"> New distance in units. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getMinDistance const">
			<summary>
			Returns the minimum possible distance between the persecutor and the target.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setMinThetaAngle(float)">
			<summary>
			Sets the minimum theta angle (zenith angle, also known as pitch angle) that determines how far upward the player can look.
			</summary> 
			<param name="angle"> New angle in degrees in range [-90;0]. The lower the value, the further up the player can look. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getMinThetaAngle const">
			<summary>
			Returns the minimum theta angle (zenith angle, also known as pitch angle) that determines how far upward the player can look. The lower the value, the further up the player can look.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.getNumContacts const">
			<summary>
			Returns the number of contacts, in which the player's capsule participates.
			</summary>  
			<returns>Number of contacts.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setPhiAngle(float)">
			<summary>
			Sets the phi angle (azimuth angle, also known as yaw angle). This angle determines the horizontal viewing direction, i.e. left or right.
			</summary> 
			<param name="angle"> New angle in degrees. Positive values rotate the player to the right; negative values rotate it to the left. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getPhiAngle const">
			<summary>
			Returns the phi angle (azimuth angle, also known as yaw angle). This angle determines the horizontal viewing direction, i.e. left or right. Positive values rotate the player to the right; negative values rotate it to the left.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setTarget(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets an object, which will be followed by the persecutor.
			</summary> 
			<param name="target"> New target node. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getTarget const">
			<summary>
			Returns the object currently followed by the persecutor.
			</summary>  
			<returns>Target node.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setThetaAngle(float)">
			<summary>
			Sets the theta angle of the player (zenith angle, also known as pitch angle). This angle determines the vertical viewing direction, i.e. upwards or downwards. The value will be clamped between the minimum and the maximum theta angle.
			</summary> 
			<param name="angle"> New angle in degrees in range [-90;90]. If a positive value is specified, the player will look upwards; if a negative value is specified, the player will look downwards. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getThetaAngle const">
			<summary>
			Returns the theta angle (zenith angle, also known as pitch angle). This angle determines the vertical viewing direction, i.e. upwards or downwards.  If a positive value is returned, the player looks upwards; if a negative value is returned, the player looks downwards. The value is clamped between the minimum and the maximum theta angle.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.setTurning(float)">
			<summary>
			Sets a velocity of player turning.
			</summary> 
			<param name="turning"> Turning velocity in degrees per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerPersecutor.getTurning const">
			<summary>
			Returns a velocity of player turning.
			</summary>  
			<returns>Turning velocity in degrees per second.</returns>
		</member>
		<member name="M:Unigine.PlayerPersecutor.type">
			<summary>
			Returns the type of the player.
			</summary>  
			<returns>PlayerPersecutor type identifier.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.#ctor">
			<summary>
			Constructor. Creates a new spectator with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.PlayerSpectator.setAcceleration(float)">
			<summary>
			Sets an acceleration of the spectator.
			</summary> 
			<param name="acceleration"> New acceleration in units per second squared. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getAcceleration const">
			<summary>
			Returns the current acceleration of the spectator.
			</summary>  
			<returns>Acceleration in units per second squared.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setCollision(int)">
			<summary>
			Updates a value indicating if collisions with spectator's sphere should be taken into account.
			</summary> 
			<param name="collision"> 1 to enable collisions, 0 to let the spectator fly through objects. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getCollision const">
			<summary>
			Returns a value indicating if collisions with spectator's sphere should be taken into account.
			</summary>  
			<returns>1 if collisions are taken into account; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setCollisionMask(int)">
			<summary>
			Sets a collision mask for the spectators's collision sphere. Two objects collide, if they both have matching masks.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a bit mask. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getCollisionMask const">
			<summary>
			Returns a collision mask of the spectators's collision sphere. Two objects collide, if they both have matching masks.
			</summary>  
			<returns>An integer value, each bit of which is used to set a bit mask.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setCollisionRadius(float)">
			<summary>
			Updates radius of the spectators's collision sphere.
			</summary> 
			<param name="radius"> New radius of the collision sphere. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getCollisionRadius const">
			<summary>
			Returns radius of the spectators's collision sphere.
			</summary>  
			<returns>Radius of the collision sphere in units.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getContactDepth(int) const">
			<summary>
			Returns penetration depth by the given contact.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Penetration depth.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getContactNormal(int) const">
			<summary>
			Returns a normal of the contact point, in world coordinates.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Normal of the contact point.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getContactObject(int) const">
			<summary>
			Returns an object participating in the contact with the player (used for collisions with physical object).
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Object in contact.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getContactPoint(int) const">
			<summary>
			Returns world coordinates of the contact point.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Contact point.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getContactShape(int) const">
			<summary>
			Returns a shape that collided with the player.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Shape in contact.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getContactSurface(int) const">
			<summary>
			Returns the surface of the current object, which is in contact (used for collisions with non-physical object).
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Surface number.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setDamping(float)">
			<summary>
			Sets a spectator's damping.
			</summary> 
			<param name="damping"> New damping value. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getDamping const">
			<summary>
			Returns the spectator's damping.
			</summary>  
			<returns>Damping value.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setMaxThetaAngle(float)">
			<summary>
			Sets the maximum theta angle (zenith angle, also known as pitch angle) that determines how far downward the player can look.
			</summary> 
			<param name="angle"> New angle in degrees in range [0;90]. The higher the value, the further down the player can look. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getMaxThetaAngle const">
			<summary>
			Returns the maximum theta angle (zenith angle, also known as pitch angle) that determines how far downward the player can look. The higher the value, the further down the player can look.
			</summary>  
			<returns>Current maximum theta angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setMaxVelocity(float)">
			<summary>
			Sets the velocity of the spectator, which is used while the spectator runs (the Controls::STATE_RUN control state is "pressed").
			</summary> 
			<param name="velocity"> New velocity in units per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getMaxVelocity const">
			<summary>
			Returns the velocity of the spectator, which is used while the spectator runs (the Controls::STATE_RUN control state is "pressed").
			</summary>  
			<returns>Velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setMinThetaAngle(float)">
			<summary>
			Sets the minimum theta angle (zenith angle, also known as pitch angle) that determines how far upward the player can look.
			</summary> 
			<param name="angle"> New angle in degrees in range [-90;0]. The lower the value, the further up the player can look. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getMinThetaAngle const">
			<summary>
			Returns the minimum theta angle (zenith angle, also known as pitch angle) that determines how far upward the player can look. The lower the value, the further up the player can look.
			</summary>  
			<returns>Current minimum theta angle in degrees.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setMinVelocity(float)">
			<summary>
			Sets the default velocity of the spectator.
			</summary> 
			<param name="velocity"> New velocity in units per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getMinVelocity const">
			<summary>
			Returns the default velocity of the spectator.
			</summary>  
			<returns>Velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.getNumContacts const">
			<summary>
			Returns the number of contacts, in which the spectator's sphere participates.
			</summary>  
			<returns>Number of contacts.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setPhiAngle(float)">
			<summary>
			Sets the phi angle (azimuth angle, also known as yaw angle). This angle determines the horizontal viewing direction, i.e. left or right.
			</summary> 
			<param name="angle"> New angle in degrees. Positive values rotate the player right; negative values rotate the player left. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getPhiAngle const">
			<summary>
			Returns the phi angle (azimuth angle, also known as yaw angle). This angle determines the horizontal viewing direction, i.e. left or right. Positive values rotate the player right; negative values rotate it to the left.
			</summary>  
			<returns>Phi angle value.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setThetaAngle(float)">
			<summary>
			Sets the theta angle of the player (zenith angle, also known as pitch angle). This angle determines the vertical viewing direction, i.e. upwards or downwards. The value will be clamped between the minimum and the maximum theta angle.
			</summary> 
			<param name="angle"> New angle in degrees in range [-90;90]. If a positive value is specified, the player will look upwards; if a negative value is specified, the player will look downwards. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getThetaAngle const">
			<summary>
			Returns the theta angle (zenith angle, also known as pitch angle). This angle determines the vertical viewing direction, i.e. upwards or downwards. If a positive value is returned, the player looks upwards; if a negative value is returned, the player looks downwards. The value is clamped between the minimum and the maximum theta angle.
			</summary>  
			<returns>Theta angle value.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setTurning(float)">
			<summary>
			Sets a velocity of player turning.
			</summary> 
			<param name="turning"> Turning velocity in degrees per second. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getTurning const">
			<summary>
			Returns a velocity of player turning.
			</summary>  
			<returns>Turning velocity in degrees per second.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.setViewDirection(Unigine.Math.vec3)">
			<summary>
			Sets a new Player's view direction vector.
			</summary> 
			<param name="direction"> New view direction vector to be set. </param> 
		</member>
		<member name="M:Unigine.PlayerSpectator.getViewDirection const">
			<summary>
			Returns the current Player's view direction vector.
			</summary>  
			<returns>Current Player's view direction vector.</returns>
		</member>
		<member name="M:Unigine.PlayerSpectator.type">
			<summary>
			Returns the type of the player.
			</summary>  
			<returns>PlayerSpectator type identifier.</returns>
		</member>
	</members>
</doc>