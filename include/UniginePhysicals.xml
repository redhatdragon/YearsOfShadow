<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Physical.setPhysicalMask(int)">
			<summary>
			Sets the bit mask for physical interactions. The Physical object will interact with the other object if they both have matching masks.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a bit mask. </param> 
		</member>
		<member name="M:Unigine.Physical.getPhysicalMask">
			<summary>
			Returns the bit mask for physical interactions. The Physical object will interact with the other object if they both have matching masks.
			</summary>  
			<returns>An integer value, each bit of which is used to set a bit mask.</returns>
		</member>
		<member name="M:Unigine.PhysicalForce.#ctor(float)">
			<summary>
			Constructor. Creates a physical force node with the specified radius in units.
			</summary> 
			<param name="radius"> The radius of the physical force node in units. </param> 
		</member>
		<member name="M:Unigine.PhysicalForce.setAttenuation(float)">
			<summary>
			Updates the attenuation factor for the physical force.
			</summary> 
			<param name="attenuation"> A new attenuation factor. </param> 
		</member>
		<member name="M:Unigine.PhysicalForce.getAttenuation">
			<summary>
			Returns the current attenuation factor for the physical force.
			</summary>  
			<returns>The attenuation factor.</returns>
		</member>
		<member name="M:Unigine.PhysicalForce.setAttractor(float)">
			<summary>
			Updates the attraction force that will be applied to objects in the physical force radius.
			</summary> 
			<param name="attractor"> A new attraction force value. Positive values pull objects away from the force point, negative values pull them up to it. </param> 
		</member>
		<member name="M:Unigine.PhysicalForce.getAttractor">
			<summary>
			Returns the current attraction force applied to objects in the physical force radius. Positive values pull objects away from the force point, negative values pull them up to it.
			</summary>  
			<returns>The attraction force value.</returns>
		</member>
		<member name="M:Unigine.PhysicalForce.setRadius(float)">
			<summary>
			Updates the radius for applying the physical force.
			</summary> 
			<param name="radius"> A new radius in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalForce.getRadius">
			<summary>
			Returns the current radius set for applying the physical force.
			</summary>  
			<returns>The radius in units.</returns>
		</member>
		<member name="M:Unigine.PhysicalForce.setRotator(float)">
			<summary>
			Updates the rotation force that will be applied to objects in the physical force radius.
			</summary> 
			<param name="rotator"> A new rotation force value. Set a positive value for clockwise rotation or a negative value for counterclockwise one. </param> 
		</member>
		<member name="M:Unigine.PhysicalForce.getRotator">
			<summary>
			Returns the current rotation force that will be applied to objects in the physical force radius.
			</summary>  
			<returns>The rotation force value.</returns>
		</member>
		<member name="M:Unigine.PhysicalForce.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Physical type identifier.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.#ctor(Shape::TYPE,Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a physical trigger of the specified shape and size.
			</summary> 
			<param name="type"> Shape of the physical trigger:0 = Sphere1 = Capsule2 = Cylinder3 = Box </param>
			<param name="size"> Size of the physical trigger:Radius, in case of a sphereRadius and height, in case of a capsule or a cylinderDimensions, in case of the box </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getBody(int)">
			<summary>
			Returns the specified body that intersects the physical trigger.
			</summary> 
			<param name="num"> Body number. </param> 
			<returns>Intersected body.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.setCollisionMask(int)">
			<summary>
			Sets the collision bit mask for the trigger:																		 the trigger will be activated if the entered body will have a matching							physical mask and at the same time its shape will have a matching collision mask.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getCollisionMask">
			<summary>
			Sets the collision bit mask for the trigger:																		 the trigger will be activated if the entered body will have a matching							physical mask and at the same time its shape will have a matching collision mask.
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getContactDepth(int)">
			<summary>
			Returns penetration depth by the given contact.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Penetration depth.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getContactNormal(int)">
			<summary>
			Returns a normal of the contact point, in world coordinates.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Normal of the contact point.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getContactObject(int)">
			<summary>
			Returns an object participating in the contact with a physical trigger					.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Object in contact.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getContactPoint(int)">
			<summary>
			Returns world coordinates of the contact point.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Contact point.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getContactShape(int)">
			<summary>
			Returns a shape that collided with a physical trigger.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Shape in contact.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getContactSurface(int)">
			<summary>
			Returns the surface of the current object, which is in contact					.
			</summary> 
			<param name="contact"> Contact number. </param> 
			<returns>Surface number.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.addEnterCallback(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Body}})">
			<summary>
								Adds a callback function to be fired when a body enters the physical trigger. The callback function must receive a Body as its first argument. In addition, it can also take 2 arguments of any type.
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added enter callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.removeEnterCallback(void)">
			<summary>
			Removes the specified callback from the list of enter callbacks.
			</summary> 
			<param name="id"> Enter callback ID obtained when adding it. </param> 
			<returns>True if the enter callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.clearEnterCallbacks">
			<summary>
			Clears all added enter callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.PhysicalTrigger.setEnterCallbackName(char)">
			<summary>
			Sets a callback function to be fired on entering the physical trigger.											Unlike setEnterCallback() , this callback function accepts a body that entered the physical trigger and the physical trigger itself as arguments.
			</summary> 
			<param name="name"> Name of the callback function. </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getEnterCallbackName">
			<summary>
			Returns the name of the callback function fired on entering the physical trigger. This callback function is set via setEnterCallbackName() .
			</summary>  
			<returns>Name of the callback function.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.setExclusionMask(int)">
			<summary>
			Sets an bit mask to prevent detecting collisions with shapes and bodies. This mask is independent of the collision mask. To avoid detecting collisions by a physical trigger for bodies and shapes with matching collision masks, at least one bit in exclusion masks should match. 0 is to collide with all bodies and shapes with a matching collision mask.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getExclusionMask">
			<summary>
			Returns the bit mask that prevent detecting collisions with shapes and bodies. This mask is independent of the collision mask. To avoid detecting collisions by a physical trigger for bodies and shapes with matching collision masks, at least one bit in exclusion masks should match.
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.addLeaveCallback(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Body}})">
			<summary>
								Adds a callback function to be fired when a body leaves the physical trigger. The callback function must receive a Body as its first argument. In addition, it can also take 2 arguments of any type.
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added leave callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.removeLeaveCallback(void)">
			<summary>
			Removes the specified callback from the list of leave callbacks.
			</summary> 
			<param name="id"> Leave callback ID obtained when adding it. </param> 
			<returns>True if the leave callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.clearLeaveCallbacks">
			<summary>
			Clears all added leave callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.PhysicalTrigger.setLeaveCallbackName(char)">
			<summary>
			Sets the name of a callback function to be fired on leaving the physical trigger.											Unlike setLeaveCallback() , this callback function accepts a body that left the physical trigger and physical trigger itself as arguments.
			</summary> 
			<param name="name"> Name of the callback function. </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getLeaveCallbackName">
			<summary>
			Returns the name of the callback function fired on leaving the physical trigger. This callback function is set via setLeaveCallbackName() .
			</summary>  
			<returns>Name of the callback function.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getNumBodies">
			<summary>
			Returns the total number of bodies intersecting with the physical trigger.
			</summary>  
			<returns>Number of bodies.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.getNumContacts">
			<summary>
			Returns the total number of contacts with bodies, shapes and colliding surfaces in which a physical trigger participated.
			</summary>  
			<returns>Number of contacts.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.setShapeType(int)">
			<summary>
			Sets the shape type of the physical trigger.
			</summary> 
			<param name="type"> Shape type of the physical trigger:0 - Sphere1 - Capsule2 - Cylinder3 - Box  </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getShapeType">
			<summary>
			Returns the shape type of the physical trigger.
			</summary>  
			<returns>Shape type of the physical trigger:0 - Sphere1 - Capsule2 - Cylinder3 - Box </returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the size of the physical trigger.
			</summary> 
			<param name="size"> New size of the physical trigger:Radius, in case of a sphere (pass the radius in the first element of the vector).Radius and height, in case of a capsule or a cylinder (pass the radius as the first vector element and the height as the second element).Dimensions along the X, Y and Z axes, in case of the box. </param> 
		</member>
		<member name="M:Unigine.PhysicalTrigger.getSize">
			<summary>
			Returns the current size of the physical trigger:											Radius, in case of a sphere (pass the radius in the first element of the vector).						Radius and height, in case of a capsule or a cylinder (pass the radius as the first vector element and the height as the second element).						Dimensions along the X, Y and Z axes, in case of the box.
			</summary>  
			<returns>Size of the physical trigger.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Physical trigger type identifier.</returns>
		</member>
		<member name="M:Unigine.PhysicalTrigger.updateContacts">
			<summary>
			Forces a physical trigger to be updated, i.e. to recalculate its intersections with physical objects and colliders. After that, you can access all updated data; however, callback functions themselves will be executed only when physics flush is over.
			</summary>  
		</member>
		<member name="M:Unigine.PhysicalNoise.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a physical noise node of the specified size.
			</summary> 
			<param name="size"> Physical noise box size in units. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.setForce(float)">
			<summary>
			Sets the value of the force multiplier.
			</summary> 
			<param name="force"> Force multiplier. The higher the value is, the higher the value of the resulting force that affects an object inside the physical noise node will be. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getForce">
			<summary>
			Returns the value of the force multiplier.
			</summary>  
			<returns>Force multiplier. The higher the value is, the higher the value of the resulting force that affects an object inside the physical noise node will be.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setFrequency(int)">
			<summary>
			Sets the number of octaves for the Perlin noise texture generation.					It is not recommended to change this parameter in run-time as the noise texture will be regenerated and the performance will decrease.
			</summary> 
			<param name="frequency"> Number of octaves for the Perlin noise texture generation. The minimum value is 1, the maximum value is 16. The higher the value is, the more details the noise texture has. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getFrequency">
			<summary>
			Returns the number of octaves for the Perlin noise texture generation.					It is not recommended to change this parameter in run-time as the noise texture will be regenerated and the performance will decrease.
			</summary>  
			<returns>Number of octaves for the Perlin noise texture generation. The minimum value is 1, the maximum value is 16. The higher the value is, the more details the noise texture has.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.getImage">
			<summary>
			Returns the noise texture image.
			</summary>  
			<returns>Noise texture image.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setImageSize(int)">
			<summary>
			Sets the size of the noise texture in pixels.
			</summary> 
			<param name="size"> Size of the noise texture in pixels. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getImageSize">
			<summary>
			Returns the size of the noise texture in pixels.
			</summary>  
			<returns>Size of the noise texture in pixels.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setNoiseScale(float)">
			<summary>
			Sets the scale of the noise texture.					It is not recommended to change this parameter in run-time as the noise texture will be regenerated and the performance will decrease.
			</summary> 
			<param name="scale"> Scale of the noise texture. The minimum value is 0, the maximum value is 1. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getNoiseScale">
			<summary>
			Returns the scale of the noise texture.
			</summary>  
			<returns>Scale of the noise texture. The minimum value is 0, the maximum value is 1.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setOffset(Unigine.Math.vec3)">
			<summary>
			Sets the sampling offset that will be used for pixel sampling from the noise texture.					This parameter can be used to animate a force field in run-time.
			</summary> 
			<param name="offset"> Sampling offset along the X, Y and Z axes. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getOffset">
			<summary>
			Returns the sampling offset that is used for pixel sampling from the noise texture.					This parameter can be used to animate a force field in run-time.
			</summary>  
			<returns>Sampling offset along the X, Y and Z axes.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the size for the physical noise node.
			</summary> 
			<param name="size"> Size of the physical noise box in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getSize">
			<summary>
			Returns the current size of the physical noise node.
			</summary>  
			<returns>Size of the physical noise box in units.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setStep(Unigine.Math.vec3)">
			<summary>
			Sets the sampling step that is used for pixel sampling from the noise texture.					This parameter can be used to animate a force field in run-time.
			</summary> 
			<param name="step"> Sampling step size along the X, Y and Z axes. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getStep">
			<summary>
			Returns the sampling step that is used for pixel sampling from the noise texture.					This parameter can be used to animate a force field in run-time.
			</summary>  
			<returns>Sampling step size along the X, Y and Z axes.</returns>
		</member>
		<member name="M:Unigine.PhysicalNoise.setThreshold(Unigine.Math.vec3)">
			<summary>
			Sets a  threshold distance set for the physical noise node. 				The threshold determines the distance of gradual change from zero to full force value.				This values are relative to the size of the physical noise box. It means that the threshold values should be less than the size of the physical noise box.
			</summary> 
			<param name="threshold"> Threshold distance along the X, Y and Z axes. </param> 
		</member>
		<member name="M:Unigine.PhysicalNoise.getThreshold">
			<summary>
								Returns the threshold distance set for the physical noise node. The threshold determines the distance of gradual change from zero to full force value.				This values are relative to the size of the physical noise box. It means that the threshold values should be less than the size of the physical noise box.
			</summary>  
		</member>
		<member name="M:Unigine.PhysicalNoise.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>PhysicalNoise type identifier.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a physical water node of the specified size.
			</summary> 
			<param name="size"> Water box size in units. </param> 
		</member>
		<member name="M:Unigine.PhysicalWater.setAngularDamping(float)">
			<summary>
			Sets a value indicating how much the angular velocity of the objects decreases when they get into the physical water.
			</summary> 
			<param name="damping"> An angular damping value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalWater.getAngularDamping">
			<summary>
			Returns the current value indicating how much the angular velocity of the objects decreases when they get into the physical water.
			</summary>  
			<returns>The angular damping value.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.getContactBody(int)">
			<summary>
			Returns the body of the object by the given contact with physical water.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Body of the object.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.getContactDepth(int)">
			<summary>
			Returns the depth of the object submergence by the given contact.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Depth of object submergence in units.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.getContactForce(int)">
			<summary>
			Returns the force in the point of a given contact.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Force value.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.getContactPoint(int)">
			<summary>
			Returns the coordinates of the contact point.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Contact point coordinates.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.getContactVelocity(int)">
			<summary>
			Returns the relative velocity between the object and the physical water.
			</summary> 
			<param name="num"> Contact number. </param> 
			<returns>Relative velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.setDensity(float)">
			<summary>
			Sets a density of the water that determines objects buoyancy.
			</summary> 
			<param name="density"> A density value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalWater.getDensity">
			<summary>
			Returns the current density of the physical water that determines objects buoyancy.
			</summary>  
			<returns>The density value.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.setLinearDamping(float)">
			<summary>
			Sets a value indicating how much the linear velocity of the objects decreases when they get into the physical water.
			</summary> 
			<param name="damping"> A linear damping value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalWater.getLinearDamping">
			<summary>
			Returns the current value indicating how much the linear velocity of the objects decreases when they get into the physical water.
			</summary>  
			<returns>The linear damping value.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.getNumContacts">
			<summary>
			Returns the number of contacts between the physical water and the objects.
			</summary>  
			<returns>Number of contacts.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.setSize(Unigine.Math.vec3)">
			<summary>
			Sets a size of the physical water node.
			</summary> 
			<param name="size"> A size of the water box in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalWater.getSize">
			<summary>
			Returns the current size of the physical water node.
			</summary>  
			<returns>The size of the water box in units.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.setVelocity(Unigine.Math.vec3)">
			<summary>
			Sets a velocity of the flow in physical water.
			</summary> 
			<param name="velocity"> A velocity in units per second. </param> 
		</member>
		<member name="M:Unigine.PhysicalWater.getVelocity">
			<summary>
			Returns the current velocity of the flow in physical water.
			</summary>  
			<returns>The velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PhysicalWater.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Physical type identifier.</returns>
		</member>
		<member name="M:Unigine.PhysicalWind.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a physical wind node of the specified size.
			</summary> 
			<param name="size"> Wind box size in units. </param> 
		</member>
		<member name="M:Unigine.PhysicalWind.setAngularDamping(float)">
			<summary>
			Sets a value indicating how much the angular velocity of the objects decreases when they get inside the wind node.
			</summary> 
			<param name="damping"> Angular damping value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalWind.getAngularDamping">
			<summary>
			Returns the current value indicating how much the angular velocity of the objects decreases when they get inside the physical wind node.
			</summary>  
			<returns>Angular damping value.</returns>
		</member>
		<member name="M:Unigine.PhysicalWind.setLinearDamping(float)">
			<summary>
			Sets a value indicating how much the linear velocity of the objects decreases when they get inside the wind node.
			</summary> 
			<param name="damping"> Linear damping value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.PhysicalWind.getLinearDamping">
			<summary>
			Returns the current value indicating how much the linear velocity of the objects decreases when they get inside the wind node.
			</summary>  
			<returns>Linear damping value.</returns>
		</member>
		<member name="M:Unigine.PhysicalWind.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the size of the physical wind node.
			</summary> 
			<param name="size"> Wind box size in units. </param> 
		</member>
		<member name="M:Unigine.PhysicalWind.getSize">
			<summary>
			Returns the current size of the physical wind node.
			</summary>  
			<returns>Wind box size in units.</returns>
		</member>
		<member name="M:Unigine.PhysicalWind.setThreshold(Unigine.Math.vec3)">
			<summary>
			Sets the threshold distance values along the coordinates axes relative to the wind node size (that is, inside of it).		It determines the area of gradual change from zero to full wind velocity.					The threshold distance values form an invisible box, inside which the wind blows with full velocity:
			</summary> 
			<param name="threshold"> Threshold distance in units. </param> 
		</member>
		<member name="M:Unigine.PhysicalWind.getThreshold">
			<summary>
			Returns the current threshold distance values along the coordinates axes relative to the wind node size (that is, inside of it).			It determines the area of gradual change from zero to full wind velocity. See also setThreshold().
			</summary>  
			<returns>Threshold distance in units.</returns>
		</member>
		<member name="M:Unigine.PhysicalWind.setVelocity(Unigine.Math.vec3)">
			<summary>
			Sets the velocity of the physical wind flow along the axes.
			</summary> 
			<param name="velocity"> Velocity in units per second. </param> 
		</member>
		<member name="M:Unigine.PhysicalWind.getVelocity">
			<summary>
			Returns the current velocity of the physical wind flow along the axes.
			</summary>  
			<returns>Velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.PhysicalWind.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Physical type identifier.</returns>
		</member>
	</members>
</doc>