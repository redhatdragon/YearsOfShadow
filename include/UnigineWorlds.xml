<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.WorldClutter.#ctor">
			<summary>
			Constructor. Creates a world clutter with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.WorldClutter.invalidate">
			<summary>
			Invalidates all world clutter cells. All invalidated cells will be regenerated.
			</summary>  
		</member>
		<member name="M:Unigine.WorldClutter.invalidate(Unigine.Math.WorldBoundBox)">
			<summary>
			Invalidates all world clutter cells within the area specified by the given bounding box. All invalidated cells will be regenerated.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, where world clutter cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.setAngle(float)">
			<summary>
			Sets the angle cosine that defines the slope steepness appropriate for positioning nodes.
			</summary> 
			<param name="angle"> Slope angle cosine. The provided value will be saturated in range [0;1]. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getAngle const">
			<summary>
			Returns the current angle cosine that defines the slope steepness appropriate for positioning nodes.
			</summary>  
			<returns>Slope angle cosine.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setDensity(float)">
			<summary>
			Sets the density factor that defines the amount of reference nodes per square unit.
			</summary> 
			<param name="density"> Density factor. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getDensity const">
			<summary>
			Returns the current density factor that defines the number of reference nodes per square unit.
			</summary>  
			<returns>Density factor.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setFadeDistance(float)">
			<summary>
			Sets the distance up to which reference nodes will be fading out (that is, fewer nodes will be rendered instead of all). The distance is measured starting from the visible distance.					In order for a fade distance to be applied, visibility distance should not be infinite.
			</summary> 
			<param name="distance"> Distance in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getFadeDistance const">
			<summary>
			Returns the current distance up to which reference nodes are fading out (that is, fewer nodes will be rendered instead of all). The distance is measured starting from the visible distance.					In order for a fade distance to be applied, visibility distance should not be infinite.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setIntersection(int)">
			<summary>
			Sets a value indicating whether reference nodes should be scattered upon the ground (along its relief): either the terrain or a mesh set as a parent node.
			</summary> 
			<param name="intersection"> Positive number to enable intersection; 0 to disable. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getIntersection const">
			<summary>
			Returns a value indicating whether reference nodes are scattered upon the ground (along its relief): either the terrain or a mesh set as a parent node.
			</summary>  
			<returns>1 if intersection is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskFlipX(int)">
			<summary>
			Flip the mask by X axis.
			</summary> 
			<param name="maskflipx"> Positive value to flip the mask; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskFlipX const">
			<summary>
			Returns a flag indicating if a mask is flipped by X axis.
			</summary>  
			<returns>Positive value if the mask is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskFlipY(int)">
			<summary>
			Flip the mask by Y axis.
			</summary> 
			<param name="maskflipy"> Positive value to flip the mask; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskFlipY const">
			<summary>
			Returns a flag indicating if a mask is flipped by Y axis.
			</summary>  
			<returns>Positive value if the mask is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskImage(Unigine.Ptr{Unigine.Image},bool)">
			<summary>
			Sets an image (in R8 format) that defines the placement of meshes.
			</summary> 
			<param name="image"> Pointer to the image. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all world clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
			<returns>1 if the mask image is successfully set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getMaskImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Writes the image that is currently used as a mask for the placement of meshes into the given buffer.
			</summary> 
			<param name="image"> Image buffer to store a mask into. </param> 
			<returns>1 if the mask image is successfully written into the buffer; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskImageName(char,bool)">
			<summary>
			Sets the name of a new mask image (in R8 format) that defines the placement of meshes.
			</summary> 
			<param name="image_name"> Name (path) of the mask image. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all world clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskImageName const">
			<summary>
			Returns the name of a mask image (in R8 format) that defines the placement of reference nodes.
			</summary>  
			<returns>Name (path) of the mask image.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskInverse(int)">
			<summary>
			Specifies if reference nodes should be rendered inside or outside the mask mesh contour.
			</summary> 
			<param name="inverse"> 0 to render reference nodes inside the mesh contour; 1 to render them outside. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskInverse const">
			<summary>
			Returns a flag indicating if reference nodes are rendered inside or outside the mask mesh contour.
			</summary>  
			<returns>0 if reference nodes are rendered inside the mesh contour; 1 if outside.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskMaxValue(int)">
			<summary>
			Sets the maximum mask value for the WorldClutter object.
			</summary> 
			<param name="value"> Maximum mask value. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskMaxValue const">
			<summary>
			Returns the maximum mask value for the WorldClutter object.
			</summary>  
			<returns>Maximum mask value.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskMesh(Unigine.Ptr{Unigine.Mesh},bool)">
			<summary>
			Sets a mesh to be used as a mask on-the-fly. Limitations:											Before the method is called, another mesh must be set via setMaskMeshName() first.						If the world is reloaded, the mesh set via setMaskMeshName() will be loaded.						If the memory limit is exceeded, the new mesh might be replaced with the mesh set via setMaskMeshName().
			</summary> 
			<param name="mesh"> Pointer to the mesh. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all world clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
			<returns>1 if the mesh is set successfully; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getMaskMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mask mesh (if it exists) to the specified target mesh.
			</summary> 
			<param name="mesh"> Pointer to the mesh to copy the current mask mesh to. </param> 
			<returns>1 if mesh mask exists; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskMeshName(char,bool)">
			<summary>
			Sets a mesh to be used as a mask for the world clutter. This mesh should be plane.
			</summary> 
			<param name="mesh_name"> Path to the *.mesh file. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all world clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskMeshName const">
			<summary>
			Returns the name (path) of the current mesh used as a mask for the world clutter. This mesh should be plane.
			</summary>  
			<returns>Path to the *.mesh file.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaskMinValue(int)">
			<summary>
			Sets the minimum mask value for the WorldClutter object.
			</summary> 
			<param name="value"> Minimum mask value. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaskMinValue const">
			<summary>
			Returns the minimum mask value for the WorldClutter object.
			</summary>  
			<returns>Minimum mask value.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMaxScale(float,float)">
			<summary>
			Sets the scale for meshes in the areas with high density (according to the mask). With the minimum scale it is possible to automatically render, for example, big trees in the center of the forest. A spread value enables to control the range of scales relative to the mean value.
			</summary> 
			<param name="mean"> Scale mean value. </param>
			<param name="spread"> Maximum spread value to randomly upscale or downscale objects. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMaxScaleMean const">
			<summary>
			Returns the scale mean value for meshes in the areas with high density (according to the mask).
			</summary>  
			<returns>Scale mean value.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getMaxScaleSpread const">
			<summary>
			Returns the scale spread value that controls the range of mesh scales in the areas with high density (according to the mask).
			</summary>  
			<returns>Scale spread value.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setMinScale(float,float)">
			<summary>
			Sets the scale for meshes in the areas with low density (according to the mask). With the minimum scale it is possible to automatically render, for example, small trees at the forest border. A spread value allows to control the range of scales relative to the mean value.
			</summary> 
			<param name="mean"> Scale mean value. </param>
			<param name="spread"> Maximum spread value to randomly upscale or downscale objects. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getMinScaleMean const">
			<summary>
			Returns the scale mean value for meshes in the areas with low density (according to the mask).
			</summary>  
			<returns>Scale mean value.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getMinScaleSpread const">
			<summary>
			Returns the scale spread value that controls the range of mesh scales in the areas with low density (according to the mask).
			</summary>  
			<returns>Scale spread value.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setNodesRotation(Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Sets the rotation of reference nodes along X, Y and Z axes.
			</summary> 
			<param name="mean"> Mean values of rotation angles in degrees. </param>
			<param name="spread"> Spread values of rotation angles in degrees. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getNodesRotationMean const">
			<summary>
			Returns the mean value of reference nodes rotation along X, Y and Z axes.
			</summary>  
			<returns>Mean values of rotation angles in degrees.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getNodesRotationSpread const">
			<summary>
			Returns the spread value of reference nodes rotation along X, Y and Z axes.
			</summary>  
			<returns>Spread values of rotation angles in degrees.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getNumReferences const">
			<summary>
			Returns the total number of reference nodes contained in the world clutter.
			</summary>  
			<returns>The number of reference nodes.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setOffset(float,float)">
			<summary>
			Sets the vertical offset that determines the placement of reference nodes above or below the surface.
			</summary> 
			<param name="mean"> Mean value of the offset in units. </param>
			<param name="spread"> Spread value of the offset in units. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getOffsetMean const">
			<summary>
			Returns the current mean value of the vertical offset that determines the placement of reference nodes above or below the surface.
			</summary>  
			<returns>Mean value of the offset in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.getOffsetSpread const">
			<summary>
			Returns the current spread value of the vertical offset that determines the placement of reference nodes above or below the surface.
			</summary>  
			<returns>Spread value of the offset in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setOrientation(int)">
			<summary>
			Sets a value indicating whether reference nodes should be oriented along the normals of the ground (either the terrain or a mesh set as a parent node).
			</summary> 
			<param name="orientation"> Positive number to enable orientation; 0 to disable. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getOrientation const">
			<summary>
			Returns a value indicating whether reference nodes are oriented along the normals of the ground (either the terrain or a mesh set as a parent node).
			</summary>  
			<returns>1 if orientation is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setReferenceName(int,char)">
			<summary>
			Sets the name of the specified reference node contained in the world clutter.
			</summary> 
			<param name="num"> The number of the reference node. </param>
			<param name="name"> Name to be updated. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getReferenceName(int) const">
			<summary>
			Returns the name of the reference node contained in the world clutter.
			</summary> 
			<param name="num"> The number of the reference node among contained in the world clutter. </param> 
			<returns>Name of the reference node.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setReferenceProbability(int,float)">
			<summary>
			Sets the probability of the occurrence of the specified node reference.
			</summary> 
			<param name="num"> The number of the reference node. </param>
			<param name="probability"> Probability factor. The provided value is saturated in range [0;1]. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getReferenceProbability(int) const">
			<summary>
			Returns the probability of the occurrence of the specified node reference.
			</summary> 
			<param name="num"> The number of the reference node. </param> 
			<returns>Probability factor.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setSeed(int)">
			<summary>
			Sets the seed for pseudo-random positioning of reference nodes.
			</summary> 
			<param name="seed"> Number used to initialize a pseudo-random sequence. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getSeed const">
			<summary>
			Returns the seed used for pseudo-random positioning of reference nodes.
			</summary>  
			<returns>Number used to initialize a pseudo-random sequence.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setSizeX(float)">
			<summary>
			Sets the width of the world clutter along the X-coordinate.
			</summary> 
			<param name="sizex"> X-coordinate width in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getSizeX const">
			<summary>
			Returns the current width of the world clutter along the X-coordinate.
			</summary>  
			<returns>X-coordinate width in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setSizeY(float)">
			<summary>
			Sets the length of the world clutter along the Y-coordinate.
			</summary> 
			<param name="sizey"> Y-coordinate length in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getSizeY const">
			<summary>
			Returns the current length of the world clutter along the Y-coordinate.
			</summary>  
			<returns>Y-coordinate length in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setSpawnRate(int)">
			<summary>
			Determines how many cells (in which the world clutter is rendered) are updated each frame. High number of updated cells may lead to a performance spike.
			</summary> 
			<param name="rate"> Number of cells to be updated. If a non-positive value is provided, 1 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getSpawnRate const">
			<summary>
			Returns the number of cells updated each frame. High number of updated cells may lead to a performance spike.
			</summary>  
			<returns>Number of cells to be updated.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setStep(float)">
			<summary>
			Sets the step for cells used to render node references.
			</summary> 
			<param name="step"> Step for clutter cells in units. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getStep const">
			<summary>
			Returns the step for cells used to render node references contained in the world clutter.
			</summary>  
			<returns>Step for clutter cells in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setThreshold(float)">
			<summary>
			Sets the density threshold (for a mask) starting from which reference nodes are rendered if placed dense enough.
			</summary> 
			<param name="threshold"> Density threshold. The provided value will be saturated in range [0;1]. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getThreshold const">
			<summary>
			Returns the current density threshold (for a mask) starting from which reference nodes are rendered if placed dense enough.
			</summary>  
			<returns>Density threshold.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setVisibleDistance(float)">
			<summary>
			Sets the distance up to which all the reference nodes will be rendered. The distance is measured from the camera.
			</summary> 
			<param name="distance"> Distance in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getVisibleDistance const">
			<summary>
			Returns the current distance up to which all the reference nodes will be rendered. The distance is measured from the camera.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.addReference(char)">
			<summary>
			Adds a new reference node to the world clutter.
			</summary> 
			<param name="name"> Name of the reference node. </param> 
			<returns>The number of added reference node.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.removeReference(int)">
			<summary>
			Removes the specified reference node from the world clutter.
			</summary> 
			<param name="num"> The number of the reference node. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setCutoutIntersectionMask(int)">
			<summary>
			Sets a new cutout intersection mask. This mask allows you to cut out clutter objects in the areas of intersection with other objects and decals (e.g. can be used to remove vegetation under houses or from the surface of roads projected using decals). Clutter objects will be cut out by objects and decals that have their intersection mask matching this one (one bit at least).					To set intersection masks the following methods can be used:													for decals use getIntersectionMask()							for objects use getIntersectionMask()
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getCutoutIntersectionMask const">
			<summary>
			Returns the current cutout intersection mask. This mask allows you to cut out clutter objects in the areas of intersection with other objects and decals (e.g. can be used to remove vegetation under houses or from the surface of roads projected using decals). Clutter objects will be cut out by objects and decals that have their intersection mask matching this one (one bit at least).					To set intersection masks the following methods can be used:													for decals use getIntersectionMask()							for objects use getIntersectionMask()
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.setCutoutInverse(int)">
			<summary>
			Sets a value indicating whether the clutter objects should be rendered inside or outside the areas determined by the cutout intersection mask.
			</summary> 
			<param name="inverse"> 0 to render clutter objects outside the areas determined by the cutout intersection mask; 1 to render the clutter objects inside these areas. </param> 
		</member>
		<member name="M:Unigine.WorldClutter.getCutoutInverse const">
			<summary>
			Returns a value indicating if the clutter objects is rendered inside or outside the areas determined by the cutout intersection mask.
			</summary>  
			<returns>0 if clutter objects are rendered outside the areas determined by the cutout intersection mask; 1 if inside.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.clearReferences">
			<summary>
			Deletes all reference nodes from the world clutter.
			</summary>  
		</member>
		<member name="M:Unigine.WorldClutter.saveStateReferences(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the state of all reference nodes from the world clutter to the specified stream.					Example using saveStateReferences() and restoreStateReferences() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the states of all reference nodes from the world clutter were successfully saved to the specified stream; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldClutter.restoreStateReferences(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the state of all reference nodes from the world clutter from the specified stream.					Example using saveStateReferences() and restoreStateReferences() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the states of all reference nodes from the world clutter were successfully restored from the specified stream; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.WorldExpression">
			<summary>
			Constructor. Creates an arbitrary expression to be executed.
			</summary>  
		</member>
		<member name="M:Unigine.WorldExpression.isCompiled const">
			<summary>
			Returns a value indicating if the given expression has been compiled. It is automatically called on world load or after setExpression() is used.
			</summary>  
			<returns>1 if the expression has been compiled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.setExpression(char)">
			<summary>
			Sets the arbitrary expression to be executed.					The expression passed as an argument must be wrapped with curly braces {} as they define the world expression scope.
			</summary> 
			<param name="src"> An executable expression. </param> 
			<returns>true if the expression is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.getExpression const">
			<summary>
			Returns the executable expression.
			</summary>  
			<returns>The executable expression.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.isFunction(char,int) const">
			<summary>
			Returns a value indicating if the given world expression has the function with specified name and number of arguments.
			</summary> 
			<param name="name"> The name of the function. </param>
			<param name="num_args"> The number of arguments. </param> 
			<returns>true if the expression exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.setIFps(float)">
			<summary>
			Sets a constant frame duration used to execute the expression. It can be used to decrease the frame rate to get higher performance. 0 means that the expression is executed at the same frame rate as the main application window.
			</summary> 
			<param name="ifps"> Frame duration (inverse FPS) in seconds (1/FPS). If a too small value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.WorldExpression.getIFps const">
			<summary>
			Returns the current constant frame duration used to execute the expression. 0 means that the expression is executed at the same frame rate as the main application window.
			</summary>  
			<returns>Frame duration (inverse FPS) in seconds (1/FPS).</returns>
		</member>
		<member name="M:Unigine.WorldExpression.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.setExpressionName(char)">
			<summary>
			Loads an expression from the given file.
			</summary> 
			<param name="name"> Expression file name. </param> 
			<returns>true if the expression is successfully loaded from the given file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.getExpressionName const">
			<summary>
			Returns the name of the expression file.
			</summary>  
			<returns>Expression file name.</returns>
		</member>
		<member name="M:Unigine.WorldExpression.setUpdateDistanceLimit(float)">
			<summary>
			Sets the distance from the camera within which the object should be updated.
			</summary> 
			<param name="limit"> Distance from the camera within which the object should be updated. </param> 
		</member>
		<member name="M:Unigine.WorldExpression.getUpdateDistanceLimit const">
			<summary>
			Returns the distance from the camera within which the object should be updated.
			</summary>  
			<returns>Distance from the camera within which the object should be updated.</returns>
		</member>
		<member name="M:Unigine.WorldOccluder.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a new world occluder with given dimensions.
			</summary> 
			<param name="size"> Size of the new occluder. </param> 
		</member>
		<member name="M:Unigine.WorldOccluder.setBackFace(bool)">
			<summary>
			Updates the value indicating whether the back faces of the occluder box are used instead of front faces to occlude objects' surfaces. By default, the front faces are used.
			</summary> 
			<param name="face"> true to use the back faces of the occluder to cull surfaces; false to use the front ones. </param> 
		</member>
		<member name="M:Unigine.WorldOccluder.isBackFace const">
			<summary>
			Returns the value indicating whether the back faces of the occluder box are used instead of front faces to occlude objects' surfaces. By default, the front faces are used.
			</summary>  
			<returns>true if the back faces of the occluder are used to cull surfaces; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldOccluder.setDistance(float)">
			<summary>
			Updates the distance between the camera and the bounding box of the occluder, at which the occluder becomes disabled (it isn't processed by the CPU, hence it isn't rendered). By default, the inf value is used.
			</summary> 
			<param name="distance"> The distance in units. </param> 
		</member>
		<member name="M:Unigine.WorldOccluder.getDistance const">
			<summary>
			Returns the current distance between the camera and the bounding box of the occluder, at which the occluder becomes disabled (it isn't processed by the CPU, hence it isn't rendered). By default, the inf value is used.
			</summary>  
			<returns>The distance in units.</returns>
		</member>
		<member name="M:Unigine.WorldOccluder.setSize(Unigine.Math.vec3)">
			<summary>
			Updates the current dimensions of the world occluder box.
			</summary> 
			<param name="size"> The occluder dimensions. </param> 
		</member>
		<member name="M:Unigine.WorldOccluder.getSize const">
			<summary>
			Returns the current dimensions of the world occluder box.
			</summary>  
			<returns>The occluder dimensions.</returns>
		</member>
		<member name="M:Unigine.WorldOccluder.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.#ctor">
			<summary>
			Constructor. Creates a new world occluder mesh with the default distance value.
			</summary>  
		</member>
		<member name="M:Unigine.WorldOccluderMesh.#ctor(char)">
			<summary>
			Constructor. Creates a new world occluder mesh from the given *.mesh file.
			</summary> 
			<param name="name"> A mesh file name. </param> 
		</member>
		<member name="M:Unigine.WorldOccluderMesh.setDistance(float)">
			<summary>
			Updates the distance between the camera and the bounding box of the occluder mesh, at which this occluder mesh becomes disabled (it isn't processed by the CPU, hence it isn't rendered). By default, the inf value is used.
			</summary> 
			<param name="distance"> The distance in units. </param> 
		</member>
		<member name="M:Unigine.WorldOccluderMesh.getDistance const">
			<summary>
			Returns the current distance between the camera and the bounding box of the occluder mesh, at which this occluder mesh becomes disabled (it isn't processed by the CPU, hence it isn't rendered). By default, the inf value is used.
			</summary>  
			<returns>The distance in units.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Allows for reinitialization of the occluder mesh: the function copies a given mesh into the current mesh used for the occluder mesh.
			</summary> 
			<param name="mesh"> A mesh to be copied. </param> 
			<returns>true if the mesh is copied successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mesh, on which the occluder mesh is based, into the target mesh.
			</summary> 
			<param name="mesh"> Target mesh. </param> 
			<returns>true if the mesh is copied successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.setMeshName(char,bool)">
			<summary>
			Sets a new name for the mesh, on which the occluder mesh is based and forces loading of the mesh with the new name for the current occluder mesh.
			</summary> 
			<param name="name"> A new name to be set for the mesh. </param>
			<param name="force_load"> Force flag.If true (1) is specified, the mesh with the new name will be loaded immediately.If false (0) is specified, only the mesh name will be updated. </param> 
			<returns>true (1) if:The current mesh name coincides the new name.The mesh with the new name has been loaded successfully.The force flag is set to 0.In other cases,false (0).</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.getMeshName const">
			<summary>
			Returns the name of the mesh, on which the occluder mesh is based.
			</summary>  
			<returns>Mesh name.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.loadMesh(char)">
			<summary>
			Loads a mesh for the current occluder mesh from the file. This function doesn't change the mesh name.
			</summary> 
			<param name="name"> The mesh file name. </param> 
			<returns>true if the mesh is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.saveMesh(char) const">
			<summary>
			Saves the mesh, on which the occluder mesh is based, into a file.
			</summary> 
			<param name="name"> The mesh file name. </param> 
			<returns>true if the mesh is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldOccluderMesh.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.#ctor">
			<summary>
			Default constructor. Creates an empty world spline graph.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.#ctor(char)">
			<summary>
			Constructor. Creates an empty world spline graph with a given name.
			</summary> 
			<param name="name"> World spline graph name. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.getNumSplinePoints const">
			<summary>
			Returns the total number of spline points in the world spline graph.
			</summary>  
			<returns>Number of spline points.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.getNumSplineSegments const">
			<summary>
			Returns the total number of spline segments in the world spline graph.
			</summary>  
			<returns>Number of segments.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.setSplineGraphName(char,bool)">
			<summary>
			Sets the name of the world spline graph.
			</summary> 
			<param name="name"> World spline graph name. </param>
			<param name="force_load"> Force flag.If 1 is specified, the world spline graph will immediately loaded from a file.If 0 is specified, only the world spline graph name will be updated. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.getSplineGraphName const">
			<summary>
			Returns the name of the world spline graph.
			</summary>  
			<returns>World spline graph name.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.loadSegmentNodes(int)">
			<summary>
			Loads source nodes assigned to the specified spline segment immediately.
			</summary> 
			<param name="segment_index"> Segment index. If no segment index is specified, the method loads source nodes assigned to all segments. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.clear">
			<summary>
			Clears the world spline graph.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.isCurved const">
			<summary>
			Returns a value indicating if the world spline graph is curved.
			</summary>  
			<returns>true if the world spline graph is curved; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.makeCurved">
			<summary>
			Curves the world spline graph using its geodetic pivot. The spline file is saved upon completion of the curving operation.					The world spline graph must be a child of a Geodetic Pivot node.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.makeFlat">
			<summary>
			Flattens the world spline graph using its geodetic pivot. The spline file is saved upon completion of the flattening operation.					The world spline graph must be a child of a Geodetic Pivot node.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.load(char)">
			<summary>
			Loads a spline graph from the specified XML-file.
			</summary> 
			<param name="name"> Name of the XML-file to load the spline graph from. </param> 
			<returns>true if the spline graph was successfully loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.save(char)">
			<summary>
			Saves a spline graph to the specified XML-file.
			</summary> 
			<param name="name"> Name of the XML-file to save the spline graph to. </param> 
			<returns>true if the spline graph was successfully saved; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>WorldSplineGraph type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.getSegmentNodeMesh(Unigine.Ptr{Unigine.Mesh},Unigine.Ptr{SplineSegment},int,bool)">
			<summary>
			Gets a mesh used by a node with the specified index, placed along the specified spline segment, and puts it to the specified target Mesh instance.
			</summary> 
			<param name="mesh"> Target mesh instance to which the obtained mesh is to be put. </param>
			<param name="segment"> Spline segment for which the mesh is to be returned. </param>
			<param name="node_index"> Number of the node instance placed along the spline segment. </param>
			<param name="bake_transform"> true to use baked mesh transformation, false - to use default (the mesh will be placed at the origin). The default value is false. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.getPointNodeMesh(Unigine.Ptr{Unigine.Mesh},Unigine.Ptr{SplinePoint},int,bool)">
			<summary>
			Exports a mesh with the specified index placed as the specified spline point to the specified target mesh.				Due to the nature of the mesh, there will be visual artifacts connected with the float precision, in case an exported node is located very far from the origin (around 10,000 m and further). In this case we advise exporting it without baking transformation.
			</summary> 
			<param name="mesh"> Target mesh to store the desired mesh placed at the specified spline point. </param>
			<param name="point"> Spline point for which a mesh is to be retrieved. </param>
			<param name="node_index"> Number of the desired node in a row of nodes placed at the specified point, in the range from 0 to the total number of nodes placed at the point.The node must be an ObjectMeshStatic or an ObjectMeshSkinned, otherwise an error occurs. </param>
			<param name="bake_transform"> Bake Transform flag: true - to export the mesh preserving the current coordinates (can be useful when splitting large WorldSplineGraph objects to keep relative positions of meshes); or false - to reset the position of the exported mesh to origin (0,0,0) with zero-rotation. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.createSplinePoint(Unigine.Math.Vec3)">
			<summary>
			Creates a new spline point with the specified parameters and attaches it to the world spline graph.
			</summary> 
			<param name="position"> Position coordinates for the new splint point. </param> 
			<returns>New spline point.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removeSplinePoint(Unigine.Ptr{SplinePoint},bool)">
			<summary>
			Removes the specified spline point from the world spline graph. You can set the merge flag to merge spline segments sharing this point as their start and end points.					Segment merging is available only when the point to be removed is shared by two segments, otherwise the merge flag is ignored and all segments sharing this point are also removed.
			</summary> 
			<param name="point"> Spline point to be removed. </param>
			<param name="merge"> true to merge spline segments sharing this point as their start and end points, false to remove all segments sharing this point. The default value is false. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.getSplinePoints(Unigine.Vector{Unigine.Ptr{SplinePoint},int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all points of the world spline graph and puts them to the specified vector of SplinePoint elements.
			</summary> 
			<param name="points"> Vector to store the list of all points of the world spline graph. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.createSplineSegment(Unigine.Ptr{SplinePoint},Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Ptr{SplinePoint},Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Creates a new spline segment with the specified parameters and attaches it to the world spline graph.
			</summary> 
			<param name="start_point"> Start point of the spline segment. </param>
			<param name="start_tangent"> Tangent coordinates for the start point of the spline segment. </param>
			<param name="start_up"> Coordinates of the "up" vector for the start point of the spline segment. </param>
			<param name="end_point"> End point of the segment. </param>
			<param name="end_tangent"> Tangent coordinates for the end point of the spline segment. </param>
			<param name="end_up"> Coordinates of the "up" vector for the end point of the spline segment. </param> 
			<returns>New spline segment connecting two specified points.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removeSplineSegment(Unigine.Ptr{SplineSegment},bool)">
			<summary>
			Removes the specified spline segment from the world spline graph. You can set the with_points flag to remove the segment together with its start and end points.
			</summary> 
			<param name="segment"> Spline segment to be removed. </param>
			<param name="with_points"> true to remove the segment with its start and end points, false to keep points. The default value is false. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.getSplineSegments(Unigine.Vector{Unigine.Ptr{SplineSegment},int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all segments of the world spline graph and puts them to the specified vector of SplineSegment elements.
			</summary> 
			<param name="segments"> Vector to store the list of all segments of the world spline graph. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.rebuild(int)">
			<summary>
			Rebuilds the world spline graph. This method is to be called after making any changes to spline segments (mode, etc.), point positions, tangents, or "up" vectors, as well as after changing source node assignments and/or other parameters (UV tiling, gap, etc.)
			</summary> 
			<param name="try_force"> Forced rebuild flag: set 1 to try and force rebuild the world spline graph. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.isRebuilding const">
			<summary>
			Returns a value indicating if the world spline graph is currently being rebuilt. The world spline graph uses a deferred rebuild.
			</summary>  
			<returns>1 if the world spline graph is currently being rebuilt; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.addPointAddedCallback(Unigine.CallbackBase2{Unigine.Ptr{Unigine.Body},int})">
			<summary>
			Adds a callback function to be called when a point is added to the world spline graph. The signature of the Point Added callback function must be as follows:					You can set a callback function as follows:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added Point Added callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removePointAddedCallback(void)">
			<summary>
			Removes the specified callback from the list of Point Added callbacks.
			</summary> 
			<param name="id"> Point Added callback ID obtained when adding it. </param> 
			<returns>True if the Point Added callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.clearPointAddedCallbacks">
			<summary>
			Clears all added Point Added callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.addPointChangedCallback(Unigine.CallbackBase2{Unigine.Ptr{Unigine.Body},int})">
			<summary>
			Adds a callback function to be called when a point of the world spline graph is modified. The signature of the Point Changed callback function must be as follows:					You can set a callback function as follows:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added Point Changed callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removePointChangedCallback(void)">
			<summary>
			Removes the specified callback from the list of Point Changed callbacks.
			</summary> 
			<param name="id"> Point Changed callback ID obtained when adding it. </param> 
			<returns>True if the Point Changed callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.clearPointChangedCallbacks">
			<summary>
			Clears all added Point Changed callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.addPointRemovedCallback(Unigine.CallbackBase2{Unigine.Ptr{Unigine.Body},int})">
			<summary>
			Adds a callback function to be called when a point of the world spline graph is removed. The signature of the Point Removed callback function must be as follows:					You can set a callback function as follows:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added Point Removed callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removePointRemovedCallback(void)">
			<summary>
			Removes the specified callback from the list of Point Removed callbacks.
			</summary> 
			<param name="id"> Point Removed callback ID obtained when adding it. </param> 
			<returns>True if the Point Removed callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.clearPointRemovedCallbacks">
			<summary>
			Clears all added Point Removed callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.addSegmentAddedCallback(Unigine.CallbackBase2{Unigine.Ptr{Unigine.Body},int})">
			<summary>
			Adds a callback function to be called when a segment is added to the world spline graph. The signature of the Segment Added callback function must be as follows:					You can set a callback function as follows:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added Segment Added callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removeSegmentAddedCallback(void)">
			<summary>
			Removes the specified callback from the list of Segment Added callbacks.
			</summary> 
			<param name="id"> Segment Added callback ID obtained when adding it. </param> 
			<returns>True if the Segment Added callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.clearSegmentAddedCallbacks">
			<summary>
			Clears all added Segment Added callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.addSegmentChangedCallback(Unigine.CallbackBase2{Unigine.Ptr{Unigine.Body},int})">
			<summary>
			Adds a callback function to be called when a segment of the world spline graph is modified. The signature of the Segment Changed callback function must be as follows:					You can set a callback function as follows:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added Segment Changed callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removeSegmentChangedCallback(void)">
			<summary>
			Removes the specified callback from the list of Segment Changed callbacks.
			</summary> 
			<param name="id"> Segment Changed callback ID obtained when adding it. </param> 
			<returns>True if the Segment Changed callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.clearSegmentChangedCallbacks">
			<summary>
			Clears all added Segment Changed callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.addSegmentRemovedCallback(Unigine.CallbackBase2{Unigine.Ptr{Unigine.Body},int})">
			<summary>
			Adds a callback function to be called when a segment of the world spline graph is removed. The signature of the Segment Removed callback function must be as follows:					You can set a callback function as follows:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added Segment Removed callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.removeSegmentRemovedCallback(void)">
			<summary>
			Removes the specified callback from the list of Segment Removed callbacks.
			</summary> 
			<param name="id"> Segment Removed callback ID obtained when adding it. </param> 
			<returns>True if the Segment Removed callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldSplineGraph.clearSegmentRemovedCallbacks">
			<summary>
			Clears all added Segment Removed callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSplineGraph.splitSplineSegment(Unigine.Ptr{SplineSegment},float)">
			<summary>
			Splits the specified spline segment into two parts by inserting a new point placed at the parametrically specified point on the T (times axis) in the [0.0f, 1.0f] range from the segment's start point.
			</summary> 
			<param name="segment"> Spline segment to be split. </param>
			<param name="new_point_t"> Coordinate of the splitting point of the segment along the horizontal T (times) axis in the range [0.0f, 1.0f]. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.breakSplinePoint(Unigine.Ptr{SplinePoint})">
			<summary>
			Breaks the specified spline point shared by several spline segments into a set of separate ones, so that each of the segments gets its own point.
			</summary> 
			<param name="point"> Spline point to be broken.The point must be shared by a least 2 segments. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.weldSplinePoints(Unigine.Vector{Unigine.Ptr{SplinePoint},int,Unigine.VectorAllocator})">
			<summary>
			Joins all spline points specified in the list into a single one, so that this point is shared by all spline segments having the specified points as starting or ending ones.
			</summary> 
			<param name="points"> List of spline points to be joined into a single one. </param> 
		</member>
		<member name="M:Unigine.WorldSplineGraph.isLinked(Unigine.Ptr{SplinePoint}) const">
			<summary>
			Returns a value indicating if the specified spline point is linked to any spline segment.
			</summary> 
			<param name="point"> Spline point to be checked. </param> 
			<returns>1 if the specified spline point is linked to any spline segment; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.setEnabled(bool,bool)">
			<summary>
			Sets a value indicating whether the spline point is enabled.
			</summary> 
			<param name="enable"> 1 to enable the spline point, 0 to disable. </param>
			<param name="with_segments"> Use true to enable all segments, to which the point belongs as well, false to enable the spline point only. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.isEnabled const">
			<summary>
			Returns a value indicating whether the spline point is enabled.
			</summary>  
			<returns>true if the spline point is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.setPosition(Unigine.Math.Vec3)">
			<summary>
			Sets a new position of the spline point.
			</summary> 
			<param name="position"> New position to be set. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.getPosition const">
			<summary>
			Returns the current position of the spline point.
			</summary>  
			<returns>Current spline point position.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getSplineSegments(Unigine.Vector{Unigine.Ptr{SplineSegment},int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of segments, to which the spline point belongs, and puts them to the specified vector of SplineSegment elements.
			</summary> 
			<param name="segments"> Vector to store the list of segments, to which the spline point belongs. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.clearSources">
			<summary>
			Clears the list of source nodes for the spline point.
			</summary>  
		</member>
		<member name="M:Unigine.SplinePoint.assignSource(char)">
			<summary>
			Assigns a source node with the given name to the spline point.
			</summary> 
			<param name="name"> Source node name. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.removeSource(char)">
			<summary>
			Removes the source node with the given name.
			</summary> 
			<param name="name"> Name of the source node to be removed. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.getSources(Unigine.Vector{String,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns a list of source nodes assigned to the spline point and puts it to the specified vector.
			</summary> 
			<param name="sources"> List of source nodes assigned to the spline point. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.copy(Unigine.Ptr{SplinePoint})">
			<summary>
			Copies all parameters from the specified source spline point.
			</summary> 
			<param name="src"> Source spline point. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.clone">
			<summary>
			Returns a clone of the spline point.
			</summary>  
			<returns>Clone of the spline point.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getParent const">
			<summary>
			Returns the WorldSplineGraph node to which the spline point belongs.
			</summary>  
			<returns>WorldSplineGraph node to which the spline point belongs.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getNumSegments const">
			<summary>
			Returns the total number of segments sharing this spline point.
			</summary>  
			<returns>Total number of segments sharing this spline point.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getNumSources const">
			<summary>
			Returns the total number of source nodes assigned to this spline point.
			</summary>  
			<returns>Total number of source nodes assigned to this spline point.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getSourceNodeType(char) const">
			<summary>
			Returns the type of the source node with the specified name.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>Source node type.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.setLinkVariant(char,int)">
			<summary>
			Sets a link variant for the junction source node with the specified name.
			</summary> 
			<param name="name"> Source node name. </param>
			<param name="variant"> Link variant number for the junction source node. </param> 
		</member>
		<member name="M:Unigine.SplinePoint.getLinkVariant(char) const">
			<summary>
			Returns the current link variant for the junction source node with the specified name.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>Link variant number for the junction source node.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getLinkWorldPosition(Unigine.Ptr{SplineSegment},Unigine.Math.Vec3) const">
			<summary>
			Gets the current link (bone) position of the junction source node and puts it to the specified position vector.
			</summary> 
			<param name="segment"> Spline segment for which the position of the corresponding link (bone) of the junction source node is to be obtained. </param>
			<param name="position"> Vector to store the position of the junction source node's link (bone) corresponding to the specified spline segment. </param> 
			<returns>1 if the current position of the junction source node's link (bone) corresponding to the specified spline segment was obtained successfully; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getNode(int)">
			<summary>
			Returns a node assigned to the point by its number.
			</summary> 
			<param name="index"> Number of the desired node in a row of nodes placed at this point, in the range from 0 to the total number of nodes placed at the point. </param> 
			<returns>Node placed at this point at the specified position (number).</returns>
		</member>
		<member name="M:Unigine.SplinePoint.getNumNodes const">
			<summary>
			Returns the total number of nodes placed at this spline point.
			</summary>  
			<returns>Total number of nodes placed at this spline point.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setStartPoint(Unigine.Ptr{SplinePoint})">
			<summary>
			Sets the specified spline point as a start point of the segment.
			</summary> 
			<param name="point"> Spline point to be set as a start point of the segment. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getStartPoint const">
			<summary>
			Returns the current start point of the segment.
			</summary>  
			<returns>Start point of the segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setEndPoint(Unigine.Ptr{SplinePoint})">
			<summary>
			Sets the specified spline point as an end point of the segment.
			</summary> 
			<param name="point"> Spline point to be set as an end point of the segment. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getEndPoint const">
			<summary>
			Returns the current end point of the segment.
			</summary>  
			<returns>End point of the segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setStartTangent(Unigine.Math.vec3)">
			<summary>
			Sets the tangent coordinates for the start point of the spline segment.
			</summary> 
			<param name="tangent"> Start point tangent coordinates to be set. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getStartTangent const">
			<summary>
			Returns the current tangent coordinates for the start point of the spline segment.
			</summary>  
			<returns>Start point tangent coordinates.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setStartUp(Unigine.Math.vec3)">
			<summary>
			Sets the "up" vector coordinates for the start point of the segment.
			</summary> 
			<param name="up"> Start point "up" vector coordinates to be set. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getStartUp const">
			<summary>
			Returns the current "up" vector coordinates for the start point of the spline segment.
			</summary>  
			<returns>Start point "up" vector coordinates.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setEndTangent(Unigine.Math.vec3)">
			<summary>
			Sets the tangent coordinates for the end point of the spline segment.
			</summary> 
			<param name="tangent"> End point tangent coordinates to be set. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getEndTangent const">
			<summary>
			Returns the current tangent coordinates for the end point of the spline segment.
			</summary>  
			<returns>End point tangent coordinates.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setEndUp(Unigine.Math.vec3)">
			<summary>
			Sets the "up" vector coordinates for the end point of the segment.
			</summary> 
			<param name="up"> End point "up" vector coordinates. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getEndUp const">
			<summary>
			Returns the current "up" vector coordinates for the end point of the spline segment.
			</summary>  
			<returns>End point "up" vector coordinates to be set.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setEnabled(bool,bool)">
			<summary>
			Sets a value indicating whether the spline segment is enabled.
			</summary> 
			<param name="enable"> true to enable the spline segment, false to disable. </param>
			<param name="with_points"> Use true to enable all points that belong to it as well, false to enable the spline point only. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.isEnabled const">
			<summary>
			Returns a value indicating whether the spline segment is enabled.
			</summary>  
			<returns>true if the spline segment is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.calcPoint(float) const">
			<summary>
			Returns the coordinates of the point at the parametrically specified position on the segment (along the T axis).
			</summary> 
			<param name="t"> Position of the point on the segment, specified parametrically along the T (times axis) in the [0.0f, 1.0f] range. </param> 
			<returns>Coordinates of the point.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.calcTangent(float) const">
			<summary>
			Returns the tangent coordinates for the point at the parametrically specified position on the segment (along the T axis).
			</summary> 
			<param name="t"> Position of the point on the segment, specified parametrically along the T (times axis) in the [0.0f, 1.0f] range. </param> 
			<returns>Tangent coordinates for the point at the specified position on the segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.calcUpVector(float) const">
			<summary>
			Returns the "up" vector coordinates for the point at the parametrically specified position on the segment (along the T axis).
			</summary> 
			<param name="t"> Position of the point on the segment, specified parametrically along the T (times axis) in the [0.0f, 1.0f] range. </param> 
			<returns>Coordinates of the "up" vector for the point at the specified position on the segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.linearToParametric(float) const">
			<summary>
			Performs conversion of linear position in accordance with the spline segment's length to parametric position (along the T axis).
			</summary> 
			<param name="l"> Linear position on the spline segment in the range [0.0f, 1.0f]. </param> 
			<returns>Parametric position of the point on the segment, along the T (times axis) in the [0.0f, 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.getLength const">
			<summary>
			Returns the length of the spline segment.
			</summary>  
			<returns>Length of the spline segment, in units.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.clearSources">
			<summary>
			Clears the list of source nodes for the spline segment.
			</summary>  
		</member>
		<member name="M:Unigine.SplineSegment.assignSource(char,int)">
			<summary>
			Assigns a source node with the given name to the spline segment and sets the specified forward axis for it.
			</summary> 
			<param name="name"> Source node name. </param>
			<param name="forward_axis"> Forward axis to be set for the source node. One of the FORWARD_ variables. The X axis is used by default. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.removeSource(char,int)">
			<summary>
			Removes the source node with the given name.
			</summary> 
			<param name="name"> Name of the source node to be removed. </param>
			<param name="forward_axis"> Forward axis for the source node. One of the FORWARD_ variables. The Y axis is used by default. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getSources(Unigine.Vector{String,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns a list of source nodes assigned to the spline segment and puts it to the specified vector.
			</summary> 
			<param name="sources"> List of source nodes assigned to the spline segment. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.setSegmentMode(char,int)">
			<summary>
			Sets the segment mode for the source node with the given name.
			</summary> 
			<param name="name"> Source node name. </param>
			<param name="segment_mode"> Mode for the source node with the given name. One of the SEGMENT_* variables. SEGMENT_TILING is used by default. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getSegmentMode(char) const">
			<summary>
			Returns the current segment mode for the source node with the given name.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>Mode for the source node with the given name. One of the SEGMENT_* variables. SEGMENT_STRETCH is used by default.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setUVTiling(char,int)">
			<summary>
			Sets a value indicating whether UV tiling for the material textures of the source node with the given name is enabled.
			</summary> 
			<param name="name"> Source node name. </param>
			<param name="enable_uv_tiling"> 1 to enable UV tiling for the material textures of the source node, 0 - to stretch textures. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getUVTiling(char) const">
			<summary>
			Returns a value indicating whether UV tiling for the material textures of the source node with the given name is enabled.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>1 if UV tiling for the material textures of the source node is enabled; otherwise (textures are stretched), 0.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setAdaptiveAngleThreshold(char,float)">
			<summary>
			Sets the angle threshold value for splitting source node with the given name. If an angle between the tangents for the two subsequent parts of the spline segment exceeds this value, the node will be split.					This parameter is used only for the SEGMENT_ADAPTIVE mode.
			</summary> 
			<param name="name"> Source node name. </param>
			<param name="adaptive_angle_threshold"> Angle threshold value for the source node with the given name, in degrees. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getAdaptiveAngleThreshold(char) const">
			<summary>
			Returns the current angle threshold value for splitting source node with the given name. If an angle between the tangents for the two subsequent parts of the spline segment exceeds this value, the node will be split.					This parameter is used only for the SEGMENT_ADAPTIVE mode.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>Angle threshold value for the source node with the given name, in degrees. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.setGap(char,float)">
			<summary>
			Sets the size of the gap between the adjacent copies of the source node with the given name tiled along the spline segment.					This parameter is used only for the SEGMENT_TILING mode.
			</summary> 
			<param name="name"> Source node name. </param>
			<param name="gap"> Gap size to be set, in units. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.getGap(char) const">
			<summary>
			Returns the current size of the gap between the adjacent copies of the source node with the given name tiled along the spline segment.					This parameter is used only for the SEGMENT_TILING mode.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>Current gap size, in units.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.copy(Unigine.Ptr{SplineSegment},int)">
			<summary>
			Copies all parameters from the specified source spline segment.
			</summary> 
			<param name="src"> Source spline segment. </param>
			<param name="copy_endpoints_data"> Use 1 to copy all parameters of segment's endpoints as well, 0 to use default ones. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.SplineSegment.clone(int)">
			<summary>
			Returns a clone of the spline segment.
			</summary> 
			<param name="clone_points"> Use 1 to copy all parameters of segment's endpoints as well, 0 to use default ones. The default value is 0. </param> 
			<returns>Clone of the spline segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.getParent const">
			<summary>
			Returns the WorldSplineGraph node to which the spline segment belongs.
			</summary>  
			<returns>WorldSplineGraph node to which the spline segment belongs.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.getNumSources const">
			<summary>
			Returns the total number of source nodes assigned to this spline segment.
			</summary>  
			<returns>Total number of source nodes assigned to this spline segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.getNumNodes const">
			<summary>
			Returns the total number of nodes placed along the spline segment.
			</summary>  
			<returns>Total number of nodes placed along the spline segment.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.getForwardAxis(char)">
			<summary>
			Returns the forward axis used for the source node with the specified name.
			</summary> 
			<param name="name"> Source node name. </param> 
			<returns>Forward axis for the source node. One of the FORWARD_ variables.</returns>
		</member>
		<member name="M:Unigine.SplineSegment.getNode(int)">
			<summary>
			Returns a node assigned to the segment by its number.
			</summary> 
			<param name="index"> Number of the desired node in a row of nodes placed along the segment in the range from 0 to the total number of nodes placed along the segment. </param> 
			<returns>Node placed along the segment at the specified position (number).</returns>
		</member>
		<member name="F:Unigine.SplineSegment.FORWARD_X">
			<summary>
			X is a forward axis for stretching.
		</summary>
		</member>
		<member name="F:Unigine.SplineSegment.FORWARD_Y">
			<summary>
			Y is a forward axis for stretching.
		</summary>
		</member>
		<member name="F:Unigine.SplineSegment.FORWARD_Z">
			<summary>
			Z is a forward axis for stretching.
		</summary>
		</member>
		<member name="F:Unigine.SplineSegment.SEGMENT_STRETCH">
			<summary>
			The source node is stretched along the segment. This mode is the most performance-friendly, as only a single node is created for a segment. However, the stretched geometry will cut the curves of the spline to straight lines.
		</summary>
		</member>
		<member name="F:Unigine.SplineSegment.SEGMENT_TILING">
			<summary>
			The source node is duplicated along the segment. Selecting this mode for a large spline graph may siginficantly reduce performance, due to a large number of tiled nodes.
		</summary>
		</member>
		<member name="F:Unigine.SplineSegment.SEGMENT_ADAPTIVE">
			<summary>
			This mode represents a combination of stretching and tiling to make the geometry placed along the spline graph look more plausible for a lower performance cost.
		</summary>
		</member>
		<member name="M:Unigine.WorldSwitcher.WorldSwitcher">
			<summary>
			Constructor. Creates a world switcher.
			</summary>  
		</member>
		<member name="M:Unigine.WorldSwitcher.setMaxDistance(float)">
			<summary>
			Sets the maximum distance of visibility. If a camera is further from a node than this maximum distance, a node is not visible. The default is inf.
			</summary> 
			<param name="distance"> Maximum distance of visibility in units. </param> 
		</member>
		<member name="M:Unigine.WorldSwitcher.getMaxDistance const">
			<summary>
			Returns the current maximum distance of visibility. If a camera is further from a node than this maximum distance, a node is not visible. The default is inf.
			</summary>  
			<returns>Maximum distance of visibility in units.</returns>
		</member>
		<member name="M:Unigine.WorldSwitcher.setMinDistance(float)">
			<summary>
			Sets the minimum distance of visibility. If a camera is closer to a node than this minimum distance, a node is not visible. The default is -inf.
			</summary> 
			<param name="distance"> Minimum distance of visibility in units. </param> 
		</member>
		<member name="M:Unigine.WorldSwitcher.getMinDistance const">
			<summary>
			Returns the current minimum distance of visibility. If a camera is closer to a node than this minimum distance, a node is not visible. The default is -inf.
			</summary>  
			<returns>Minimum distance of visibility in units.</returns>
		</member>
		<member name="M:Unigine.WorldSwitcher.type">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.WorldTransformBone.#ctor(char)">
			<summary>
			Constructor. Creates a WorldTransformBone in the world coordinates with a specified bone name.
			</summary> 
			<param name="name"> Name of the bone. </param> 
		</member>
		<member name="M:Unigine.WorldTransformBone.setBoneName(char)">
			<summary>
			Sets the name of the bone to be used for transformation.
			</summary> 
			<param name="name"> The name of the bone. </param> 
		</member>
		<member name="M:Unigine.WorldTransformBone.getBoneName const">
			<summary>
			Returns the name of the bone used for transformation.
			</summary>  
			<returns>The name of the bone.</returns>
		</member>
		<member name="M:Unigine.WorldTransformBone.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.#ctor(char,int)">
			<summary>
			Constructor. Creates a transformer defined by a path in world coordinates.
			</summary> 
			<param name="name"> Path to the *.path file. </param>
			<param name="unique"> The dynamic flag:0 - If the path is changed in run-time, paths loaded from the same file will be also changed.1 - If the path is changed in run-time, paths loaded from the same file won't be changed </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.setLoop(int)">
			<summary>
			Sets a value indicating if the transformation defined by the path should be looped.
			</summary> 
			<param name="loop"> 1 to loop the transformation defined by the path; 0 to play it only once. </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.getLoop const">
			<summary>
			Returns a value indicating if the transformation defined by the path is looped.
			</summary>  
			<returns>1 if the transformation is looped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.setOrientation(int)">
			<summary>
			Sets a value indicating if an object should be oriented along the path. When this option is enabled the complete transformation matrix (position, rotation, and scale) is taken into account when calculating intermediate transformation between the frames.	When disabled - only the intermediate position between the frames is used, while keeping object's scale and rotation.
			</summary> 
			<param name="orientation"> 1 to orient an object along the path; 0 to keep the initial orientation of the object. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.getOrientation const">
			<summary>
			Returns a value indicating if an object is oriented along the path. When this option is enabled the complete transformation matrix (position, rotation, and scale) is taken into account when calculating intermediate transformation between the frames.	When disabled - only the intermediate position between the frames is used, while keeping object's scale and rotation.
			</summary>  
			<returns>1 if an object is oriented along the path; 0 if the object initial orientation is kept. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.getPath const">
			<summary>
			Returns the path, by which the transformation is defined. By using this function, you can edit the current path or change velocity or transformation of the object moving along the path.
			</summary>  
			<returns>Instance of the Path class.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.setPathName(char,int)">
			<summary>
			Reloads the internal path transformation.
			</summary> 
			<param name="name"> The path name to be set. </param>
			<param name="unique"> The dynamic flag:0 - If the reloaded path is changed, paths loaded from the same file will be also changed.1 - If the reloaded path is changed, paths loaded from the same file won't be changed. </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.getPathName const">
			<summary>
			Returns the name of the path, by which the transformation is defined.
			</summary>  
			<returns>The path name.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.isPlaying const">
			<summary>
			Returns a value indicating if the transformation defined by the path is played.
			</summary>  
			<returns>true if the transformation is played; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.setSpeed(float)">
			<summary>
			Sets the speed of playback of the transformation defined by the path.
			</summary> 
			<param name="speed"> Speed of the transformation playback. Negative value controls reverse playback. </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.getSpeed const">
			<summary>
			Returns the speed of playback of the transformation defined by the path.
			</summary>  
			<returns>The playback speed.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.isStopped const">
			<summary>
			Returns a value indicating if the transformation defined by the path is stopped.
			</summary>  
			<returns>true if the transformation is stopped; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.setTime(float)">
			<summary>
			Sets the time, from which the playback of the transformation defined by the path starts.		If the object is oriented along the path, its transformation will be correspond to the path transformation at the specified time.		Otherwise, only position of the object will change.
			</summary> 
			<param name="time"> The playback time to be set. </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.getTime const">
			<summary>
			Returns the time from which the playback of the transformation defined by the path starts.
			</summary>  
			<returns>The playback time.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.play">
			<summary>
			Continues playback of the transformation defined by the path, if it is paused, or starts playback if it is stopped.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTransformPath.stop">
			<summary>
			Stops playback of the transformation defined by the path. This function saves the playback position so that playing of the transformation defined by the path can be resumed from the same point.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTransformPath.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
		<member name="M:Unigine.WorldTransformPath.setUpdateDistanceLimit(float)">
			<summary>
			Sets the distance from the camera within which the object should be updated.
			</summary> 
			<param name="limit"> Distance from the camera within which the object should be updated. </param> 
		</member>
		<member name="M:Unigine.WorldTransformPath.getUpdateDistanceLimit const">
			<summary>
			Returns the distance from the camera within which the object should be updated.
			</summary>  
			<returns>Distance from the camera within which the object should be updated.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a new world trigger with given dimensions.
			</summary> 
			<param name="size"> Dimensions of the new world trigger. If negative values are provided, 0 will be used instead of them.  </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.addEnterCallback(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Node}})">
			<summary>
			Adds a callback function to be fired when a node enters the world trigger. The callback function must receive a Node as its first argument. In addition, it can also take 2 arguments of any type.
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added enter callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.removeEnterCallback(void)">
			<summary>
			Removes the specified callback from the list of enter callbacks.
			</summary> 
			<param name="id"> Enter callback ID obtained when adding it. </param> 
			<returns>True if the enter callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.clearEnterCallbacks">
			<summary>
			Clears all added enter callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.setEnterCallbackName(char)">
			<summary>
			Sets a callback function to be fired when nodes are entering the world trigger. Unlike setEnterCallback(), this callback function accepts a node that entered the world trigger and world trigger itself as arguments.
			</summary> 
			<param name="name"> World script function name. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getEnterCallbackName const">
			<summary>
			Returns the name of callback function to be fired on entering the world trigger. This callback function is set via setEnterCallbackName().
			</summary>  
			<returns>World script function name.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.setExcludeNodes(Unigine.Set{Unigine.Ptr{Unigine.Node}})">
			<summary>
			Sets a list of excluded nodes, on which the world trigger will not react.
			</summary> 
			<param name="nodes"> Exclude nodes vector. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getExcludeNodes const">
			<summary>
			Returns the current list of excluded nodes, on which the world trigger does not react.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.setExcludeTypes(Unigine.Set{int})">
			<summary>
			Sets a list of excluded node types, on which the world trigger will not react.
			</summary> 
			<param name="types"> Exclude node types vector. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getExcludeTypes const">
			<summary>
			Returns the current list of excluded node types, on which the world trigger does not react.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.addLeaveCallback(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Node}})">
			<summary>
			Adds a callback function to be fired when a node leaves the world trigger. The callback function must receive a Node as its first argument. In addition, it can also take 2 arguments of any type.
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added leave callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.removeLeaveCallback(void)">
			<summary>
			Removes the specified callback from the list of leave callbacks.
			</summary> 
			<param name="id"> Leave callback ID obtained when adding it. </param> 
			<returns>True if the leave callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.clearLeaveCallbacks">
			<summary>
			Clears all added leave callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.setLeaveCallbackName(char)">
			<summary>
			Sets a callback function to be fired when nodes are leaving the world trigger. Unlike setLeaveCallback(), this callback function accepts a node that left the world trigger and world trigger itself as arguments.
			</summary> 
			<param name="name"> World script function name. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getLeaveCallbackName const">
			<summary>
			Returns the name of the callback function name to be fired on leaving the world trigger. This callback function is set via setLeaveCallbackName().
			</summary>  
			<returns>World script function name.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.getNode(int) const">
			<summary>
			Returns a specified node contained in the world trigger.
			</summary> 
			<param name="num"> Node number in range from 0 to the total number of nodes. </param> 
			<returns>Node pointer.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.getNodes const">
			<summary>
			Gets nodes contained in the trigger.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.getNumNodes const">
			<summary>
			Returns the number of nodes contained in the world trigger.
			</summary>  
			<returns>Number of nodes contained in the trigger.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.setSize(Unigine.Math.vec3)">
			<summary>
			Updates the current dimensions of the world trigger. The minimum size is vec3(0,0,0).
			</summary> 
			<param name="size"> Dimensions of the world trigger. If negative values are provided, 0 will be used instead of them.  </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getSize const">
			<summary>
			Returns the current dimensions of the world trigger.
			</summary>  
			<returns>Current dimensions of the world trigger.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.setTargetNodes(Unigine.Set{Unigine.Ptr{Unigine.Node}})">
			<summary>
			Sets a list of target nodes, which will fire callbacks. If this list is empty, all nodes fire callbacks.
			</summary> 
			<param name="nodes"> Target nodes vector. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getTargetNodes const">
			<summary>
			Returns the current list of target nodes, which fire callbacks. If this list is empty, all nodes fire callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.setTargetTypes(Unigine.Set{int})">
			<summary>
			Sets a list of target node types, which will fire callbacks. If this list is empty, all nodes fire callbacks.
			</summary> 
			<param name="types"> Target node types vector. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.getTargetTypes const">
			<summary>
			Returns the current list of target node types, which fire callbacks. If this list is empty, all nodes fire callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.WorldTrigger.setTouch(bool)">
			<summary>
			Sets a touch mode for the trigger. With this mode on, the trigger will react to the node by partial contact. When set to off, the trigger reacts only if the whole bounding sphere/box gets inside or outside of it. The default is 0.
			</summary> 
			<param name="touch"> Touch mode flag: true to enable the touch mode, false to disable it. </param> 
		</member>
		<member name="M:Unigine.WorldTrigger.isTouch const">
			<summary>
			Returns a value indicating if a touch mode is enabled for the trigger. With this mode on, the trigger will react to the node by partial contact. When set to off, the trigger reacts only if the whole bounding sphere/box gets inside or outside of it.
			</summary>  
			<returns>true if the touch mode is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.WorldTrigger.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>World type identifier.</returns>
		</member>
	</members>
</doc>