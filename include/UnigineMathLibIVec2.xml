<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.ivec2.#ctor">
			<summary>
			Default constructor. Produces a zero vector.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(Unigine.ivec2)">
			<summary>
			Constructor. Initializes the vector by copying a given source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(int,int)">
			<summary>
			Constructor. Initializes the vector using given integer values.
			</summary> 
			<param name="x"> X component of the vector. </param>
			<param name="y"> Y component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(int)">
			<summary>
			Constructor. Initializes the vector using a given scalar value: x=v, y=v.
			</summary> 
			<param name="v"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(Unigine.vec2)">
			<summary>
			Constructor. Initializes the vector using a given vec2 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(Unigine.dvec2)">
			<summary>
			Constructor. Initializes the vector using a given dvec2 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(int)">
			<summary>
			Constructor. Initializes the vector using a given pointer to the array of integer elements: x=v[0], y=v[1].
			</summary> 
			<param name="v"> Pointer to the array of integer elements. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.#ctor(int,ConstexprTag)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.abs">
			<summary>
			Returns the absolute values of the vector components.
			</summary>  
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.set(int,int)">
			<summary>
			Sets the vector by components.
			</summary> 
			<param name="x_"> X component of the vector. </param>
			<param name="y_"> Y component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.set(int)">
			<summary>
			Sets the vector using the array of integer elements: x=val[0], y=val[1].
			</summary> 
			<param name="val"> Pointer to the array of integer elements. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.set(Unigine.ivec2)">
			<summary>
			Sets the vector equal to the specified source vector.
			</summary> 
			<param name="val"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.set(int)">
			<summary>
			Sets the vector components equal to specified scalar value: x=val, y=val.
			</summary> 
			<param name="val"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.get">
			<summary>
			Returns the pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.get const">
			<summary>
			Returns the constant pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.get(int) const">
			<summary>
			Gets the vector: val[0]=x, val[1]=y.
			</summary> 
			<param name="val"> Pointer to the array of integer elements. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.length2 const">
			<summary>
			Returns the squared length of the vector.
			</summary>  
			<returns>Squared length of the vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator const int * const">
			<summary>
			Performs type conversion to const int *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.operator const void * const">
			<summary>
			Performs type conversion to const void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.operator int *">
			<summary>
			Performs type conversion to int *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.operator void *">
			<summary>
			Performs type conversion to void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.operator*=(int)">
			<summary>
			Performs scalar multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator*=(Unigine.ivec2)">
			<summary>
			Performs vector multiplication.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator+=(Unigine.ivec2)">
			<summary>
			Performs vector addition.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator- const">
			<summary>
			Performs vector negation.
			</summary>  
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator-=(Unigine.ivec2)">
			<summary>
			Performs vector subtraction.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator/=(int)">
			<summary>
			Performs componentwise integer division of the vector by the scalar.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator/=(Unigine.ivec2)">
			<summary>
			Performs componentwise integer division of vectors.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator&lt;&lt;=(int)">
			<summary>
			Performs componentwise left bit shift.
			</summary> 
			<param name="v"> Shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator=(Unigine.ivec2)">
			<summary>
			Performs vector assignment. Destination vector = Source vector.
			</summary> 
			<param name="val"> Source vector. </param> 
			<returns>Result.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator&gt;&gt;=(int)">
			<summary>
			Performs componentwise right bit shift.
			</summary> 
			<param name="v"> Shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator[](int)">
			<summary>
			Performs array access to the vector item reference by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item reference.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator[](int) const">
			<summary>
			Performs array access to the vector item by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.mul const">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary>  
			<returns>Vector multiplier.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.mul(int)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> An int multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.mul(Unigine.ivec2)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> Vector multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.div(int)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> An int divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.div(Unigine.ivec2)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A ivec2 divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.sub(int)">
			<summary>
			Subtracts each element of the specified argument from the corresponding element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.sub(Unigine.ivec2)">
			<summary>
			Subtracts each element of the specified argument from the corresponding element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.operator-=(int)">
			<summary>
			Performs vector subtraction.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.sum const">
			<summary>
			Returns the sum of vector components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.add(int)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.add(Unigine.ivec2)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.operator+=(int)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.shiftLeft(int)">
			<summary>
			Bitwise left shift by a specific value. Both components are shifted by this value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.shiftLeft(Unigine.ivec2)">
			<summary>
			Bitwise left shift by a specific value. Both components are shifted by the value's corresponding component.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.operator&lt;&lt;=(Unigine.ivec2)">
			<summary>
			Bitwise left shift by a specific value. Both components are shifted by the value's corresponding component.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>This vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator&lt;&lt;=(int)">
			<summary>
			Bitwise left shift by a specific value. Both components are shifted by this value.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>This vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.shiftRight(int)">
			<summary>
			Bitwise right shift by a specific value. Both components are shifted by this value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.shiftRight(Unigine.ivec2)">
			<summary>
			Bitwise right shift by a specific value. Both components are shifted by the value's corresponding component.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.ivec2.operator&gt;&gt;=(Unigine.ivec2)">
			<summary>
			Bitwise right shift by a specific value. Both components are shifted by the value's corresponding component.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>This vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.operator&gt;&gt;=(int)">
			<summary>
			Bitwise right shift by a specific value. Both components are shifted by this value.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>This vector.</returns>
		</member>
		<member name="M:Unigine.Math.ivec2.max const">
			<summary>
			Returns the maximum of X and Y components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.min const">
			<summary>
			Returns the minimum of X and Y components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.ivec2.hash const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Math.ivec2.ivec2_one">
			<summary>
			Vector filled with ones (1).
		</summary>
		</member>
		<member name="F:Unigine.Math.ivec2.ivec2_zero">
			<summary>
			Vector filled with zeros (0).
		</summary>
		</member>
	</members>
</doc>