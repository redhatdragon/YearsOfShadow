<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Tree.back">
			<summary>
			Returns the back iterator.
			</summary>  
			<returns>Back iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.back const">
			<summary>
			Returns the back const iterator.
			</summary>  
			<returns>Back const iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.begin">
			<summary>
			Returns the begin iterator.
			</summary>  
			<returns>Begin iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.begin const">
			<summary>
			Returns the begin const iterator.
			</summary>  
			<returns>Begin const iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.clear">
			<summary>
			Clears a tree.
			</summary>  
		</member>
		<member name="M:Unigine.Tree.empty const">
			<summary>
			Returns the 1 if the tree is empty; otherwise, 0 is returned.
			</summary>  
			<returns>The empty flag.</returns>
		</member>
		<member name="M:Unigine.Tree.end">
			<summary>
			Returns the end iterator.
			</summary>  
			<returns>End iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.end const">
			<summary>
			Returns the end const iterator.
			</summary>  
			<returns>End const iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.find(T)">
			<summary>
			Finds an item in the tree.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>The iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.find(T) const">
			<summary>
			Finds an item in the tree.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>The const iterator.</returns>
		</member>
		<member name="M:Unigine.Tree.operator=(Unigine.Tree{Key,Data})">
			<summary>
			Assignment operator for the tree.
			</summary> 
			<param name="tree"> Tree. </param> 
		</member>
		<member name="M:Unigine.Tree.remove(Key)">
			<summary>
			Removes an item from the tree.
			</summary> 
			<param name="key"> Key. </param> 
		</member>
		<member name="M:Unigine.Tree.size const">
			<summary>
			Returns the size of the tree.
			</summary>  
			<returns>The size of the tree.</returns>
		</member>
		<member name="M:Unigine.Tree.Tree">
			<summary>
			Default constructor that produces an empty tree.
			</summary>  
		</member>
		<member name="M:Unigine.Tree.Tree(Unigine.Tree{Key,Data})">
			<summary>
			Copy constructor.
			</summary> 
			<param name="tree"> tree. </param> 
		</member>
		<member name="M:Unigine.Tree.~Tree">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.Tree.ConstIterator.get const">
			<summary>
			Returns iterator's node pointer.
			</summary>  
			<returns>The const iterator's node pointer.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.ConstIterator">
			<summary>
			Default constructor.
			</summary>  
		</member>
		<member name="M:Unigine.Tree.ConstIterator.ConstIterator(ConstIterator)">
			<summary>
			Copy constructor.
			</summary> 
			<param name="it"> ConstIterator. </param> 
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator!=(typenameTree{Key,Data}::Iterator) const">
			<summary>
			Check if two iterators are not the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are not the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator!=(ConstIterator) const">
			<summary>
			Check if two iterators are not the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are not the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator* const">
			<summary>
			Returns iterator's node reference.
			</summary>  
			<returns>The const iterator's node reference.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator++">
			<summary>
			Increases the iterator position.
			</summary>  
			<returns>The const iterator referring to the next element.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator++">
			<summary>
			Increases the iterator position.
			</summary>  
			<returns>The const iterator referring to the next element.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator--">
			<summary>
			Decreases the iterator position.
			</summary>  
			<returns>The const iterator referring to the prev element.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator--">
			<summary>
			Decreases the iterator position.
			</summary>  
			<returns>The const iterator referring to the prev element.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator-&gt; const">
			<summary>
			Returns iterator's node pointer.
			</summary>  
			<returns>The const iterator's node pointer.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator=(ConstIterator)">
			<summary>
			Assignment operator for the iterator.
			</summary> 
			<param name="it"> ConstIterator. </param> 
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator==(typenameTree{Key,Data}::Iterator) const">
			<summary>
			Check if two iterators are actually the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.operator==(ConstIterator) const">
			<summary>
			Check if two iterators are actually the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.ConstIterator.~ConstIterator">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.Tree.Iterator.get">
			<summary>
			Returns iterator's node pointer.
			</summary>  
			<returns>The iterator's node pointer.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.Iterator">
			<summary>
			Default constructor.
			</summary>  
		</member>
		<member name="M:Unigine.Tree.Iterator.Iterator(Iterator)">
			<summary>
			Copy constructor.
			</summary> 
			<param name="it"> Iterator. </param> 
		</member>
		<member name="M:Unigine.Tree.Iterator.operator!=(Iterator) const">
			<summary>
			Check if two iterators are not the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are not the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator!=(typenameTree{Key,Data}::ConstIterator) const">
			<summary>
			Check if two iterators are not the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are not the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator*">
			<summary>
			Returns iterator's node reference.
			</summary>  
			<returns>The iterator's node reference.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator++">
			<summary>
			Increases the iterator position.
			</summary>  
			<returns>The iterator referring to the next element.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator++">
			<summary>
			Increases the iterator position.
			</summary>  
			<returns>The iterator referring to the current element.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator--">
			<summary>
			Decreases the iterator position.
			</summary>  
			<returns>The iterator referring to the prev element.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator--">
			<summary>
			Decreases the iterator position.
			</summary>  
			<returns>The iterator referring to the current element.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator-&gt;">
			<summary>
			Returns iterator's node pointer.
			</summary>  
			<returns>The iterator's node.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator=(Iterator)">
			<summary>
			Assignment operator for the iterator.
			</summary> 
			<param name="it"> Iterator. </param> 
		</member>
		<member name="M:Unigine.Tree.Iterator.operator==(Iterator) const">
			<summary>
			Check if two iterators are actually the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.operator==(typenameTree{Key,Data}::ConstIterator) const">
			<summary>
			Check if two iterators are actually the same.
			</summary> 
			<param name="it"> The second iterator. </param> 
			<returns>Returns 1 if iterators are the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Tree.Iterator.~Iterator">
			<summary>
			Destructor.
			</summary>  
		</member>
	</members>
</doc>