<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Plugin.get_data">
			<summary>
			Returns the plugin data.
			</summary>  
			<returns>Plugin data.</returns>
		</member>
		<member name="M:Unigine.Plugin.get_name">
			<summary>
			Returns the name of the plugin.
			</summary>  
			<returns>Plugin name.</returns>
		</member>
		<member name="M:Unigine.Plugin.get_order">
			<summary>
			Returns the execution order of the plugin. Each plugin has its execution order, which determines the sequence in which pluginâ€™s functions (update / postUpdate / render / shutdown) will be executed. The only exception is the init function as it is called just after loading the plugin. Remember, when writing your own plugin, that requires interaction with other ones, specifying correct order value is required to avoid issues and ensure proper execution sequence. If in your case the order doesn't matter, set the default 0 value.
			</summary>  
			<returns>Plugin execution order.</returns>
		</member>
		<member name="M:Unigine.Plugin.getCompilationFlags const">
			<summary>
			Returns the Unigine compilation flags.
			</summary>  
			<returns>Unigine compilation flags.</returns>
		</member>
		<member name="M:Unigine.Plugin.updatePhysics">
			<summary>
			Engine calls this function before updating each physics frame.
			</summary>  
		</member>
		<member name="M:Unigine.Plugin.gui(EngineWindowPtr)">
			<summary>
			Engine calls this function before gui each render frame for the specified engine window.
			</summary> 
			<param name="window"> Target Engine window. </param> 
		</member>
		<member name="M:Unigine.Plugin.init">
			<summary>
			Engine calls this function on plugin initialization.
			</summary>  
			<returns>true on success, or false if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugin.loadWorld(XmlPtr)">
			<summary>
			Engine calls this function on world loading.
			</summary> 
			<param name="xml"> Xml instance from which the data is to be loaded. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugin.render(EngineWindowPtr)">
			<summary>
			Engine calls this function before rendering each render frame for the specified Engine window.
			</summary> 
			<param name="window"> Target Engine window. </param> 
		</member>
		<member name="M:Unigine.Plugin.saveState(StreamPtr)">
			<summary>
			Engine calls this function on world saving.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream, to which the current state is to be saved. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Plugin.restoreState(StreamPtr)">
			<summary>
			Engine calls this function on world restoring.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream, from which the previously saved state is to be restored. </param> 
			<returns>Returns 1 on success, or 0 if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugin.saveWorld(XmlPtr)">
			<summary>
			Engine calls this function on world saving.
			</summary> 
			<param name="xml"> Xml instance to which the data is to be saved. </param> 
			<returns>Returns 1 on success, or 0 if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugin.shutdown">
			<summary>
			Engine calls this function on plugin shutdown.
			</summary>  
			<returns>Returns 1 on success, or 0 if an error has occurred.</returns>
		</member>
		<member name="M:Unigine.Plugin.swap">
			<summary>
			Engine calls this function before swapping each render frame.
			</summary>  
		</member>
		<member name="M:Unigine.Plugin.update">
			<summary>
			Engine calls this function before updating each render frame.
			</summary>  
		</member>
		<member name="M:Unigine.Plugin.postUpdate">
			<summary>
			Engine calls this function after updating each render frame.
			</summary>  
		</member>
	</members>
</doc>