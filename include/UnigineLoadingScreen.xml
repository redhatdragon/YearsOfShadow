<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.LoadingScreen.setEnabled(bool)">
			<summary>
			Specifies if manual rendering of the loading screen can be started or should be stopped. setEnabled() is used only together with the corresponding render functions (render()). It cannot be used to enable or disable rendering of the loading screen during the initialization stage of the engine.
			</summary> 
			<param name="enabled"> true to enable manual rendering of a custom loading screen; false to disable. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.isEnabled const">
			<summary>
			Returns a value indicating if manual rendering of a loading screen is allowed.
			</summary>  
			<returns>true if the rendering of the loading screen is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setThreshold(int)">
			<summary>
			Sets the amount of blur in the alpha channel when interpolating between states of the loading screen.By default, the Threshold value is set to 16.
			</summary> 
			<param name="threshold"> amount of blur in the [0, 255] range. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getThreshold const">
			<summary>
			Returns the amount of blur in the alpha channel when interpolating between states of the loading screen.
			</summary>  
			<returns>amount of blur.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setTexturePath(char)">
			<summary>
			Sets the path to a texture for custom loading screens.
			</summary> 
			<param name="path"> Path to a file with the custom loading screen texture. If NULL (0) is passed, no texture will be used. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getTexturePath const">
			<summary>
			Returns the path to the texture for loading screens.
			</summary>  
			<returns>Path to the texture of the loading screens.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets an image for a custom loading screen.
			</summary> 
			<param name="image"> Image smart pointer to an image to be used as a custom loading screen. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.setTransform(Unigine.Math.vec4)">
			<summary>
			Sets transformation of the loading screen texture.
			</summary> 
			<param name="transform"> Transformation of the loading screen texture:Texture size multiplier.Window size multiplier.Horizontal position in the [0.0f, 1.0f] range.Vertical position in the [0.0f, 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getTransform const">
			<summary>
			Returns transformation of the loading screen texture.
			</summary>  
			<returns>transformation of the texture.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color of the loading screen.
			</summary> 
			<param name="color"> Background color. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getBackgroundColor const">
			<summary>
			Returns the background color of loading screens.
			</summary>  
			<returns>Background color.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setText(char)">
			<summary>
			Sets the text of the loading screen.
			</summary> 
			<param name="text"> Text of the loading screen. Can be either a plain or rich text. A number of aliases is available:UNIGINE_COPYRIGHT — the UNIGINE copyright text.UNIGINE_VERSION — the current UNIGINE version.LOADING_PROGRESS — the loading progress going from 0 to 100.LOADING_WORLD — the world being loaded (if any). </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getText const">
			<summary>
			Returns the text of the loading screen.
			</summary>  
			<returns>Text of the loading screen.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setFontPath(char)">
			<summary>
			Sets the path to the font used to render the text.
			</summary> 
			<param name="path"> Path to the font (True Type Font). </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getFontPath const">
			<summary>
			Returns the path to the font used to render the text.
			</summary>  
			<returns>Path to the font.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.renderInterface">
			<summary>
			Renders a static loading screen. Such a screen does not display any progress.
			</summary>  
		</member>
		<member name="M:Unigine.LoadingScreen.render">
			<summary>
			Renders the loading screen in the current progress state and with the current stage message.
			</summary>  
		</member>
		<member name="M:Unigine.LoadingScreen.render(int)">
			<summary>
			Renders a custom loading screen in a given progress state. Use this function in a loop to create a gradual change between the initial (upper opaque part) and the final states (bottom transparent part) of the loading screen texture.
			</summary> 
			<param name="progress"> Progress of alpha blending between 2 screens stored in the texture. The value in range [0;100] sets an alpha channel threshold, according to which pixels from the initial (opaque) or final (transparent) screen in the texture are rendered. By the value of 0, the initial screen is loaded. By the value of 100, the final screen is loaded. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.render(int,char)">
			<summary>
			Renders a custom loading screen in a given progress state and prints a given message. Use this function in a loop to create a gradual change between the initial (upper opaque part) and the final states (bottom transparent part) of the loading screen texture, while printing a custom loading stage.
			</summary> 
			<param name="progress"> Progress of alpha blending between 2 loading screens stored in the texture. The value in range [0;100] sets an alpha channel threshold, according to which pixels from the initial (opaque) or final (transparent) loading screen in the texture are rendered. By the value of 0, the initial screen is loaded. By the value of 100, the final screen is loaded. </param>
			<param name="message"> message to print representing the loading stage. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.renderForce">
			<summary>
			Renders the loading screen regardless of whether the manual rendering is allowed or not.
			</summary>  
		</member>
		<member name="M:Unigine.LoadingScreen.renderForce(char)">
			<summary>
			Renders the loading screen regardless of whether the manual rendering is allowed or not and prints a given message.
			</summary> 
			<param name="message"> message to print that represents the loading stage. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getProgress const">
			<summary>
			Returns the current progress state.
			</summary>  
			<returns>Progress state in the [0, 100] range.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.getMessage const">
			<summary>
			Returns the text message representing the current loading stage.
			</summary>  
			<returns>Loading message.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.addRenderBeginCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback function that will be executed when rendering of the loading screen begins. The function is useful when you implement a custom loading screen rendering function, for example. The callback function must not take arguments.
			</summary> 
			<param name="func"> The pointer to the callback with no arguments. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.removeRenderBeginCallback(void)">
			<summary>
			Removes the specified callback from the list of render begin callbacks.
			</summary> 
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.clearRenderBeginCallbacks">
			<summary>
			Clears all added render begin callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LoadingScreen.addRenderEndCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback function that will be executed when rendering of the loading screen ends. The function is useful when you implement a custom loading screen rendering function, for example. The callback function must not take arguments.
			</summary> 
			<param name="func"> The pointer to the callback with no arguments. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.removeRenderEndCallback(void)">
			<summary>
			Removes the specified callback from the list of render end callbacks.
			</summary> 
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.clearRenderEndCallbacks">
			<summary>
			Clears all added render end callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LoadingScreen.setMessageLoadingWorld(char)">
			<summary>
			Sets a message to be displayed on world loading.
			</summary> 
			<param name="world"> Message on world loading. The text aliases are also supported. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getMessageLoadingWorld const">
			<summary>
			Returns the current message displayed on world loading.
			</summary>  
			<returns>Message on world loading.</returns>
		</member>
		<member name="M:Unigine.LoadingScreen.setMessageShadersCompilation(char)">
			<summary>
			Sets a message to be displayed on shaders compilation.
			</summary> 
			<param name="compilation"> Message on shaders compilation. The text aliases are also supported. </param> 
		</member>
		<member name="M:Unigine.LoadingScreen.getMessageShadersCompilation const">
			<summary>
			Returns the current message displayed on shaders compilation.
			</summary>  
			<returns>Message on shaders compilation.</returns>
		</member>
	</members>
</doc>