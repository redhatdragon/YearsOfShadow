<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Field.setFieldMask(int)">
			<summary>
			Sets a field mask specifying the area of the Field node to be applied. The object will be influenced by the field if they both have matching masks.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a mask. </param> 
		</member>
		<member name="M:Unigine.Field.getFieldMask const">
			<summary>
			Returns the mask specifying the area of the Field node to be applied. The object will be influenced by the field if they both have matching masks.
			</summary>  
			<returns>The integer value, each bit of which is used to set a mask.</returns>
		</member>
		<member name="M:Unigine.Field.setViewportMask(int)">
			<summary>
			Sets a bit mask for rendering the Field node into the viewport.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a mask. </param> 
		</member>
		<member name="M:Unigine.Field.getViewportMask const">
			<summary>
			Returns the current bit mask for rendering the Field node into the viewport.
			</summary>  
			<returns>The integer value, each bit of which is used to set a mask.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.#ctor(Unigine.Math.vec3)">
			<summary>
			Creates a new field animation node of the specified size:											If the field animation is of an ellipse shape, its radius values along the axes must be specified.						Otherwise, dimensions of the cube must be specified.
			</summary> 
			<param name="size"> A size of the field animation along X, Y and Z axes in units. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.setAnimationScale(float)">
			<summary>
			Sets the animation scale value indicating the scale for speed of vegetation swaying.
			</summary> 
			<param name="scale"> The scale for speed of vegetation swaying value. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.getAnimationScale const">
			<summary>
			Returns the animation scale value indicating the scale for speed of vegetation swaying.
			</summary>  
			<returns>The scale for speed of vegetation swaying value.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.setAttenuation(float)">
			<summary>
			Sets an attenuation coefficient value for the Field Animation.
			</summary> 
			<param name="attenuation"> An attenuation coefficient value. If a too small value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.getAttenuation const">
			<summary>
			Returns the current attenuation coefficient for the Field Animation that indicates how much animation fades away starting from the center of the animation field to its edges:											By the minimum value of 0, no animation will be visible.						The higher the value, the more intensive animation will be at the edges of the animation field.
			</summary>  
			<returns>Current attenuation coefficient value.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.setEllipse(bool)">
			<summary>
			Transforms a cube-shaped field animation into an ellipse-shaped one or vice versa.
			</summary> 
			<param name="ellipse"> true for the ellipse-shaped Field Animation, false for the cube-shaped one. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.isEllipse const">
			<summary>
			Returns a value indicating if the Field Animation is of an ellipse shape.
			</summary>  
			<returns>true if the Field Animation is of an ellipse shape; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.setLeaf(float)">
			<summary>
			Sets a leaf animation coefficient value.
			</summary> 
			<param name="leaf"> A new leaf coefficient value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.getLeaf const">
			<summary>
			Returns the current leaf animation coefficient value.
			</summary>  
			<returns>The leaf animation coefficient value.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.setSize(Unigine.Math.vec3)">
			<summary>
			Sets an animation field size.
			</summary> 
			<param name="size"> A new animation field size along the X, Y and Z axes in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.getSize const">
			<summary>
			Returns the animation field size:											If the field animation is of an ellipse shape, its radius values along the axes will be returned.						Otherwise, dimensions of the cube will be returned.
			</summary>  
			<returns>The current animation field size along the X, Y and Z axes in units.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.setStem(float)">
			<summary>
			Sets a stem animation coefficient value.
			</summary> 
			<param name="stem"> A new stem animation coefficient value. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.getStem const">
			<summary>
			Returns the current stem animation coefficient value.
			</summary>  
			<returns>The stem animation coefficient value.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.setWind(Unigine.Math.vec3)">
			<summary>
			Sets wind coefficients values that define wind direction inside the animation field.
			</summary> 
			<param name="wind"> Wind coefficients values along the X, Y and Z directions. </param> 
		</member>
		<member name="M:Unigine.FieldAnimation.getWind const">
			<summary>
			Returns the wind coefficients values that define wind direction inside the animation field.
			</summary>  
			<returns>Current wind coefficients values along the X, Y, and Z directions.</returns>
		</member>
		<member name="M:Unigine.FieldAnimation.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>FieldAnimation type identifier.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.#ctor">
			<summary>
			The default constructor. Creates a FieldHeight instance with the default size vec3(1.0f, 1.0f, 1.0f).					By default, a heightmap texture is empty. Specify it after creating the FieldHeight by using an appropriate function.
			</summary>  
		</member>
		<member name="M:Unigine.FieldHeight.setAttenuation(float)">
			<summary>
			Sets the FieldHeight's attenuation factor value. The attenuation factor indicates the rate of FiledHeight influence attenuation from the center of the object to its edges. By default the attenuation factor is set to 1.0f.
			</summary> 
			<param name="attenuation"> Attenuation factor. The higher the value, the less FieldHeight's heights will have influence on the Global Water's object heights. </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getAttenuation const">
			<summary>
			Returns the FieldHeight's attenuation factor value. The attenuation factor indicates the rate of FiledHeight influence attenuation from the center of the object to its edges.
			</summary>  
			<returns>Attenuation factor. The higher the value, the less FieldHeight's heights will have influence on the Global Water's object heights. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets the given texture from the Texture instance for the FieldHeight.
			</summary> 
			<param name="texture"> Texture instance. </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getTexture const">
			<summary>
			Returns the heightmap texture (from GPU) and saves it into the given Texture instance.
			</summary>  
			<returns>Texture instance into which the texture will be saved.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setTextureImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the given image as the heightmap texture of the FieldHeight.
			</summary> 
			<param name="image"> Image instance with heightmap for FieldHeight. </param> 
			<returns>1 if the texture is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.getTextureImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Grabs the texture for the FieldHeight (already loaded to GPU) and saves it into the given Image instance.
			</summary> 
			<param name="image"> Image instance into which the texture will be saved. </param> 
			<returns>1 if the texture has been grabbed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setTexturePath(char)">
			<summary>
			Sets the path to the FieldHeight's heightmap texture.
			</summary> 
			<param name="path"> Path to the heightmap texture. </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getTexturePath const">
			<summary>
			Returns the path to the FieldHeight's heightmap texture.
			</summary>  
			<returns>Path to the heightmap texture.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setPower(float)">
			<summary>
			Sets the FieldHeight's power value. The power is a multiplier for loaded heightmap texture values. By default the power is set to 1.0f.
			</summary> 
			<param name="power"> Power value. The higher the value, the more FieldHeight's heights will have influence on the Global Water's object heights. </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getPower const">
			<summary>
			Returns the FieldHeight's power value. The power is a multiplier for loaded heightmap texture values.
			</summary>  
			<returns>Power value. The higher the value, the more FieldHeight's heights will have influence on the Global Water's object heights. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the vec3 size vector of the FieldHeight's object. By default, the size is (1.0f, 1.0f, 1.0f).
			</summary> 
			<param name="size"> Size vector (x,y,z), where:x value is length of the FieldHeight along X axis (in units),y value is length of the FieldHeight along Y axis (in units),z value is length of the FieldHeight along Z axis (in units). </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getSize const">
			<summary>
			Returns the vec3 size vector of the FieldHeight's object.
			</summary>  
			<returns>Size vector (x,y,z), where:x value is length of the FieldHeight along X axis (in units),y value is length of the FieldHeight along Y axis (in units),z value is length of the FieldHeight along Z axis (in units).The default value is (1.0f, 1.0f, 1.0f). </returns>
		</member>
		<member name="M:Unigine.FieldHeight.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>FieldHeight type identifier.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setOrder(int)">
			<summary>
			Sets the field height rendering order.					This parameter is used to properly apply fields with mixed blend modes.
			</summary> 
			<param name="order"> Rendering order to set. </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getOrder const">
			<summary>
			Returns the current field height rendering order.					This parameter is used to properly apply fields with mixed blend modes.
			</summary>  
			<returns>Rendering order.</returns>
		</member>
		<member name="M:Unigine.FieldHeight.setBlendMode(int)">
			<summary>
			Sets the field height blending mode.					Attenuation parameter is interpreted depending on the selected blending mode:													is used as a mulpiplier for the additive mode							lerp(1.0f, value, attenuation) is used for the multiplicative mode
			</summary> 
			<param name="mode"> Blending mode to be set. One of the BLEND_*values. </param>
			<param name="mode"> Blending mode to be set. One of the FIELD_HEIGHT_BLEND_*values. </param> 
		</member>
		<member name="M:Unigine.FieldHeight.getBlendMode const">
			<summary>
			Returns the current field height blending mode.					Attenuation parameter is interpreted depending on the selected blending mode:													is used as a mulpiplier for the additive mode							lerp(1.0f, value, attenuation) is used for the multiplicative mode
			</summary>  
			<returns>Blending mode. One of the FIELD_HEIGHT_BLEND_*values.</returns>
		</member>
		<member name="F:Unigine.FieldHeight.BLEND_ADDITIVE">
			<summary>
			Additive blending mode for the height field.
		</summary>
		</member>
		<member name="F:Unigine.FieldHeight.BLEND_MULTIPLICATIVE">
			<summary>
			Multiplicative blending mode for the height field.
		</summary>
		</member>
		<member name="M:Unigine.FieldShoreline.#ctor">
			<summary>
			Default constructor. Creates a FieldShoreline instance with the default size vec3(512.0f, 512.0f, 512.0f).					By default, a shoreline texture is empty. Specify it after creating the FieldShoreline by using an appropriate function.
			</summary>  
		</member>
		<member name="M:Unigine.FieldShoreline.bakeWaterLevel(Unigine.Ptr{Unigine.Image})">
			<summary>
			Bakes shoreline for the current water level of the global water object and puts it to the specified image. This method generates a shoreline texture by finding intersections of the Global Water object with terrains (Landscape Terrain and Terrain Global)
			</summary> 
			<param name="image"> Image instance to which the shoreline for the current water level is to be baked. </param> 
			<returns>1 if the shoreline is baked successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.setTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets the given texture from the Texture instance for the FieldShoreline.
			</summary> 
			<param name="texture"> Texture instance. </param> 
		</member>
		<member name="M:Unigine.FieldShoreline.getTexture const">
			<summary>
			Returns the shoreline texture (from GPU) and saves it into the given Texture instance.
			</summary>  
			<returns>Shoreline texture.</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.setTextureImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the given image as the shoreline texture of the FieldShoreline.
			</summary> 
			<param name="image"> Image instance with a shoreline texture for the FieldShoreline. </param> 
		</member>
		<member name="M:Unigine.FieldShoreline.getTextureImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Grabs the texture for the FieldShoreline (already loaded to GPU) and saves it into the given Image instance.
			</summary> 
			<param name="image"> Image instance into which the texture will be saved. </param> 
			<returns>1 if the texture has been grabbed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.setTexturePath(char)">
			<summary>
			Sets the path to the FieldShoreline's shoreline texture.
			</summary> 
			<param name="path"> Path to the shoreline texture. </param> 
			<returns>1 if the path to the shoreline texture is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.getTexturePath const">
			<summary>
			Returns the path to the FieldShoreline's shoreline texture.
			</summary>  
			<returns>Path to the shoreline texture.</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the vec3 size vector of the FieldShoreline.					The default value is (512.0f, 512.0f, 512.0f).
			</summary> 
			<param name="size"> Size vector (x,y,z), where:x value is length of the FieldShoreline along X axis (in units),y value is length of the FieldShoreline along Y axis (in units),z value is length of the FieldShoreline along Z axis (in units). </param> 
		</member>
		<member name="M:Unigine.FieldShoreline.getSize const">
			<summary>
			Returns the vec3 size vector of the FieldShoreline.					The default value is (512.0f, 512.0f, 512.0f).
			</summary>  
			<returns>Size vector (x,y,z), where:x value is length of the FieldShoreline along X axis (in units),y value is length of the FieldShoreline along Y axis (in units),z value is length of the FieldShoreline along Z axis (in units).</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.createShorelineDistanceField(Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Creates a shoreline distance field with the specified parameters and puts it to the specified Image.
			</summary> 
			<param name="image"> Image to which the shoreline distance field will be put. </param>
			<param name="shoreline_radius"> Radius of the shoreline. </param>
			<param name="blur_radius"> Radius of the blurred area. </param>
			<param name="downsample_resolution"> Shoreline resolution. </param> 
			<returns>1 if the field was created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldShoreline.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>FieldShoreline type identifier.</returns>
		</member>
		<member name="M:Unigine.FieldSpacer.#ctor(Unigine.Math.vec3)">
			<summary>
			Creates a new field spacer of the specified size:											If the field spacer is of an ellipse shape, its radius values along the axes must be specified.						Otherwise, dimensions of the cube must be specified.
			</summary> 
			<param name="size"> A size of the field spacer along X, Y and Z axes in units. </param> 
		</member>
		<member name="M:Unigine.FieldSpacer.setAttenuation(float)">
			<summary>
			Sets an attenuation factor value for the Field Spacer.
			</summary> 
			<param name="attenuation"> A new attenuation factor value. If a too small value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.FieldSpacer.getAttenuation const">
			<summary>
			Returns the current attenuation factor for the Field Spacer.
			</summary>  
			<returns>The attenuation factor value.</returns>
		</member>
		<member name="M:Unigine.FieldSpacer.setEllipse(bool)">
			<summary>
			Transforms a cube-shaped field spacer into an ellipse-shaped one or vice versa.
			</summary> 
			<param name="ellipse"> true for the ellipse-shaped Field Spacer, false for the field spacer in a form of a cube. </param> 
		</member>
		<member name="M:Unigine.FieldSpacer.isEllipse const">
			<summary>
			Returns the value indicating if the field spacer is of an ellipse shape.
			</summary>  
			<returns>true if the Field Spacer is of an ellipse shape; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FieldSpacer.setSize(Unigine.Math.vec3)">
			<summary>
			Sets a size for the field spacer:											If the field spacer is of an ellipse shape, its radius values along the axes must be set.						Otherwise, dimensions of the cube must be set.
			</summary> 
			<param name="size"> Size of the field spacer along the X, Y, and Z axes to be set in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.FieldSpacer.getSize const">
			<summary>
			Returns the size of the Field Spacer:											If the field spacer is of an ellipse shape, its radius values along the axes will be returned.						Otherwise, dimensions of the cube will be returned.
			</summary>  
			<returns>Size of the Field Spacer in units.</returns>
		</member>
		<member name="M:Unigine.FieldSpacer.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>FieldSpacer type identifier.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.#ctor">
			<summary>
			Constructor. Creates a new empty FieldWeather instance with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.FieldWeather.setAttenuation(float)">
			<summary>
			Sets the attenuation factor value. This parameter indicates how much the coverage texture attenuates starting from the center of the FieldWeather to its edges.
			</summary> 
			<param name="attenuation"> Attenuation factor value within the [0.0f; 1.0f] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getAttenuation const">
			<summary>
			Returns current attenuation factor value. This parameter indicates how much the coverage texture attenuates starting from the center of the FieldWeather to its edges.
			</summary>  
			<returns>Attenuation factor value within the [0.0f; 1.0f] range. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setAttenuationType(int)">
			<summary>
			Sets the type of attenuation shape.
			</summary> 
			<param name="type"> Attenuation shape type:0 - sphere.1 - box. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getAttenuationType const">
			<summary>
			Returns the current type of attenuation shape.
			</summary>  
			<returns>Attenuation shape type:0 - sphere.1 - box.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setCloudsAnimationOffset(Unigine.Math.vec3)">
			<summary>
			Sets the offset of the FieldWeather coverage texture.
			</summary> 
			<param name="offset"> Coverage texture offset. A vec3 vector with components representing the offset values of the coverage texture along the X, Y and Z axes. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getCloudsAnimationOffset const">
			<summary>
			Sets the offset of the FieldWeather coverage texture.
			</summary>  
			<returns>Coverage texture offset. A vec3 vector with components representing the offset values of the coverage texture along the X, Y and Z axes.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets a given texture as a coverage texture of the FieldWeather.
			</summary> 
			<param name="texture"> Texture instance. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getTexture const">
			<summary>
			Grabs the current coverage texture of the FieldWeather and puts it into the given Texture instance.
			</summary>  
			<returns>Texture instance to grab the coverage texture into.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setTextureImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets the given image as the coverage texture of the FieldWeather.
			</summary> 
			<param name="image"> Image instance with a coverage texture for the FieldWeather. </param> 
			<returns>1 if the coverage texture was set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.getTextureImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Grabs the coverage texture of the FieldWeather (already loaded to GPU) and saves it into the given Image instance.
			</summary> 
			<param name="image"> Image instance into which the current coverage texture will be grabbed. </param> 
			<returns>1 if the coverage texture was grabbed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setTexturePath(char)">
			<summary>
			Sets the new path to the FieldWeather's coverage texture.
			</summary> 
			<param name="path"> Path to the coverage texture. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getTexturePath const">
			<summary>
			Returns the current path to the FieldWeather's coverage texture.
			</summary>  
			<returns>Path to the coverage texture.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setIntensity(float)">
			<summary>
			Sets the intensity of the FieldWeather. This parameter determines the degree of impact of the FieldWeather coverage texture on the clouds.
			</summary> 
			<param name="intensity"> Intensity value within the [0.0f; 1.0f] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getIntensity const">
			<summary>
			Returns current intensity of the FieldWeather. This parameter determines the degree of impact of the FieldWeather coverage texture on the clouds.
			</summary>  
			<returns>Intensity value within the [0.0f; 1.0f] range. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setPower(float)">
			<summary>
			Sets the power value for the FieldWeather coverage texture. This parameter derermines the contrast of the coverage texture and makes it possible to gradually increase cloudiness without changing the coverage texture.					For this parameter to work properly, the coverage texture must not contain absolotely black pixels.
			</summary> 
			<param name="power"> Power value within the [0.0f; 1.0f] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getPower const">
			<summary>
			Returns the current power value for the FieldWeather coverage texture. This parameter derermines the contrast of the coverage texture and makes it possible to gradually increase cloudiness without changing the coverage texture.
			</summary>  
			<returns>Power value within the [0.0f; 1.0f] range. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setSize(Unigine.Math.vec3)">
			<summary>
			Sets the size of the FieldWeather.
			</summary> 
			<param name="size"> FieldWeather size. A vec3 vector with components representing the sizes along the X, Y and Z axes, in units. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getSize const">
			<summary>
			Returns the current size of the FieldWeather.
			</summary>  
			<returns>FieldWeather size. A vec3 vector with components representing the sizes along the X, Y and Z axes, in units.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setWindEnabled(int)">
			<summary>
			Enables or disables local wind inside the FieldWeather.
			</summary> 
			<param name="enabled"> 1 value to enable local wind, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getWindEnabled const">
			<summary>
			Returns a value indicating if local wind inside the FieldWeather is enabled.
			</summary>  
			<returns>1 if local wind is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.setWindAnimation(Unigine.Math.vec3)">
			<summary>
			Sets the local wind speed in X, Y and Z directions. The wind along X and Y axes shifts local coverage texture at the specified rates in the corresponding directions. This parameter can be used to animate clouds inside the weather field. The texture shifting is looped inside the field, as the wind affects only its offset.					Setting wind speed values to 0 does not return the texture to its initial state. In order to return the initial state disable local wind by using the setWindEnabled() method.
			</summary> 
			<param name="animation"> Local wind speed vec3 vector with components representing the wind speed values in the X, Y and Z directions. </param> 
		</member>
		<member name="M:Unigine.FieldWeather.getWindAnimation const">
			<summary>
			Returns the current local wind speed in X, Y and Z directions.
			</summary>  
			<returns>Local wind speed vec3 vector with components representing the wind speed values in the X, Y and Z directions.</returns>
		</member>
		<member name="M:Unigine.FieldWeather.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>FieldWeather type identifier.</returns>
		</member>
	</members>
</doc>