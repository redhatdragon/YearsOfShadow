<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Node.getAncestor(int)">
			<summary>
			Returns a node ancestor by its number.
			</summary> 
			<param name="num"> Ancestor ID. </param> 
			<returns>Ancestor node.</returns>
		</member>
		<member name="M:Unigine.Node.getBodyAngularVelocity">
			<summary>
			Returns the angular velocity of the node's physical body in the world space.
			</summary>  
			<returns>Angular velocity in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.getBoundBox">
			<summary>
			Returns the bounding box of the node.					The coordinates of the bounding box are in the node's local coordinate system. To get the bounding box in world coordinates, use the getWorldBoundBox() method.
			</summary>  
			<returns>Bounding box of the node.</returns>
		</member>
		<member name="M:Unigine.Node.getBoundSphere">
			<summary>
			Returns the bounding sphere of the node.					The coordinates of the bounding sphere are in the node's local coordinate system. To get the bounding sphere in world coordinates, use the getWorldBoundSphere() method.
			</summary>  
			<returns>Bounding sphere of the node.</returns>
		</member>
		<member name="M:Unigine.Node.getChild(int)">
			<summary>
			Returns a node child by its number.
			</summary> 
			<param name="num"> Child ID. </param> 
			<returns>Child node.</returns>
		</member>
		<member name="M:Unigine.Node.isChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Checks if a given node is a child of the node.
			</summary> 
			<param name="n"> Node to check. </param> 
			<returns>true if the given node is a child; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setChildIndex(Unigine.Ptr{Unigine.Node},int)">
			<summary>
			Sets the index for a given child node of the node.
			</summary> 
			<param name="n"> Child node. </param>
			<param name="index"> Node index. </param> 
		</member>
		<member name="M:Unigine.Node.getChildIndex(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns the index of a given child node of the node.
			</summary> 
			<param name="n"> Child node. </param> 
			<returns>Node index.</returns>
		</member>
		<member name="M:Unigine.Node.setImmovable(bool)">
			<summary>
			Sets a value indicating if the node represents an immovable (clutter) object, which means it is moved to a separate spatial tree for immovable (static) objects optimizing node management.
			</summary> 
			<param name="immovable"> true to mark the node as an immovable object; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Node.isImmovable">
			<summary>
			Returns a value indicating if the node is an immovable (clutter) object, which means it is moved to a separate spatial tree for immovable (static) objects optimizing node management.
			</summary>  
			<returns>true if the node is a clutter object; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setClutterInteractionEnabled(bool)">
			<summary>
			Sets a value indicating if interaction with World Clutters and Mesh Clutters is enabled for the node.					It is recommended to disable this option for better performance, when cutting node out of clutters is not necessary. Especially when the world contains a significant number of such nodes.
			</summary>  
		</member>
		<member name="M:Unigine.Node.isClutterInteractionEnabled">
			<summary>
			Returns a value indicating if interaction with World Clutters and Mesh Clutters is enabled for the node.					It is recommended to disable this option for better performance, when cutting node out of clutters is not necessary. Especially when the world contains a significant number of such nodes.
			</summary>  
			<returns>true if interaction with World Clutters and Mesh Clutters is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setGrassInteractionEnabled(bool)">
			<summary>
			Sets a value indicating if interaction with Grass nodes is enabled for the node.					It is recommended to disable this option for better performance, when cutting node out of grass is not necessary. Especially when the world contains a significant number of such nodes.
			</summary> 
			<param name="enabled"> true to enable interaction with Grass nodes, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Node.isGrassInteractionEnabled">
			<summary>
			Returns a value indicating if interaction with Grass nodes is enabled for the node.					It is recommended to disable this option for better performance, when cutting node out of grass is not necessary. Especially when the world contains a significant number of such nodes.
			</summary>  
			<returns>true if interaction with Grass nodes is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setTriggerInteractionEnabled(bool)">
			<summary>
			Sets a value indicating if interaction with WorldTrigger nodes is enabled for the node.					It is recommended to disable this option for better performance, when node interaction with World Triggers is not necessary. Especially when the world contains a significant number of such nodes.
			</summary> 
			<param name="enabled"> 1 to enable interaction with World Triggers, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Node.isTriggerInteractionEnabled">
			<summary>
			Returns a value indicating if interaction with WorldTrigger nodes is enabled for the node.					It is recommended to disable this option for better performance, when node interaction with World Triggers is not necessary. Especially when the world contains a significant number of such nodes.
			</summary>  
			<returns>true if interaction with WorldTrigger nodes is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setData(char,char)">
			<summary>
			Sets user data associated with the node.											If the node was loaded from the *.node file, data is saved directly into the data tag of this file.						If the node is loaded from the *.world file, data is saved into the Node data tag of the *.world file.						If the node is loaded from the *.world file as a NodeReference, data will be saved to the NodeReference data tag of the *.world file.
			</summary> 
			<param name="name"> String containing a key identifying user data to be stored in the *.node file.The "editor_data" key is reserved for the UnigineEditor. </param>
			<param name="data"> New user data. Data can contain an XML formatted string. </param> 
		</member>
		<member name="M:Unigine.Node.getData(char)">
			<summary>
			Returns user data associated with the node.											If the node was loaded from the *.node file, data from the data tag of this file is returned.						If the node is loaded from the *.world file, data from the Node data tag of the *.world file is returned.						If the node is loaded from the *.world file as a NodeReference, data from the NodeReference data tag of the *.world file is returned.
			</summary> 
			<param name="name"> String containing a key identifying user data stored in the *.node file.The "editor_data" key is reserved for the UnigineEditor. </param> 
			<returns>User string data. Data can be an xml formatted string.</returns>
		</member>
		<member name="M:Unigine.Node.isDecal const">
			<summary>
			Returns a value indicating if the node is a decal node (its type is DECAL_*).
			</summary>  
			<returns>true if the node is a decal node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setEnabled(bool)">
			<summary>
			Enables or disables the node.
			</summary> 
			<param name="enabled"> true to enable the node, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Node.updateEnabled">
			<summary>
			Updates node's internal state according to the current "enabled" state.
			</summary>  
		</member>
		<member name="M:Unigine.Node.isEnabled">
			<summary>
			Returns a value indicating if the node and its parent nodes are enabled.
			</summary>  
			<returns>true if the node and its parent nodes are enabled; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.Node.isEnabledSelf">
			<summary>
			Returns a value indicating if the node is enabled.
			</summary>  
			<returns>true if the node is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.isExtern">
			<summary>
			Returns a value indicating if the node is an extern node (its type is one of the following: NODE_EXTERN, OBJECT_EXTERN, WORLD_EXTERN).
			</summary>  
			<returns>true if the node is an extern node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.isField">
			<summary>
			Returns a value indicating if the node is a field node (its type is one of the FIELD_*).
			</summary>  
			<returns>true if the node is a field node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.isGeodetic const">
			<summary>
			Returns a value indicating if the node is a geodetic-related node.
			</summary>  
			<returns>true if the node is a geodetic-related node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.getGeodeticPivot">
			<summary>
			Returns a pointer to geodetic pivot of the node.
			</summary>  
			<returns>Geodetic pivot smart pointer, or NULL if the node is not a child of a geodetic pivot node.</returns>
		</member>
		<member name="M:Unigine.Node.setHandled(bool)">
			<summary>
			Disables or shows the node handle. This option is valid only for invisible nodes, such as light and sound sources, particle systems and world-managing nodes (WorldOccluder, triggers, expressions, etc.)
			</summary>  
		</member>
		<member name="M:Unigine.Node.isHandled">
			<summary>
			Returns a value indicating if the node handle is displayed. This option is valid only for invisible nodes, such as light and sound sources, particle systems and world-managing nodes (WorldOccluder, triggers, expressions, etc.)
			</summary>  
			<returns>true if the handle is shown; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.Node.getHierarchy(Unigine.Vector{Unigine.Ptr{Unigine.Node},int,Unigine.VectorAllocator})">
			<summary>
			Retrieves the whole hierarchy of the node and puts it to the hierarchy buffer.
			</summary> 
			<param name="hierarchy"> Hierarchy buffer. </param> 
		</member>
		<member name="M:Unigine.Node.setID(int) const">
			<summary>
			Sets a unique ID for the node.
			</summary> 
			<param name="id"> Node ID. </param> 
		</member>
		<member name="M:Unigine.Node.getID">
			<summary>
			Returns the ID of the node.					See also engine.world.getNodeByID() function.
			</summary>  
			<returns>Node ID.</returns>
		</member>
		<member name="M:Unigine.Node.getIWorldTransform">
			<summary>
			Returns the inverse transformation matrix of the node for transformations in the world coordinates.
			</summary>  
			<returns>Inverse transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Node.isLight const">
			<summary>
			Returns a value indicating if the node is a light source (its type is LIGHT_*).
			</summary>  
			<returns>true if the node is a light source; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.Node.isLandscapeLayer const">
			<summary>
			Returns a value indicating if the node is a landscape layer (its type is LANDSCAPE_LAYER_*).
			</summary>  
			<returns>true if the node is a landscape layer; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.Node.getBodyLinearVelocity">
			<summary>
			Returns the linear velocity of the node's physical body in the local space.
			</summary>  
			<returns>Linear velocity in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.setName(char)">
			<summary>
			Sets a name for the node.
			</summary> 
			<param name="name"> New name of the node. </param> 
		</member>
		<member name="M:Unigine.Node.getName">
			<summary>
			Returns the name of the node.
			</summary>  
			<returns>Name of the node.</returns>
		</member>
		<member name="M:Unigine.Node.isNavigation">
			<summary>
			Returns a value indicating if a given node is a navigation node.
			</summary>  
			<returns>true if the given node is a navigation node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.getNode(int)">
			<summary>
			Returns a node pointer.
			</summary> 
			<param name="id"> Node identifier. </param> 
			<returns>Node pointer.</returns>
		</member>
		<member name="M:Unigine.Node.isNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Check the node pointer.
			</summary> 
			<param name="node"> Node pointer. </param> 
			<returns>1 if the node is valid; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.isNode(int)">
			<summary>
			Check the node pointer.
			</summary> 
			<param name="id"> Node pointer. </param> 
			<returns>1 if the node is valid; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.getNumAncestors const">
			<summary>
			Returns the number of ancestors of the node.
			</summary>  
			<returns>Number of ancestors.</returns>
		</member>
		<member name="M:Unigine.Node.getNumChildren const">
			<summary>
			Returns the number of children of the node.
			</summary>  
			<returns>Number of child nodes.</returns>
		</member>
		<member name="M:Unigine.Node.isObject">
			<summary>
			Returns a value indicating if the node is an object node  (its type is OBJECT_*).
			</summary>  
			<returns>true if the node is an object node; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.Node.getObjectBody">
			<summary>
			Returns a physical body assigned to the node if it is an object node.
			</summary>  
			<returns>Body assigned to the object node; otherwise, NULL (0).</returns>
		</member>
		<member name="M:Unigine.Node.getObjectBodyRigid">
			<summary>
			Returns a rigid body assigned to the node if it is an object node.
			</summary>  
			<returns>Rigid body assigned to the object node; otherwise, NULL (0).</returns>
		</member>
		<member name="M:Unigine.Node.isObstacle">
			<summary>
			Returns a value indicating if the node is an obstacle node (its type is OBSTACLE_*).
			</summary>  
			<returns>true if the given node is an obstacle node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setOldWorldTransform(Unigine.Math.Mat4)">
			<summary>
			Sets old (previous frame) transformation matrix for the node in world coordinates.
			</summary> 
			<param name="transform"> Old (previous frame) transformation matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Node.getOldWorldTransform">
			<summary>
			Returns old (previous frame) transformation matrix for the node in world coordinates.
			</summary>  
			<returns>Old (previous frame) transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Node.getOldWorldPosition const">
			<summary>
			Returns old (previous frame) position of the node in world coordinates.
			</summary>  
			<returns>Old (previous frame) position of the node.</returns>
		</member>
		<member name="M:Unigine.Node.setParent(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets the new parent for the node. Transformations of the current node will be done in the coordinates of the parent.
			</summary> 
			<param name="parent"> New parent node or NULL (0). </param> 
		</member>
		<member name="M:Unigine.Node.getParent">
			<summary>
			Returns the parent of the node.
			</summary>  
			<returns>Parent node or NULL (0), if the node has no parent. </returns>
		</member>
		<member name="M:Unigine.Node.isPhysical">
			<summary>
			Returns a value indicating if the node is a physical node (its type is PHYSICAL_*).
			</summary>  
			<returns>true if the node is a physical node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.isPlayer">
			<summary>
			Returns a value indicating if the node is a player node (its type is PLAYER_*).
			</summary>  
			<returns>true if the node is a player node; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.Node.setPosition(Unigine.Math.Vec3)">
			<summary>
			Sets the node position.
			</summary> 
			<param name="pos"> Node position in the local space </param> 
		</member>
		<member name="M:Unigine.Node.getPosition">
			<summary>
			Returns the node position.
			</summary>  
			<returns>Node position in the local space</returns>
		</member>
		<member name="M:Unigine.Node.getPossessor">
			<summary>
			Returns a possessor of the node. The following nodes can be possessors:											NodeReference						WorldCluster						WorldClutter						WorldLayer					This function can only be applied to a root node inside a node reference.
			</summary>  
			<returns>Node posessor, if it exists; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.getNumProperties">
			<summary>
			Returns the total number of properties associated with the node.
			</summary>  
			<returns>Total number of properties associated with the node.</returns>
		</member>
		<member name="M:Unigine.Node.addProperty(char)">
			<summary>
			Inherits a new property from the one with the given name and adds it to the list of properties associated with the node. The inherited property will be internal, such properties are saved in a *.world or *.node file.
			</summary> 
			<param name="name"> Name of the property to be added. </param> 
			<returns>Index of the new node property if it was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.addProperty(Unigine.UGUID)">
			<summary>
			Inherits a new property from the one with the given GUID and adds it to the list of properties associated with the node. The inherited property will be internal, such properties are saved in a *.world or *.node file.
			</summary> 
			<param name="guid"> GUID of the property to be added. </param> 
			<returns>Index of the new node property if it was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.addProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Inherits a new property from the specified one and adds it to the list of properties associated with the node. The inherited property will be internal, such properties are saved in a *.world or *.node file.
			</summary> 
			<param name="property"> Property to be added. </param> 
			<returns>Index of the new node property if it was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.insertProperty(int,char)">
			<summary>
			Inserts the property with the specified name at the specified position.
			</summary> 
			<param name="num"> Position at which a new property is to be inserted, in the range from 0 to the total number of node properties. </param>
			<param name="name"> Name of the property to be inserted. </param> 
		</member>
		<member name="M:Unigine.Node.insertProperty(int,Unigine.UGUID)">
			<summary>
			Inserts the property with the specified GUID at the specified position.
			</summary> 
			<param name="num"> Position at which a new property is to be inserted, in the range from 0 to the total number of node properties. </param>
			<param name="guid"> GUID of the property to be inserted. </param> 
		</member>
		<member name="M:Unigine.Node.insertProperty(int,Unigine.Ptr{Unigine.Property})">
			<summary>
			Inserts the specified property at the specified position.
			</summary> 
			<param name="num"> Position at which a new property is to be inserted, in the range from 0 to the total number of node properties. </param>
			<param name="property"> Property to be added. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(char)">
			<summary>
			Updates the first node property (the one with a 0 index) in the list of properties associated with the node. A new internal property inherited from the one with the specified name will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="name"> Name of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(Unigine.UGUID)">
			<summary>
			Updates the first node property (the one with a 0 index) in the list of properties associated with the node. A new internal property inherited from the one with the specified GUID will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="guid"> GUID of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Updates the first node property (the one with a 0 index) in the list of properties associated with the node. A new internal property inherited from the one specified will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="property"> Property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(int,char)">
			<summary>
			Updates the node property with the specified number. A new internal property inherited from the one with the specified name will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="name"> Name of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(int,Unigine.UGUID)">
			<summary>
			Updates the node property with the specified number. A new internal property inherited from the one with the specified GUID will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="guid"> GUID of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(int,Unigine.Ptr{Unigine.Property})">
			<summary>
			Updates the node property with the specified number. A new internal property inherited from the specified one will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="property"> Property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setPropertyEnabled(int,bool)">
			<summary>
			Enables or disables the node property with the specified number.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="enable"> true to enable the specified node property, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Node.isPropertyEnabled(int)">
			<summary>
			Returns a value indicating if the node property with the specified number is enabled.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
			<returns>true if the specified property is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.swapProperty(int,int)">
			<summary>
			Swaps two properties with specified numbers in the list of properties associated with the node.					The order of properties in the list determines the execution sequence of logic of corresponding components (if any).
			</summary> 
			<param name="from_num"> Number of the first node property to be swapped, in the range from 0 to the total number of node properties. </param>
			<param name="to_num"> Number of the second node property to be swapped, in the range from 0 to the total number of node properties. </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(int)">
			<summary>
			Removes the node property with the specified number.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(char)">
			<summary>
			Removes the node property that has the specified name.					If several properties with the same name are associated with the node, only the first one will be removed.
			</summary> 
			<param name="name"> Name of the node property to be removed. </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(Unigine.UGUID)">
			<summary>
			Removes the node property that has the GUID or parent GUID equal to the specified one.					If several such properties are associated with the node, only the first one will be removed.
			</summary> 
			<param name="guid"> GUID of the property to be removed (or GUID of its parent). </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Removes the specified node property or a node property inherited from it.					If several such properties are associated with the node, only the first one will be removed.
			</summary> 
			<param name="property"> Node property to be removed. </param> 
		</member>
		<member name="M:Unigine.Node.clearProperties">
			<summary>
			Clears the list of properties associated with the node.
			</summary>  
		</member>
		<member name="M:Unigine.Node.getProperty(int)">
			<summary>
			Returns a node property with the specified number if it exists.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
			<returns>Node property smart pointer, if exists; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.getPropertyName(int)">
			<summary>
			Returns the name of a node property with the specified number.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
			<returns>Property name, if exists; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.findProperty(char)">
			<summary>
			Searches for a property with the specified name among the ones assigned to the node.
			</summary> 
			<param name="name"> GUID of a node property to be found. </param> 
			<returns>Node property number in the range from 0 to the total number of node properties if such a property exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findProperty(Unigine.UGUID)">
			<summary>
			Searches for a property with the specified GUID among the ones assigned to the node.
			</summary> 
			<param name="guid"> GUID of a node property to be found. </param> 
			<returns>Node property number in the range from 0 to the total number of node properties if such a property exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Searches for a specified property among the ones assigned to the node.
			</summary> 
			<param name="property"> Node property to be found. </param> 
			<returns>Node property number in the range from 0 to the total number of node properties if such a property exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.setQuery(bool)">
			<summary>
			Updates a value indicating if occlusion query is used for the node.
			</summary> 
			<param name="query"> true to use occlusion query, false not to use. </param> 
		</member>
		<member name="M:Unigine.Node.isQuery">
			<summary>
			Returns a value indicating if occlusion query is used for the node. The default is false (not used).
			</summary>  
			<returns>true if occlusion query is used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.hasQueryForce const">
			<summary>
			Returns a value indicating if the Culled By Occlusion Query option is force-enabled for the node by the Engine.
			</summary>  
			<returns>true if the Culled By Occlusion Query option is force-enabled for the node by the Engine; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.getRootNode">
			<summary>
			Returns the root node for the node. This method searches for the root node among all node's parents and posessors up the hierarchy. If a node does not have a parent or posessor the node itself will be returned.
			</summary>  
			<returns>Root node for the node.</returns>
		</member>
		<member name="M:Unigine.Node.setRotation(Unigine.Math.quat,bool)">
			<summary>
			Sets the node rotation.
			</summary> 
			<param name="rot"> Quaternion representing node rotation in the local space. </param>
			<param name="identity"> Flag indicating if node's scale is to be ignored or taken into account:false - node's scale is taken into account. In this case additional calculations are performed to extract current node's scale and apply it when building the final transformation matrix. These additional operations reduce performance and may lead to error accumulation.true - node's scale is ignored (assumed to be equal to 1 along all axes). Thus, the number of calculations performed for each rotation is reduced and error accumulation is minimal. </param>
			<param name="identity"> It is recommended to set this flag for all non-scaled nodes to improve performance and accuracy.Scaling of nodes should be avoided whenever possible, as it requires addidional calculations and may lead to error accumulation. </param> 
		</member>
		<member name="M:Unigine.Node.getRotation">
			<summary>
			Returns the node rotation.
			</summary>  
			<returns>Quaternion representing node rotation in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldRotation(Unigine.Math.quat,bool)">
			<summary>
			Sets the node rotation in the world space.
			</summary> 
			<param name="rot"> Node rotation in the world space. </param>
			<param name="identity"> Flag indicating if node's scale is to be ignored or taken into account:false - node's scale is taken into account. In this case additional calculations are performed to extract current node's scale and apply it when building the final transformation matrix. These additional operations reduce performance and may lead to error accumulation.true - node's scale is ignored (assumed to be equal to 1 along all axes). Thus, the number of calculations performed for each rotation is reduced and error accumulation is minimal. </param>
			<param name="identity"> It is recommended to set this flag for all non-scaled nodes to improve performance and accuracy.Scaling of nodes should be avoided whenever possible, as it requires addidional calculations and may lead to error accumulation. </param> 
		</member>
		<member name="M:Unigine.Node.getWorldRotation">
			<summary>
			Returns the node rotation in the world space.
			</summary>  
			<returns>Node rotation in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.setScale(Unigine.Math.vec3)">
			<summary>
			Sets the scale of the node.					Scaling of nodes should be avoided whenever possible as it requires addidional calculations and may lead to error accumulation.
			</summary> 
			<param name="s"> Node scale in the local space. </param> 
		</member>
		<member name="M:Unigine.Node.getScale">
			<summary>
			Returns the scale of the node.
			</summary>  
			<returns>Node scale in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.isSound">
			<summary>
			Returns a value indicating if the node is a sound node (its type is SOUND_*).
			</summary>  
		</member>
		<member name="M:Unigine.Node.setTransform(Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the node in local coordinates.
			</summary> 
			<param name="transform"> New transformation matrix to be set for the node (local coordinates). </param> 
		</member>
		<member name="M:Unigine.Node.setTransformWithoutChildren(Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the node in local coordinates (transformations of all node's children are not affected). This method can be used to change node's transformation relative to its children.
			</summary> 
			<param name="transform"> New transformation matrix to be set for the node (local coordinates). </param> 
		</member>
		<member name="M:Unigine.Node.getTransform">
			<summary>
			Returns the transformation matrix of the node in local coordinates.
			</summary>  
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Node.getType const">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Node type identifier.</returns>
		</member>
		<member name="M:Unigine.Node.getTypeID(char)">
			<summary>
			Returns the ID of a node type with a given name.
			</summary> 
			<param name="type"> Node type name. </param> 
			<returns>Node type ID, if such type exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.getTypeName">
			<summary>
			Returns a name of the node type.
			</summary>  
			<returns>Node type name.</returns>
		</member>
		<member name="M:Unigine.Node.getTypeName(Node::TYPE) const">
			<summary>
			Returns the name of a node type with a given ID.
			</summary> 
			<param name="type"> Node type ID. </param> 
			<returns>Node type name.</returns>
		</member>
		<member name="M:Unigine.Node.setVariable(char,Unigine.Variable)">
			<summary>
			Sets the value of a variable with a given name. If such variable does not exist it will be added with a specified value.
			</summary> 
			<param name="name"> Variable name. </param>
			<param name="v"> Variable value. </param> 
		</member>
		<member name="M:Unigine.Node.setVariable(Unigine.Variable)">
			<summary>
			Sets the value of the single unnamed variable parameter of the node. If this variable does not exist it will be created with a specified value.
			</summary> 
			<param name="v"> Variable value. </param> 
		</member>
		<member name="M:Unigine.Node.getVariable(char)">
			<summary>
			Returns the variable with a given name.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Variable if it exists; otherwise, variable with 0 value.</returns>
		</member>
		<member name="M:Unigine.Node.getVariable">
			<summary>
			Returns the single unnamed variable parameter of the node.
			</summary>  
			<returns>Variable if it exists; otherwise, variable with 0 value.</returns>
		</member>
		<member name="M:Unigine.Node.isWorld const">
			<summary>
			Returns a value indicating if the node is a world node (its type is WORLD_*).
			</summary>  
			<returns>true if the node is a world node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.getWorldBoundBox">
			<summary>
			Returns the bounding box of the node in world's coordinate system.
			</summary>  
			<returns>World bounding box.</returns>
		</member>
		<member name="M:Unigine.Node.getWorldBoundSphere">
			<summary>
			Returns the bounding sphere of the node in world's coordinate system.
			</summary>  
			<returns>World bounding sphere.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldParent(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets the new parent of the node. Transformations of the current node will be done in the world coordinates.
			</summary> 
			<param name="n"> New parent node or NULL (0). </param> 
		</member>
		<member name="M:Unigine.Node.setWorldPosition(Unigine.Math.Vec3)">
			<summary>
			Sets the node position in the world coordinates.
			</summary>  
			<returns>Node position in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.getWorldPosition">
			<summary>
			Returns the node position in the world coordinates.
			</summary>  
			<returns>Node position in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldScale(Unigine.Math.vec3)">
			<summary>
			Sets the node scale in the world space.					Scaling of nodes should be avoided whenever possible as it requires addidional calculations and may lead to error accumulation.
			</summary> 
			<param name="s"> Node scale in the world space. </param> 
		</member>
		<member name="M:Unigine.Node.getWorldScale">
			<summary>
			Returns the node scale in the world space.
			</summary>  
			<returns>Node scale in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldTransform(Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the node in world coordinates.
			</summary> 
			<param name="transform"> New transformation matrix to be set for the node (world coordinates). </param> 
		</member>
		<member name="M:Unigine.Node.setWorldTransformWithoutChildren(Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the node in world coordinates (transformations of all node's children are not affected). This method can be used to change node's transformation relative to its children.
			</summary> 
			<param name="transform"> New transformation matrix to be set for the node (world coordinates). </param> 
		</member>
		<member name="M:Unigine.Node.getWorldTransform">
			<summary>
			Returns the transformation matrix of the node in the world coordinates.
			</summary>  
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Node.getBodyWorldVelocity(Unigine.Math.Vec3)">
			<summary>
			Returns linear velocity of a point of the node's physical body in the world space.
			</summary>  
			<returns>Linear velocity in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.addChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Adds a child to the node. Transformations of the new child will be done in the coordinates of the parent.
			</summary> 
			<param name="n"> New child node. </param> 
		</member>
		<member name="M:Unigine.Node.addWorldChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Adds a child to the node. Transformations of the new child will be done in the world coordinates.
			</summary> 
			<param name="n"> New child node. </param> 
		</member>
		<member name="M:Unigine.Node.clone const">
			<summary>
			Clones the node.
			</summary>  
			<returns>Cloned node.</returns>
		</member>
		<member name="M:Unigine.Node.findAncestor(int)">
			<summary>
			Returns the ID of node's ancestor of a given type.
			</summary> 
			<param name="type"> Ancestor type identifier. One of the NODE_* pre-defined variables. </param> 
			<returns>Ancestor ID if it exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findAncestor(char)">
			<summary>
			Returns the ID of node's ancestor with a given name.
			</summary> 
			<param name="name"> Ancestor name. </param> 
			<returns>Ancestor ID if it exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findChild(char)">
			<summary>
			Searches for a child node with a given name among the children of the node.
			</summary> 
			<param name="name"> Name of the child node. </param> 
			<returns>Child node number, if it is found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.findNode(char,int)">
			<summary>
			Searches for a node with a given name among the children of the node.
			</summary> 
			<param name="name"> Name of the child node. </param>
			<param name="recursive"> 1 if the search is recursive (i.e. performed for children of child nodes); otherwise, 0. </param> 
			<returns>Child node, if it is found; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.hasVariable(char)">
			<summary>
			Returns a value indicating if the node has a variable parameter with a given name.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>1 if the node has a variable parameter with a given name; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.hasVariable">
			<summary>
			Returns a value indicating if the node has a single unnamed variable parameter.
			</summary>  
			<returns>1 if the node has a single unnamed variable parameter; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads a node state from the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
		</member>
		<member name="M:Unigine.Node.removeChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Removes a child node (added by the addChild() method) from the list of children.
			</summary> 
			<param name="n"> Child node to remove. </param> 
		</member>
		<member name="M:Unigine.Node.removeVariable(char)">
			<summary>
			Removes a variable parameter with a given name.
			</summary> 
			<param name="name"> Variable parameter name. </param> 
		</member>
		<member name="M:Unigine.Node.removeWorldChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Removes a child node (added by the addWorldChild() method) from the list of children.
			</summary> 
			<param name="n"> Child node to remove. </param> 
		</member>
		<member name="M:Unigine.Node.renderVisualizer">
			<summary>
			Renders a bounding box / sphere of the object.					You should enable the engine visualizer by the						show_visualizer 1 console command.
			</summary>  
		</member>
		<member name="M:Unigine.Node.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves a node state to a binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if node state is successfully saved; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores a node state from a binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if node state is successfully restored; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.saveWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Saves the node into the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>true if the node is successfully saved; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.swap(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Swaps two nodes.
			</summary> 
			<param name="n"> Node to swap. </param> 
		</member>
		<member name="M:Unigine.Node.toLocal(Unigine.Math.Vec3)">
			<summary>
			Converts a given vector in the world space to the node's local space.
			</summary> 
			<param name="p"> Vector in the world space. </param> 
			<returns>Vector in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.toWorld(Unigine.Math.vec3)">
			<summary>
			Converts a given vector in the local space to the world space.
			</summary> 
			<param name="p"> Vector in the local space. </param> 
			<returns>Vector in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.translate(Unigine.Math.Vec3)">
			<summary>
			Translates the node relative to its local coordinate system: the parent node transformation isn't taken into account.
			</summary> 
			<param name="t"> Translation vector. </param> 
		</member>
		<member name="M:Unigine.Node.translate(Unigine.Math.Scalar,Unigine.Math.Scalar,Unigine.Math.Scalar)">
			<summary>
			Translates the node relative to its local coordinate system: the parent node transformation isn't taken into account.
			</summary> 
			<param name="x"> Node translation along the X axis, in units. </param>
			<param name="y"> Node translation along the Y axis, in units. </param>
			<param name="z"> Node translation along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Node.worldTranslate(Unigine.Math.Vec3)">
			<summary>
			Translates the node in the world space using the specified vector.
			</summary> 
			<param name="t"> Translation vector. </param> 
		</member>
		<member name="M:Unigine.Node.worldTranslate(Unigine.Math.Scalar,Unigine.Math.Scalar,Unigine.Math.Scalar)">
			<summary>
			Translates the node in the world space using the values specified for the corresponding axes.
			</summary> 
			<param name="x"> Node translation along the X axis, in units. </param>
			<param name="y"> Node translation along the Y axis, in units. </param>
			<param name="z"> Node translation along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Node.worldLookAt(Unigine.Math.Vec3,Unigine.Math.vec3)">
			<summary>
			Reorients the node to "look" at the target point and sets the given up vector:											If the node is a Player-related one, it will "look" at the target point along the negative Z axis. The Y axis will be oriented along the specified up vector.						Other nodes will "look" at the target point along the Y axis. The Z axis will be oriented along the specified up vector.
			</summary> 
			<param name="target"> Coordinates of the target point in the world space. </param>
			<param name="up"> Up vector of the node in the world space. By default, the up vector is oriented along the Z axis. </param> 
		</member>
		<member name="M:Unigine.Node.worldLookAt(Unigine.Math.Vec3)">
			<summary>
			Reorients the node to "look" at the target point. The up vector is oriented along the Z axis.											If the node is a Player-related one, it will "look" at the target point along the negative Z axis. The Y axis will be oriented along the world Z axis.						Other nodes will "look" at the target point along the Y axis.
			</summary> 
			<param name="target"> Coordinates of the target point in the world space. </param> 
		</member>
		<member name="M:Unigine.Node.rotate(Unigine.Math.quat)">
			<summary>
			Rotates the node relative to its local coordinate system: the parent node transformation isn't taken into account. Rotation is determined by the specified quaternion.
			</summary> 
			<param name="r"> Rotation quaternion. </param> 
		</member>
		<member name="M:Unigine.Node.rotate(Unigine.Math.vec3)">
			<summary>
			Rotates the node in the local space. Rotation is determined by Euler angles passed as a vec3 vector.
			</summary>  
		</member>
		<member name="M:Unigine.Node.rotate(float,float,float)">
			<summary>
			Rotates the node in the world space according to specified Euler angles.
			</summary> 
			<param name="angle_x"> Pitch angle, in degrees. </param>
			<param name="angle_y"> Roll angle, in degrees. </param>
			<param name="angle_z"> Yaw angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Node.worldRotate(Unigine.Math.quat)">
			<summary>
			Rotates the node in the world space. Rotation is determined by the specified quaternion.
			</summary> 
			<param name="r"> Rotation quaternion. </param> 
		</member>
		<member name="M:Unigine.Node.worldRotate(Unigine.Math.vec3)">
			<summary>
			Rotates the node in the world space. Rotation is determined by Euler angles passed as a vec3 vector.
			</summary> 
			<param name="angles"> Vector containing Euler angles (Pitch, Yaw, Roll). </param> 
		</member>
		<member name="M:Unigine.Node.worldRotate(float,float,float)">
			<summary>
			Rotates the node in the world space according to specified Euler angles.
			</summary> 
			<param name="angle_x"> Pitch angle, in degrees. </param>
			<param name="angle_y"> Roll angle, in degrees. </param>
			<param name="angle_z"> Yaw angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Node.addCallback(Unigine.Node.CALLBACK_INDEX,Unigine.CallbackBase2{Unigine.Ptr{Unigine.Node},Unigine.Ptr{Unigine.Property}})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when adding or removing node and surface properties as well as when swapping node properties. The signature of the callback function must be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Node.addCallback(Unigine.Node.CALLBACK_INDEX,Unigine.CallbackBase3{Unigine.Ptr{Unigine.Node},Unigine.Ptr{Unigine.Property},int})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when adding or removing node and surface properties as well as when swapping node properties. The signature of the callback function must be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Node.addCallback(Unigine.Node.CALLBACK_INDEX,Unigine.CallbackBase3{Unigine.Ptr{Unigine.Node},int,int})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when adding or removing node and surface properties as well as when swapping node properties. The signature of the callback function must be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Node.removeCallback(Unigine.Node.CALLBACK_INDEX,void)">
			<summary>
			Removes the specified callback from the list of callbacks of the specified type. Callback functions can be used to determine actions to be performed when adding or removing node and surface properties as well as when swapping node properties.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback of the specified type with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Node.clearCallbacks(Unigine.Node.CALLBACK_INDEX)">
			<summary>
			Clears all added callbacks of the specified type. Callback functions can be used to determine actions to be performed when adding or removing node and surface properties as well as when swapping node properties.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param> 
		</member>
		<member name="M:Unigine.Node.setDirection(Unigine.Math.vec3,Unigine.Math.vec3,MathLib::AXIS)">
			<summary>
			Updates the direction vector of the node and reorients this node: the specified axis of the node becomes oriented along the specified vector in local coordinates. For example, after running the code below, you will get the X axis of the node pointed along the Y axis in local coordinates.
			</summary> 
			<param name="dir"> New direction vector in local coordinates. The direction vector always has unit length. </param>
			<param name="up"> New up vector in local coordinates. If you skip this argument, the Z axis (in local coordinates) will be used. Note that the specified up vector is a hint vector only: the node's up vector points in the direction hinted by the specified up vector. The node's up vector matches the specified up vector (up) only if it is perpendicular to the specified direction vector (dir).  </param>
			<param name="axis"> Axis along which the direction vector should be pointed. The default is the negative Z axis. </param> 
		</member>
		<member name="M:Unigine.Node.getDirection(MathLib::AXIS)">
			<summary>
			Returns the normalized direction vector pointing along the given node axis in local coordinates (i.e. relative to the node's parent). By default, the direction vector pointing along the negative Z axis of the node (in local coordinates) is returned. The direction vector always has a unit length.
			</summary> 
			<param name="axis"> Axis along which the direction vector points. The default is the negative Z axis. </param> 
			<returns>Direction vector in local coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldDirection(Unigine.Math.vec3,Unigine.Math.vec3,MathLib::AXIS)">
			<summary>
			Updates the direction vector of the node and reorients this node: the specified axis of the node becomes oriented along the specified vector in world coordinates. For example, after running the code below, you will get the X axis of the node pointed along the Y axis in world coordinates:
			</summary> 
			<param name="dir"> New direction vector in world coordinates. The direction vector always has unit length. </param>
			<param name="up"> New up vector in world coordinates. If you skip this argument, the Z axis (in local coordinates) will be used. Note that the specified up vector is a hint vector only: the node's up vector points in the direction hinted by the specified up vector. The node's up vector matches the specified up vector (up) only if it is perpendicular to the specified direction vector (dir).  </param>
			<param name="axis"> Axis along which the direction vector should be pointed. The default is the negative Z axis. </param> 
		</member>
		<member name="M:Unigine.Node.getWorldDirection(MathLib::AXIS)">
			<summary>
			Returns the normalized direction vector pointing along the given node axis in world coordinates. By default, the direction vector pointing along the negative Z axis of the node is returned. The direction vector always has a unit length.
			</summary> 
			<param name="axis"> Axis along which the direction vector points. The default is the negative Z axis. </param> 
			<returns>Direction vector in world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getCloneNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns a node cloned from the specified original node.					This method is intended for use only inside the node clone callback.
			</summary> 
			<param name="original_node"> Original node that was cloned. </param> 
			<returns>Clone of the specified original node if it exists; otherwise the original node itself.</returns>
		</member>
		<member name="M:Unigine.Node.getCloneProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Returns a node property cloned from the specified original property.					This method is intended for use only inside the node clone callback.
			</summary> 
			<param name="original_property"> Original node property that was cloned. </param> 
			<returns>Clone of the specified original node property if it exists; otherwise the original node property itself.</returns>
		</member>
		<member name="M:Unigine.Node.setSaveToWorldEnabled(bool)">
			<summary>
			Sets a value indicating if saving to *.world file is enabled for the node.The node shall be saved to a *.world file only if this option is enabled for all of its ancestors as well.
			</summary> 
			<param name="enabled"> true to enable saving to *.world file for the node; 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Node.setSaveToWorldEnabledRecursive(bool)">
			<summary>
			Sets a value indicating if saving to *.world file is enabled for the node and all its children (if any).
			</summary> 
			<param name="enable"> true to enable saving to *.world file for the node and all its children (if any); 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Node.isSaveToWorldEnabled">
			<summary>
			Returns a value indicating if saving to *.world file is enabled for the node and all of its ancestors (if any).
			</summary>  
			<returns>true if saving to *.world file is enabled for the node and all of its ancestors (if any); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.isSaveToWorldEnabledSelf">
			<summary>
			Returns a value indicating if saving to *.world file is enabled for the node.The node shall be saved to a *.world file only if this option is enabled for all of its ancestors as well (see the isSaveToWorldEnabled() method).
			</summary>  
			<returns>true if saving to *.world file is enabled for the node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setShowInEditorEnabled(bool)">
			<summary>
			Sets a value indicating if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node.The node shall be displayed in the hierarchy only if this option is enabled for all of its ancestors as well.
			</summary> 
			<param name="enabled"> true to enable displaying in the World Hierarchy window of the UnigineEditor for the node; 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Node.setShowInEditorEnabledRecursive(bool)">
			<summary>
			Sets a value indicating if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node and all its children (if any).
			</summary> 
			<param name="enable"> true to enable displaying in the World Hierarchy window of the UnigineEditor for the node and all its children (if any); 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Node.isShowInEditorEnabled">
			<summary>
			Returns a value indicating if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node and all of its ancestors (if any).
			</summary>  
			<returns>true if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node and all of its ancestors (if any); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.isShowInEditorEnabledSelf">
			<summary>
			Returns a value indicating if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node.The node shall be displayed only if this option is enabled for all of its ancestors as well (see the isShowInEditorEnabled() method).
			</summary>  
			<returns>true if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.getLifetime">
			<summary>
			Returns the lifetime management type for the root (either parent or posessor) of the node, or for the node itself (if it is not a child and not possessed by any other node).Lifetime of each node in the hierarchy is defined by it's root (either parent or posessor). Thus, lifetime management type set for a child node that differs from the one set for the root is ignored.
			</summary>  
			<returns>Lifetime management type for the root node (see the LIFETIME enum).</returns>
		</member>
		<member name="M:Unigine.Node.getLifetimeSelf">
			<summary>
			Returns the lifetime management type set for the node itself.Lifetime of each node in the hierarchy is defined by it's root (either parent or posessor). Setting lifetime management type for a child node different from the one set for the root has no effect.
			</summary>  
			<returns>Lifetime management type for the node (see the LIFETIME enum).</returns>
		</member>
		<member name="M:Unigine.Node.setLifetime(Node::LIFETIME)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Node.getSpatialBoundBox">
			<summary>
			Returns a bounding box with world coordinates that participates in physics calculations, but doesn't take children into account. This bounding box is used by the spatial tree.
			</summary>  
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getSpatialBoundSphere">
			<summary>
			Returns a bounding sphere with world coordinates that participates in physics calculations, but doesn't take children into account. This bounding sphere is used by the spatial tree.
			</summary>  
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyBoundBox">
			<summary>
			Returns a bounding box with local coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding box recalculation when transforming nodes.
			</summary>  
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyBoundSphere">
			<summary>
			Returns a bounding sphere with local coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding sphere recalculation when transforming nodes.
			</summary>  
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyWorldBoundBox">
			<summary>
			Returns a bounding box with world coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding box recalculation when transforming nodes.
			</summary>  
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyWorldBoundSphere">
			<summary>
			Returns a bounding sphere with world coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding sphere recalculation when transforming nodes.
			</summary>  
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchySpatialBoundBox">
			<summary>
			Returns a bounding box with world coordinates that takes all children and physics into account. This bounding box is used by the spatial tree.
			</summary>  
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchySpatialBoundSphere">
			<summary>
			Returns a bounding sphere with world coordinates that takes all children and physics into account. This bounding sphere is used by the spatial tree.
			</summary>  
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getNumWorldTriggers">
			<summary>
			Returns the number of World Triggers inside which the node is located at the moment. To access any of such triggers by its number simply call the getWorldTrigger() method.
			</summary>  
			<returns>The number of World Triggers inside which the node is located at the moment, or 0 if the node is not currently inside any World Trigger.</returns>
		</member>
		<member name="M:Unigine.Node.getWorldTrigger(int)">
			<summary>
			Returns one of the World Triggers inside which the node is located at the moment by its number. For any node in the world, you can check whether it is currently inside any World Trigger and access any of such triggers by simply calling this method.
			</summary> 
			<param name="num"> Number of the World Trigger in the list of World Triggers inside which the node is located at the moment. </param> 
			<returns>World Trigger with the specified number inside which the node is located at the moment.</returns>
		</member>
		<member name="M:Unigine.Node.getLostNodePropertyGUID(int) const">
			<summary>
			Returns the GUID of a lost property assigned to the node. If for some reason a property assigned to the specified slot of the node is missing, this method can be used to get it's GUID.
			</summary> 
			<param name="num"> Target property slot number. </param> 
			<returns>Lost property GUID.</returns>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_CHANGE_ENABLED">
			<summary>
			Callback to be fired on changing node's property enabled state. Callback function signature is as follows:					void Func(Node node, Property prop, int prop_num);
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_NODE_SLOTS_CHANGED">
			<summary>
			Callback to be fired on changing the number of node's property slots. Callback function signature is as follows:					void Func(Node node, int num);
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_NODE_ADD">
			<summary>
			Node property added callback. This callback is fired when a new property is assigned to the node.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_NODE_REMOVE">
			<summary>
			Node property removed callback. This callback is fired when a property is removed from the list of node's properties.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_NODE_SWAP">
			<summary>
			Node property swapped callback. This callback is fired when two properties swap their positions in the list of node's properties.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_SURFACE_ADD">
			<summary>
			Surface property added callback. This callback is fired when a property is assigned to object's surface.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_PROPERTY_SURFACE_REMOVE">
			<summary>
			Surface property removed callback. This callback is fired when a property is removed from object's surface.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_NODE_CHANGE_ENABLED">
			<summary>
								Fired for each node that has changed its enabled state. Changing the state of the root node, causes the callback to be fired for all its children as well.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_NODE_REMOVE">
			<summary>
								Fired for each deleted node.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_NODE_SWAP">
			<summary>
								Fired only for the root node.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_NODE_CLONE">
			<summary>
								Fired only for the root node.
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_NODE_LOAD">
			<summary>
			Callback to be fired on loading a node from a file. Callback function signature is as follows:					void Func(Node node);
		</summary>
		</member>
		<member name="F:Unigine.Node.CALLBACK_CACHE_NODE_ADD">
			<summary>
								Fired only for the root node. If a nested node reference is loaded, the callback shall be fired for the node at the top of the hierarchy only, the one created by the user.
		</summary>
		</member>
		<member name="F:Unigine.Node.ANY_TYPE">
			<summary>
			Any node type.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_BEGIN">
			<summary>
			Begin of the decal nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_END">
			<summary>
			End of the decal nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_MESH">
			<summary>
			Mesh decal node. See the DecalMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_ORTHO">
			<summary>
			Orthographic decal node. See the DecalOrtho class.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_PROJ">
			<summary>
			Projected decal node. See the DecalProj class.
		</summary>
		</member>
		<member name="F:Unigine.Node.DUMMY">
			<summary>
			Dummy node. See the NodeDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.EXTERN">
			<summary>
			Extern node.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_ANIMATION">
			<summary>
			Field Animation node. See the FieldAnimation class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_BEGIN">
			<summary>
			Begin of the field nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_END">
			<summary>
			End of the field nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_HEIGHT">
			<summary>
			Field Height node. See the FieldHeight class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_SHORELINE">
			<summary>
			Field Shoreline node. See the FieldShoreline class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_SPACER">
			<summary>
			Field Spacer node. See the FieldSpacer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_WEATHER">
			<summary>
			Field Weather node. See the FieldWeather class.
		</summary>
		</member>
		<member name="F:Unigine.Node.GEODETIC_BEGIN">
			<summary>
			Begin of the geodetic nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.GEODETIC_END">
			<summary>
			End of the geodetic nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.GEODETIC_PIVOT">
			<summary>
			Geodetic Pivot node. See the GeodeticPivot class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LANDSCAPE_LAYER_BEGIN">
			<summary>
			Beginning of the landscape layers range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LANDSCAPE_LAYER_END">
			<summary>
			End of the landscape layers range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LANDSCAPE_LAYER_MAP">
			<summary>
			Landscape Layer Map. See the LandscapeLayerMap class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LAYER">
			<summary>
			Node layer containing parent layer and all its child nodes. See the NodeLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_BEGIN">
			<summary>
			Begin of the light nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_END">
			<summary>
			End of the light nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_ENVIRONMENT_PROBE">
			<summary>
			Environment probe. See the LightEnvironmentProbe class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_OMNI">
			<summary>
			Omni-directional light source. See the LightOmni class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_PROJ">
			<summary>
			Projected light source. See the LightProj class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_VOXEL_PROBE">
			<summary>
			Voxel probe. See the LightVoxelProbe class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_WORLD">
			<summary>
			World light source. See the LightWorld class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_BEGIN">
			<summary>
			Begin of the navigation nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_END">
			<summary>
			End of the navigation nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_MESH">
			<summary>
			Mesh-based navigation area across which pathfinding is performed. See the NavigationMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_SECTOR">
			<summary>
			Sector within which pathfinding is performed. See the NavigationSector class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_BEGIN">
			<summary>
			Begin of the nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_DUMMY">
			<summary>
			Dummy node. See the NodeDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_END">
			<summary>
			End of the nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_EXTERN">
			<summary>
			Extern node. See the NodeExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_LAYER">
			<summary>
			Layer node. See the NodeLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_REFERENCE">
			<summary>
			Node reference. See the NodeReference class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_TRIGGER">
			<summary>
			Node trigger. See the NodeTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_DECALS">
			<summary>
			Counter of decal node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_FIELDS">
			<summary>
			Counter of field node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_GEODETICS">
			<summary>
			Counter of geodetic node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_LIGHTS">
			<summary>
			Counter of light node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_NAVIGATIONS">
			<summary>
			Counter of navigation node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_NODES">
			<summary>
			Counter of node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_OBJECTS">
			<summary>
			Counter of object node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_OBSTACLES">
			<summary>
			Counter of obstacle node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_PHYSICALS">
			<summary>
			Counter of physical node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_PLAYERS">
			<summary>
			Counter of player node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_SOUNDS">
			<summary>
			Counter of sound node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_WORLDS">
			<summary>
			Counter of world node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_BEGIN">
			<summary>
			Begin of the object nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_BILLBOARDS">
			<summary>
			Billboards object for rendering a high number of billboards. See the ObjectBillboard class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_CLOUD_LAYER">
			<summary>
			Cloud layer object. See the ObjectCloudLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_DUMMY">
			<summary>
			Dummy object. See the ObjectDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_DYNAMIC">
			<summary>
			Dynamic object. See the ObjectDynamic class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_END">
			<summary>
			End of the object nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_EXTERN">
			<summary>
			Extern object. See the ObjectExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_GRASS">
			<summary>
			Grass. See the ObjectGrass class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_GUI">
			<summary>
			GUI object. See the ObjectGui class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_GUI_MESH">
			<summary>
			GUI mesh object. See the ObjectGuiMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_LANDSCAPE_TERRAIN">
			<summary>
			LandscapeTerrain object. See the ObjectLandscapeTerrain class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_CLUSTER">
			<summary>
			Mesh Cluster object. See the ObjectMeshCluster class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_CLUTTER">
			<summary>
			Mesh Clutter object. See the ObjectMeshClutter class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_DYNAMIC">
			<summary>
			Dynamic mesh object. See the ObjectMeshDynamic class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_SKINNED">
			<summary>
			Skinned mesh object. See the ObjectMeshSkinned class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_SPLINE_CLUSTER">
			<summary>
			Mesh Spline Cluster object. See the ObjectMeshSplineCluster class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_STATIC">
			<summary>
			Static mesh object. See the ObjectMeshStatic class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_PARTICLES">
			<summary>
			Particles object. See the ObjectParticles class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_SKY">
			<summary>
			Sky object. See the ObjectSky class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_TERRAIN_GLOBAL">
			<summary>
			Terrain global object. See the ObjectTerrainGlobal class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_TEXT">
			<summary>
			Text object. See the ObjectText class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_BOX">
			<summary>
			Volume box object. See the ObjectVolumeBox class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_OMNI">
			<summary>
			Volume omni light object. See the ObjectVolumeOmni class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_PROJ">
			<summary>
			Volume projected light object. See the ObjectVolumeProj class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_SPHERE">
			<summary>
			Volume sphere object. See the ObjectVolumeSphere class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_WATER_GLOBAL">
			<summary>
			Water global object. See the ObjectWaterGlobal class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_WATER_MESH">
			<summary>
			Water mesh object. See the ObjectWaterMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_BEGIN">
			<summary>
			Begin of the obstacle nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_BOX">
			<summary>
			Obstacle in the shape of a box avoided by pathfinding. See the ObstacleBox class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_CAPSULE">
			<summary>
			Obstacle in the shape of a capsule avoided by pathfinding. See the ObstacleCapsule class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_END">
			<summary>
			End of the obstacle nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_SPHERE">
			<summary>
			Obstacle in the shape of a sphere avoided by pathfinding. See the ObstacleSphere class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_BEGIN">
			<summary>
			Begin of the physical nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_END">
			<summary>
			End of the physical nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_FORCE">
			<summary>
			Physical force node that allows to simulate point forces applied to dynamic objects. See the PhysicalForce class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_NOISE">
			<summary>
			Physical noise node that allows to simulate force field. See the PhysicalNoise class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_TRIGGER">
			<summary>
			Physical trigger. See the PhysicalTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_WATER">
			<summary>
			Physical water object that has no visual representation. See the PhysicalWater class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_WIND">
			<summary>
			Physical wind object. See the PhysicalWind class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_ACTOR">
			<summary>
			Acting player. See the PlayerActor class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_BEGIN">
			<summary>
			Begin of the player nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_DUMMY">
			<summary>
			Dummy player. See the PlayerDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_END">
			<summary>
			End of the player nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_PERSECUTOR">
			<summary>
			Persecuting player. See the PlayerPersecutor class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_SPECTATOR">
			<summary>
			Observing player. See the PlayerSpectator class.
		</summary>
		</member>
		<member name="F:Unigine.Node.REFERENCE">
			<summary>
			Node that references an external NODE file. See the NodeReference class.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_BEGIN">
			<summary>
			Begin of the sound nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_END">
			<summary>
			End of the sound nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_REVERB">
			<summary>
			Sound reverberation zone. See the SoundReverb class.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_SOURCE">
			<summary>
			Sound source. See the SoundSource class.
		</summary>
		</member>
		<member name="F:Unigine.Node.TRIGGER">
			<summary>
			Dummy node that can fire callbacks on its enabling/disabling or repositioning. See the NodeTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_BEGIN">
			<summary>
			Begin of the world nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_CLUTTER">
			<summary>
			World clutter. See the WorldClutter class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_END">
			<summary>
			End of the world nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_EXPRESSION">
			<summary>
			Node which allows to execute arbitrary expression. See the WorldExpression class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_EXTERN">
			<summary>
			External world. See the WorldExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_OCCLUDER">
			<summary>
			World occluder. See the WorldOccluder class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_OCCLUDER_MESH">
			<summary>
			World mesh occluder. See the WorldOccluderMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_SPLINE_GRAPH">
			<summary>
			World spline graph. See the WorldSplineGraph class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_SWITCHER">
			<summary>
			Node switcher (to switch off parts of the world). See the WorldSwitcher class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_TRANSFORM_BONE">
			<summary>
			Bone defined transformer. See the WorldTransformBone class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_TRANSFORM_PATH">
			<summary>
			Path defined transformer. See the WorldTransformPath
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_TRIGGER">
			<summary>
			World trigger. See the WorldTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIFETIME_MANUAL">
			<summary>
			Node's lifetime is managed by the user. The node should be deleted manually by the user.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIFETIME_ENGINE">
			<summary>
			Node's lifetime is managed by the Engine. The node shall be deleted automatically on Engine shutdown.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIFETIME_WORLD">
			<summary>
			Node's lifetime is managed by the world. The node shall be deleted automatically on closing the world.
		</summary>
		</member>
	</members>
</doc>