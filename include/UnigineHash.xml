<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Hash class.is_need_realloc">
			<summary>
			Indicates whether reallocation is needed.
			</summary>  
			<returns>true if reallocation is needed, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.shrink">
			<summary>
			Reduces memory usage by removing unused capacity.
			</summary>  
		</member>
		<member name="M:Unigine.Hash class.do_append(Key)">
			<summary>
			Appends an element with the specified key to the hash.
			</summary> 
			<param name="key"> Key of an element to be appended. </param> 
			<returns>Pointer to Data.</returns>
		</member>
		<member name="M:Unigine.Hash class.rehash(Counter)">
			<summary>
			Rebuilds the hash based on a specified capacity.
			</summary> 
			<param name="new_capacity"> New hash capacity value. </param> 
		</member>
		<member name="M:Unigine.Hash class.begin">
			<summary>
			Returns an iterator that points to the first element in the hash.
			</summary>  
			<returns>Iterator pointing to the first element.</returns>
		</member>
		<member name="M:Unigine.Hash class.end">
			<summary>
			Returns a const iterator that points to the location succeeding the last element in the hash.
			</summary>  
			<returns>Const iterator pointing to the location after the last element.</returns>
		</member>
		<member name="M:Unigine.Hash class.keys">
			<summary>
			Returns a vector containing all the keys in the hash.
			</summary>  
			<returns>Vector of keys.</returns>
		</member>
		<member name="M:Unigine.Hash class.remove(ConstIterator)">
			<summary>
			Removes an element currently pointed to by the iterator from the hash.
			</summary> 
			<param name="it"> Iterator pointing to an element to be removed. </param> 
			<returns>true on success, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.space">
			<summary>
			Returns current capacity (number of elements the hash can currently contain).
			</summary>  
			<returns>Number of elements the hash can currently contain.</returns>
		</member>
		<member name="M:Unigine.Hash class.do_append(Key)">
			<summary>
			Appends an element with the specified key to the hash.
			</summary> 
			<param name="key"> Key of an element to be appended. </param> 
			<returns>Pointer to Data.</returns>
		</member>
		<member name="M:Unigine.Hash class.erase(ConstIterator)">
			<summary>
			Removes an element currently pointed to by the iterator from the hash.
			</summary> 
			<param name="it"> Iterator pointing to the element to be removed. </param> 
			<returns>true on success, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.erase(Iterator)">
			<summary>
			Removes an element currently pointed to by the iterator from the hash.
			</summary> 
			<param name="it"> Iterator pointing to the element to be removed. </param> 
			<returns>true on success, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.round_up(Counter)">
			<summary>
			Performs rounding and returns the result.
			</summary>  
		</member>
		<member name="M:Unigine.Hash class.swap(Hash{Key,Data,HashType,Counter})">
			<summary>
			Swaps this hash with the specified one.
			</summary> 
			<param name="hash"> Specified hash. </param> 
		</member>
		<member name="M:Unigine.Hash class.do_append(HashType,Key)">
			<summary>
			Appends an element with the specified key to the specified hash.
			</summary> 
			<param name="hash"> Specified hash. </param>
			<param name="key"> Key of an element to be appended. </param> 
			<returns>Pointer to Data.</returns>
		</member>
		<member name="M:Unigine.Hash class.rehash_data(Counter)">
			<summary>
			Rebuilds the hash.
			</summary>  
		</member>
		<member name="M:Unigine.Hash class.empty">
			<summary>
			Checks if the hash is empty or not.
			</summary>  
			<returns>1 if the hash is empty, otherwise 0</returns>
		</member>
		<member name="M:Unigine.Hash class.contains(Key)">
			<summary>
			Checks if the given key is present in the hash.
			</summary> 
			<param name="key"> Key to be looked for. </param> 
			<returns>true if the given key is present in the hash, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.clear">
			<summary>
			Removes all key-value pairs from the hash.
			</summary>  
		</member>
		<member name="M:Unigine.Hash class.do_remove(HashType,Key)">
			<summary>
			Removes an element with the specified key from the specified hash.
			</summary> 
			<param name="hash"> Specified hash. </param>
			<param name="key"> Key of an element to be removed. </param> 
			<returns>true on success, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.getKeys(Unigine.Vector{Key,int,Unigine.VectorAllocator})">
			<summary>
			Adds keys of the hash to the specified vector.
			</summary> 
			<param name="keys"> Specified vector to store the keys in. </param> 
		</member>
		<member name="M:Unigine.Hash class.reserve(Counter)">
			<summary>
			Reserves storage to avoid repeated reallocation.
			</summary> 
			<param name="size"> Hash size to be reserved. </param> 
		</member>
		<member name="M:Unigine.Hash class.erase(Key)">
			<summary>
			Removes an element having the specified key from the hash.
			</summary> 
			<param name="key"> Key of an element to be removed. </param> 
			<returns>true on success, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.do_find(Key)">
			<summary>
			Finds an element with a specified key.
			</summary> 
			<param name="key"> Key to look for. </param> 
			<returns>Data of the element with the specified key if it exists, otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Hash class.realloc">
			<summary>
			Performs memory reallocation.
			</summary>  
		</member>
		<member name="M:Unigine.Hash class.remove(Key)">
			<summary>
			Removes an element having the specified key from the hash.
			</summary> 
			<param name="key"> Key of an element to be removed. </param> 
		</member>
		<member name="M:Unigine.Hash class.remove(Iterator)">
			<summary>
			Removes an element currently pointed to by the iterator from the hash.
			</summary> 
			<param name="it"> Iterator pointing to the element to be removed. </param> 
			<returns>true on success, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Hash class.destroy">
			<summary>
			Deletes the hash.
			</summary>  
		</member>
		<member name="M:Unigine.Hash class.size">
			<summary>
			Returns the number of key-value pairs in the hash.
			</summary>  
			<returns>Number of key-value pairs in the hash.</returns>
		</member>
		<member name="M:Unigine.Hash class.end">
			<summary>
			Returns an iterator that points to the location succeeding the last element in the hash.
			</summary>  
			<returns>Iterator pointing to the location after the last element.</returns>
		</member>
		<member name="M:Unigine.Hash class.begin">
			<summary>
			Returns a const iterator that points to the first element in the hash.
			</summary>  
			<returns>Iterator pointing to the first element.</returns>
		</member>
		<member name="M:Unigine.Hash class.find(Key)">
			<summary>
			Finds an element with a specified key.
			</summary> 
			<param name="key"> Key to look for. </param> 
			<returns>Iterator pointing to the element with a specified key if it exists, or to the end of the hash if it does not.</returns>
		</member>
		<member name="M:Unigine.Hash class.find(Key)">
			<summary>
			Finds an element with a specified key.
			</summary> 
			<param name="key"> Key to look for. </param> 
			<returns>Iterator pointing to the element with a specified key if it exists, or to the end of the hash if it does not.</returns>
		</member>
	</members>
</doc>