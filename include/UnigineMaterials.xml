<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Materials.setLoadingMode(Materials::LOADING_MODE)">
			<summary>
			Sets loading mode for materials to be used by the Engine at startup. By default materials loading in UNIGINE is optimized to reduce spikes during run time as much as possible, as they are totally unacceptable for simulators, as well as for a lot of other applications. However, this approach may significantly increase memory consumption and loading time at Engine’s and Editor startup. This may be a problem in case of insufficient memory capacity or when it is necessary to perform a lot of iterations quickly (e.g. development stage). This option enables you to choose between low memory consumption  with faster loading time and smooth spikes-free run-time operation.
			</summary> 
			<param name="mode"> Materials loading mode to be used by the Engine. One of the LOADING_MODE_* values. </param> 
		</member>
		<member name="M:Unigine.Materials.getLoadingMode const">
			<summary>
			Returns the current loading mode for materials used by the Engine at startup. By default materials loading in UNIGINE is optimized to reduce spikes during run time as much as possible, as they are totally unacceptable for simulators, as well as for a lot of other applications. However, this approach may significantly increase memory consumption and loading time at Engine’s and Editor startup. This may be a problem in case of insufficient memory capacity or when it is necessary to perform a lot of iterations quickly (e.g. development stage). This option enables you to choose between low memory consumption  with faster loading time and smooth spikes-free run-time operation.
			</summary>  
			<returns>Materials loading mode currently used by the Engine. One of the LOADING_MODE_* values.</returns>
		</member>
		<member name="M:Unigine.Materials.loadMaterial(char)">
			<summary>
			Loads a material stored by the given path. The function can be used to load materials created during application execution or stored outside the data directory.
			</summary> 
			<param name="path"> A path to the material (including its name). </param> 
			<returns>A loaded material.</returns>
		</member>
		<member name="M:Unigine.Materials.isMaterialGUID(Unigine.UGUID) const">
			<summary>
			Returns a value indicating if a material with the specified GUID exists.
			</summary> 
			<param name="guid"> A material GUID. </param> 
			<returns>true if the material with the specified GUID exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Materials.getNumMaterials const">
			<summary>
			Returns the number of materials loaded for the current project.
			</summary>  
			<returns>The number of materials.</returns>
		</member>
		<member name="M:Unigine.Materials.getMaterial(int) const">
			<summary>
			Returns the material by its number.
			</summary> 
			<param name="num"> Material number. </param> 
			<returns>A material.</returns>
		</member>
		<member name="M:Unigine.Materials.findManualMaterial(char) const">
			<summary>
			Searches for a manual material by the given name.
			</summary> 
			<param name="name"> A manual material name. </param> 
			<returns>A manual material smart pointer.</returns>
		</member>
		<member name="M:Unigine.Materials.findMaterialByGUID(Unigine.UGUID) const">
			<summary>
			Searches for a material with the given GUID.
			</summary> 
			<param name="guid"> A material GUID. </param> 
			<returns>A material smart pointer.</returns>
		</member>
		<member name="M:Unigine.Materials.findMaterialByFileGUID(Unigine.UGUID) const">
			<summary>
			Searches for a material with the given GUID of a material file.
			</summary> 
			<param name="guid"> A GUID of a material file. </param> 
			<returns>A material smart pointer.</returns>
		</member>
		<member name="M:Unigine.Materials.findMaterialByPath(char) const">
			<summary>
			Searches for a material stored by the specified path.
			</summary> 
			<param name="path"> A loading path of the material (including a material's name). </param> 
			<returns>A material smart pointer.</returns>
		</member>
		<member name="M:Unigine.Materials.setCachedMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Materials.getCachedMaterial">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Materials.setCachedState(char,int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Materials.removeMaterial(Unigine.UGUID,bool,bool)">
			<summary>
			Deletes a material. If the remove_file flag is enabled, the material file will be deleted as well. If the flag is disabled, the deleted material will be loaded again on the next application start-up. If the remove_children flag is enabled, all the children of the material will be deleted as well.
			</summary> 
			<param name="guid"> GUID of the material to be removed. </param>
			<param name="remove_file"> Flag indicating if the material file will be deleted. </param>
			<param name="remove_children"> Flag indicating if all the children of the material will be also deleted. </param> 
			<returns>1 if the material is deleted successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Materials.replaceMaterial(Unigine.Ptr{Unigine.Material},Unigine.Ptr{Unigine.Material})">
			<summary>
			Replaces the material with the given one.
			</summary> 
			<param name="material"> A material to be replaced. </param>
			<param name="new_material"> A replacing material. </param> 
			<returns>1 if the material is replaced successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Materials.saveMaterials const">
			<summary>
			Saves changes made for all loaded materials.
			</summary>  
			<returns>true if materials are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Materials.compileShaders(Unigine.Vector{Unigine.Ptr{Unigine.Material},int,Unigine.VectorAllocator})">
			<summary>
			Compiles shaders for all specified materials.
			</summary> 
			<param name="materials"> Vector containing the list of materials for which shaders are to be compiled. </param> 
		</member>
		<member name="M:Unigine.Materials.compileShaders">
			<summary>
			Compiles shaders for all loaded materials.
			</summary>  
		</member>
		<member name="M:Unigine.Materials.setPrecompileAllShaders(bool)">
			<summary>
			Enables or disables shader precompilation.
			</summary> 
			<param name="shaders"> 1 to enable shader precompilation, 0 - to disable it. </param> 
		</member>
		<member name="M:Unigine.Materials.isPrecompileAllShaders const">
			<summary>
			Returns a value indicating if shader precompilation is enabled.
			</summary>  
			<returns>1 if shader precompilation is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Materials.reloadMaterials">
			<summary>
			Reloads all loaded materials.
			</summary>  
		</member>
		<member name="M:Unigine.Materials.destroyShaders">
			<summary>
			Deletes all shaders used for the loaded materials.
			</summary>  
		</member>
		<member name="M:Unigine.Materials.destroyTextures">
			<summary>
			Deletes all textures used by the loaded materials.
			</summary>  
		</member>
		<member name="M:Unigine.Materials.createShaders">
			<summary>
			Creates all shaders for all loaded materials.
			</summary>  
		</member>
		<member name="F:Unigine.Materials.LOADING_MODE_FULL_MATERIALS_SHADERS">
			<summary>
			Caching for materials and shaders - Caching of materials is enabled along with shader cache generation and loading. This mode requires compilation of all shaders resulting in long loading times. Everything is kept in memory with no streaming required. This mode is the best as it ensures stable work and significant reduction of spikes, but takes a lot of memory and increases loading time at startup. Recommended for production phase (when you hand over your application to the end user).This mode is enabled by default, in case of invalid shaders cache in your project both, the Engine and UnigineEditor may take too long to load. Switch mode for faster loading if necessary!
		</summary>
		</member>
		<member name="F:Unigine.Materials.LOADING_MODE_FULL_MATERIALS">
			<summary>
			Caching for materials - materials are created at Engine's startup rather than at run time. Engine startup takes more time than for the first mode and more memory is used. There are less spikes in this mode, but they occur sometimes. This mode can be enabled on a constant basis for a small project having a small number of materials (in case of satisfactory performance and sufficient memory amount).
		</summary>
		</member>
		<member name="F:Unigine.Materials.LOADING_MODE_FAST">
			<summary>
			No caching - minimum memory consumption and maximum Engine loading speed. Сaching for materials and shaders is disabled, so everything is loaded on demand resulting in lots of freezes, spikes, etc. This method can be used when spikes are less important than memory consumption. Recommended for fast iterations during the application development phase as less time is spent on launching your application and loading resources.
		</summary>
		</member>
	</members>
</doc>