<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.HashMap.#ctor">
			<summary>
			Default constructor that produces an empty hash map.
			</summary>  
		</member>
		<member name="M:Unigine.HashMap.#ctor(std::initializer_list{Pair{Key,Type}})">
			<summary>
			Constructor. Creates a hash map from given key-value pairs.
			</summary> 
			<param name="list"> List of pairs. </param> 
		</member>
		<member name="M:Unigine.HashMap.#ctor(HashMap)">
			<summary>
			Constructor. Creates a hash map by copying a source hash map.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.#ctor(HashMap)">
			<summary>
			Constructor. Creates a hash map by copying a source hash map.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.operator=(HashMap)">
			<summary>
			Assignment operator for the hash map.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.operator=(HashMap)">
			<summary>
			Assignment operator for the hash map.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.append(Key,Type)">
			<summary>
			Appends an item with a given key and value to the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.append(Key,Type)">
			<summary>
			Appends an item with a given key and value to the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.append(Key,Type)">
			<summary>
			Appends an item with a given key and value to the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.append(Key,Type)">
			<summary>
			Appends an item with a given key and value to the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.append(HashMap)">
			<summary>
			Appends a given hash map to the current one.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.append(HashMap)">
			<summary>
			Appends a given hash map to the current one.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.insert(Key,Type)">
			<summary>
			Inserts an item with a given key and value into the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.insert(Key,Type)">
			<summary>
			Inserts an item with a given key and value into the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.insert(Key,Type)">
			<summary>
			Inserts an item with a given key and value into the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.insert(Key,Type)">
			<summary>
			Inserts an item with a given key and value into the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.insert(HashMap)">
			<summary>
			Inserts a given hash map into the current one.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.insert(HashMap)">
			<summary>
			Inserts a given hash map into the current one.
			</summary> 
			<param name="o"> Hash map. </param> 
		</member>
		<member name="M:Unigine.HashMap.append(Key)">
			<summary>
			Appends an item with a specified key to the hash map. The item value is default-constructed.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Added item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.append(Key)">
			<summary>
			Appends an item with a specified key to the hash map. The item value is default-constructed.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Added item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.insert(Key)">
			<summary>
			Inserts an item with a specified key into the hash map. The item value is default-constructed.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Inserted item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.insert(Key)">
			<summary>
			Inserts an item with a specified key into the hash map. The item value is default-constructed.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Inserted item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.emplace(Key,Args)">
			<summary>
			Inserts an item with a specified key into the hash map. The new item value is constructed in-place with the given arguments avoiding unnecessary copying.
			</summary> 
			<param name="key"> Key. </param>
			<param name="args"> Arguments for an item value constructor. </param> 
			<returns>Inserted item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.emplace(Key,Args)">
			<summary>
			Inserts an item with a specified key into the hash map. The new item value is constructed in-place with the given arguments avoiding unnecessary copying.
			</summary> 
			<param name="key"> Key. </param>
			<param name="args"> Arguments for an item value constructor. </param> 
			<returns>Inserted item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.take(Key,Type)">
			<summary>
			Removes an item with a specified key from the hash map and returns an item value. If there is no item with the specified key, a default value is returned.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Default value. </param> 
			<returns>Removed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.take(Key)">
			<summary>
			Removes an item with a specified key from the hash map and returns its value. If there is no item with the specified key, a default-constructed value is returned.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Removed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.take(Iterator)">
			<summary>
			Removes an item from the hash map by its iterator and returns an item value. If there is no such item, a default-constructed value is returned.
			</summary> 
			<param name="it"> Item iterator. </param> 
			<returns>Removed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.take(ConstIterator)">
			<summary>
			Removes an item from the hash map by its iterator and returns an item value. If there is no such item, a default-constructed value is returned.
			</summary> 
			<param name="it"> Item iterator. </param> 
			<returns>Removed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.operator[](Key)">
			<summary>
			Hash map item access.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Accessed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.operator[](Key)">
			<summary>
			Hash map item access.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Accessed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.operator[](Key) const">
			<summary>
			Hash map item access.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Accessed item value.</returns>
		</member>
		<member name="M:Unigine.HashMap.get(Key)">
			<summary>
			Returns a value by a specified key. If there is no item with the key, inserts a new value.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.get(Key)">
			<summary>
			Returns a value by a specified key. If there is no item with the key, inserts a new value.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.get(T) const">
			<summary>
			Returns a value by a specified key.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.get(T,Type) const">
			<summary>
			Returns a value by a specified key. If there is no item with the key, the default value is returned.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Default value. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.contains(T,Type) const">
			<summary>
			Checks if an item with a specified key and value exists in the hash map.
			</summary> 
			<param name="key"> Key. </param>
			<param name="value"> Value. </param> 
			<returns>Returns 1 if an item exists; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.HashMap.findData(Type)">
			<summary>
			Searches for an item with a specified value in the hash map.
			</summary> 
			<param name="t"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.findData(Type) const">
			<summary>
			Searches for an item with a specified value in the hash map.
			</summary> 
			<param name="t"> Value. </param> 
			<returns>Item iterator.</returns>
		</member>
		<member name="M:Unigine.HashMap.value(T) const">
			<summary>
			Returns a value with a specified key from the hash map. If there is no such key, returns a default-constructed value.
			</summary> 
			<param name="key"> Key. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.value(T,Type) const">
			<summary>
			Returns a value with a specified key from the hash map. If there is no such key, returns a default value.
			</summary> 
			<param name="key"> Key. </param>
			<param name="def"> Default value. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.valueRef(T,Type) const">
			<summary>
			Returns a value with a specified key from the hash map. If there is no such key, returns a default value.
			</summary> 
			<param name="key"> Key. </param>
			<param name="def"> Default value. </param> 
			<returns>Value.</returns>
		</member>
		<member name="M:Unigine.HashMap.values const">
			<summary>
			Returns a vector of all values of the hash map.
			</summary>  
			<returns>Vector of hash map values.</returns>
		</member>
		<member name="M:Unigine.HashMap.getValues(Unigine.Vector{Type,int,Unigine.VectorAllocator}) const">
			<summary>
			Appends hash map values to a given vector.
			</summary> 
			<param name="values"> Vector of hash map values. </param> 
		</member>
		<member name="M:Unigine.HashMap.getPairs(Unigine.Vector{Pair{Key,Type},int,Unigine.VectorAllocator}) const">
			<summary>
			Appends hash map key-value pairs to a given vector.
			</summary> 
			<param name="pairs"> Vector of hash map key-value pairs. </param> 
		</member>
		<member name="M:Unigine.HashMap.operator==(HashMap) const">
			<summary>
			Checks if two hash maps are equal. The hash maps are considered equal if their key-value pairs are the same.
			</summary> 
			<param name="o"> Hash map. </param> 
			<returns>Returns 1 if hash maps are equal; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.HashMap.operator!=(HashMap) const">
			<summary>
			Checks if two hash maps are not equal. The hash maps are considered equal if their key-value pairs are the same.
			</summary> 
			<param name="o"> Hash map. </param> 
			<returns>Returns 1 if hash maps are not equal; otherwise, 0 is returned.</returns>
		</member>
	</members>
</doc>