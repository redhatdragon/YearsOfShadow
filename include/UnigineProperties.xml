<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Property.#ctor">
			<summary>
			Constructor. Creates a new property instance.
			</summary>  
		</member>
		<member name="M:Unigine.Property.getChild(int)">
			<summary>
			Returns the child property of the current property.
			</summary> 
			<param name="num"> The number of the target child property. </param> 
			<returns>Child property.</returns>
		</member>
		<member name="M:Unigine.Property.getID">
			<summary>
			Returns the ID of the property.
			</summary>  
			<returns>Property ID.</returns>
		</member>
		<member name="M:Unigine.Property.getGUID">
			<summary>
			Returns the					GUID of the property.
			</summary>  
			<returns>GUID of the property.</returns>
		</member>
		<member name="M:Unigine.Property.isBase">
			<summary>
			Returns a value indicating if the property is a base property.
			</summary>  
			<returns>1 if the property is a base property; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.setEditable(int)">
			<summary>
			Sets a value indicating if the property can be edited.
			</summary> 
			<param name="editable"> 1 to make the property editable; 0 to make it read-only. </param> 
		</member>
		<member name="M:Unigine.Property.isEditable">
			<summary>
			Returns a value indicating if the property can be edited.
			</summary>  
			<returns>1 if the property is editable; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.isHidden">
			<summary>
			Returns a value indicating if the property is hidden.
			</summary>  
			<returns>1 if the property is hidden; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.isEngine">
			<summary>
			Returns a value indicating if the property is engine-related (i.e. required for engine operation). Such properties are stored in the core, editor and editor2 folders.
			</summary>  
			<returns>1 if the property is engine-related; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.isInternal">
			<summary>
			Returns a value indicating if the property is	an internal one.
			</summary>  
			<returns>1 if the property is internal; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.isManual">
			<summary>
			Returns a value indicating if the property is a manual one.
			</summary>  
			<returns>1 if the property is manual; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.isHierarchyValid">
			<summary>
			Returns a value indicating if there are no missing parents in the hierarchy of the property.
			</summary>  
			<returns>1 if there are no missing parents in the hierarchy of the property; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.setName(char)">
			<summary>
			Sets a new name for the property.					This method is not available for manual and non-editable properties.
			</summary> 
			<param name="name"> Name of the property. </param> 
		</member>
		<member name="M:Unigine.Property.getName">
			<summary>
			Returns the property name.
			</summary>  
			<returns>Name of the property.If the property is internal and has a parent, the parent's name will be returned.</returns>
		</member>
		<member name="M:Unigine.Property.getTooltip const">
			<summary>
			Returns the property tooltip.
			</summary>  
			<returns>Tooltip for the property.</returns>
		</member>
		<member name="M:Unigine.Property.getNumChildren">
			<summary>
			Returns the number of children of the current property.
			</summary>  
			<returns>Number of child properties.</returns>
		</member>
		<member name="M:Unigine.Property.hasOverrides">
			<summary>
			Returns a value indicating if the property has at least one overridden parameter.
			</summary>  
			<returns>1 if the property has at least one overridden parameter; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.getParent">
			<summary>
			Returns the parent property.
			</summary>  
			<returns>Parent property if it exists; if the current property has no parent, nullptr will be returned.</returns>
		</member>
		<member name="M:Unigine.Property.isParent(char)">
			<summary>
			Returns a value indicating if the property with the given name is a parent of this property.					Suppose we have the following two manual properties in our project:																																															The following code will return 1 as the my_prop property is the parent of the my_prop_0 property:
			
			</summary> 
			<param name="name"> Parent property name. </param> 
			<returns>1 if the property with the given name is a parent of this property; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.isParent(Unigine.UGUID)">
			<summary>
			Returns a value indicating if the property with the given GUID is a parent of this property.
			</summary> 
			<param name="guid"> Parent property GUID. </param> 
			<returns>1 if the property with the given GUID is a parent of this property; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.setParent(Unigine.Ptr{Unigine.Property},int)">
			<summary>
			Sets the given property as the parent for this property and saves the parameter values of the property (if the corresponding flag is set).					The method is not available for manual and non-editable properties.
			</summary> 
			<param name="property"> Property to be set as the parent for this property. </param>
			<param name="save_all_values"> Flag indicating if parameter values of the property will be saved after reparenting. </param> 
			<returns>1 if the given property was successfully set as the parent for this property; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.setPath(char)">
			<summary>
			Sets a new path for the property.
			</summary> 
			<param name="path"> New path to the property file. </param> 
		</member>
		<member name="M:Unigine.Property.setFileGUID(Unigine.UGUID)">
			<summary>
			Sets a new GUID for the property file.
			</summary> 
			<param name="fileguid"> New GUID for the property file. </param> 
		</member>
		<member name="M:Unigine.Property.getFileGUID">
			<summary>
			Returns the current GUID of the property file.
			</summary>  
			<returns>GUID of the property file.</returns>
		</member>
		<member name="M:Unigine.Property.getPath">
			<summary>
			Returns a path to the property.
			</summary>  
			<returns>Path to the property.</returns>
		</member>
		<member name="M:Unigine.Property.clone">
			<summary>
			Clones the property. The cloned property won't have a name, a path and won't be displayed in the properties hierarchy.
			</summary>  
			<returns>Cloned property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.clone(char,char)">
			<summary>
			Clones the property and assigns the specified name and path to the clone. The cloned property will be saved to the specified path on saveProperties() call. This method may be used, for example, to create a property missed during project's migration.
			</summary> 
			<param name="name"> Cloned property name. </param>
			<param name="path"> Path to save the cloned property. </param> 
			<returns>Cloned property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.clone(char,char,Unigine.UGUID)">
			<summary>
			Clones the property and assigns the specified name, GUID and path to the clone. The cloned property will be saved to the specified path on saveProperties() call. This method may be used, for example, to create a property missed during project's migration.
			</summary> 
			<param name="name"> Cloned property name. </param>
			<param name="path"> Path to save the cloned property. </param>
			<param name="guid"> Cloned property GUID. </param> 
			<returns>Cloned property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.clone(char)">
			<summary>
			Clones the property.
			</summary> 
			<param name="name"> Cloned property name. </param> 
			<returns>Cloned property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.inherit">
			<summary>
			Inherits a new property from this one. The inherited property will be empty: it won't have a name, a path and won't be displayed in the properties hierarchy.
			</summary>  
			<returns>Inherited property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.inherit(char)">
			<summary>
			Inherits a new property from this one and assigns the specified name to it.
			</summary> 
			<param name="name"> Inherited property name. </param> 
			<returns>Inherited property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.inherit(char,char)">
			<summary>
			Inherits a new property from this one and assigns the specified name and path to it. The inherited property will be saved to the specified path on saveProperties() call.
			</summary> 
			<param name="name"> Inherited property name. </param>
			<param name="path"> Path to save the inherited property. </param> 
			<returns>Inherited property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.inherit(char,char,Unigine.UGUID)">
			<summary>
			Inherits a new property from this one and assigns the specified name, GUID and path to it. The inherited property will be saved to the specified path on saveProperties() call.
			</summary> 
			<param name="name"> Inherited property name. </param>
			<param name="path"> Path to save the inherited property. </param>
			<param name="guid"> Inherited property GUID. </param> 
			<returns>Inherited property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.load">
			<summary>
			Loads the property from the file specified by the setPath() function. This function can be used to load properties created during application execution or stored outside the data directory.
			</summary>  
			<returns>1 if the property data is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.load(char)">
			<summary>
			Loads the property from the specified *.prop file.
			</summary> 
			<param name="path"> Path to the *.prop file to load the property data from. </param> 
			<returns>1 if the property data is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.loadXml(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads data of the property (all its parameters) from the given instance of the Xml class.
			</summary> 
			<param name="xml"> Xml class instance in which the property data is stored. </param> 
			<returns>1 if the property data is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads data of the current property (all its options, states and parameters) from the given instance of the Xml class.
			</summary> 
			<param name="xml"> Xml class instance in which the property data is stored. </param> 
			<returns>1 if the property data is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.reload">
			<summary>
			Reloads the property and all its children.
			</summary>  
			<returns>1 if the property is reloaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.canSaveInFile">
			<summary>
			Returns a value indicating if the property can be saved to a file. For example, this function will return 0 for an internal or manual property.
			</summary>  
			<returns>1 if the property can be saved to a file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves data of the current property (all its parameters) into a binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream into which the property data will be saved. </param> 
			<returns>true if the property data is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Property.restoreState(Unigine.Ptr{Unigine.Stream},int)">
			<summary>
			Restores the data of the property (all its parameters) from a binary stream in the specified mode.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream in which the saved property parameter data is stored. </param>
			<param name="restore_mode"> Restore mode. One of the Property::RESTORE_MODE_* values. The default value is Property::RESTORE_MODE_REPLACE. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Property.save">
			<summary>
			Saves the property data to the file specified by the setPath() function. This method is not available for manual and internal properties.
			</summary>  
			<returns>1 if the property data is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.save(char)">
			<summary>
			Saves the property data to the specified *.prop file.This method is not available for manual properties.
			</summary> 
			<param name="path"> Path to the *.prop file to save the property data to. </param> 
			<returns>1 if the property data is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.saveXml(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Saves data of the property (all its parameters) to the given instance of the Xml class.					This method is not available for manual properties.
			</summary> 
			<param name="xml"> Xml class instance into which the property data will be saved. </param> 
			<returns>1 if the property data is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.saveWorld(Unigine.Ptr{Unigine.Xml},int)">
			<summary>
			Saves data of the current property (all its parameters) into the given instance of the Xml class.
			</summary> 
			<param name="xml"> Xml class instance into which the property data will be saved. </param>
			<param name="force"> A value indicating if forced saving of property data is used: 1 to enable forced saving, 0 to disable it. </param> 
			<returns>1 if the property data is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Property.addCallback(Unigine.Property.CALLBACK_INDEX,Unigine.CallbackBase1{Unigine.Ptr{Unigine.Property}})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when any changes to the property are made. The signature of the callback function should be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Property.addCallback(Unigine.Property.CALLBACK_INDEX,Unigine.CallbackBase2{Unigine.Ptr{Unigine.Property},int})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when any changes to the property are made. The signature of the callback function should be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Property.removeCallback(Unigine.Property.CALLBACK_INDEX,void)">
			<summary>
			Removes the specified callback from the list of callbacks of the specified type. Callback functions can be used to determine actions to be performed when any changes to the property are made.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Property.clearCallbacks(Unigine.Property.CALLBACK_INDEX)">
			<summary>
			Clears all added callbacks of the specified type. Callback functions can be used to determine actions to be performed when any changes to the property are made.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param> 
		</member>
		<member name="M:Unigine.Property.parameterTypeByName(char)">
			<summary>
			Returns parameter type identifier by the type name specified.
			</summary> 
			<param name="param_type"> Parameter type name. </param> 
			<returns>Parameter type identifier, one of the PARAMETER_* variables.</returns>
		</member>
		<member name="M:Unigine.Property.parameterNameByType(int)">
			<summary>
			Returns parameter type name by the type identifier specified.
			</summary> 
			<param name="param_type"> Parameter type identifier, one of the PARAMETER_* variables. </param> 
			<returns>Parameter type name.</returns>
		</member>
		<member name="M:Unigine.Property.getParameterPtr">
			<summary>
			Returns the root property parameter.					You can't iterate through all parameters of the property in a single loop, a recursive function should be used instead:
			
			</summary>  
			<returns>Root property parameter smart pointer.</returns>
		</member>
		<member name="M:Unigine.Property.getParameterPtr(char)">
			<summary>
			Returns a property parameter by its name.
			</summary> 
			<param name="name"> Property parameter name. </param> 
			<returns>Property parameter smart pointer.This method never returns nullptr, regardless of whether a parameter with the specified name exists or not. It only displays an error message in the console in case of a non-existing parameter. To check if such parameter really exists, use the PropertyParameter.isExist() method. For example: // getting some property named "my_property"PropertyPtr pProperty = Properties::findManualProperty("my_property");// trying to get a property parameter named "some_parameter"PropertyParameterPtr param = pProperty-&gt;getParameterPtr("some_parameter");// checking if such parameter exists and displaying a messageif (param-&gt;isExist())Log::message("Specified property parameter exists!\n");elseLog::message("No such parameter!\n");</returns>
		</member>
		<member name="M:Unigine.Property.getParameterPtr(int)">
			<summary>
			Returns a property parameter by its ID.
			</summary> 
			<param name="id"> Property parameter ID. </param> 
			<returns>Property parameter smart pointer.This method never returns nullptr, regardless of whether a parameter with the specified ID exists or not. It only displays an error message in the console in case of a non-existing parameter. To check if such parameter really exists, use the PropertyParameter.isExist() method. For example: // getting some property named "my_property"PropertyPtr pProperty = Properties::findManualProperty("my_property");// trying to get a property parameter having the ID=30PropertyParameterPtr param = pProperty-&gt;getParameterPtr(30);// checking if such parameter exists and displaying a messageif (param-&gt;isExist())Log::message("Property parameter with the specified ID exists!\n");elseLog::message("No such parameter!\n");</returns>
		</member>
		<member name="M:Unigine.Property.getNumStructs">
			<summary>
			Returns the number of structures of the property.
			</summary>  
			<returns>Number of structures of the property.</returns>
		</member>
		<member name="M:Unigine.Property.findStruct(char)">
			<summary>
			Returns the number of the structure with the specified name.
			</summary> 
			<param name="name"> Name of the structure to be found. </param> 
			<returns>Number of the structure with the specified name, if it exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Property.getStructName(int)">
			<summary>
			Returns the name of the structure with the specified number.
			</summary> 
			<param name="num"> Structure number. </param> 
			<returns>Structure name, if such structure exists, otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Property.getNode">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Property.PARAMETER_INT">
			<summary>
			Type of the property parameter that allows accepting any integer value in a given range.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_FLOAT">
			<summary>
			Type of the property parameter that allows accepting float value in a given range.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_DOUBLE">
			<summary>
			Type of the property parameter that allows accepting any double value in a given range.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_TOGGLE">
			<summary>
			Type of the property parameter that allows only 2 possible values.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_SWITCH">
			<summary>
			Type of the property parameter that allows specifying a set of several possible values (more than 2).
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_STRING">
			<summary>
			Type of the property parameter that allows accepting any string value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_COLOR">
			<summary>
			Type of the property parameter that allows specifying the material color (a vec4 value).
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_VEC2">
			<summary>
			Type of the property parameter that allows accepting any vec2 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_VEC3">
			<summary>
			Type of the property parameter that allows accepting any vec3 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_VEC4">
			<summary>
			Type of the property parameter that allows accepting any vec4 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_DVEC2">
			<summary>
			Type of the property parameter that allows accepting any dvec2 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_DVEC3">
			<summary>
			Type of the property parameter that allows accepting any dvec3 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_DVEC4">
			<summary>
			Type of the property parameter that allows accepting any dvec4 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_IVEC2">
			<summary>
			Type of the property parameter that allows accepting any ivec2 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_IVEC3">
			<summary>
			Type of the property parameter that allows accepting any ivec3 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_IVEC4">
			<summary>
			Type of the property parameter that allows accepting any ivec4 value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK">
			<summary>
			Type of the property parameter that allows specifying a mask (an integer value).
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_FILE">
			<summary>
			Type of the property parameter that allows accepting any file GUID value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_PROPERTY">
			<summary>
			Type of the property parameter that allows accepting any property GUID value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MATERIAL">
			<summary>
			Type of the property parameter that allows accepting any material GUID value.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_NODE">
			<summary>
			Type of the property parameter that allows accepting any Node.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_CURVE2D">
			<summary>
			Type of the property parameter that allows accepting a 2D Curve.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_ARRAY">
			<summary>
			Type of the property parameter that allows accepting arrays.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_STRUCT">
			<summary>
			Type of the property parameter that allows accepting structures.
		</summary>
		</member>
		<member name="F:Unigine.Property.CALLBACK_DESTROY">
			<summary>
			Property destroy callback. This callback is fired when the property is destroyed.
		</summary>
		</member>
		<member name="F:Unigine.Property.CALLBACK_PARAMETER_CHANGED">
			<summary>
			Property parameter changed callback. This callback is fired when the value of any parameter of the property is changed or reset to default.
		</summary>
		</member>
		<member name="F:Unigine.Property.CALLBACK_REPARENTED">
			<summary>
			Property reparented callback. This callback is fired when the parent of the property is changed.
		</summary>
		</member>
		<member name="F:Unigine.Property.CALLBACK_RENAMED">
			<summary>
			Property renamed callback. This callback is fired when the name of the property is changed.
		</summary>
		</member>
		<member name="F:Unigine.Property.CALLBACK_MOVED">
			<summary>
			Property moved callback. This callback is fired when the path of the property is changed.
		</summary>
		</member>
		<member name="F:Unigine.Property.CALLBACK_RELOADED">
			<summary>
			Property reloaded callback. This callback is fired when the property is reloaded.
		</summary>
		</member>
		<member name="F:Unigine.Property.RESTORE_MODE_MERGE">
			<summary>
			Restore mode, which replaces only unique and overridden values (excluding inherited unchanged values).
		</summary>
		</member>
		<member name="F:Unigine.Property.RESTORE_MODE_OVERRIDES">
			<summary>
			Restore mode, which replaces only overridden parameter values.
		</summary>
		</member>
		<member name="F:Unigine.Property.RESTORE_MODE_REPLACE">
			<summary>
			Restore mode, which replaces all parameter values.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_FIELD">
			<summary>
			Field bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_PHYSICAL">
			<summary>
			Physical bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_OBSTACLE">
			<summary>
			Obstacle bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_NAVIGATION">
			<summary>
			Navigation bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_SOUND_OCCLUSION">
			<summary>
			Sound occlusion bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_SOUND_REVERB">
			<summary>
			Sound reverberation bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_SOUND_SOURCE">
			<summary>
			Sound source bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_MATERIAL">
			<summary>
			Material bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_SHADOWS">
			<summary>
			Shadow bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_VIEWPORT">
			<summary>
			Viewport bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_EXCLUSION">
			<summary>
			Exclusion bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_COLLISION">
			<summary>
			Collision bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_INTERSECTION">
			<summary>
			Intersection bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_PHYSICS_INTERSECTION">
			<summary>
			Physics Intersection bit mask.
		</summary>
		</member>
		<member name="F:Unigine.Property.PARAMETER_MASK_GENERAL">
			<summary>
			Bit mask.
		</summary>
		</member>
		<member name="M:Unigine.PropertyParameter.getID const">
			<summary>
			Returns the ID of the property parameter.
			</summary>  
			<returns>ID of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getProperty const">
			<summary>
			Returns the property, that owns the parameter.
			</summary>  
			<returns>Smart pointer to a property owning the parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getPropertyGUID const">
			<summary>
			Returns the GUID of the property that owns the parameter.
			</summary>  
			<returns>GUID of the property that owns the parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getParent const">
			<summary>
			Returns the parent property parameter, if it exists.
			</summary>  
			<returns>Parent property parameter, if it exists,; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getNumChildren const">
			<summary>
			Returns the total number of children of the property parameter.
			</summary>  
			<returns>Total number of children of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isChild(Unigine.Ptr{PropertyParameter}) const">
			<summary>
			Returns a value indicating if the specified property parameter is a child of this property parameter.
			</summary> 
			<param name="parameter"> Property parameter to be checked. </param> 
			<returns>true if the specified property parameter is a child of this property parameter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.findChild(char) const">
			<summary>
			Returns the number of the child property parameter with the specified name.
			</summary> 
			<param name="name"> Name of the child property parameter to be found. </param> 
			<returns>Number of the child property parameter with the specified name, if it exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getChild(int) const">
			<summary>
			Returns a child property parameter by its number.
			</summary> 
			<param name="num"> Number of the child property parameter in the range from 0 to the total number of children of this property parameter. </param> 
			<returns>Child property parameter smart pointer, if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getChild(char) const">
			<summary>
			Returns a child property parameter by its name.
			</summary> 
			<param name="name"> Child property parameter name. </param> 
			<returns>Child property parameter smart pointer, if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getChildIndex(Unigine.Ptr{PropertyParameter}) const">
			<summary>
			Returns the index of the specified child property parameter.
			</summary> 
			<param name="parameter"> Child property parameter for which an index is to be found. </param> 
			<returns>Index of the child property parameter in the range from 0 to the total number of children of this property parameter, if such a child exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isExist const">
			<summary>
			Returns a value indicating if the property parameter is an existing one.
			</summary>  
			<returns>true if the property parameter is an existing one; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isHidden const">
			<summary>
			Returns a value indicating if the property parameter is hidden.
			</summary>  
			<returns>true if the property parameter is hidden; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isInherited const">
			<summary>
			Returns a value indicating if the property parameter is inherited from a parent.
			</summary>  
			<returns>true if the property parameter is inherited from a parent; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isOverridden const">
			<summary>
			Returns a value indicating if the property parameter is overridden.
			</summary>  
			<returns>true if the property parameter is overridden; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getType const">
			<summary>
			Returns the type identifier of the property parameter.
			You can get the name of the parameter type using the Property::parameterNameByType() method:
			</summary>  
			<returns>One of the PARAMETER_* pre-defined variables; if an error occurs, -1 will be returned.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getName const">
			<summary>
			Returns the name of the property parameter.
			</summary>  
			<returns>Property parameter name.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getTitle const">
			<summary>
			Returns the title of the property parameter. This title is displayed in the UnigineEditor's UI.
			</summary>  
			<returns>Property parameter title.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getTooltip const">
			<summary>
			Returns the tooltip for the property parameter. This title is displayed in the UnigineEditor's UI.
			</summary>  
			<returns>Property parameter tooltip.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getGroup const">
			<summary>
			Returns the name of the group to which the property parameter belongs.
			</summary>  
			<returns>name of the group to which the property parameter belongs.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getFilter const">
			<summary>
			Returns the filter string associated with the property parameter. This string specifies a filter for file, material or property parameter values thet will be used in the UnigineEditor. For example, you can specify ".xml|.node|.txt" to filter certain types of assets, or specify a base material to filter out materials, that cannot be used in a particular case (e.g. to avoid an attempt of assigning a post material to a mesh).					This attribute is available only for file, material and property parameter types.
			</summary>  
			<returns>String specifying a filter for file, material or property parameter values.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(int)">
			<summary>
			Sets the value of the property parameter using the integer value specified.
			</summary> 
			<param name="value"> Integer value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(float)">
			<summary>
			Sets the value of the property parameter using the float value specified.
			</summary> 
			<param name="value"> Float value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(double)">
			<summary>
			Sets the value of the property parameter using the double value specified.
			</summary> 
			<param name="value"> Double value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(char)">
			<summary>
			Sets the value of the property parameter using the string specified.
			</summary> 
			<param name="value"> String to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.vec2)">
			<summary>
			Sets the value of the property parameter using the two-component vec2 vector specified.
			</summary> 
			<param name="value"> Two-component float vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.vec3)">
			<summary>
			Sets the value of the property parameter using the three-component vec3 vector specified.
			</summary> 
			<param name="value"> Three-component float vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.vec4)">
			<summary>
			Sets the value of the property parameter using the four-component vec4 vector specified.
			</summary> 
			<param name="value"> Four-component float vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.dvec2)">
			<summary>
			Sets the value of the property parameter using the two-component dvec2 vector specified.
			</summary> 
			<param name="value"> Two-component double vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.dvec3)">
			<summary>
			Sets the value of the property parameter using the three-component dvec3 vector specified.
			</summary> 
			<param name="value"> Three-component double vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.dvec4)">
			<summary>
			Sets the value of the property parameter using the four-component dvec4 vector specified.
			</summary> 
			<param name="value"> Four-component double vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.ivec2)">
			<summary>
			Sets the value of the property parameter using the two-component ivec2 vector specified.
			</summary> 
			<param name="value"> Two-component integer vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.ivec3)">
			<summary>
			Sets the value of the property parameter using the three-component ivec3 vector specified.
			</summary> 
			<param name="value"> Three-component integer vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Math.ivec4)">
			<summary>
			Sets the value of the property parameter using the four-component ivec4 vector specified.
			</summary> 
			<param name="value"> Four-component integer vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.UGUID)">
			<summary>
			Sets the value of the property parameter using the UGUID value specified.
			</summary> 
			<param name="value"> UGUID value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets the value of the property parameter using the Node specified.
			</summary> 
			<param name="value"> Node to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets the value of the property parameter using the Material specified.
			</summary> 
			<param name="value"> Material to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Ptr{Unigine.Property})">
			<summary>
			Sets the value of the property parameter using the Property specified.
			</summary> 
			<param name="value"> Property to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Variable)">
			<summary>
			Sets the value of the property parameter using the Variable specified.
			</summary> 
			<param name="value"> Variable to be set as the value of the property parameter. </param> 
			<returns>true if the property value is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValue(Unigine.Ptr{Curve2d})">
			<summary>
			Sets the value of the property parameter using the Curve2d value specified.
			</summary> 
			<param name="value"> Curve2d value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.resetValue">
			<summary>
			Resets an overridden value of the property parameter.					Resetting a value of the property parameter affects all its children.
			</summary>  
		</member>
		<member name="M:Unigine.PropertyParameter.getValueInt const">
			<summary>
			Returns the current value of the property parameter as an integer.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueFloat const">
			<summary>
			Returns the current value of the property parameter as a float.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueDouble const">
			<summary>
			Returns the current value of the property parameter as a double.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueString const">
			<summary>
			Returns the current value of the property parameter as a string.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueVec2 const">
			<summary>
			Returns the current value of the property parameter as a two-component vec2 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueVec3 const">
			<summary>
			Returns the current value of the property parameter as a three-component vec3 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueVec4 const">
			<summary>
			Returns the current value of the property parameter as a four-component vec4 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueDVec2 const">
			<summary>
			Returns the current value of the property parameter as a two-component dvec2 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueDVec3 const">
			<summary>
			Returns the current value of the property parameter as a three-component dvec3 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueDVec4 const">
			<summary>
			Returns the current value of the property parameter as a four-component dvec4 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueIVec2 const">
			<summary>
			Returns the current value of the property parameter as a two-component ivec2 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueIVec3 const">
			<summary>
			Returns the current value of the property parameter as a three-component ivec3 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueIVec4 const">
			<summary>
			Returns the current value of the property parameter as a four-component ivec4 vector.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueGUID const">
			<summary>
			Returns the current value of the property parameter as a UGUID.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueNode const">
			<summary>
			Returns the current value of the property parameter as a Node.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueProperty const">
			<summary>
			Returns the current value of the property parameter as a Property.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueMaterial const">
			<summary>
			Returns the current value of the property parameter as a Material.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValue const">
			<summary>
			Returns the current value of the property parameter as a Variable.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueInt(int)">
			<summary>
			Sets the value of the property parameter using the integer value specified.
			</summary> 
			<param name="val"> Integer value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getIntMinValue const">
			<summary>
			Returns the minimum integer value of the property parameter.
			</summary>  
			<returns>Minimum integer value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getIntMaxValue const">
			<summary>
			Returns the maximum integer value of the property parameter.
			</summary>  
			<returns>Maximum integer value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueFloat(float)">
			<summary>
			Sets the value of the property parameter using the float value specified.
			</summary> 
			<param name="val"> Float value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getFloatMinValue const">
			<summary>
			Returns the minimum float value of the property parameter.
			</summary>  
			<returns>Minimum float value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getFloatMaxValue const">
			<summary>
			Returns the maximum float value of the property parameter.
			</summary>  
			<returns>Maximum float value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueDouble(double)">
			<summary>
			Sets the value of the property parameter using the double value specified.
			</summary> 
			<param name="val"> Double value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getDoubleMinValue const">
			<summary>
			Returns the minimum double value of the property parameter.
			</summary>  
			<returns>Minimum double value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getDoubleMaxValue const">
			<summary>
			Returns the maximum double value of the property parameter.
			</summary>  
			<returns>Maximum double value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.hasSliderMinValue const">
			<summary>
			Returns a value indicating if the slider parameter has the minimum value specified. The slider parameter is a parameter of one of the following types: PARAMETER_INT, PARAMETER_FLOAT, PARAMETER_DOUBLE.
			</summary>  
			<returns>true if the slider parameter has the minimum value specified; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.hasSliderMaxValue const">
			<summary>
			Returns a value indicating if the slider parameter has the maximum value specified. The slider parameter is a parameter of one of the following types: PARAMETER_INT, PARAMETER_FLOAT, PARAMETER_DOUBLE.
			</summary>  
			<returns>true if the slider parameter has the maximum value specified; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getSliderLog10 const">
			<summary>
			Returns a value indicating if the slider parameter uses a logarithmic scale (with the base ten). The slider parameter is a parameter of one of the following types: PARAMETER_INT, PARAMETER_FLOAT, PARAMETER_DOUBLE.
			</summary>  
			<returns>1 if the property parameter uses a logarithmic scale; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getSliderMinExpand const">
			<summary>
			Returns a value indicating if the minimum value of the slider parameter can be decreased. Slider parameter is a parameter of one of the following types: PARAMETER_INT, PARAMETER_FLOAT, PARAMETER_DOUBLE.
			</summary>  
			<returns>1 if the minimum value can be changed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getSliderMaxExpand const">
			<summary>
			Returns a value indicating if the maximum value of the slider parameter can be decreased. Slider parameter is a parameter of one of the following types: PARAMETER_INT, PARAMETER_FLOAT, PARAMETER_DOUBLE.
			</summary>  
			<returns>1 if the maximum value can be changed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueToggle(bool)">
			<summary>
			Sets the value of the toggle parameter. If the PARAMETER_TOGGLE variable isn't set for the parameter, or the property is not editable, the value won't be updated.
			</summary> 
			<param name="toggle"> New value of the toggle parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueToggle const">
			<summary>
			Returns the current value of the toggle parameter. If the PARAMETER_TOGGLE variable isn't set for the parameter, the function will return 0.
			</summary>  
			<returns>Value of the toggle parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueSwitch(int)">
			<summary>
			Sets the value of the switch parameter. If the PARAMETER_SWITCH variable isn't set for the parameter, or the property is not editable, the value won't be updated.
			</summary> 
			<param name="val"> New value of the switch parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueSwitch const">
			<summary>
			Returns the current value of the switch parameter. If the PARAMETER_SWITCH variable isn't set for the parameter, the function will return 0.
			</summary>  
			<returns>Value of the switch parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getSwitchNumItems const">
			<summary>
			Returns the number of items of the switch parameter. If the PARAMETER_SWITCH variable isn't set for the parameter, the function will return 0.
			</summary>  
			<returns>Number of items of the switch parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setSwitchItem(int)">
			<summary>
			Sets the item with the specified number as a value of the switch parameter.					Suppose we have a property switch parameter declared as follows:					Spaces in the items attribute declaration are taken into account. Thus, items="red=-1, green" shall produce 2 items: "red" and " green".					After loading we'll have switch items with the following values: red = -1, green = 0, blue = 5, yellow = 6.
			
			</summary> 
			<param name="item"> Number of the item of the switch parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getSwitchItem const">
			<summary>
			Returns the number of the currently selected item of the switch parameter.					Suppose we have a property switch parameter declared as follows:					Spaces in the items attribute declaration are taken into account. Thus, items="red=-1, green" shall produce 2 items: "red" and " green"					After loading we'll have switch items with the following values: red = -1, green = 0, blue = 5, yellow = 6.
			
			</summary>  
			<returns>Number of the currently selected item of the switch parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getSwitchItemName(int) const">
			<summary>
			Returns the name of the item of the switch parameter.
			</summary> 
			<param name="item"> Number of the item of the switch parameter. </param> 
			<returns>Name of the item of the switch parameter with the specified number.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getSwitchItemValue(int) const">
			<summary>
			Returns the value of the item of the switch parameter with the specified number.
			</summary> 
			<param name="item"> Number of the item of the switch parameter. </param> 
			<returns>Value of the item of the switch parameter with the specified number.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueString(char)">
			<summary>
			Sets the value of the property parameter using the string specified.
			</summary> 
			<param name="value"> String to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueColor(Unigine.Math.vec4)">
			<summary>
			Sets the value of the property parameter using the four-component vec4 color vector (R, G, B, A) specified.
			</summary> 
			<param name="color"> Four-component color vector (R, G, B, A) to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueColor const">
			<summary>
			Returns the current value of the property parameter as a four-component vec4 color vector (R, G, B, A).
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueVec2(Unigine.Math.vec2)">
			<summary>
			Sets the value of the property parameter using the two-component vec2 vector specified.
			</summary> 
			<param name="vec2"> Two-component float vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueVec3(Unigine.Math.vec3)">
			<summary>
			Sets the value of the property parameter using the three-component vec3 vector specified.
			</summary> 
			<param name="vec3"> Three-component float vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueVec4(Unigine.Math.vec4)">
			<summary>
			Sets the value of the property parameter using the four-component vec4 vector specified.
			</summary> 
			<param name="vec4"> Four-component float vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueDVec2(Unigine.Math.dvec2)">
			<summary>
			Sets the value of the property parameter using the two-component dvec2 vector specified.
			</summary> 
			<param name="dvec2"> Two-component double vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueDVec3(Unigine.Math.dvec3)">
			<summary>
			Sets the value of the property parameter using the three-component dvec3 vector specified.
			</summary> 
			<param name="dvec3"> Three-component double vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueDVec4(Unigine.Math.dvec4)">
			<summary>
			Sets the value of the property parameter using the four-component dvec4 vector specified.
			</summary> 
			<param name="dvec4"> Four-component double vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueIVec2(Unigine.Math.ivec2)">
			<summary>
			Sets the value of the property parameter using the two-component ivec2 vector specified.
			</summary> 
			<param name="ivec2"> Two-component integer vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueIVec3(Unigine.Math.ivec3)">
			<summary>
			Sets the value of the property parameter using the three-component ivec3 vector specified.
			</summary> 
			<param name="ivec3"> Three-component integer vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueIVec4(Unigine.Math.ivec4)">
			<summary>
			Sets the value of the property parameter using the four-component ivec4 vector specified.
			</summary> 
			<param name="ivec4"> Four-component integer vector to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueMask(int)">
			<summary>
			Sets the value of the mask parameter. If the PARAMETER_MASK variable isn't set for the parameter, or the property is not editable, the value won't be updated.
			</summary> 
			<param name="mask"> Mask to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueMask const">
			<summary>
			Returns the current value of the property parameter as an integer mask.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueFile(char)">
			<summary>
								Sets the value of the file parameter. If the property is not editable, the value won't be updated.					The value stored in the file parameter (this value will be returned by the getValueFile() method) depends on the flags set for the parameter:
			</summary> 
			<param name="file"> Value for the file parameter to be set. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueFile(bool) const">
			<summary>
			Returns the current value of the file parameter.
			</summary> 
			<param name="fast"> true to use the specified number as an index in users auxiliary parameters cache; otherwise, false. </param> 
			<returns>Current file parameter value depending on the flags set for the parameter:// flags = "asset"setValueFile("guid://asset_guid"); // getValueFile() -&gt; asset_pathsetValueFile("guid://runtime_guid");// getValueFile() -&gt; asset_pathsetValueFile("asset_path");// getValueFile() -&gt; asset_pathsetValueFile("runtime_path");// getValueFile() -&gt; asset_path// flags = "runtime" - defaultsetValueFile("guid://asset_guid"); // getValueFile() -&gt; runtime_pathsetValueFile("guid://runtime_guid");// getValueFile() -&gt; runtime_pathsetValueFile("asset_path");// getValueFile() -&gt; runtime_pathsetValueFile("runtime_path");// getValueFile() -&gt; runtime_path// flags = "abspath"setValueFile(file_path);// getValueFile() -&gt; file_pathTo get a GUID of the file, use the getValueGUID() method.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueFile const">
			<summary>
			Returns the current value of the file parameter.
			</summary>  
			<returns>Current file parameter value</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getFileIsAsset const">
			<summary>
			Returns a value indicating if the file parameter stores a reference to an asset file.
			</summary>  
			<returns>true if the file parameter stores a reference to an asset file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getFileIsRuntime const">
			<summary>
			Returns a value indicating if the file parameter stores a reference to a runtime file.
			</summary>  
			<returns>true if the file parameter stores a reference to a runtime file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getFileIsAbsPath const">
			<summary>
			Returns a value indicating if the file parameter stores an absolute file path.
			</summary>  
			<returns>true if the file parameter stores an absolute file path; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isFileExist const">
			<summary>
			Returns a value indicating if a file corresponding to the property parameter exists.
			</summary>  
			<returns>true if a file corresponding to the property parameter exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Sets the value of the property parameter using the Property specified.
			</summary> 
			<param name="property"> Value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets the value of the property parameter using the Material specified.
			</summary> 
			<param name="material"> Value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets the value of the property parameter using the Node specified.
			</summary> 
			<param name="node"> Value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.setValueNodeID(int)">
			<summary>
			Sets the value of the property parameter using the Node ID specified.
			</summary> 
			<param name="valuenodeid"> Value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueNodeID const">
			<summary>
			Returns the current value of the property parameter as a Node ID.
			</summary>  
			<returns>Value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setArraySize(int)">
			<summary>
			Sets a new size of the array parameter.
			</summary> 
			<param name="size"> New array size to be set (number of elements). </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getArraySize const">
			<summary>
			Returns the current size of the array parameter.
			</summary>  
			<returns>Current array size (number of elements).</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getArrayType const">
			<summary>
			Returns the type of elements of the array parameter.
			</summary>  
			<returns>Type of array elements, one of the PARAMETER_* variables.This method does not return PARAMETER_ARRAY for an array parameter, it returns the type of array elements instead (e.g. PARAMETER_FLOAT, PARAMETER_STRUCT, etc.)</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getArrayTypeName const">
			<summary>
			Returns the type name of elements of the array parameter.
			</summary>  
			<returns>Type name of of elements of the array parameter (Float, Node, Material, etc.).</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getArrayDim const">
			<summary>
			Returns the dimension of the array parameter.					Multi-dimensional arrays are represented as arrays of arrays, thus, the return value of this method will decrease with each level down the hierarchy.
			</summary>  
			<returns>Dimension of the array parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getMaskType const">
			<summary>
			Returns the type of elements of the mask parameter.
			</summary>  
			<returns>Type of the mask parameter, one of the PARAMETER_MASK_* variables.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getStructName const">
			<summary>
			Returns the name of the structure, that defines the type of the struct parameter.
			</summary>  
			<returns>Name of the structure, that defines the type of the struct parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.saveState(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves data of the property parameter into a binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream into which the property parameter data will be saved. </param> 
			<returns>true if the property parameter data is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.restoreState(Unigine.Ptr{Unigine.Stream},int)">
			<summary>
			Restores the data of the property parameter from a binary stream in the specified mode.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream in which the saved property parameter data is stored. </param>
			<param name="restore_mode"> Restore mode. One of the Property::RESTORE_MODE_* values. The default value is Property::RESTORE_MODE_REPLACE. </param> 
			<returns>true if the property parameter data is restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isInt const">
			<summary>
			Returns a value indicating if the current property parameter is an integer.
			</summary>  
			<returns>true if the property parameter is an integer; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isFloat const">
			<summary>
			Returns a value indicating if the current property parameter is a float.
			</summary>  
			<returns>true if the property parameter is a float; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isDouble const">
			<summary>
			Returns a value indicating if the current property parameter is a double.
			</summary>  
			<returns>true if the property parameter is a double; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isToggle const">
			<summary>
			Returns a value indicating if the current property parameter is a toggle.
			</summary>  
			<returns>true if the property parameter is a toggle; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isSwitch const">
			<summary>
			Returns a value indicating if the current property parameter is a switch.
			</summary>  
			<returns>true if the property parameter is a switch; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isString const">
			<summary>
			Returns a value indicating if the current property parameter is a string.
			</summary>  
			<returns>true if the property parameter is a string; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isColor const">
			<summary>
			Returns a value indicating if the current property parameter is a color.
			</summary>  
			<returns>true if the property parameter is a color; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isVec2 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 2 float components.
			</summary>  
			<returns>true if the property parameter is a vector of 2 float components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isVec3 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 3 float components.
			</summary>  
			<returns>true if the property parameter is a vector of 3 float components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isVec4 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 4 float components.
			</summary>  
			<returns>true if the property parameter is a vector of 4 float components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isDVec2 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 2 double components.
			</summary>  
			<returns>true if the property parameter is a vector of 2 double components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isDVec3 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 3 double components.
			</summary>  
			<returns>true if the property parameter is a vector of 3 double components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isDVec4 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 4 double components.
			</summary>  
			<returns>true if the property parameter is a vector of 4 double components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isIVec2 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 2 integer components.
			</summary>  
			<returns>true if the property parameter is a vector of 2 integer components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isIVec3 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 3 integer components.
			</summary>  
			<returns>true if the property parameter is a vector of 3 integer components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isIVec4 const">
			<summary>
			Returns a value indicating if the current property parameter is a vector of 4 integer components.
			</summary>  
			<returns>true if the property parameter is a vector of 4 integer components; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isMask const">
			<summary>
			Returns a value indicating if the current property parameter is a mask.
			</summary>  
			<returns>true if the property parameter is a mask; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isFile const">
			<summary>
			Returns a value indicating if the current property parameter is a file.
			</summary>  
			<returns>true if the property parameter is a file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isProperty const">
			<summary>
			Returns a value indicating if the current property parameter is a property.
			</summary>  
			<returns>true if the property parameter is a property; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isMaterial const">
			<summary>
			Returns a value indicating if the current property parameter is a material.
			</summary>  
			<returns>true if the property parameter is a material; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isNode const">
			<summary>
			Returns a value indicating if the current property parameter is a node.
			</summary>  
			<returns>true if the property parameter is a node; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isArray const">
			<summary>
			Returns a value indicating if the current property parameter is an array.
			</summary>  
			<returns>true if the property parameter is an array; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isStruct const">
			<summary>
			Returns a value indicating if the current property parameter is a structure.
			</summary>  
			<returns>true if the property parameter is a structure; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueGUID(Unigine.UGUID)">
			<summary>
			Sets the UGUID variable as a property parameter value.
			</summary> 
			<param name="valueguid"> UGUID type value </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.isValuePropertyInternal const">
			<summary>
			Checks if the property parameter flag is set to internal (flags="internal"). If it is internal, only a property assigned to some node can be assigned to it. If the property parameter is not internal, a property from the Asset Browser can be assigned to it.
			</summary>  
			<returns>true if a property parameter's flag is set to "Internal"; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isValueFitFilter(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Checks if the type of the indicated node fits the current property parameter filter.
			</summary>  
			<returns>true, if the node fits the filter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isValueFitFilter(Unigine.Ptr{Unigine.Property}) const">
			<summary>
			Checks if the indicated property fits the current property parameter filter.
			</summary>  
			<returns>true, if the property fits the filter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isValueFitFilter(Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Checks if the indicated material fits the current property parameter filter.
			</summary>  
			<returns>true, if the material fits the filter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isValueFitFilter(Unigine.UGUID) const">
			<summary>
			Checks if the indicated GUID fits the current property parameter filter.
			</summary>  
			<returns>true, if the GUID fits the filter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.isCurve2d const">
			<summary>
			Returns a value indicating if the current property parameter is a 2D curve.
			</summary>  
			<returns>true if the property parameter is a 2D curve; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.setValueCurve2d(Unigine.Ptr{Curve2d})">
			<summary>
			Sets the value of the property parameter using the Curve2d value specified.
			</summary> 
			<param name="curve2d"> Curve2d value to be set as the value of the property parameter. </param> 
		</member>
		<member name="M:Unigine.PropertyParameter.getValueCurve2d const">
			<summary>
			Returns the current Curve2d  value of the property parameter.
			</summary>  
			<returns>Current Curve2d value of the property parameter.</returns>
		</member>
		<member name="M:Unigine.PropertyParameter.getValueCurve2dOverride const">
			<summary>
			Returns a new Curve2d instance for the data stored in the specified property parameter overriding the default one. This method enables you to set individual curves, adjusting the value of the resulting property.					Modifications made to the curve shall not propagate to the parent and sibling properties.
			</summary>  
		</member>
		<member name="M:Unigine.Properties.getNumProperties">
			<summary>
			Returns the total number of properties loaded for the current project.
			</summary>  
			<returns>Total number of properties loaded.</returns>
		</member>
		<member name="M:Unigine.Properties.getProperty(int)">
			<summary>
			Returns a property by its number. The returned property can be modified by using methods of the Property class.
			</summary> 
			<param name="num"> Number of the property in range from 0 to the total number of properties. </param> 
			<returns>Property smart pointer if it exists or NULL.</returns>
		</member>
		<member name="M:Unigine.Properties.isProperty(char)">
			<summary>
			Checks if a property with the given name exists.
			</summary> 
			<param name="name"> Name of the property. </param> 
			<returns>1 if a property with the given name exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.isProperty(Unigine.UGUID)">
			<summary>
			Checks if a property with the given GUID exists.
			</summary> 
			<param name="guid"> GUID of the property. </param> 
			<returns>1 if a property with the given GUID exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.isManualProperty(char)">
			<summary>
			Checks if a property with the given name exists.
			</summary> 
			<param name="name"> Name of the manual property. </param> 
			<returns>1 if a manual property with the given name exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.getPropertyName(int)">
			<summary>
			Returns the name of the property by its number.
			</summary> 
			<param name="num"> Number of the property in range from 0 to the total number of properties. </param> 
			<returns>Name of the property.If the property with the specified number is internal and has a parent, the parent's name will be returned.</returns>
		</member>
		<member name="M:Unigine.Properties.cloneProperty(Unigine.UGUID,char,char)">
			<summary>
			Clones the property and assigns the specified name and path to the clone.					Without a name the cloned property won't be displayed in the properties hierarchy, without a path it won't be saved when saveProperties() is called.
			</summary> 
			<param name="guid"> GUID of the property to clone. </param>
			<param name="name"> Cloned property name. </param>
			<param name="path"> Path to save the cloned property. </param> 
			<returns>Property smart pointer if the property with the specified GUID exists or nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.findProperty(char)">
			<summary>
			Searches for a property with the given name. The returned property can be managed using the methods of the Property class.
			</summary> 
			<param name="name"> Property name. </param> 
			<returns>Property, if it is found (an instance of the Property class); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.findManualProperty(char)">
			<summary>
			Searches for a manual property with the given name. The returned property can be managed using the methods of the Property class.
			</summary> 
			<param name="name"> Manual property name. </param> 
			<returns>Manual property, if it is found (an instance of the Property class); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.findPropertyByGUID(Unigine.UGUID)">
			<summary>
			Searches for a property with the given GUID. The returned property can be managed using the methods of the Property class.
			</summary> 
			<param name="guid"> Property GUID. </param> 
			<returns>Property, if it is found (an instance of the Property class); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.findPropertyByPath(char)">
			<summary>
			Searches for a property with the given path. The returned property can be managed using the methods of the Property class.
			</summary> 
			<param name="path"> Property path. </param> 
			<returns>Property, if it is found (an instance of the Property class); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.findPropertyByFileGUID(Unigine.UGUID)">
			<summary>
			Searches for a property with the given *.prop file GUID. The returned property can be managed using the methods of the Property class.
			</summary> 
			<param name="guid"> Property file GUID. </param> 
			<returns>Property, if it is found (an instance of the Property class); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.loadProperty(char)">
			<summary>
			Loads a property from the specified *.prop file. The returned property can be managed using the methods of the Property class.
			</summary> 
			<param name="path"> Path to the *.prop file to load a property from. </param> 
			<returns>Property, if it is loaded successfully (an instance of the Property class); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.inheritProperty(Unigine.UGUID,char,char)">
			<summary>
			Inherits a property from the given property and assigns the specified name and path to the new property.					Without a name the inherited property won't be displayed in the properties hierarchy, without a path it won't be saved when saveProperties() is called.
			</summary> 
			<param name="guid"> GUID of the property to inherit from. </param>
			<param name="name"> Inherited property name. </param>
			<param name="path"> Path to save the inherited property. </param> 
			<returns>Property smart pointer if the property with the specified GUID exists or nullptr.</returns>
		</member>
		<member name="M:Unigine.Properties.removeProperty(Unigine.UGUID,int,int)">
			<summary>
			Removes the property with the specified GUID.					A root property (the property that has no parent) or a non-editable property cannot be removed using this function.
			</summary> 
			<param name="guid"> GUID of the property to remove. </param>
			<param name="remove_file"> Flag indicating if the corresponding *.prop file will be deleted. Set 1 to delete the file, or 0 to keep it. </param>
			<param name="remove_children"> Flag indicating if all children of the property will be deleted. Set 1 to delete all children of the property, or 0 to link all children to the parent. </param> 
			<returns>1 if the property is removed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.renameProperty(Unigine.UGUID,char)">
			<summary>
			Changes the name of the property with the specified GUID.																		The name of the *.prop file is not affected.							This method is not available for the manual and non-editable properties.
			</summary> 
			<param name="guid"> GUID of the property to be renamed. </param>
			<param name="new_name"> New name for the property to be set. </param> 
			<returns>1 if the property is renamed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.replaceProperty(Unigine.Ptr{Unigine.Property},Unigine.Ptr{Unigine.Property})">
			<summary>
								Replaces the specified property with a new one for all nodes and surfaces. The new property that replaces the specified one must exist.						For example, if you have 3 nodes with the same property, calling this method will change this property to the specified one for all these nodes.
			</summary> 
			<param name="property"> Property to be replaced. </param>
			<param name="new_property"> New property. </param> 
			<returns>1 if the property is replaced successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.reparentProperty(Unigine.UGUID,Unigine.UGUID,int)">
			<summary>
			Sets a new parent for the specified property. Both properties with given GUIDs must exist.					The method isn't available for the manual and non-editable properties.
			</summary> 
			<param name="guid"> GUID of the property whose parent is to be changed. </param>
			<param name="new_parent"> GUID of the property to be set as a new parent. </param>
			<param name="save_all_values"> Flag indicating if parameter values of the specified property will be saved after reparenting. </param> 
			<returns>1 if the parent for the property is changed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.reloadProperties">
			<summary>
			Reloads all *.prop files from all data folders.					If new *.prop files are found, they will be loaded automatically. The hierarchy will be rebuilt if necessary, while keeping all overridden parameter values.
			</summary>  
		</member>
		<member name="M:Unigine.Properties.saveProperties">
			<summary>
			Saves all properties that can be saved to corresponding *.prop files.					This method will save only the properties that:													are not manual							are editable							have a name (not internal)							have a path
			</summary>  
			<returns>1 if all properties are saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Properties.addCallback(Unigine.Properties.CALLBACK_INDEX,Unigine.CallbackBase1{Unigine.Ptr{Unigine.Property}})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when any changes to any property are made. The signature of the callback function must be as follows:
			
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Properties.removeCallback(Unigine.Properties.CALLBACK_INDEX,void)">
			<summary>
			Removes the specified callback from the list of callbacks of the specified type. Callback functions can be used to determine actions to be performed when any changes to any property are made.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Properties.clearCallbacks(Unigine.Properties.CALLBACK_INDEX)">
			<summary>
			Clears all added callbacks of the specified type. Callback functions can be used to determine actions to be performed when any changes to any property are made.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param> 
		</member>
		<member name="F:Unigine.Properties.CALLBACK_CREATED">
			<summary>
			Property created callback. This callback is fired when a new property is created.
		</summary>
		</member>
		<member name="F:Unigine.Properties.CALLBACK_MOVED">
			<summary>
			Property moved callback. This callback is fired when the path of a property is changed.
		</summary>
		</member>
		<member name="F:Unigine.Properties.CALLBACK_REMOVED">
			<summary>
			Property removed callback. This callback is fired when a property is removed.
		</summary>
		</member>
		<member name="F:Unigine.Properties.CALLBACK_RENAMED">
			<summary>
			Property renamed callback. This callback is fired when the name of a property is changed.
		</summary>
		</member>
		<member name="F:Unigine.Properties.CALLBACK_REPARENTED">
			<summary>
			Property reparented callback. This callback is fired when the parent of a property is changed.
		</summary>
		</member>
	</members>
</doc>