<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.String class.#ctor">
			<summary>
			Default constructor that creates an empty string.
			</summary>  
		</member>
		<member name="M:Unigine.String class.#ctor(String)">
			<summary>
			Copy constructor.
			</summary> 
			<param name="s"> String to be copied. </param> 
		</member>
		<member name="M:Unigine.String class.#ctor(char)">
			<summary>
			Copy constructor.
			</summary> 
			<param name="s"> Pointer to the null-terminated string. </param> 
		</member>
		<member name="M:Unigine.String class.#ctor(wchar_t)">
			<summary>
			Explicit constructor for a wide-character string.
			</summary> 
			<param name="s"> Pointer to the wide-character null-terminated string. </param> 
		</member>
		<member name="M:Unigine.String class.#ctor(unsignedint)">
			<summary>
			Explicit constructor for a string from unsigned characters.
			</summary> 
			<param name="s"> Pointer to the null-terminated string from unsigned characters. </param> 
		</member>
		<member name="M:Unigine.String class.#ctor(String)">
			<summary>
			Constructor. Creates a string by copying a source string.
			</summary> 
			<param name="s"> Source string. </param> 
		</member>
		<member name="M:Unigine.String class.#ctor(char,int)">
			<summary>
			Constructor. Creates a string of a defined size from the array of symbols.
			</summary> 
			<param name="s"> Pointer to the null-terminated string. </param>
			<param name="size"> Size of the string. </param> 
		</member>
		<member name="M:Unigine.String class.get">
			<summary>
			Returns the pointer to the null-terminated string.
			</summary>  
			<returns>The null-terminated string.</returns>
		</member>
		<member name="M:Unigine.String class.get(int)">
			<summary>
			Returns an n-th character of the string.
			</summary> 
			<param name="index"> index of a character in range [0;string_length - 1].If the given index is out of the range bounds, the engine assertion will occur. </param> 
			<returns>An n-th character.</returns>
		</member>
		<member name="M:Unigine.String class.get(int)">
			<summary>
			Returns an n-th character of the string.
			</summary> 
			<param name="index"> index of a character in range [0;string_length - 1].If the given index is out of the range bounds, the engine assertion will occur. </param> 
			<returns>An n-th character.</returns>
		</member>
		<member name="M:Unigine.String class.isalpha(int)">
			<summary>
			Checks whether code is an alphabetic letter.
			</summary> 
			<param name="code"> Character to be checked, cast to an int. </param> 
			<returns>true if the code is an alphabetic character; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.String class.isdigit(int)">
			<summary>
			Checks whether code is a decimal digit character.
			</summary> 
			<param name="code"> Character to be checked, cast to an int. </param> 
			<returns>true if the code is a decimal digit character; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.String class.getDouble">
			<summary>
			Returns the current string as a double value.
			</summary>  
			<returns>The value of the variable.</returns>
		</member>
		<member name="M:Unigine.String class.getFloat">
			<summary>
			Returns the current string as a float value.
			</summary>  
			<returns>The value of the variable.</returns>
		</member>
		<member name="M:Unigine.String class.getInt">
			<summary>
			Returns the current string as an integer value.
			</summary>  
			<returns>The value of the variable.</returns>
		</member>
		<member name="M:Unigine.String class.getLong">
			<summary>
			Returns the current string as a long long value.
			</summary>  
			<returns>The value of the variable.</returns>
		</member>
		<member name="M:Unigine.String class.getLower">
			<summary>
			Returns the string stack with all letters being lower-case.
			</summary>  
			<returns>Lower-cased string stack.</returns>
		</member>
		<member name="M:Unigine.String class.getUpper">
			<summary>
			Returns the string stack with all letters being upper-case.
			</summary>  
			<returns>Upper-cased string stack.</returns>
		</member>
		<member name="M:Unigine.String class.islower(int)">
			<summary>
			Checks whether code is a lower-case letter.
			</summary> 
			<param name="code"> Character to be checked, cast to an int. </param> 
			<returns>true if the code is a lower-case character; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.String class.isspace(int)">
			<summary>
			Checks whether code is a space or a horizontal tab character.
			</summary> 
			<param name="code"> Character to be checked, cast to an int. </param> 
			<returns>true if the code is a space a horizontal tab character; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.String class.isupper(int)">
			<summary>
			Checks whether code is an upper-case letter.
			</summary> 
			<param name="code"> Character to be checked, cast to an int. </param> 
			<returns>true if the code is an upper-case character; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.String class.absname(char,char)">
			<summary>
			Returns an absolute path for given paths.
			</summary> 
			<param name="path"> A working directory path. </param>
			<param name="str"> A destination path. </param> 
			<returns>An absolute pathname.</returns>
		</member>
		<member name="M:Unigine.String class.addslashes(char)">
			<summary>
			Modifies a string by putting backslashes before control characters that need escaping.
			</summary> 
			<param name="str"> A string with control characters that need escaping. </param> 
			<returns>The modified str string with escaped control characters.</returns>
		</member>
		<member name="M:Unigine.String class.allocate(int)">
			<summary>
			Allocates the required memory.
			</summary> 
			<param name="size"> Size of the allocated memory in bytes. </param> 
		</member>
		<member name="M:Unigine.String class.append(String,int)">
			<summary>
			Appends a given string to the end of the string.
			</summary> 
			<param name="s"> String to append. </param>
			<param name="size"> Length of the string to be appended. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.append(char)">
			<summary>
			Appends a given symbol to the end of the string.
			</summary> 
			<param name="c"> Symbol to append. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.append(int,char)">
			<summary>
			Inserts a given symbol at the specified position.
			</summary> 
			<param name="pos"> Insertion position. </param>
			<param name="c"> Symbol to insert. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.append(char,int)">
			<summary>
			Appends a given null-terminated string to the end of the string.
			</summary> 
			<param name="s"> Null-terminated string to append. </param>
			<param name="size"> Length of the null-terminated string to be appended. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.append(int,char,int)">
			<summary>
			Inserts a given null-terminated string at the specified position.
			</summary> 
			<param name="pos"> Insertion position. </param>
			<param name="s"> Null-terminated string to insert. </param>
			<param name="size"> Length of the null-terminated string to be inserted. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.append(int,String,int)">
			<summary>
			Inserts a given string at the specified position.
			</summary> 
			<param name="pos"> Insertion position. </param>
			<param name="s"> String to insert. </param>
			<param name="size"> Length of the string to be inserted. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.append(String,int)">
			<summary>
			Appends a given string to the end of the string.
			</summary> 
			<param name="s"> String to append. </param>
			<param name="size"> Length of the string to be appended. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.atod(char)">
			<summary>
			Parses the str string and returns it as a double value.
			</summary> 
			<param name="str"> A string. </param> 
			<returns>Double value of the str string.</returns>
		</member>
		<member name="M:Unigine.String class.atof(char)">
			<summary>
			Parses the str string and returns it as a float value.
			</summary> 
			<param name="str"> A string. </param> 
			<returns>Float value of the str string.</returns>
		</member>
		<member name="M:Unigine.String class.atoi(char)">
			<summary>
			Parses the str string and returns it as an integer value.
			</summary> 
			<param name="str"> A string. </param> 
			<returns>Integer value of the str string.</returns>
		</member>
		<member name="M:Unigine.String class.atol(char)">
			<summary>
			Parses the str string and returns it as a long long value.
			</summary> 
			<param name="str"> A string. </param> 
			<returns>Long long value of the str string.</returns>
		</member>
		<member name="M:Unigine.String class.basename">
			<summary>
			Returns a filename with extension extracted from the current string.
			</summary>  
			<returns>A string containing filename with extension.</returns>
		</member>
		<member name="M:Unigine.String class.basename(char)">
			<summary>
			Extracts filename with extension from the str string and returns it.
			</summary> 
			<param name="str"> Path to file. </param> 
			<returns>Filename with extension.If the input string does not contain a full stop ('.'), the same value as the str value will be returned.</returns>
		</member>
		<member name="M:Unigine.String class.clear">
			<summary>
			Clears the string.
			</summary>  
		</member>
		<member name="M:Unigine.String class.compare(char,char)">
			<summary>
			Compares the string str0 to the string str1 character by character.
			</summary> 
			<param name="str0"> a string to be compared. </param>
			<param name="str1"> a string to be compared. </param> 
			<returns>A value indicating the relationship between the strings:0 — the contents of both strings are equal.other value — the contents of strings do not coincide.</returns>
		</member>
		<member name="M:Unigine.String class.compare(char,char,int)">
			<summary>
			Compares the string str0 to the string str1 character by character taking into account the character case — upper or lower.
			</summary> 
			<param name="str0"> a string to be compared. </param>
			<param name="str1"> a string to be compared. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise, case is ignored. </param> 
			<returns>A value indicating the relationship between the strings:0 — the contents of both strings are equal.another value — the contents of strings do not coincide.</returns>
		</member>
		<member name="M:Unigine.String class.contains(char,int)">
			<summary>
			Checks whether the current string contains the s substring.
			</summary> 
			<param name="s"> A string. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>1 if the current string contains the s substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.contains(String,int)">
			<summary>
			Checks whether the current string contains the s substring.
			</summary> 
			<param name="s"> A string. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>1 if the current string contains the s substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.contains(char,int)">
			<summary>
			Checks whether the current string contains the c character.
			</summary> 
			<param name="c"> A character. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>1 if the current string contains the c character; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.copy(char,int)">
			<summary>
			Copies size characters from the s string to the current string.
			</summary> 
			<param name="s"> A source string. </param>
			<param name="size"> Number of characters to be copied. </param> 
		</member>
		<member name="M:Unigine.String class.copy(String,int)">
			<summary>
			Copies size characters from the s string to the current string.
			</summary> 
			<param name="s"> A source string. </param>
			<param name="size"> Number of characters to be copied. </param> 
		</member>
		<member name="M:Unigine.String class.destroy">
			<summary>
			Destroys the string.
			</summary>  
		</member>
		<member name="M:Unigine.String class.dirname">
			<summary>
			Returns a parent directory's path from the current string.
			</summary>  
			<returns>The directory's path without filename and extension.</returns>
		</member>
		<member name="M:Unigine.String class.dirname(char)">
			<summary>
			Returns a parent directory's path extracted from the str string.
			</summary> 
			<param name="str"> Path to file </param> 
			<returns>The directory's path without filename and extension.If the str string does not meet path syntax, an empty value will be returned.</returns>
		</member>
		<member name="M:Unigine.String class.do_append(char)">
			<summary>
			Appends a given symbol to the end of the current string.
			</summary> 
			<param name="c"> Symbol to append. </param> 
		</member>
		<member name="M:Unigine.String class.do_append(int,char)">
			<summary>
			Inserts a given symbol at the specified position of the current string.
			</summary> 
			<param name="pos"> Insertion position. </param>
			<param name="c"> Symbol to insert. </param> 
		</member>
		<member name="M:Unigine.String class.do_append(int,char,int)">
			<summary>
			Inserts a given null-terminated string at the specified position of the current string.
			</summary> 
			<param name="pos"> Insertion position. </param>
			<param name="s"> Null-terminated string to insert. </param>
			<param name="size"> Length of the null-terminated string to be inserted. </param> 
		</member>
		<member name="M:Unigine.String class.do_append(char,int)">
			<summary>
			Appends a given null-terminated string to the end of the string.
			</summary> 
			<param name="s"> Null-terminated string to append. </param>
			<param name="size"> Length of the null-terminated string to be appended. </param> 
		</member>
		<member name="M:Unigine.String class.do_assign(char,int)">
			<summary>
			Assigns a new value to the string, replacing its current contents with first size characters pointed by s.
			</summary> 
			<param name="s"> The null-terminated string. </param>
			<param name="size"> Number of characters. </param> 
			<returns></returns>
		</member>
		<member name="M:Unigine.String class.do_copy(char,int)">
			<summary>
			Copies size characters from the s string to the current string.
			</summary> 
			<param name="s"> A source null-terminated string. </param>
			<param name="size"> Number of characters to be copied. </param> 
		</member>
		<member name="M:Unigine.String class.dtoa(double,int,int)">
			<summary>
			Converts a double value to a string using specified precision.
			</summary> 
			<param name="value"> An input value. </param>
			<param name="precision"> Precision in the range [-1; 17]. Data is represented the following way:PrecisionRepresentationExample-1The shortest representation: decimal floating point or scientific notation (mantissa/exponent).2.6265e+20-8Decimal floating point.262.659-17The shortest representation: decimal floating point or scientific notation (mantissa/exponent) with the precision digits to be printed after the decimal point.2.6264999e+2 </param>
			<param name="use_inf"> A flag indicating whether to use -inf and inf values if the input value is out of the range (-1e9; 1e9). </param> 
			<returns>A string representation of the value.</returns>
		</member>
		<member name="M:Unigine.String class.empty">
			<summary>
			Returns an empty flag.
			</summary>  
			<returns>1 if the string is empty; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.endsWith(char,int,int)">
			<summary>
			Checks whether the current string ends with size characters of the s substring.
			</summary> 
			<param name="s"> A string. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param>
			<param name="size"> Number of characters to be checked starting from the beginning. </param> 
			<returns>1 if the current string ends with the specified substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.endsWith(String,int,int)">
			<summary>
			Checks whether the current string ends with size characters of the s substring.
			</summary> 
			<param name="s"> A string. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param>
			<param name="size"> Number of characters to be checked starting from the beginning. </param> 
			<returns>1 if the current string ends with the specified substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.endsWith(char,char,int,int,int)">
			<summary>
			Checks whether the data string ends with the str substring.
			</summary> 
			<param name="data"> A string. </param>
			<param name="str"> A substring. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param>
			<param name="data_size"> Size of the string to be checked. </param>
			<param name="str_size"> Number of substring characters to be checked starting from the beginning. </param> 
			<returns>1 if the string ends with the specified substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.extension">
			<summary>
			Parses the current string as a path and returns a filename extension.
			</summary>  
			<returns>Extension name if there is one in the current string; otherwise, empty string.</returns>
		</member>
		<member name="M:Unigine.String class.extension(char)">
			<summary>
			Parses a given string as a path and returns a filename extension.
			</summary> 
			<param name="str"> A string to be parsed. </param> 
			<returns>Extension name if there is one in the given string; otherwise, empty string.</returns>
		</member>
		<member name="M:Unigine.String class.extension(char,char)">
			<summary>
			Modifies a given path by replacing a file extension with a specified one.
			</summary> 
			<param name="str"> A path. </param>
			<param name="ext"> An extension. </param> 
			<returns>A modified path.</returns>
		</member>
		<member name="M:Unigine.String class.filename">
			<summary>
			Returns a filename extracted from the current string without extension.
			</summary>  
			<returns>A string containing filename without extension.</returns>
		</member>
		<member name="M:Unigine.String class.filename(char)">
			<summary>
			Extracts filename from the str string and returns it without extension.					If the input string does not contain a full stop, an empty string will be returned.
			</summary> 
			<param name="str"> Path to file. </param> 
			<returns>Filename without extension.</returns>
		</member>
		<member name="M:Unigine.String class.find(char,int)">
			<summary>
			Searches the string for the first occurrence of c character and returns its index.
			</summary> 
			<param name="c"> A character. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>Index of a specified character if at least one match was found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.String class.find(String,int)">
			<summary>
			Searches the string for the first occurrence of s substring and returns its index.
			</summary> 
			<param name="s"> A substring. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>Index of the first character of a specified string if at least one match was found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.String class.find(char,int)">
			<summary>
			Searches the string for the first occurrence of s substring and returns its index.
			</summary> 
			<param name="s"> A substring. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>Index of the first character of a specified string if at least one match was found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.String class.first">
			<summary>
			Returns the first character of the current string.
			</summary>  
			<returns>The first character.</returns>
		</member>
		<member name="M:Unigine.String class.first">
			<summary>
			Returns the first character of the current string.
			</summary>  
			<returns>The first character.</returns>
		</member>
		<member name="M:Unigine.String class.format(char,va_list)">
			<summary>
			Returns a stack of formatted strings. A format string is composed of zero or more ordinary characters (excluding %) that are copied directly to the result string and control sequences, each of which results in fetching its own parameter. Each control sequence consists of a percent sign (%) followed by one or more of these elements, in order:											An optional number, a width specifier, that says how many characters (minimum) this conversion should result in.						An optional precision specifier that says how many decimal digits should be displayed for floating-point numbers.						A type specifier that says what type the argument data should be treated as. Possible types:															c: the argument is treated as an integer and presented as a character with that ASCII value.								d or i: the argument is treated as an integer and presented as a (signed) decimal number.								o: the argument is treated as an integer and presented as an octal number.								u: the argument is treated as an integer and presented as an unsigned decimal number.								x: the argument is treated as an integer and presented as a hexadecimal number (with lower-case letters).								X: the argument is treated as an integer and presented as a hexadecimal number (with upper-case letters).								f: the argument is treated as a float and presented as a floating-point number.								g: the same as e or f, the shortest one is selected.								G: the same as E or F, the shortest one is selected.								e: the argument is treated as using the scientific notation with lower-case 'e' (e.g. 1.2e+2).								E: the argument is treated as using the scientific notation with upper-case 'E' (e.g. 1.2E+2).								s: the argument is treated as and presented as a string.								p: the argument is treated as and presented as a pointer address.								%: a literal percent character. No argument is required.
			</summary> 
			<param name="format"> Format string. </param>
			<param name="argptr"> Arguments pointer. </param> 
			<returns>Stack of formatted strings.</returns>
		</member>
		<member name="M:Unigine.String class.format(char)">
			<summary>
			Returns a stack of formatted strings. A format string is composed of zero or more ordinary characters (excluding %) that are copied directly to the result string and control sequences, each of which results in fetching its own parameter. Each control sequence consists of a percent sign (%) followed by one or more of these elements, in order:											An optional number, a width specifier, that says how many characters (minimum) this conversion should result in.						An optional precision specifier that says how many decimal digits should be displayed for floating-point numbers.						A type specifier that says what type the argument data should be treated as. Possible types:															c: the argument is treated as an integer and presented as a character with that ASCII value.								d or i: the argument is treated as an integer and presented as a (signed) decimal number.								o: the argument is treated as an integer and presented as an octal number.								u: the argument is treated as an integer and presented as an unsigned decimal number.								x: the argument is treated as an integer and presented as a hexadecimal number (with lower-case letters).								X: the argument is treated as an integer and presented as a hexadecimal number (with upper-case letters).								f: the argument is treated as a float and presented as a floating-point number.								g: the same as e or f, the shortest one is selected.								G: the same as E or F, the shortest one is selected.								e: the argument is treated as using the scientific notation with lower-case 'e' (e.g. 1.2e+2).								E: the argument is treated as using the scientific notation with upper-case 'E' (e.g. 1.2E+2).								s: the argument is treated as and presented as a string.								p: the argument is treated as and presented as a pointer address.								%: a literal percent character. No argument is required.
			</summary> 
			<param name="format"> Format string. </param> 
			<returns>Stack of formatted strings.</returns>
		</member>
		<member name="M:Unigine.String class.ftoa(float,int)">
			<summary>
			Converts a float value to a string using specified precision.
			</summary> 
			<param name="value"> An input value. </param>
			<param name="precision"> Precision in the range [-1; 17]. Data is represented the following way:PrecisionRepresentationExample-1The shortest representation: decimal floating point or scientific notation (mantissa/exponent).2.6265e+20-8Decimal floating point.262.659-17The shortest representation: decimal floating point or scientific notation (mantissa/exponent) with the precision digits to be printed after the decimal point.2.6264999e+2 </param> 
			<returns>A string representation of the value.</returns>
		</member>
		<member name="M:Unigine.String class.grow_to(int)">
			<summary>
			Returns the actual length of a string corresponding to amount of memory which is enough to contain  at least the specified number of items.
			</summary> 
			<param name="new_length"> Minimum string length. </param> 
			<returns>String length.</returns>
		</member>
		<member name="M:Unigine.String class.hash(char,int)">
			<summary>
			Returns a hash value of a given string.
			</summary> 
			<param name="str"> A string. </param>
			<param name="size"> Length of string to be hashed. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.String class.itoa(int,int)">
			<summary>
			Returns string representation of a given decimal value.
			</summary> 
			<param name="value"> An input decimal value. </param>
			<param name="radix"> Numerical base used to represent the value as a string, between 2 and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary. </param> 
			<returns>String representation of a specified integer.</returns>
		</member>
		<member name="M:Unigine.String class.joinPaths(char,char)">
			<summary>
			Concatenates two paths and returns normalized result.
			</summary> 
			<param name="p0"> First part of the path (mainly a directory path). </param>
			<param name="p1"> Second part of the path. </param> 
			<returns>Resulting path.</returns>
		</member>
		<member name="M:Unigine.String class.joinPaths(char,String)">
			<summary>
			Concatenates two paths and returns a normalized result.
			</summary> 
			<param name="p0"> the first part of the path. </param>
			<param name="p1"> the second part of the path. </param> 
			<returns>Resulting path.</returns>
		</member>
		<member name="M:Unigine.String class.joinPaths(String,char)">
			<summary>
			Concatenates two paths and returns a normalized result.
			</summary> 
			<param name="p0"> the first part of the path. </param>
			<param name="p1"> the second part of the path. </param> 
			<returns>Resulting path.</returns>
		</member>
		<member name="M:Unigine.String class.joinPaths(String,String)">
			<summary>
			Concatenates two paths and returns normalized result.
			</summary> 
			<param name="p0"> the first part of the path. </param>
			<param name="p1"> the second part of the path. </param> 
			<returns>Resulting path.</returns>
		</member>
		<member name="M:Unigine.String class.joinPaths(String,char,char,int,int)">
			<summary>
			Concatenates two paths of a defined size and returns a normalized result.
			</summary> 
			<param name="ret"> a string to store the result. </param>
			<param name="p0"> the first part of the path (a directory path). </param>
			<param name="p1"> the second part of the path. </param>
			<param name="size0"> the size of the first part of the path. </param>
			<param name="size1"> the size of the second part of the path. </param> 
			<returns>Resulting path.</returns>
		</member>
		<member name="M:Unigine.String class.last">
			<summary>
			Returns the last character of the current string.
			</summary>  
			<returns>The current character.</returns>
		</member>
		<member name="M:Unigine.String class.last">
			<summary>
			Returns the last character of the current string.
			</summary>  
			<returns>The current character.</returns>
		</member>
		<member name="M:Unigine.String class.lower">
			<summary>
			Returns a lower-case equivalent of the current string. Non-alphabetic characters remain unchanged.
			</summary>  
			<returns>A lower-cased string.</returns>
		</member>
		<member name="M:Unigine.String class.ltoa(longlong,int)">
			<summary>
			Returns string representation of a given long long value.
			</summary> 
			<param name="value"> An input long long value. </param>
			<param name="radix"> Numerical base used to represent the value as a string, between 2 and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary. </param> 
			<returns>String representation of a specified long long value.</returns>
		</member>
		<member name="M:Unigine.String class.match(char,char)">
			<summary>
			Checks whether a str string matches a pattern.
			</summary> 
			<param name="pattern"> A string with Regular expression. </param>
			<param name="str"> A string to be checked. </param> 
			<returns>1 if str matches pattern; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.memory(size_t)">
			<summary>
			Returns a stack of strings containing information on memory consumption for the string.
			</summary> 
			<param name="memory"> Amount of memory. </param> 
			<returns>Stack of strings containing information on memory consumption for the string.</returns>
		</member>
		<member name="M:Unigine.String class.normalizeDirPath(char)">
			<summary>
			Returns normalized path string and ensures that it is a path to a directory (ends with a forward slash).
			</summary> 
			<param name="path"> An input path string. </param> 
			<returns>Normalized path to a directory.</returns>
		</member>
		<member name="M:Unigine.String class.normalizeDirPath(String,char,int)">
			<summary>
			Returns normalized path string and ensures that it is a path to a directory (ends with a forward slash).
			</summary> 
			<param name="ret"> a string to store the result. </param>
			<param name="path"> an input path string. </param>
			<param name="size"> the size of the resulting string. </param> 
			<returns>Normalized path to a directory.</returns>
		</member>
		<member name="M:Unigine.String class.normalizePath(char)">
			<summary>
			Returns a de-escaped path string where all double backslashes are replaced with forward ones.
			</summary> 
			<param name="path"> A string. </param> 
			<returns>Normalized path string.</returns>
		</member>
		<member name="M:Unigine.String class.normalizePath(String,char,int)">
			<summary>
			Returns a de-escaped path string where all double backslashes are replaced with forward ones.
			</summary> 
			<param name="ret"> a string to store the result. </param>
			<param name="path"> a path to the file to be normalized. </param>
			<param name="size"> the size of the resulting string. </param> 
			<returns>Normalized path string.</returns>
		</member>
		<member name="M:Unigine.String class.operator const char *">
			<summary>
			Returns the pointer to the current string.
			</summary>  
			<returns>The pointer to the current string.</returns>
		</member>
		<member name="M:Unigine.String class.operator const void *">
			<summary>
			Returns the pointer to the current string.
			</summary>  
		</member>
		<member name="M:Unigine.String class.operator+=(String)">
			<summary>
			String addition.
			</summary> 
			<param name="s"> The second string. </param> 
		</member>
		<member name="M:Unigine.String class.operator+=(char)">
			<summary>
			Symbol addition.
			</summary> 
			<param name="s"> The symbol. </param> 
		</member>
		<member name="M:Unigine.String class.operator+=(char)">
			<summary>
			Symbol addition.
			</summary> 
			<param name="c"> The symbol. </param> 
		</member>
		<member name="M:Unigine.String class.operator=(char)">
			<summary>
			Assignment operator for the string.
			</summary> 
			<param name="s"> The null-terminated string. </param> 
		</member>
		<member name="M:Unigine.String class.operator=(String)">
			<summary>
			Assignment operator for the string.
			</summary> 
			<param name="s"> The value of the string. </param> 
		</member>
		<member name="M:Unigine.String class.operator=(String)">
			<summary>
			Move assignment operator for the string.
			</summary> 
			<param name="s"> The string reference. </param> 
		</member>
		<member name="M:Unigine.String class.operator[](int)">
			<summary>
			Array access.
			</summary> 
			<param name="index"> Array item index. </param> 
			<returns>The array item.</returns>
		</member>
		<member name="M:Unigine.String class.operator[](int)">
			<summary>
			Constant array access.
			</summary> 
			<param name="index"> Array item index. </param> 
			<returns>The array item.</returns>
		</member>
		<member name="M:Unigine.String class.pathname">
			<summary>
			Parses the current string and returns path to a directory.
			</summary>  
			<returns>Directory name.</returns>
		</member>
		<member name="M:Unigine.String class.pathname(char)">
			<summary>
			Parses an input string and returns path to a directory.					Unlike the dirname function, the pathname is able to process the path syntax with parent directories ("../").
			</summary> 
			<param name="str"> A path string. </param> 
			<returns>Directory name.If the str string does not meet path syntax, an empty value will be returned.</returns>
		</member>
		<member name="M:Unigine.String class.printf(char,...)">
			<summary>
			Initializes a formatted string.
			</summary> 
			<param name="format"> Format string. </param>
			<param name="..."> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.String class.relname(char,char)">
			<summary>
			Returns a relative path for str relatively to path. Both paths can be either absolute or relative.
			</summary> 
			<param name="path"> The path of a working directory. </param>
			<param name="str"> A destination path. </param> 
			<returns>A relative pathname.</returns>
		</member>
		<member name="M:Unigine.String class.remove">
			<summary>
			Removes the last symbol of the string.
			</summary>  
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.remove(int,int)">
			<summary>
			Removes the specified number of symbols at the given position from the string.
			</summary> 
			<param name="pos"> Position. </param>
			<param name="size"> Number of symbols to remove. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.removeExtension(char)">
			<summary>
			Returns an input string without the file extension name.
			</summary> 
			<param name="str"> A path string. </param> 
			<returns>Pathname without an extension.</returns>
		</member>
		<member name="M:Unigine.String class.replace(char,char,int)">
			<summary>
			Replaces all occurrences of a substring in the current string with the specified new string.
			</summary> 
			<param name="before"> String to be replaced. </param>
			<param name="after"> String to replace the old one. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the replacement is case-sensitive; otherwise case is ignored. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.replace(char,char,char,int)">
			<summary>
			Replaces all occurrences of a substring in a given string with the specified new string.
			</summary> 
			<param name="str"> An original string. </param>
			<param name="before"> String to be replaced. </param>
			<param name="after"> String to replace the old one. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.replace(char,char,char,int)">
			<summary>
			Replaces all occurrences of a character in a given string with the specified new string.
			</summary> 
			<param name="str"> An original string. </param>
			<param name="before"> A character to be replaced. </param>
			<param name="after"> A character to replace the old one. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.replace(char,char,int)">
			<summary>
			Replaces all occurrences of a character in the current string with the specified new string.
			</summary> 
			<param name="before"> A character to be replaced. </param>
			<param name="after"> A character to replace the old one. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.reserve(int)">
			<summary>
			Requests that the string capacity be adapted to a planned change in size to a length of up to n characters. The function has no effect on the length or content of the string.
			</summary> 
			<param name="size"> Planned length for the string, in characters. </param> 
		</member>
		<member name="M:Unigine.String class.resize(int)">
			<summary>
			Resizes the string to a length of n characters.
			</summary> 
			<param name="size"> New string length, in characters. </param> 
		</member>
		<member name="M:Unigine.String class.reverseUtf8BiDirectional(String)">
			<summary>
			Reverses the order of the characters in the bi-directional string containing mixed left-to-right and right-to-left scripts.
			</summary> 
			<param name="string"> An input string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.rfind(String,int)">
			<summary>
			Searches the string for the last occurrence of s substring and returns the index of its last character.
			</summary> 
			<param name="s"> A substring to be located. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>An index of the first symbol of a substring if at least one match was found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.String class.rfind(char,int)">
			<summary>
			Searches the string for the last occurrence of c character and returns its index.
			</summary> 
			<param name="c"> A character to be located. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>An index of the character if at least one match was found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.String class.rfind(char,int)">
			<summary>
			Searches the string for the last occurrence of s substring and returns the index of its last character.
			</summary> 
			<param name="s"> A substring to be located. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param> 
			<returns>An index of the first symbol of a substring if at least one match was found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.String class.scanf(char,...)">
			<summary>
			Scans a formatted string.
			</summary> 
			<param name="format"> Format string. </param>
			<param name="..."> Arguments, multiple allowed. </param> 
			<returns>Number of arguments successfully read, or EOF, if failure occurs.</returns>
		</member>
		<member name="M:Unigine.String class.shrink">
			<summary>
			Requests the string to reduce its capacity to fit its size.
			</summary>  
		</member>
		<member name="M:Unigine.String class.size">
			<summary>
			Returns the size of the string.
			</summary>  
			<returns>The size of the string.</returns>
		</member>
		<member name="M:Unigine.String class.space">
			<summary>
			Returns the capacity of the string.
			</summary>  
			<returns>The capacity of the string.</returns>
		</member>
		<member name="M:Unigine.String class.split(char,char)">
			<summary>
			Splits an input string into an array of substrings using a specified set of separator characters.
			</summary> 
			<param name="str"> A string. </param>
			<param name="delimiters"> A string each character of which is a separator denoting a point at which a split should occur. </param> 
			<returns>An array of substrings.</returns>
		</member>
		<member name="M:Unigine.String class.sscanf(char,char)">
			<summary>
			Scans a formatted string.
			</summary> 
			<param name="str"> An input string. </param>
			<param name="format"> Format string. </param> 
			<returns>Number of arguments successfully read, or EOF, if failure occurs.</returns>
		</member>
		<member name="M:Unigine.String class.startsWith(char,char,int,int,int)">
			<summary>
			Checks whether a given string starts with a specified substring.
			</summary> 
			<param name="data"> A string. </param>
			<param name="str"> A substring. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param>
			<param name="data_size"> Length of the string. </param>
			<param name="str_size"> Length of the substring. </param> 
			<returns>1 if the string starts with the specified substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.startsWith(String,int,int)">
			<summary>
			Checks whether the current string starts with a specified substring.
			</summary> 
			<param name="s"> A substring. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param>
			<param name="size"> Length of the substring. </param> 
			<returns>1 if the string starts with the specified substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.startsWith(char,int,int)">
			<summary>
			Checks whether the current string starts with a specified substring.
			</summary> 
			<param name="s"> A substring. </param>
			<param name="case_sensitive"> Case sensitivity flag. If set to 1, the operation is case-sensitive; otherwise case is ignored. </param>
			<param name="size"> Length of the substring. </param> 
			<returns>1 if the string starts with the specified substring; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.String class.stripslashes(char)">
			<summary>
			Removes backslashes from a string.
			</summary> 
			<param name="str"> A string. </param> 
			<returns>Unquoted (de-escaped) string.</returns>
		</member>
		<member name="M:Unigine.String class.substr(int,int)">
			<summary>
			Returns the substring of the current string.
			</summary> 
			<param name="pos"> Starting position. </param>
			<param name="size"> Substring length. </param> 
			<returns>A Substring.</returns>
		</member>
		<member name="M:Unigine.String class.substr(char,int,int)">
			<summary>
			Returns the substring of a given string.
			</summary> 
			<param name="str"> A string. </param>
			<param name="pos"> Starting position. </param>
			<param name="size"> Substring length. </param> 
			<returns>A Substring.</returns>
		</member>
		<member name="M:Unigine.String class.substr(String,int,int)">
			<summary>
			Returns the substring of a given string.
			</summary> 
			<param name="str"> A string. </param>
			<param name="pos"> Starting position. </param>
			<param name="size"> Substring length. </param> 
			<returns>A Substring.</returns>
		</member>
		<member name="M:Unigine.String class.toLower(char)">
			<summary>
			Returns a lower-case equivalent of a character, if possible. If not, the character is returned unchanged.
			</summary> 
			<param name="c"> A character. </param> 
			<returns>A lower-cased character.</returns>
		</member>
		<member name="M:Unigine.String class.toUpper(char)">
			<summary>
			Returns an upper-case equivalent of a character, if possible. If not, the character is returned unchanged.
			</summary> 
			<param name="c"> A character. </param> 
			<returns>An upper-cased character.</returns>
		</member>
		<member name="M:Unigine.String class.trim(char)">
			<summary>
			Removes the specified symbols from the beginning and the ending of the current string.
			</summary> 
			<param name="symbols"> A string with symbols to remove.If the symbols argument is not specified, the function removes white spaces from the string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.trim(char,char)">
			<summary>
			Removes the specified symbols from the beginning and the ending of a given string.
			</summary> 
			<param name="str"> A string. </param>
			<param name="symbols"> A string with symbols to remove.If the symbols argument is not specified, the function removes white spaces from the string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.trimFirst(char)">
			<summary>
			Removes the specified symbols only from the beginning of the current string.
			</summary> 
			<param name="symbols"> A string with symbols to remove.If the symbols argument is not specified, the function removes white spaces from the string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.trimFirst(char,char)">
			<summary>
			Removes the specified symbols only from the beginning of a given string.
			</summary> 
			<param name="str"> A string. </param>
			<param name="symbols"> A string with symbols to remove.If the symbols argument is not specified, the function removes white spaces from the string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.trimLast(char)">
			<summary>
			Removes the specified symbols only from the end of the current string.
			</summary> 
			<param name="symbols"> A string with symbols to remove.If the symbols argument is not specified, the function removes white spaces from the string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.trimLast(char,char)">
			<summary>
			Removes the specified symbols only from the end of a given string.
			</summary> 
			<param name="str"> A string. </param>
			<param name="symbols"> A string with symbols to remove.If the symbols argument is not specified, the function removes white spaces from the string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.unicodeGetDirection(unsignedint)">
			<summary>
			Returns the type of a unicode character.
			</summary> 
			<param name="code"> A unicode character. </param> 
			<returns>An item of the String::Direction enumerator. The following types are possible:LTR - left-to-right characters.RTL - right-to-left characters.Neutral - non-directional characters.Digit - numeric characters.</returns>
		</member>
		<member name="M:Unigine.String class.unicodeToUtf8(unsignedint,char)">
			<summary>
			Converts a unicode character to UTF-8.
			</summary> 
			<param name="code"> A unicode character. </param>
			<param name="dest"> A destination pointer. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.unicodeToUtf8(wchar_t)">
			<summary>
			Converts a string to UTF-8.
			</summary> 
			<param name="src"> A string. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.unicodeToUtf8(unsignedint)">
			<summary>
			Converts a set of unicode characters to a UTF-8-encoded string.
			</summary> 
			<param name="src"> A set of characters. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.unicodeToUtf8(unsignedint)">
			<summary>
			Converts a unicode character to a UTF-8-encoded string.
			</summary> 
			<param name="code"> A unicode character. </param> 
			<returns>Resulting string.</returns>
		</member>
		<member name="M:Unigine.String class.upper">
			<summary>
			Returns an upper-case equivalent of the current string. Non-alphabetic characters remain unchanged.
			</summary>  
			<returns>An upper-cased string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8strlen">
			<summary>
			Returns the wide-character length of the current string.
			</summary>  
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8strlen(char)">
			<summary>
			Returns the wide-character length of a string.
			</summary> 
			<param name="str"> A string. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8substr(int,int)">
			<summary>
			Returns the wide-character substring.
			</summary> 
			<param name="pos"> Starting position. </param>
			<param name="size"> Substring length. </param> 
			<returns>The substring.</returns>
		</member>
		<member name="M:Unigine.String class.utf8substr(char,int,int)">
			<summary>
			Returns the wide-character substring of a given string.
			</summary> 
			<param name="str"> An input string. </param>
			<param name="pos"> Starting position. </param>
			<param name="size"> Substring length. </param> 
			<returns>The substring.</returns>
		</member>
		<member name="M:Unigine.String class.utf8ToUnicode(wchar_t,int)">
			<summary>
			Converts a string into the wide-character string.
			</summary> 
			<param name="dest"> Pointer to the wide-character string. </param>
			<param name="size"> Size of wide-character string in symbols. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8ToUnicode(unsignedint,int)">
			<summary>
			Converts a string into the wide-character string.
			</summary> 
			<param name="dest"> Pointer to the wide-character string. </param>
			<param name="size"> Size of wide-character string in symbols. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8ToUnicode(char,wchar_t,int)">
			<summary>
			Converts a string into the wide-character string.
			</summary> 
			<param name="src"> A source string. </param>
			<param name="dest"> Pointer to the wide-character string. </param>
			<param name="size"> Size of wide-character string in symbols. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8ToUnicode(char,unsignedint)">
			<summary>
			Converts a string into the wide-character string.
			</summary> 
			<param name="src"> A source string. </param>
			<param name="code"> A character. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.utf8ToUnicode(char,unsignedint,int)">
			<summary>
			Converts a string into the wide-character string.
			</summary> 
			<param name="src"> A source string. </param>
			<param name="dest"> Pointer to the set of characters. </param>
			<param name="size"> Size of wide-character string in symbols. </param> 
			<returns>Length of the wide-character string.</returns>
		</member>
		<member name="M:Unigine.String class.vprintf(char,va_list)">
			<summary>
			Initializes a formatted string.
			</summary> 
			<param name="format"> Format string. </param>
			<param name="argptr"> Arguments pointer. </param> 
		</member>
		<member name="M:Unigine.String class.vscanf(char,va_list)">
			<summary>
			Scans a formatted string.
			</summary> 
			<param name="format"> Format string. </param>
			<param name="argptr"> Arguments pointer. </param> 
			<returns>Number of arguments successfully read, or EOF if failure occurs.</returns>
		</member>
		<member name="M:Unigine.String class.vsscanf(char,char,va_list)">
			<summary>
			Scans a formatted string.
			</summary> 
			<param name="str"> An input string. </param>
			<param name="format"> Format string. </param>
			<param name="argptr"> Arguments pointer. </param> 
			<returns>Number of arguments successfully read, or EOF if failure occurs.</returns>
		</member>
		<member name="F:Unigine.String class.null">
			<summary>
			Null string.
		</summary>
		</member>
		<member name="M:Unigine.StringArray class.#ctor(int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringArray class.#ctor(StringArray{Capacity})">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringArray class.empty">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringArray class.operator[](int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringArray class.size">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.#ctor">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.#ctor(String)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.#ctor(StringPtr)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.#ctor(char)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator=(StringPtr)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.clear">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator=(char)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.empty">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.size">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator+=(String)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator=(String)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.swap(StringPtr)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator+=(char)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.get">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator const void *">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.getString">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringPtr class.operator const char *">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.#ctor">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.#ctor(String)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.#ctor(StringStack{Capacity})">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.#ctor(char)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.destroy">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.StringStack&lt;Capacity&gt;(StringStack{OtherCapacity})">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.operator=(StringStack{Capacity})">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.operator=(char)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.operator=(StringStack{OtherCapacity})">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.StringStack class.operator=(String)">
			<summary>
			</summary>  
		</member>
	</members>
</doc>