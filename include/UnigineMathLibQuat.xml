<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.quat.#ctor(__m128)">
			<summary>
			Constructor. Initializes the quaternion using a given __m128 variable (128-bit).					We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="v"> 128-bit variable. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(mat3)">
			<summary>
			Constructor. Initializes the quaternion using a given mat3 source matrix (3x3).
			</summary> 
			<param name="m"> Source matrix (3x3). </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(Unigine.vec4)">
			<summary>
			Constructor. Initializes the quaternion using a given four-component vec4 source vector.
			</summary> 
			<param name="v"> Four-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor">
			<summary>
			Default constructor. Produces an identity quaternion (0.0, 0.0, 0.0, 1.0).
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.#ctor(Unigine.quat)">
			<summary>
			Constructor. Initializes the quaternion by copying a given source quaternion.
			</summary> 
			<param name="q"> Source quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(Unigine.vec3,float)">
			<summary>
			Constructor. Initializes the quaternion using given rotation axis and angle.
			</summary> 
			<param name="axis"> Rotation axis. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(float,float,float)">
			<summary>
			Constructor. Initializes the quaternion using given angles for each axis.
			</summary> 
			<param name="angle_x"> Rotation angle along the X axis, in degrees. </param>
			<param name="angle_y"> Rotation angle along the Y axis, in degrees. </param>
			<param name="angle_z"> Rotation angle along the Z axis, in degrees. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Constructor. Initializes the quaternion using three given matrix columns represented by vec3 vectors.
			</summary> 
			<param name="col0"> First matrix column. </param>
			<param name="col1"> Second matrix column. </param>
			<param name="col2"> Third matrix column. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor">
			<summary>
			Constructor. Initializes the quaternion.
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.#ctor(Unigine.mat4)">
			<summary>
			Constructor. Initializes the quaternion using a given mat4 source matrix (4x4).
			</summary> 
			<param name="m"> Source matrix (4x4). </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(Unigine.dmat4)">
			<summary>
			Constructor. Initializes the quaternion using a given dmat4 source matrix (3x4).
			</summary> 
			<param name="m"> Source matrix (3x4). </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(float)">
			<summary>
			Constructor. Initializes the vector using a given pointer to the quaternion.
			</summary> 
			<param name="q"> Pointer to the quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.quat.#ctor(float,float,float,float,ConstexprTag)">
			<summary>
			Constructor. Initializes the quaternion using given constant float values.
			</summary> 
			<param name="x_"> X component of the quaternion. </param>
			<param name="y_"> Y component of the quaternion. </param>
			<param name="z_"> Z component of the quaternion. </param>
			<param name="w_"> W component of the quaternion. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(float,float,float,float)">
			<summary>
			Sets the quaternion using the given angle and axis coordinates.
			</summary> 
			<param name="axis_x"> X coordinate of the axis. </param>
			<param name="axis_y"> Y coordinate of the axis. </param>
			<param name="axis_z"> Z coordinate of the axis. </param>
			<param name="angle"> Angle value, in degrees. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(float)">
			<summary>
			Sets the quaternion using a given pointer to the source quaternion.
			</summary> 
			<param name="q"> Pointer to the source quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(mat3)">
			<summary>
			Sets the quaternion using a given mat3 source matrix (3x3).
			</summary> 
			<param name="m"> Source matrix (3x3). </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Sets the quaternion using three given matrix columns represented by vec3 vectors.
			</summary> 
			<param name="col0"> First matrix column. </param>
			<param name="col1"> Second matrix column. </param>
			<param name="col2"> Third matrix column. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(float,float,float)">
			<summary>
			Sets the quaternion using given angles for each axis.
			</summary> 
			<param name="angle_x"> Rotation angle along the X axis, in degrees. </param>
			<param name="angle_y"> Rotation angle along the Y axis, in degrees. </param>
			<param name="angle_z"> Rotation angle along the Z axis, in degrees. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(Unigine.vec3,float)">
			<summary>
			Sets the quaternion using given rotation axis and angle.
			</summary> 
			<param name="axis"> Rotation axis. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(Unigine.dmat4)">
			<summary>
			Sets the quaternion using a given dmat4 source matrix (3x4).
			</summary> 
			<param name="m"> Source matrix (3x4). </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(Unigine.mat4)">
			<summary>
			Sets the quaternion using a given mat4 source matrix (4x4).
			</summary> 
			<param name="m"> Source matrix (4x4). </param> 
		</member>
		<member name="M:Unigine.Math.quat.get(float) const">
			<summary>
			Gets the quaternion: qq[0]=x, qq[1]=y, qq[2]=z, qq[3]=w.
			</summary> 
			<param name="qq"> Pointer to the quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.quat.get">
			<summary>
			Returns a pointer to the quaternion.
			</summary>  
			<returns>Pointer to the quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.get const">
			<summary>
			Returns a constant pointer to the quaternion.
			</summary>  
			<returns>Constant pointer to the quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.get(Unigine.vec3,float) const">
			<summary>
			Gets rotation axis and angle of the quaternion and puts the values to corresponding variables: axis.x = x, axis.y = y, axis.z = z, angle = w.
			</summary> 
			<param name="axis"> Rotation axis. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Math.quat.getAngle(Unigine.vec3) const">
			<summary>
			Returns the rotation angle of the quaternion for a given rotation axis.
			</summary> 
			<param name="axis"> Rotation axis. </param> 
			<returns>Rotation angle, in degrees, within the [-180, 180] range.</returns>
		</member>
		<member name="M:Unigine.Math.quat.getBinormal const">
			<summary>
			Returns the quaternion binormal vector with respect to orientation.
			</summary>  
			<returns>Quaternion binormal vector.</returns>
		</member>
		<member name="M:Unigine.Math.quat.getMat3 const">
			<summary>
			Returns the rotation matrix for the quaternion.
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.getNormal const">
			<summary>
			Returns the quaternion normal vector.
			</summary>  
			<returns>Quaternion normal vector.</returns>
		</member>
		<member name="M:Unigine.Math.quat.getTangent const">
			<summary>
			Returns the quaternion tangent vector.
			</summary>  
			<returns>Quaternion tangent vector.</returns>
		</member>
		<member name="M:Unigine.Math.quat.getTangent4 const">
			<summary>
			Returns the quaternion tangent vector and binormal orientation as a four-component vec4 vector.
			</summary>  
			<returns>Four-component vector representing guaternion tangent vector and binormal orientation.</returns>
		</member>
		<member name="M:Unigine.Math.quat.normalize">
			<summary>
			Returns normalized quaternion.
			</summary>  
			<returns>Normalized quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.normalizeValid">
			<summary>
			Normalizes a quaternion, makes its magnitude equal to 1. When normalized, a quaternion keeps the same direction but its length is equal to 1. Check for the zero quaternion is performed: if the argument is a zero quaternion, then a zero quaternion is returned.
			</summary>  
			<returns>Normalized quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.normalizeFast">
			<summary>
			Returns normalized quaternion, calculated using the fast inverse square root algorithm.
			</summary>  
			<returns>Normalized quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.normalizeValidFast">
			<summary>
			Returns normalized quaternion, calculated using the fast inverse square root algorithm. Check for the zero quaternion is performed: if the argument is a zero quaternion, then a zero quaternion is returned.
			</summary>  
			<returns>Normalized quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator const float * const">
			<summary>
			Performs type conversion to float void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.operator const void * const">
			<summary>
			Performs type conversion to const void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.operator float *">
			<summary>
			Performs type conversion to float *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.operator void *">
			<summary>
			Performs type conversion to void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.quat.operator*=(Unigine.quat)">
			<summary>
			Performs quaternion multiplication.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator*=(float)">
			<summary>
			Performs scalar multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator+=(Unigine.quat)">
			<summary>
			Performs quaternion addition.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator- const">
			<summary>
			Performs quaternion negation. The sign of each component of the quaternion is flipped.
			</summary>  
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator-=(Unigine.quat)">
			<summary>
			Performs quaternion subtraction.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator=(__m128)">
			<summary>
			Sets the quaternion using a __m128 variable (128-bit) as a source.					We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="v"> 128-bit variable. </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator=(Unigine.quat)">
			<summary>
			Performs quaternion assignment. Destination quaternion = Source quaternion.
			</summary> 
			<param name="q"> Source quaternion. </param> 
			<returns>Result.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator[](int)">
			<summary>
			Performs array access to the quaternion item reference by using given item index.
			</summary> 
			<param name="i"> Quaternion item index. </param> 
			<returns>Quaternion item reference.</returns>
		</member>
		<member name="M:Unigine.Math.quat.operator[](int) const">
			<summary>
			Performs array access to the quaternion item by using given item index.
			</summary> 
			<param name="i"> Quaternion item index. </param> 
			<returns>Quaternion item.</returns>
		</member>
		<member name="M:Unigine.Math.quat.set(Unigine.vec4)">
			<summary>
			Sets the quaternion using a given four-component vec4 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.quat.set(Unigine.quat)">
			<summary>
			Sets the quaternion using the source quaternion.
			</summary> 
			<param name="v"> Source quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.quat.hash const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Math.quat.quat_identity">
			<summary>
			Quaternion representing no rotation (0.0, 0.0, 0.0, 1.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.quat.quat_zero">
			<summary>
			Zero quaternion (0.0, 0.0, 0.0, 0.0).
		</summary>
		</member>
	</members>
</doc>