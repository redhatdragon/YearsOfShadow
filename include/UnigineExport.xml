<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Export.#ctor">
			<summary>
			Constructor. Creates an exporter with default settings.
			</summary>  
		</member>
		<member name="M:Unigine.Export.get">
			<summary>
			Returns a pointer to the Export manager.
			</summary>  
			<returns>Export manager instance.</returns>
		</member>
		<member name="M:Unigine.Export.registerExporter(char,Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Registers a new exporter with a given name for the specified list of file extensions.
			</summary> 
			<param name="type_name"> Exporter type name. </param>
			<param name="extensions"> List of file extensions for which the specified Exporter is to be used. </param> 
		</member>
		<member name="M:Unigine.Export.unregisterExporter(char)">
			<summary>
			Unregisters the specified exporter type.
			</summary> 
			<param name="type_name"> Exporter type name. </param> 
		</member>
		<member name="M:Unigine.Export.createExporter(char) const">
			<summary>
			Creates a new exporter of the specified type.					The exporter type name specified must be previously registered.
			</summary> 
			<param name="type_name"> Exporter type name. </param> 
			<returns>Pointer to a new created exporter of a given type, if it was created successfully; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Export.createExporterByFileName(char) const">
			<summary>
			Creates an exporter for the output file with a given name by its extension, if such an exporter was previously registered.
			</summary> 
			<param name="file_name"> Name of the output file containing the data to be exported. </param> 
			<returns>Pointer to the exporter, if it was successfully created for the file with a given name; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Export.getExporterTypes const">
			<summary>
			Returns the list of all exporter types registered by the Export Manager.
			</summary>  
			<returns>List of all exporter types registered by the Export Manager as a vector of strings.</returns>
		</member>
		<member name="M:Unigine.Export.getExporterTypes(Unigine.Vector{String,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all exporter types registered by the Export Manager and puts it to the given vector.
			</summary> 
			<param name="types"> Vector to put the list of all registered exporter types to. </param> 
		</member>
		<member name="M:Unigine.Export.isSupportedExtension(char) const">
			<summary>
			Returns a value indicating whether the specified file extension is supported by the exporter.
			</summary> 
			<param name="extension"> Null-terminated string with file extension to be checked. </param> 
			<returns>true if the specified file extension is supported by the exporter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Export.getSupportedExtensions const">
			<summary>
			Returns the list of all supported file extensions as a vector of strings.
			</summary>  
			<returns>List of all supported extensions as a vector of strings.</returns>
		</member>
		<member name="M:Unigine.Export.getSupportedExtensions(Unigine.Vector{String,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns the list of all supported file extensions and puts it to the given vector.
			</summary> 
			<param name="extensions"> Vector to put the list of all supported extensions to. </param> 
		</member>
		<member name="M:Unigine.Export.getExporterTypeByExtension(char) const">
			<summary>
			Returns the type of exporter for the specified extension.
			</summary> 
			<param name="extension"> Null-terminated string with file extension. </param> 
			<returns>Type of exporter for the specified extension, if it exists, as a string; otherwise, null string.</returns>
		</member>
		<member name="M:Unigine.Export.doExport(NodePtr,char) const">
			<summary>
			Creates an exporter and then exports the node to the specified output file.
			</summary> 
			<param name="root_node"> Root node of the hierarchy to be exported. </param>
			<param name="output_filepath"> Output path to be used to store generated file(s) with exported data. </param> 
			<returns>true if the file is exported successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Exporter.#ctor">
			<summary>
			Constructor. Creates an exporter with default settings.
			</summary>  
		</member>
		<member name="M:Unigine.Exporter.containsParameter(char) const">
			<summary>
			Returns a value indicating whether the list of export parameters includes a parameter with a given name.
			</summary> 
			<param name="name"> Parameter name. </param> 
			<returns>1 if the list of export parameters includes a parameter with a given name; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Exporter.setParameterInt(char,int)">
			<summary>
			Sets a new value for the specified integer parameter.
			</summary> 
			<param name="name"> Name of the integer parameter. </param>
			<param name="v"> New value to be set. </param> 
		</member>
		<member name="M:Unigine.Exporter.getParameterInt(char) const">
			<summary>
			Returns the current value of the specified integer parameter.
			</summary> 
			<param name="name"> Name of the integer parameter. </param> 
			<returns>Value of the integer parameter.</returns>
		</member>
		<member name="M:Unigine.Exporter.setParameterFloat(char,float)">
			<summary>
			Sets a new value for the specified float parameter.
			</summary> 
			<param name="name"> Name of the float parameter. </param>
			<param name="v"> New value to be set. </param> 
		</member>
		<member name="M:Unigine.Exporter.getParameterFloat(char) const">
			<summary>
			Returns the current value of the specified float parameter.
			</summary> 
			<param name="name"> Name of the float parameter. </param> 
			<returns>Value of the float parameter.</returns>
		</member>
		<member name="M:Unigine.Exporter.setParameterDouble(char,double)">
			<summary>
			Sets a new value for the specified double parameter.
			</summary> 
			<param name="name"> Name of the double parameter. </param>
			<param name="v"> New value to be set. </param> 
		</member>
		<member name="M:Unigine.Exporter.getParameterDouble(char) const">
			<summary>
			Returns the current value of the specified double parameter.
			</summary> 
			<param name="name"> Name of the double parameter. </param> 
			<returns>Value of the double parameter.</returns>
		</member>
		<member name="M:Unigine.Exporter.setParameterString(char,char)">
			<summary>
			Sets a new value for the specified string parameter.
			</summary> 
			<param name="name"> Name of the string parameter. </param>
			<param name="v"> New value to be set. </param> 
		</member>
		<member name="M:Unigine.Exporter.getParameterString(char) const">
			<summary>
			Returns the current value of the specified string parameter.
			</summary> 
			<param name="name"> Name of the string parameter. </param> 
			<returns>Value of the string parameter.</returns>
		</member>
		<member name="M:Unigine.Exporter.init">
			<summary>
			Initializes the exporter.
			</summary>  
		</member>
		<member name="M:Unigine.Exporter.doExport(NodePtr,char)">
			<summary>
			Exports the node to the specified output file.					To customize actions to be performed on node export processing you can override the onExport() method.
			</summary> 
			<param name="root_node"> Root node of the hierarchy to be exported. </param>
			<param name="output_filepath"> Output path to be used to store generated file(s) with exported data. </param> 
		</member>
		<member name="M:Unigine.Exporter.deinit">
			<summary>
			Uninitializes the exporter.
			</summary>  
		</member>
		<member name="M:Unigine.Exporter.onInit">
			<summary>
			Initializes the exporter. This function is called each time when the init() function is called. You can specify your custom actions to be performed on exporter initialization.
			</summary>  
		</member>
		<member name="M:Unigine.Exporter.onExport(NodePtr,char)">
			<summary>
			Node export processing event handler function. This function is called each time when the doExport() function is called. You can specify your custom actions to be performed on node export processing.
			</summary> 
			<param name="root_node"> Root node of the hierarchy to be exported. </param>
			<param name="output_filepath"> Output path to be used to store generated file(s) with exported data. </param> 
			<returns>true if export operation for the specified output path was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Exporter.onDeinit">
			<summary>
			Uninitializes the exporter. This function is called each time when the deinit() function is called. You can specify your custom actions to be performed on exporter uninitialization.
			</summary>  
		</member>
	</members>
</doc>