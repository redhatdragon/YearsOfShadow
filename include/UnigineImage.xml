<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Image.#ctor">
			<summary>
			Default constructor. An empty instance with default parameters is created.
			</summary>  
		</member>
		<member name="M:Unigine.Image.#ctor(char)">
			<summary>
			Constructor. Creates an image loading data from the specified file.
			</summary> 
			<param name="name"> Image file name. </param> 
		</member>
		<member name="M:Unigine.Image.#ctor(Unigine.Ptr{Unigine.Image})">
			<summary>
			Constructor. Creates an image by copying a given source image.
			</summary> 
			<param name="image"> Source image. </param> 
		</member>
		<member name="M:Unigine.Image.allocData(bool)">
			<summary>
			Allocates memory for the image data.
			</summary> 
			<param name="clear"> Clear flag: set true to fill allocated memory with zero-values; otherwise, set false. </param> 
			<returns>true if memory for the image data is allocated successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.clearData">
			<summary>
			Clears all image data.
			</summary>  
		</member>
		<member name="M:Unigine.Image.set(int,Unigine.Math.dvec4)">
			<summary>
			Sets a value for a pixel by its id. Compressed and combined image formats are not supported.
			The code below sets the specified color value for all image pixels:
			</summary> 
			<param name="id"> Pixel ID: id = image_width * Y + X,  (0 , 0) - top left corner of the image. </param>
			<param name="value"> RGBA color of a pixel with the specified ID. </param> 
		</member>
		<member name="M:Unigine.Image.get(int,Unigine.Math.dvec4) const">
			<summary>
			Gens a value for a pixel by its id and puts it to value.
			</summary> 
			<param name="id"> Pixel ID: id = image_width * Y + X,  (0 , 0) - top left corner of the image. </param>
			<param name="value"> RGBA color of a pixel with the specified ID. </param> 
		</member>
		<member name="M:Unigine.Image.get(Unigine.Math.ivec2,int) const">
			<summary>
			Returns image data for the specified pixel coordinates and mipmap offset as a four-component vector.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in range [0; width], Y in range [0; height]. </param>
			<param name="offset"> Mipmap offset value. </param> 
			<returns>A vec4 vector (R, G, B, A) containing image data for the specified pixel coordinates, with components normalized in the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Image.get(Unigine.Math.ivec2,int,Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4) const">
			<summary>
			Returns image data for the specified pixel coordinates and mipmap offset (along with neighboring pixels) as a set of four-component vectors.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in range [0; width], Y in range [0; height]. </param>
			<param name="offset"> Mipmap offset value. </param>
			<param name="p00"> A vec4 vector (R, G, B, A) containing image data for the specified pixel coordinates (X, Y), with components normalized in the [0.0f; 1.0f] range. </param>
			<param name="p01"> A vec4 vector (R, G, B, A) containing image data for the neighboring pixel coordinates (X, Y+1), with components normalized in the [0.0f; 1.0f] range. </param>
			<param name="p10"> A vec4 vector (R, G, B, A) containing image data for the neighboring pixel coordinates (X+1, Y), with components normalized in the [0.0f; 1.0f] range. </param>
			<param name="p11"> A vec4 vector (R, G, B, A) containing image data for the neighboring pixel coordinates (X+1, Y+1), with components normalized in the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Image.get8F(Unigine.Math.ivec2,Unigine.Math.vec4) const">
			<summary>
			Returns a set of 8-bit float values stored in the specified image pixel and neighboring ones and puts them to the output vector.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in the [0; width] range, Y in the [0; height] range. </param>
			<param name="p"> Output vec4 vector (P00, P01, P10, P11) to receive 8-bit float values stored in the specified image pixel and neighboring ones:P00 - (X, Y)P01 - (X, Y+1)P10 - (X+1, Y)P11 - (X+1, Y+1)Values are normalized in the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Image.get8F(Unigine.Math.ivec2) const">
			<summary>
			Returns an 8-bit float value stored in the specified pixel of the image.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in the [0; width] range, Y in the [0; height] range. </param> 
			<returns>An 8-bit float value stored in the specified pixel of the image normalized in the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Image.get16F(Unigine.Math.ivec2,Unigine.Math.vec4) const">
			<summary>
			Returns a set of 16-bit float values stored in the specified image pixel and neighboring ones and puts them to the output vector.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in the [0; width] range, Y in the [0; height] range. </param>
			<param name="p"> Output vec4 vector (P00, P01, P10, P11) to receive 16-bit float values stored in the specified image pixel and neighboring ones:P00 - (X, Y)P01 - (X, Y+1)P10 - (X+1, Y)P11 - (X+1, Y+1)Values are normalized in the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Image.get16F(Unigine.Math.ivec2) const">
			<summary>
			Returns a 16-bit float value stored in the specified pixel of the image.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in the [0; width] range, Y in the [0; height] range. </param> 
			<returns>A 16-bit float value stored in the specified pixel of the image normalized in the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Image.get32F(Unigine.Math.ivec2,Unigine.Math.vec4) const">
			<summary>
			Returns a set of 32-bit float values stored in the specified image pixel and neighboring ones and puts them to the output vector.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in the [0; width] range, Y in the [0; height] range. </param>
			<param name="p"> Output vec4 vector (P00, P01, P10, P11) to receive 32-bit float values stored in the specified image pixel and neighboring ones:P00 - (X, Y)P01 - (X, Y+1)P10 - (X+1, Y)P11 - (X+1, Y+1)Values are normalized in the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Image.get32F(Unigine.Math.ivec2) const">
			<summary>
			Returns a 32-bit float value stored in the specified pixel of the image.
			</summary> 
			<param name="coord"> Pixel coordinates (X, Y) - X in the [0; width] range, Y in the [0; height] range. </param> 
			<returns>A 32-bit float value stored in the specified pixel of the image normalized in the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Image.set2D(int,int,Image::Pixel)">
			<summary>
			Sets a color for a given pixel of a 2D image. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="r"> Red component of a color normalized in range from 0 to 1. </param>
			<param name="g"> Green component of a color normalized in range from 0 to 1. </param>
			<param name="b"> Blue component of a color normalized in range from 0 to 1. </param>
			<param name="a"> Alpha component of a color normalized in range from 0 to 1. </param>
			<param name="color"> Color. It can be a vector of 4 float or integer components (vec4 or ivec4) or a scalar (for images with a single channel). </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.set2D(Unigine.Math.ivec2,Image::Pixel)">
			<summary>
			Sets a color for a given pixel of a 2D image. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Integer coordinates of a pixel in the following ranges: X - [0; width], Y - [0; height]. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.get2D(int,int) const">
			<summary>
			Returns a color of a given pixel of a 2D image. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2D(float,float) const">
			<summary>
			Returns a color of a given pixel of a 2D image. Linear interpolation is used to get a color sample. Compressed formats are not supported.
			</summary> 
			<param name="x"> X float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="y"> Y float coordinate of a pixel in range [0.0f; 1.0f]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2D(float,float,Image::Pixel) const">
			<summary>
			Returns a color of a given pixel of a 2D image. Linear interpolation is used to get a color sample. Compressed formats are not supported.					If at least one of four interpolated pixels is equal to skip_pixel, the method will return skip_pixel.
			</summary> 
			<param name="x"> X float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="y"> Y float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="skip_pixel"> Skip pixel color represented by a Pixel structure. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2D(Unigine.Math.ivec2) const">
			<summary>
			Returns a color of a given pixel of a 2D image. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Integer coordinates of a pixel in the following ranges: X - [0; width], Y - [0; height]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2D(Unigine.Math.vec2) const">
			<summary>
			Returns a color of a given pixel of a 2D image. Linear interpolation is used to get a color sample. Compressed formats are not supported.
			</summary> 
			<param name="uv"> Float coordinates of a pixel in range [0.0f; 1.0f]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2D(Unigine.Math.vec2,Image::Pixel) const">
			<summary>
			Returns a color of a given pixel of a 2D image. Linear interpolation is used to get a color sample. Compressed formats are not supported.					If at least one of four interpolated pixels is equal to skip_pixel, the method will return skip_pixel.
			</summary> 
			<param name="uv"> Float coordinates of a pixel in range [0.0f; 1.0f]. </param>
			<param name="skip_pixel"> Skip pixel color represented by a Pixel structure. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.set2DArray(int,int,int,Image::Pixel)">
			<summary>
			Sets a color of a given pixel. The image must be a 2D image array. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="layer"> Image layer number. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.set2DArray(Unigine.Math.ivec2,int,Image::Pixel)">
			<summary>
			Sets a color of a given pixel. The image must be a 2D texture array. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Coordinates of a pixel. </param>
			<param name="layer"> Image layer number. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.get2DArray(int,int,int) const">
			<summary>
			Returns a color of a given pixel. The image must be a 2D texture array. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2DArray(float,float,int) const">
			<summary>
			Returns a color of a given pixel. The image must be a 2D image array. Compressed formats are not supported. Linear interpolation is used to get a color sample.
			</summary> 
			<param name="x"> X float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="y"> Y float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2DArray(Unigine.Math.ivec2,int) const">
			<summary>
			Returns a color of a given pixel. The image must be a 2D texture array. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Coordinates of a pixel. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get2DArray(Unigine.Math.vec2,int) const">
			<summary>
			Returns a color of a given pixel. The image must be a 2D texture array. Compressed formats are not supported.
			</summary> 
			<param name="uv"> UV coordinates of a pixel. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.is2DType const">
			<summary>
			Returns a value indicating if the image is a 2D image.
			</summary>  
			<returns>true if the image is a 2D image; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.Image.set3D(int,int,int,Image::Pixel)">
			<summary>
			Sets a color of a given pixel of a 3D image. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="z"> Z integer coordinate of a pixel in range [0; depth]. </param>
			<param name="r"> Red component of a color normalized in range from 0 to 1. </param>
			<param name="g"> Green component of a color normalized in range from 0 to 1. </param>
			<param name="b"> Blue component of a color normalized in range from 0 to 1. </param>
			<param name="a"> Alpha component of a color normalized in range from 0 to 1. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.set3D(Unigine.Math.ivec3,Image::Pixel)">
			<summary>
			Sets a color of a given pixel of a 3D image. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Integer coordinates of a pixel in the following ranges: X - [0; width], Y - [0; height], Z - [0; depth]. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.get3D(float,float,float) const">
			<summary>
			Returns a color of a given pixel of a 3D image. Linear interpolation is used to get a color sample. Compressed formats are not supported.
			</summary> 
			<param name="x"> X float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="y"> Y float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="z"> Z float coordinate of a pixel in range [0.0f; 1.0f]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get3D(int,int,int) const">
			<summary>
			Returns a color of a given pixel of a 3D image. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="z"> Z integer coordinate of a pixel in range [0; depth]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get3D(Unigine.Math.ivec3) const">
			<summary>
			Returns a color of a given pixel of a 3D image. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Integer coordinates of a pixel in the following ranges: X - [0; width], Y - [0; height], Z - [0; depth]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get3D(Unigine.Math.vec3) const">
			<summary>
			Returns a color of a given pixel of a 3D image. Linear interpolation is used to get a color sample. Compressed formats are not supported.
			</summary> 
			<param name="uvw"> Float coordinates of a pixel in range [0.0f; 1.0f]. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.get3DSmooth(float,float,float) const">
			<summary>
			Returns a color of a given pixel obtained using linear interpolation. Compressed formats are not supported.					This method returns pixel color with float components in the range [0.0f, 1.0f] regardless of the image format.
			</summary> 
			<param name="x"> X float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="y"> Y float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="z"> Z float coordinate of a pixel in range [0.0f; 1.0f]. </param> 
			<returns>Pixel color represented by a Pixel structure with float components in the range [0.0f, 1.0f].</returns>
		</member>
		<member name="M:Unigine.Image.get3DSmooth(Unigine.Math.vec3) const">
			<summary>
			Returns a color of a given pixel obtained using linear interpolation. Compressed formats are not supported.					This method returns pixel color with float components in the range [0.0f, 1.0f] regardless of the image format.
			</summary> 
			<param name="uvw"> Float coordinates of a pixel in the range [0.0f; 1.0f]. </param> 
			<returns>Pixel color represented by a Pixel structure with float components in the range [0.0f, 1.0f].</returns>
		</member>
		<member name="M:Unigine.Image.is3DType const">
			<summary>
			Returns a value indicating if the image is a 3D image.
			</summary>  
			<returns>1 if the image is a 3D image; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isArrayType const">
			<summary>
			Returns a value indicating if the image is of an array type (see *_ARRAY variables).
			</summary>  
			<returns>1 if the image is of an array type; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getBlockSize const">
			<summary>
			Returns the compressed image block size.
			</summary>  
			<returns>Block size in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.isCombinedFormat const">
			<summary>
			Returns a value indicating if the image is stored in a combined format (RGB565, RGBA4, RGB5A1 or RGB10A2).
			</summary>  
			<returns>1 if the image is in combined format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isCombinedFormat(int)">
			<summary>
			Returns a value indicating if a given format is a combined format (RGB565, RGBA4, RGB5A1 or RGB10A2).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is a combined format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isCompressedFormat const">
			<summary>
			Returns a value indicating if the image is stored in a compressed format (DXT1, DXT3, DXT5, ATI1, ATI2).
			</summary>  
			<returns>1 if the image is in a compressed format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isCompressedFormat(int)">
			<summary>
			Returns a value indicating if a given format is a compressed format (DXT1, DXT3, DXT5, ATI1, ATI2).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is a compressed format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.setCube(int,int,int,Image::Pixel)">
			<summary>
			Sets a color of a given pixel. The image must be of the Cube type. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; depth]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.getCube(Unigine.Math.vec3) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube type. Compressed formats are not supported.
			</summary> 
			<param name="direction"> Cube direction vector used for color sampling. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCube(float,float,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube type. Compressed formats are not supported.
			</summary> 
			<param name="x"> X float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="y"> Y float coordinate of a pixel in range [0.0f; 1.0f]. </param>
			<param name="face"> Face number in range from 0 to 5. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCube(int,int,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube type. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="direction"> Direction vector used for color sampling. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCube(Unigine.Math.ivec2,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube type. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Coordinates of a pixel. </param>
			<param name="face"> Face number in range from 0 to 5. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCube(Unigine.Math.vec2,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube type. Compressed formats are not supported.
			</summary> 
			<param name="uv"> UV coordinates of a pixel. </param>
			<param name="face"> Face number in range from 0 to 5. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.setCubeArray(int,int,int,int,Image::Pixel)">
			<summary>
			Sets a color of a given pixel. The image must be of the Cube Array type. Compressed formats are not supported.
			</summary> 
			<param name="x"> X integer coordinate of a pixel in range [0; width]. </param>
			<param name="y"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Image layer number. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.setCubeArray(Unigine.Math.ivec2,int,int,Image::Pixel)">
			<summary>
			Sets a color of a given pixel. The image must be of the Cube Array type. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Coordinates of a pixel. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Image layer number. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
		</member>
		<member name="M:Unigine.Image.getCubeArray(Unigine.Math.vec3,int) const">
			<summary>
			Returns the color of a given pixel of the cube array image.					Compressed formats are not supported.
			</summary> 
			<param name="direction"> Cube direction vector used for color sampling. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCubeArray(int,int,int,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube Array type. Compressed formats are not supported.
			</summary> 
			<param name="v1"> X integer coordinate of a pixel in range [0;width]. </param>
			<param name="v2"> Y integer coordinate of a pixel in range [0; height]. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCubeArray(float,float,int,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube Array type. Compressed formats are not supported.
			</summary> 
			<param name="v1"> X integer coordinate of a pixel in range [0;width]. </param>
			<param name="v2"> Y integer coordinate of a pixel in range [0;height]. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCubeArray(Unigine.Math.ivec2,int,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube Array type. Compressed formats are not supported.
			</summary> 
			<param name="coord"> Coordinates of a pixel. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.getCubeArray(Unigine.Math.vec2,int,int) const">
			<summary>
			Returns a color of a given pixel. The image must be of the Cube Array type. Compressed formats are not supported.
			</summary> 
			<param name="uv"> UV coordinates of a pixel. </param>
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Image layer number. </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.isCubeType const">
			<summary>
			Returns a value indicating if the image is Cube image.
			</summary>  
			<returns>1 if the image is a cube image; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getDepth(int) const">
			<summary>
			Returns the image depth on a given mipmap level.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Image depth if the image exists (its depth is larger than 0); otherwise, 1.</returns>
		</member>
		<member name="M:Unigine.Image.isFloatFormat const">
			<summary>
			Returns a value indicating if the image is stored in a float format (R32F, RG32F, RGB32F or RGBA32F).
			</summary>  
			<returns>1 if the image is in float format; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Image.isFloatFormat(int)">
			<summary>
			Returns a value indicating if a given format is a float format (R32F, RG32F, RGB32F or RGBA32F).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is a float format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getFormat const">
			<summary>
			Returns a numerical code of the image format.
			</summary>  
			<returns>Numerical code of the image format. See the FORMAT_* variables.</returns>
		</member>
		<member name="M:Unigine.Image.getFormat(int,int)">
			<summary>
			Returns a numerical code of the image format for the specified format and number of channels.
			</summary> 
			<param name="num_channels"> Number of channels in the [1; 4] range. </param>
			<param name="format"> Numerical code of the image format. See the FORMAT_* variables. </param> 
			<returns>Numerical code of the image format for the specified number of channels.</returns>
		</member>
		<member name="M:Unigine.Image.getFormatName const">
			<summary>
			Returns an image format name.
			</summary>  
			<returns>Image format name. The following values can be returned: R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, R16F, RG16F, RGB16F, RGBA16F, R32F, RG32F, RGB32F, RGBA32F, RGB565, RGBA4, RGB5A1, RGB10A2, DXT1, DXT3, DXT5, ATI1, ATI2.</returns>
		</member>
		<member name="M:Unigine.Image.getFormatName(int)">
			<summary>
			Returns the name of the image format by the given format ID.
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>Image format name. The following values can be returned: R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, R16F, RG16F, RGB16F, RGBA16F, R32F, RG32F, RGB32F, RGBA32F, RGB565, RGBA4, RGB5A1, RGB10A2, DXT1, DXT3, DXT5, ATI1, ATI2.</returns>
		</member>
		<member name="M:Unigine.Image.isHalfFormat const">
			<summary>
			Returns a value indicating if the image is stored in a half-float format (R16F, RG16F, RGB16F or RGBA16F).
			</summary>  
			<returns>1 if the image is in half-float format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isHalfFormat(int)">
			<summary>
			Returns a value indicating if a given format is a half-float format (R16F, RG16F, RGB16F or RGBA16F).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is a half-float format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getHeight(int) const">
			<summary>
			Returns image height on a given mipmap level.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Image height if the image exists (its height is larger than 0); otherwise, 1.</returns>
		</member>
		<member name="M:Unigine.Image.isLoaded const">
			<summary>
			Returns a value indicating whether the image is loaded.
			</summary>  
			<returns>1 if the image is loaded; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.setChannelInt(int,int)">
			<summary>
			Sets an integer value for a given image channel. Compressed and combined image formats are not supported.
			</summary> 
			<param name="channel"> Channel number in range from 0 to number of channels - 1. </param>
			<param name="value"> Value in range from 0 to 255 (8-bit formats) or from 0 to 65535 (16-bit formats). </param> 
			<returns>true if the value is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.setChannelFloat(int,float)">
			<summary>
			Sets a float value for a given image channel. Compressed and combined image formats are not supported.
			</summary> 
			<param name="channel"> Channel number in range from 0 to number of channels - 1. </param>
			<param name="value"> Value in range from 0.0f to 1.0f. </param> 
			<returns>true if the value is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.swapChannels(int,int)">
			<summary>
			Swaps values of two channels with the specified numbers. Compressed formats are not supported.
			</summary> 
			<param name="channel_0"> Number of the first channel in range from 0 to number of channels - 1. </param>
			<param name="channel_1"> Number of the second channel in range from 0 to number of channels - 1. </param> 
			<returns>true if the two specified channels were swapped successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.getNumChannels const">
			<summary>
			Returns the number of image channels.
			</summary>  
			<returns>Number of image channels.</returns>
		</member>
		<member name="M:Unigine.Image.getNumFaces const">
			<summary>
			Returns the number of faces in the image.
			</summary>  
			<returns>Number of image faces.</returns>
		</member>
		<member name="M:Unigine.Image.getNumLayers const">
			<summary>
			Returns the number of layers in the image.
			</summary>  
			<returns>Number of layers.</returns>
		</member>
		<member name="M:Unigine.Image.getNumMipmaps const">
			<summary>
			Returns the number of mipmaps stored with the image.
			</summary>  
			<returns>Number of mipmap levels.</returns>
		</member>
		<member name="M:Unigine.Image.getOffset(int) const">
			<summary>
			Returns the image offset on a given mipmap level.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. </param> 
			<returns>Image offset, in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getNumPixels const">
			<summary>
			Returns the number of Pixels in the image.
			</summary>  
			<returns>Number of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.setPixels(unsignedchar)">
			<summary>
			Sets image pixels to be taken from the specified source array.					This method simply performs pointer assignment (without copying data), therefore, it is fast. But make sure the source is not accidentally modified or deleted when its lifetime expires or otherwise.
			</summary> 
			<param name="pixels"> Source array. </param> 
		</member>
		<member name="M:Unigine.Image.setPixels(Unigine.Ptr{Unigine.Blob})">
			<summary>
			Sets image pixels by copying data (not just a pointer assignment) from a given source blob.
			</summary> 
			<param name="blob"> Source blob containing image data to be copied. </param> 
			<returns>1 if image data is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getPixels const">
			<summary>
			Returns the pointer to the array of pixels.
			The code below fills the specified channel of the image with the specified value:
			</summary>  
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixels(Unigine.Ptr{Unigine.Blob}) const">
			<summary>
			Copies the image data to a given target blob.
			</summary> 
			<param name="blob"> Target blob. </param> 
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixels2D(int) const">
			<summary>
			Returns the pointer to the array of pixels with the given mipmap level for the 2D image.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixels2DArray(int,int) const">
			<summary>
			Returns the pointer to the array of pixels with the given mipmap level and image layer for the 2D Array image.
			</summary> 
			<param name="layer"> Number of the image layer. </param>
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixels3D(int) const">
			<summary>
			Returns the pointer to the array of pixels with the given mipmap level for the 3D image.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixelsCube(int,int) const">
			<summary>
			Returns the pointer to the array of pixels with the given mipmap level for the cube image.
			</summary> 
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixelsCubeArray(int,int,int) const">
			<summary>
			Returns the pointer to the array of pixels with the given mipmap level and image layer for the Cube Array image.
			</summary> 
			<param name="face"> Face number in range from 0 to 5. </param>
			<param name="layer"> Number of the image layer. </param>
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Pointer to the array of pixels.</returns>
		</member>
		<member name="M:Unigine.Image.getPixelSize const">
			<summary>
			Returns the uncompressed image pixel size.
			</summary>  
			<returns>Pixel size, in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getPixelsSize(int,int,int)">
			<summary>
			Returns the size of all pixels for the image of the specified format and size.
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param>
			<param name="w"> Image width, in pixels. </param>
			<param name="h"> Image width, in pixels. </param> 
			<returns>Size of all pixels of the specified image, in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getPixelsSize const">
			<summary>
			Returns the size of all pixels of the image.
			</summary>  
			<returns>Size of all pixels of the image, in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.isRawFormat const">
			<summary>
			Returns a value indicating if the image is uncompressed (stored in R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, R16F, RG16F, RGB16F, RGBA16F, R32F, RG32F, RGB32F, RGBA32F, RGB565, RGBA4, RGB5A1 or RGB10A2 format).
			</summary>  
			<returns>1 if the image is uncompressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isRawFormat(int)">
			<summary>
			Returns a value indicating if a given format is an uncompressed format (R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, R16F, RG16F, RGB16F, RGBA16F, R32F, RG32F, RGB32F, RGBA32F, RGB565, RGBA4, RGB5A1 or RGB10A2).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is an uncompressed format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getSize const">
			<summary>
			Returns the current image size.
			</summary>  
			<returns>Image size, in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getSize(int) const">
			<summary>
			Returns the current image size.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. </param> 
			<returns>Image size in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getStride(int) const">
			<summary>
			Returns the image stride on a given mipmap level.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. </param> 
			<returns>Image stride in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getDepthStride(int) const">
			<summary>
			Returns the image depth stride on a given mipmap level.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. </param> 
			<returns>Image depth stride in bytes.</returns>
		</member>
		<member name="M:Unigine.Image.getType const">
			<summary>
			Returns a numerical code of the image type.
			</summary>  
			<returns>Numerical code of the image type: 0 for a 2D image, 1 for a 3D image, 2 for a cube image, 3 for a 2D Array. See the Unigine::Image:: Enumeration with IMAGE_* prefixes.</returns>
		</member>
		<member name="M:Unigine.Image.getTypeName const">
			<summary>
			Returns an image type name.
			</summary>  
			<returns>Image type name: 2D for a 2D image, 3D for a 3D image, Cube for a cube image, 2D_Array for a 2D Array.</returns>
		</member>
		<member name="M:Unigine.Image.getTypeName(int)">
			<summary>
			Returns the name of the image type by its identifier.
			</summary> 
			<param name="type"> Image type. One of the IMAGE_* types. </param> 
			<returns>Image type name: 2D for a 2D image, 3D for a 3D image, Cube for a cube image, 2D_Array for a 2D Array.</returns>
		</member>
		<member name="M:Unigine.Image.isUCharFormat const">
			<summary>
			Returns a value indicating if the image is stored in an unsigned char format (R8, RG8, RGB8, RGBA8, DXT1, DXT3, DXT5, ATI1 or ATI2).
			</summary>  
			<returns>1 if the image is in unsigned char format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isUCharFormat(int)">
			<summary>
			Returns a value indicating if a given format is an unsigned char format (R8, RG8, RGB8, RGBA8, DXT1, DXT3, DXT5, ATI1 or ATI2).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is an unsigned char format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isUShortFormat const">
			<summary>
			Returns a value indicating if the image is stored in an unsigned short format (R16, RG16, RGB16 or RGBA16).
			</summary>  
			<returns>1 if the image is in unsigned short format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.isUShortFormat(int)">
			<summary>
			Returns a value indicating if a given format is an unsigned short format (R16, RG16, RGB16 or RGBA16).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>1 if the specified format is an unsigned short format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.getWidth(int) const">
			<summary>
			Returns the image width on a given mipmap level.
			</summary> 
			<param name="level"> Mipmap level in range from 0 to the total number of mipmaps. This is an optional argument. </param> 
			<returns>Image width if the image exists (its width is larger than 0); otherwise, 1.</returns>
		</member>
		<member name="M:Unigine.Image.blend(Unigine.Ptr{Unigine.Image},int,int,int,int,int,int,float,bool)">
			<summary>
			Blends the specified image with the current one. Blending takes place within a specified region. If the safe flag is set to 1, rendering of the blended images won't be performed outside the destination image boundaries. Compressed, combined, half-float and float formats are not supported. Images of different formats can be blended as follows:											R8 with R8, RG8;						RG8 with RG8, RGB8;						RGB8 with RGB8, RGBA8;						RGBA8 with RGBA8 only;						R16 with R16, RG16;						RG16 with RG16, RGB16;						RGB16 with RGB16, RGBA16;						RGBA16 with RGBA16 only;
			</summary> 
			<param name="image"> Source image to be blended with the current image. </param>
			<param name="x0"> X coordinate of a position in the current image. </param>
			<param name="y0"> Y coordinate of a position in the current image. </param>
			<param name="x1"> X coordinate of a position in a source image, which is blended with the current image. </param>
			<param name="y1"> Y coordinate of a position in a source image, which is blended with the current image. </param>
			<param name="width"> Width of the blending region. </param>
			<param name="height"> Height of the blending region. </param>
			<param name="scale"> Scale of blending:If blended images are of the same format, the blended image is multiplied by scale value and is added to the destination image.If a source image has one more channel compared to the current one, it will serve as alpha value. This channel value is multiplied by scale and is used to alpha blend the images.The default scale value is 1.0f. </param>
			<param name="safe"> 1 for safe blending with respect to destination image boundaries; otherwise, 0. </param> 
			<returns>Returns 1 if blending is successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.blur(int)">
			<summary>
			Filters the image using two-pass Gaussian blur. Only the 2D or cube image can be resized. Compressed and combined image formats are not supported.
			</summary> 
			<param name="size"> Blur filter size. It is the number of neighbouring source pixels (from all sides) that are averaged for each blurred destination pixel. For example, if blur = 2, two pixels from each side are taken and the blurring kernel is 5 x 5 pixels. </param> 
			<returns>1 if the image was successfully blurred or the size of blur filter is 0; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.clear">
			<summary>
			Clears all data associated with the image and resets its type, format, size to default. Also the number of image layers and mipmaps is set to 1.
			</summary>  
		</member>
		<member name="M:Unigine.Image.combine(int)">
			<summary>
			Converts the image to a combined format. The following conversions are available:											RGB8 to RGB565						RGBA8 to RGBA4 if the format is specified as RGBA4; otherwise, RGBA8 is converted to RGB5A1 by default						RGBA16 to RGB10A2
			</summary> 
			<param name="new_format"> Combined format to convert the image into. This is an optional argument. If no format is specified, default conversion will be performed. </param> 
			<returns>1 if the conversion into the combined format is successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.combineMipmaps">
			<summary>
			Combines the loaded 2D image with the mipmap image. Only one mipmap image can be combined. Compressed image formats cannot be combined.
			</summary>  
			<returns>1 if the image and a mipmap are successfully combined; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.compare(Unigine.Ptr{Unigine.Image},int,int,int,int,int,int,int)">
			<summary>
			Compares a region of a specified image with a specified region of the current image. Compressed, combined, half-float and float formats are not supported.
			</summary> 
			<param name="image"> Source image to compare the loaded image with. </param>
			<param name="x0"> X coordinate on the loaded image. </param>
			<param name="y0"> Y coordinate on the loaded image. </param>
			<param name="x1"> X coordinate on the source image. </param>
			<param name="y1"> Y coordinate on the source image. </param>
			<param name="width"> Width of a region to compare. </param>
			<param name="height"> Height of a region to compare. </param>
			<param name="threshold"> A threshold to compare. </param> 
			<returns>1 if the regions match; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.compress(int)">
			<summary>
			Converts the image to a compressed format. The following conversions are available:											R8 to ATI1						RG8 to ATI2						RGB8 to DXT1						RGBA8 to DXT3, DXT5(by default)						ZLC1 to ZLC1						ZLC2 to ZLC2
			</summary> 
			<param name="new_format"> Format to compress the image into. This is an optional argument. If no format is specified, default conversion will be performed. </param> 
			<returns>1 if the image is compressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.convertToFormat(int)">
			<summary>
			Converts the image to a specified format. Compressed and combined images are automatically decompressed/decombined.
			</summary> 
			<param name="new_format"> Target format to convert the image into. See the FORMAT_* variables. </param> 
			<returns>1 if the conversion is successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.convertToType(int)">
			<summary>
			Converts the image to a specified type. The following conversions are possible:
			</summary> 
			<param name="type"> Type for conversion. One of the IMAGE_* types. </param> 
			<returns>1 if the conversion is successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.assignFrom(Unigine.Ptr{Unigine.Image})">
			<summary>
			Copies the data from the specified source image. The size of the image shall be updated according to the size of the source image (unlike the resizeFrom() method).
			</summary> 
			<param name="src_image"> Source image. </param> 
		</member>
		<member name="M:Unigine.Image.resizeFrom(Unigine.Ptr{Unigine.Image},Image::FILTER)">
			<summary>
			Copies the data from the specified source image, resizing the source. The source image shall be resized (enlarged/shrinked) to fit the size of the image.
			</summary> 
			<param name="src_image"> Source image. </param>
			<param name="filter"> Filter type to be used: linear or point. The default filter is linear. See the Unigine::Image Enumerations with FILTER_* prefixes. </param> 
			<returns>true if the data was successfully copied from the source image; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.copy(Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Copies data from the specified source image according to the specified layer parameter. Depending on the image and the source image types the layer parameter either defines the index of the layer/face to copy data FROM (source), or the index of the layer/face to copy data TO (destination):
			
			</summary> 
			<param name="src_image"> Source image. </param>
			<param name="layer"> Zero-based index defining layer/face TO or FROM which the data is to be copied. </param> 
			<returns>1 if the data is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.copy(Unigine.Ptr{Unigine.Image},int,int)">
			<summary>
			Copies a given channel from the specified image to the specified image channel.
			</summary> 
			<param name="src_image"> Source image. </param>
			<param name="dest_channel"> Destination channel. </param>
			<param name="src_channel"> Source channel. </param> 
			<returns>true if the channel is copied successfully from the source image; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.copy(Unigine.Ptr{Unigine.Image},int,int,int,int,int,int,bool)">
			<summary>
			Copies a data fragment with specified width, height, and coordinates from the source image.
			</summary> 
			<param name="src_image"> Source image, from which a fragment is to be copied. </param>
			<param name="x_dst"> X coordinate of a position in the image, to which the data fragment is to be copied. </param>
			<param name="y_dst"> Y coordinate of a position in the image, to which the data fragment is to be copied. </param>
			<param name="x_src"> X coordinate of a position in a source image, starting from which the data fragment is to be copied. </param>
			<param name="y_src"> Y coordinate of a position in a source image, starting from which the data fragment is to be copied. </param>
			<param name="width"> Width of the fragment to be copied from the source image, in pixels. </param>
			<param name="height"> Height of the fragment to be copied from the source image, in pixels. </param>
			<param name="safe"> 1 for safe copying with respect to destination image boundaries; otherwise, 0.The safe flag doesn't provide safe copying with respect to source image boundaries. </param> 
			<returns>true if the specified fragment was successfully copied from the source image; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.copyFast(Unigine.Ptr{Unigine.Image},size_t,size_t,size_t,size_t,size_t,size_t)">
			<summary>
			Copies a data fragment with specified width, height, and coordinates from the source image.
			</summary> 
			<param name="src_image"> Source image, from which a fragment is to be copied. </param>
			<param name="x_dst"> X coordinate of a position in the image, to which the data fragment is to be copied. </param>
			<param name="y_dst"> Y coordinate of a position in the image, to which the data fragment is to be copied. </param>
			<param name="x_src"> X coordinate of a position in a source image, starting from which the data fragment is to be copied. </param>
			<param name="y_src"> Y coordinate of a position in a source image, starting from which the data fragment is to be copied. </param>
			<param name="w"> Width of the fragment to be copied from the source image, in pixels. </param>
			<param name="h"> Height of the fragment to be copied from the source image, in pixels. </param> 
			<returns>true if the specified fragment was successfully copied from the source image; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.create2D(int,int,int,int,bool,bool)">
			<summary>
			Creates an empty 2D image filled with black color.
			</summary> 
			<param name="width"> Required width, in pixels. </param>
			<param name="height"> Required height, in pixels. </param>
			<param name="format"> Required format. See the FORMAT_* variables. </param>
			<param name="num_mipmaps"> Number of mipmaps to create. This is an optional argument. If the value is smaller than 1, an assertion is raised. </param>
			<param name="clear"> Positive number to fill the image with black color, 0 not to fill. This optional argument can be set to 0 if new data will fully overwrite the data existing in the memory. </param>
			<param name="allocate"> Positive number to allocate memory for the created image. This value should be always set to 1. </param> 
			<returns>true if 2D image is successfully created; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.create2DArray(int,int,int,int,int,bool,bool)">
			<summary>
			Creates an empty 2D texture array filled with black color.
			</summary> 
			<param name="width"> Required width, in pixels. </param>
			<param name="height"> Required height, in pixels. </param>
			<param name="num_layers"> Number of texture layers. </param>
			<param name="format"> Required format. See the FORMAT_* variables. </param>
			<param name="num_mipmaps"> Number of mipmaps to create. This is an optional argument. If the value is smaller than 1, an assertion is raised. </param>
			<param name="clear"> Positive number to fill the texture array with black color, 0 not to fill. This optional argument can be set to 0 if new data will fully overwrite the data existing in the memory. </param>
			<param name="allocate"> Positive number to allocate memory for the created image. This value should be always set to 1. </param> 
			<returns>true if 2D texture array is successfully created; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.create3D(int,int,int,int,int,bool,bool)">
			<summary>
			Creates an empty 3D image filled with black color.
			</summary> 
			<param name="width"> Required width, in pixels. </param>
			<param name="height"> Required height, in pixels. </param>
			<param name="depth"> Required depth. </param>
			<param name="format"> Required format. See the IMAGE_FORMAT_* variables. </param>
			<param name="num_mipmaps"> Number of mipmaps to create. This is an optional argument. If the value is smaller than 1, an assertion is raised. </param>
			<param name="clear"> Positive number to fill the image with black color, 0 not to fill. This optional argument can be set to 0 if new data will fully overwrite the data existing in the memory. </param>
			<param name="allocate"> Positive number to allocate memory for the created image. This value should be always set to 1. </param> 
			<returns>true if 3D image is successfully created; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.create3DTurbulence(int,float,int,int)">
			<summary>
			Creates a 3D turbulence image (RGBA8).
			</summary> 
			<param name="size"> 3D image size, in pixels. Width, height, and depth are equal. </param>
			<param name="scale"> Scaling factor applied to the displacement amount. </param>
			<param name="frequency"> Base frequency, determines how rapidly the displacement amount changes. Increasing this value creates more turbulence. </param>
			<param name="seed"> Specifies the initial number used for noise generation. Different Seed values produce different random variations and can be useful in changing the result. Keep in mind, that you should use the same Seed value when you want to retain the same variations. </param> 
		</member>
		<member name="M:Unigine.Image.createCube(int,int,int,int,bool,bool)">
			<summary>
			Creates the empty cube image filled with black color.
			</summary> 
			<param name="width"> Image width, in pixels. </param>
			<param name="height"> Image height, in pixels. </param>
			<param name="format"> Texture format. See the FORMAT_* variables. </param>
			<param name="num_mipmaps"> Number of mipmaps to create. This is an optional argument. </param>
			<param name="clear"> 1 to fill the image with black color, 0 is not to fill. This optional argument can be set to 0 if new data will fully overwrite the data existing in the memory. </param>
			<param name="allocate"> 1 to allocate memory for the created image. This value should be always set to 1. </param> 
			<returns>1 if the cube image is successfully created; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.createCubeArray(int,int,int,int,int,bool,bool)">
			<summary>
			Creates the empty cube array image filled with black color.
			</summary> 
			<param name="width"> Image width, in pixels. </param>
			<param name="height"> Image height, in pixels. </param>
			<param name="num_layers"> Number of image layers. </param>
			<param name="format"> Texture format. See the FORMAT_* variables. </param>
			<param name="num_mipmaps"> Number of mipmaps to create. This is an optional argument. </param>
			<param name="clear"> 1 to fill the image with black color, 0 is not to fill. This optional argument can be set to 0 if new data will fully overwrite the data existing in the memory. </param>
			<param name="allocate"> 1 to allocate memory for the created image. This value should be always set to 1. </param> 
			<returns>1 if the cube array image is successfully created; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.createMipmaps(Image::FILTER,float)">
			<summary>
			Generates mipmaps for the image. Mipmaps cannot be created for compressed and combined image formats.
			</summary> 
			<param name="filter"> Filter type to be used: linear or point. The default filter is linear. See the Unigine::Image Enumerations with FILTER_* prefixes. </param>
			<param name="gamma"> Gamma correction value. If 1 is provided, no gamma correction is applied. This is an optional argument. </param> 
			<returns>true if the mipmaps are generated successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.removeMipmaps">
			<summary>
			Removes mipmaps generated for the image.
			</summary>  
			<returns>true if mipmaps generated for the image are removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.decombine">
			<summary>
			Automatically converts the image from the combined format to a correct one. The following conversions are available:											RGB565 to RGB8						RGBA4 to RGBA8						RGB5A1 to RGBA8						RGB10A2 to RGBA16
			</summary>  
			<returns>1 if the image is successfully converted from the combined format; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.decombineMipmaps">
			<summary>
			Decombines the loaded 2D-image and the mipmap images. The number of mipmaps must be larger than 1. Compressed image formats cannot be decombined.
			</summary>  
			<returns>1 if the 2D-image and mipmap image are successfully decombined; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.decompress">
			<summary>
			Decompresses the image from the compressed format to a correct one. The following conversions are available:											DXT1 to RGB8						DXT1 without alpha data to RGB8						DXT3 to RGBA8						DXT5 to RGBA8						ATI1 to R8						ATI2 to RG8
			</summary>  
			<returns>1 if the image was successfully decompressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.extrude(int)">
			<summary>
			Extrudes contour of the image in the alpha=0 region on the given number of pixels. Only images of the RGBA8 and RGBA16 formats can be extruded.
			</summary> 
			<param name="pixels"> Number of contour pixels. </param> 
			<returns>1 if the image contour is successfully extruded; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.flipX">
			<summary>
			Flips the 2D image horizontally. Compressed and combined image formats are not supported.
			</summary>  
		</member>
		<member name="M:Unigine.Image.flipY">
			<summary>
			Flips the 2D image vertically. Compressed and combined image formats are not supported.
			</summary>  
			<returns>1 if the image is successfully flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.hasMipmaps const">
			<summary>
			Returns a value indicating if the source image has mipmaps.
			</summary>  
			<returns>1 if the image has mipmaps; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.info(char)">
			<summary>
			Returns information about the given image. The following file formats are supported:											*.texture						*.tga						*.jpg						*.png						*.dds						*.psd						*.ies						tif															*.tif								*.tiff
			</summary> 
			<param name="file"> Name of the image file. </param> 
			<returns>1 if the operation was a success; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.invert">
			<summary>
			Inverts values of all the image channels. Only R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, R32F, RG32F, RGB32F and RGBA32F formats can be inverted.
			</summary>  
			<returns>true if the image is inverted successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.load(char,int)">
			<summary>
			Loads an image from a specified file. The following file formats are supported:											*.texture						*.tga						*.png						*.dds						*.psd						*.ppm						*.pgm						*.hdr						*.sgi						*.ies						*.exr						tif															*.tif								*.tiff																			jpg															*.jpg								*.jpeg								*.jpe								*.jif								*.jfif								*.jfi																			sgi															*.bw								*.la								*.int								*.inta								*.rgb								*.rgba
			</summary> 
			<param name="file"> Name of the image file. </param>
			<param name="mip_offset"> Mipmap offset value for the loaded image. </param> 
			<returns>true if the image is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.load(char)">
			<summary>
			Loads an image from the specified file. The following file formats are supported:											*.texture						*.tga						*.png						*.dds						*.psd						*.ppm						*.pgm						*.hdr						*.sgi						*.ies						*.exr						tif															*.tif								*.tiff																			jpg															*.jpg								*.jpeg								*.jpe								*.jif								*.jfif								*.jfi																			sgi															*.bw								*.la								*.int								*.inta								*.rgb								*.rgba
			</summary> 
			<param name="file"> Name of the image file. </param> 
			<returns>true if the image is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.load(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Loads an image from a specified stream. The following file formats are supported:											*.texture						*.tga						*.png						*.dds						*.psd						*.ppm						*.pgm						*.hdr						*.sgi						*.ies						*.exr						tif															*.tif								*.tiff																			jpg															*.jpg								*.jpeg								*.jpe								*.jif								*.jfif								*.jfi																			sgi															*.bw								*.la								*.int								*.inta								*.rgb								*.rgba
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>1 if the image is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.normalize">
			<summary>
			Creates a three-component normal map out of the image.
			</summary>  
			<returns>1 if normalization was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.resize(int,int,Image::FILTER)">
			<summary>
			Resizes the image. Only the 2D or cube image can be resized. Compressed and combined image formats cannot be resized.
			</summary> 
			<param name="new_width"> New image width. </param>
			<param name="new_height"> New image height. </param>
			<param name="filter"> Filter type to be used: linear or point. The default filter is linear. See the Unigine::Image Enumerations with FILTER_* prefixes. </param> 
			<returns>1 if the image is resized successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.rotate(int)">
			<summary>
			Rotates the image by a given angle (with the step of 90 degrees). Only the 2D or cube image can be rotated. Compressed and combined image formats cannot be rotated.
			</summary> 
			<param name="angle"> Angle that is multiplied by the step (angle * 90) to set the image rotation degree. </param> 
			<returns>1 if the image is rotated successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.save(char) const">
			<summary>
			Saves the image to a file with the specified name. The following file formats are supported:											*.texture						*.tga						*.png						*.dds						*.psd						jpg															*.jpg								*.jpeg								*.jpe								*.jif								*.jfif								*.jfi
			</summary> 
			<param name="file"> Name of the file to save image data to. </param> 
			<returns>Returns 1 if the image is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.save(char,float) const">
			<summary>
			Saves the image to a specified file. The following file formats are supported:											*.texture						*.tga						*.png						*.dds						*.psd						jpg															*.jpg								*.jpeg								*.jpe								*.jif								*.jfif								*.jfi
			</summary> 
			<param name="file"> Name of a file with extension into which data will be saved. </param>
			<param name="quality"> Quality of JPG compression in range [0;1]. </param> 
			<returns>Returns 1 if the image is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.save(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the image data (either compressed or uncompressed) to the specified stream. Current image compression is to be used.
			</summary> 
			<param name="stream"> Pointer to the stream. </param> 
			<returns>true if the image is successfully saved to the specified stream; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.sign">
			<summary>
			Converts the image from unsigned type to signed char. Only R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, ATI1 and ATI2 formats can be converted.
			</summary>  
			<returns>1 if the image has been converted successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Image.swap(Unigine.Ptr{Unigine.Image})">
			<summary>
			Swaps the data of the current image with the source image.
			</summary> 
			<param name="image"> Source image. </param> 
		</member>
		<member name="M:Unigine.Image.toPixel(Unigine.Math.vec4)">
			<summary>
			Converts a vec4 color vector (R, G, B, A) to Pixel color.
			</summary> 
			<param name="color"> Color vec4 vector (R, G, B, A) with components normalized in range [0.0f; 1.0f] </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.toPixel(int,Unigine.Math.vec4)">
			<summary>
			Converts a vec4 color vector (R, G, B, A) to Pixel color depending on the specified image format.
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param>
			<param name="color"> Color vec4 vector (R, G, B, A) with components normalized in range [0.0f; 1.0f] </param> 
			<returns>Pixel color represented by a Pixel structure.</returns>
		</member>
		<member name="M:Unigine.Image.toVec4(Image::Pixel)">
			<summary>
			Converts Pixel color to a vec4 color vector (R, G, B, A).
			</summary> 
			<param name="pixel"> Pixel color represented by a Pixel structure. </param> 
			<returns>Color vec4 vector (R, G, B, A). Each component is normalized in range [0.0f; 1.0f]</returns>
		</member>
		<member name="M:Unigine.Image.toVec4(int,Image::Pixel)">
			<summary>
			Converts Pixel color to a vec4 color vector (R, G, B, A) depending on the specified image format.
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param>
			<param name="p"> Pixel color represented by a Pixel structure. </param> 
			<returns>Color vec4 vector (R, G, B, A). Each component is normalized in range [0.0f; 1.0f]</returns>
		</member>
		<member name="M:Unigine.Image.getNumChannels(int)">
			<summary>
			Returns the number of channels for the specified image format.
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>Number of channels for the specified image format.</returns>
		</member>
		<member name="M:Unigine.Image.getPixelSize(int)">
			<summary>
			Returns the pixel size for the specified image format. Not available for compressed image formats (DXT1, DXT3, DXT5, ATI1, ATI2).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>Pixel size for the specified image format.</returns>
		</member>
		<member name="M:Unigine.Image.getBlockSize(int)">
			<summary>
			Returns the block size for the specified image format. Available for compressed image formats only (DXT1, DXT3, DXT5, ATI1, ATI2).
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>Block size for the specified image format.</returns>
		</member>
		<member name="M:Unigine.Image.getDepth const">
			<summary>
			Returns the image depth, in pixels.
			</summary>  
			<returns>Image depth, in pixels</returns>
		</member>
		<member name="M:Unigine.Image.getHeight const">
			<summary>
			Returns the image height, in pixels.
			</summary>  
			<returns>Image height, in pixels</returns>
		</member>
		<member name="M:Unigine.Image.getWidth const">
			<summary>
			Returns the image width, in pixels.
			</summary>  
			<returns>Image width, in pixels</returns>
		</member>
		<member name="M:Unigine.Image.invertChannel(unsignedchar)">
			<summary>
			Inverts the values stored in the specified channel. Channels of images of half (FORMAT_R16F to FORMAT_RGBA16F) and float (FORMAT_R32F to FORMAT_RGBA32F) formats cannot be inverted.
			</summary> 
			<param name="channel"> Number of the channel to be inverted, in the range from 0 to the total number of channels. </param> 
			<returns>true if the specified channel is inverted successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.saveDDS(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the DDS image to a specified stream.
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the DDS image is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.loadDDS(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Loads a DDS image from a specified stream.
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the DDS image is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.getRawFormat(int)">
			<summary>
			Returns the closest RAW format of the uncompressed image.
			</summary> 
			<param name="format"> Image format identifier. See the FORMAT_* variables. </param> 
			<returns>Identifier of the uncompressed image (stored in R8, RG8, RGB8, RGBA8, R16, RG16, RGB16, RGBA16, R16F, RG16F, RGB16F, RGBA16F, R32F, RG32F, RGB32F, RGBA32F format).</returns>
		</member>
		<member name="M:Unigine.Image.setFileCompression(Image::FILE_COMPRESSION)">
			<summary>
			File compression type to be used for the image. Compression is applied only when saving the image into the *.texture format.
			</summary> 
			<param name="compression"> File compression type to be used for the image. One of the FILE_COMPRESSION_* values. </param> 
		</member>
		<member name="M:Unigine.Image.getFileCompression const">
			<summary>
			Returns the image file compression type. Compression is applied only when saving the image into the *.texture format.
			</summary>  
			<returns>File compression type used for the image. One of the FILE_COMPRESSION_* values.</returns>
		</member>
		<member name="M:Unigine.Image.calcRange(Unigine.Math.dvec2)">
			<summary>
			Calculates the image range for all available channels in total.
			</summary> 
			<param name="range"> The vector to store the image range (min and max values). </param> 
		</member>
		<member name="M:Unigine.Image.calcRange(Unigine.Math.dvec2,Unigine.Math.dvec2,Unigine.Math.dvec2,Unigine.Math.dvec2)">
			<summary>
			Calculates the image range for each channel separately.
			</summary> 
			<param name="r"> The vector to store the R channel range (min and max values). </param>
			<param name="g"> The vector to store the G channel range (min and max values). </param>
			<param name="b"> The vector to store the B channel range (min and max values). </param>
			<param name="a"> The vector to store the A channel range (min and max values). </param> 
		</member>
		<member name="M:Unigine.Image.changeRange(Unigine.Math.dvec4)">
			<summary>
			Changes the image range.					The range of the final image will be clamped, if the set range values exceed the maximum values of the image format.
			</summary> 
			<param name="range"> Vector that stores the range values: x and y coordinates of the value specify the original range, z and w specify the new range. </param> 
		</member>
		<member name="M:Unigine.Image.changeRange(Unigine.Math.dvec4,Unigine.Math.dvec4,Unigine.Math.dvec4,Unigine.Math.dvec4)">
			<summary>
			Changes the image range for each channel separately.					The range of the final image will be clamped, if the set range values exceed the maximum values of the image format.
			</summary> 
			<param name="range_r"> Vector that stores the range values for the R channel: x and y coordinates of the value specify the original range, z and w specify the new range. </param>
			<param name="range_g"> Vector that stores the range values for the G channel: x and y coordinates of the value specify the original range, z and w specify the new range. </param>
			<param name="range_b"> Vector that stores the range values for the B channel: x and y coordinates of the value specify the original range, z and w specify the new range. </param>
			<param name="range_a"> Vector that stores the range values for the A channel: x and y coordinates of the value specify the original range, z and w specify the new range. </param> 
		</member>
		<member name="M:Unigine.Image.normalizeRange(bool)">
			<summary>
			Normalizes the image range either per channel or for all channels altogether.
			</summary> 
			<param name="per_cahnnel"> true if per-channel normalization is required; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Image.flipCubemapX">
			<summary>
			Flips the cubemap image along the X axis.
			</summary>  
			<returns>true if the cubemap is flipped successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.flipCubemapY">
			<summary>
			Flips the cubemap image along the Y axis.
			</summary>  
			<returns>true if the cubemap is flipped successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.flipCubemapZ">
			<summary>
			Flips the cubemap image along the Z axis.
			</summary>  
			<returns>true if the cubemap is flipped successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.getSupportedExtensions">
			<summary>
			Returns a list of supported file extensions.
			</summary>  
			<returns>Vector of supported file extensions.</returns>
		</member>
		<member name="M:Unigine.Image.isSupportedExtension(char)">
			<summary>
			Returns a value indicating if the file extension is supported.
			</summary> 
			<param name="ext"> File extension. </param> 
			<returns>true if the file extension is supported; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Image.isSupported(char)">
			<summary>
			Returns a value indicating if the extension of a file provided by path is supported.
			</summary> 
			<param name="path"> Path to the file. </param> 
			<returns>true if the file extension is supported; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.Image.FILTER_POINT">
			<summary>
			A point mipmap filter.
		</summary>
		</member>
		<member name="F:Unigine.Image.FILTER_LINEAR">
			<summary>
			A linear mipmap filter.
		</summary>
		</member>
		<member name="F:Unigine.Image.FILTER_MIN">
			<summary>
			A minimum mipmap filter.
		</summary>
		</member>
		<member name="F:Unigine.Image.AUTO_FORMAT">
			<summary>
			Format is set automatically.
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_R8">
			<summary>
			Non-compressed unsigned format. Stores data in one 8-bit channel (red).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RG8">
			<summary>
			Non-compressed unsigned format. Stores data in two 8-bit channels (red, green).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB8">
			<summary>
			Non-compressed unsigned format. Stores data in three 8-bit channels (red, green, blue).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGBA8">
			<summary>
			Non-compressed unsigned format. Stores data in four 8-bit channels (red, green, blue, alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_R16">
			<summary>
			Non-compressed unsigned format. Stores data in one 16-bit channel (red).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RG16">
			<summary>
			Non-compressed unsigned format. Stores data in two 16-bit channels (red, green).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB16">
			<summary>
			Non-compressed unsigned format. Stores data in three 16-bit channels (red, green, blue).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGBA16">
			<summary>
			Non-compressed unsigned format. Stores data in four 16-bit channels (red, green, blue, alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_R16F">
			<summary>
			Non-compressed float format. Stores data in one 16-bit channel (red).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RG16F">
			<summary>
			Non-compressed float format. Stores data in two 16-bit channels (red, green).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB16F">
			<summary>
			Non-compressed float format. Stores data in three 16-bit channels (red, green, blue).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGBA16F">
			<summary>
			Non-compressed float format. Stores data in four 16-bit channels (red, green, blue, alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_R32F">
			<summary>
			Non-compressed float format. Stores data in one 32-bit channel (red).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RG32F">
			<summary>
			Non-compressed float format. Stores data in two 32-bit channels (red, green).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB32F">
			<summary>
			Non-compressed float format. Stores data in three 32-bit channels (red, green, blue).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGBA32F">
			<summary>
			Non-compressed float format. Stores data in four 32-bit channels (red, green, blue, alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB565">
			<summary>
			Combined unsigned format. Stores 16 bit color values without alpha.
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGBA4">
			<summary>
			Combined unsigned format. Stores data in four 4-bit channels (red, green, blue, alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB5A1">
			<summary>
			Combined unsigned format. Stores data in three 5-bit channels (red, green, blue) and one 1-bit channel (alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RGB10A2">
			<summary>
			Combined unsigned format. Stores data in three 10-bit channels (red, green, blue) and one 2-bit channel (alpha).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_RG11B10F">
			<summary>
			Combined unsigned float format. Stores data in two 11-bit channels (red, green) and one 10-bit channel (blue).
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_DXT1">
			<summary>
			A DXT1 compressed image file format. Compresses RGB images by a factor of 6:1 compared to RGB8. Uses 4×4 blocks for color interpolation and stores color values in 16 bits per pixel (R5:G6:B5). Can also store 1-bit alpha data; in this case, compresses images by a factor of 8:1 compared to RGBA8. This format is not recommended for storing normal maps.
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_DXT3">
			<summary>
			A DXT3 compressed image file format. Compresses RGBA images by a factor of 4:1 compared to RGBA8. Stores RGB color values as the DXT1 format and uses four more bits for alpha data. Color values are interpreted as not having been pre-multiplied by alpha. Alpha values are not interpolated. Recommended for images with sharp alpha transitions.
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_DXT5">
			<summary>
			A DXT5 compressed image file format. Compresses RGBA images by a factor of 4:1 compared to RGBA8. Stores RGB color values as the DXT1 format and uses four more bits for alpha data. Color values are interpreted as not having been pre-multiplied by alpha. Alpha values are interpolated. Recommended for images with smooth alpha transitions.
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_ATI1">
			<summary>
			An ATI1 compressed image file format. Compresses single-channel images by a factor of 2:1 compared to R8. Compression is the same as the one used for alpha data in the DXT5 format. Supported by all graphics cards compatible with DirectX 10; additionally, all ATI graphics cards since X800.
		</summary>
		</member>
		<member name="F:Unigine.Image.FORMAT_ATI2">
			<summary>
			An ATI2 compressed image file format. Compresses two-channel images by a factor of 2:1 compared to RG8. Compression for each channel is the same as the one used for alpha data in the DXT5 format. Supported by all graphics cards compatible with DirectX 10; additionally, all ATI graphics cards since X800.
		</summary>
		</member>
		<member name="F:Unigine.Image.AUTO_IMAGE_TYPE">
			<summary>
			Image type is set automatically.
		</summary>
		</member>
		<member name="F:Unigine.Image.IMAGE_2D">
			<summary>
			A 2D texture.
		</summary>
		</member>
		<member name="F:Unigine.Image.IMAGE_3D">
			<summary>
			A 3D texture.
		</summary>
		</member>
		<member name="F:Unigine.Image.IMAGE_CUBE">
			<summary>
			A cube texture.
		</summary>
		</member>
		<member name="F:Unigine.Image.IMAGE_2D_ARRAY">
			<summary>
			A 2D texture array. Each texture of the array has its own mipmap levels, which is the difference between it and a 3D image.
		</summary>
		</member>
		<member name="F:Unigine.Image.IMAGE_CUBE_ARRAY">
			<summary>
			A cube texture array.
		</summary>
		</member>
		<member name="F:Unigine.Image.FILE_COMPRESSION_LZ4_HIGH">
			<summary>
			LZ4 lossless data compression algorithm that is focused on compression and decompression speed. It belongs to the LZ77 family of byte-oriented compression schemes (smaller file size, slower comression).
		</summary>
		</member>
		<member name="F:Unigine.Image.FILE_COMPRESSION_LZ4_LOW">
			<summary>
			LZ4 lossless data compression algorithm that is focused on compression and decompression speed. It belongs to the LZ77 family of byte-oriented compression schemes (greater file size, faster comression).
		</summary>
		</member>
		<member name="F:Unigine.Image.FILE_COMPRESSION_ZLC_HIGH">
			<summary>
			Compression used for images stored in the system memory (based on zlib library). It is used when a smaller file size is required, compared to ZLC LOW (compression is slower).
		</summary>
		</member>
		<member name="F:Unigine.Image.FILE_COMPRESSION_ZLC_LOW">
			<summary>
			Fast compression used for images stored in the system memory (based on zlib library).
		</summary>
		</member>
		<member name="F:Unigine.Image.FILE_COMPRESSION_DISABLE">
			<summary>
			Image data is uncompressed.
		</summary>
		</member>
		<member name="M:Unigine.ImageConverter.#ctor">
			<summary>
			Default constructor. An empty instance with default parameters is created.
			</summary>  
		</member>
		<member name="M:Unigine.ImageConverter.#ctor(Unigine.Ptr{ImageConverter})">
			<summary>
			Constructor. Creates an image converter by copying a given source image converter.
			</summary> 
			<param name="imageconverter"> Source image converter. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.setType(int)">
			<summary>
			Sets a numerical code of the image type.
			</summary> 
			<param name="type"> Numerical code of the image type: 0 for a 2D image, 1 for a 3D image, 2 for a cube image, 3 for a 2D Array. See the Unigine::Image:: Enumeration with IMAGE_* prefixes. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getType const">
			<summary>
			Returns a numerical code of the image type.
			</summary>  
			<returns>Numerical code of the image type: 0 for a 2D image, 1 for a 3D image, 2 for a cube image, 3 for a 2D Array. See the Unigine::Image:: Enumeration with IMAGE_* prefixes.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setFormat(int)">
			<summary>
			Sets a numerical code of the image format.
			</summary> 
			<param name="format"> Numerical code of the image format. See the FORMAT_* variables. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getFormat const">
			<summary>
			Returns a numerical code of the image format.
			</summary>  
			<returns>Numerical code of the image format. See the FORMAT_* variables.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setResolutionMode(ImageConverter::RESOLUTION_MODE)">
			<summary>
			Sets the resolution mode to be used for the image.
			</summary> 
			<param name="mode"> Resolution mode to be used for the image. One of the RESOLUTION_MODE values. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getResolutionMode const">
			<summary>
			Returns the resolution mode used for the image.
			</summary>  
			<returns>Resolution mode used for the image. One of the RESOLUTION_MODE values.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setResizeFilter(ImageConverter::RESIZE_FILTER)">
			<summary>
			Sets the resize filter to be used for the image.
			</summary> 
			<param name="filter"> Resize filter to be used for the image. One of the RESIZE_FILTER values. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getResizeFilter const">
			<summary>
			Returns the resize filter used for the image.
			</summary>  
			<returns>Resize filter used for the image. One of the RESIZE_FILTER values.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setWidth(int)">
			<summary>
			Sets the image width, in pixels.
			</summary> 
			<param name="width"> Image width, in pixels </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getWidth const">
			<summary>
			Returns the image width, in pixels.
			</summary>  
			<returns>Image width, in pixels</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setHeight(int)">
			<summary>
			Sets the image height, in pixels.
			</summary> 
			<param name="height"> Image height, in pixels </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getHeight const">
			<summary>
			Returns the image height, in pixels.
			</summary>  
			<returns>Image height, in pixels</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setDepth(int)">
			<summary>
			Sets the image depth, in pixels.
			</summary> 
			<param name="depth"> Image depth, in pixels </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getDepth const">
			<summary>
			Returns the image depth, in pixels.
			</summary>  
			<returns>Image depth, in pixels</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setFileCompression(Image::FILE_COMPRESSION)">
			<summary>
			Sets the image file compression type.
			</summary> 
			<param name="compression"> File compression type to be used for the image. One of the FILE_COMPRESSION_* values. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getFileCompression const">
			<summary>
			Returns the image file compression type.
			</summary>  
			<returns>File compression type used for the image. One of the FILE_COMPRESSION_* values.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setCompressionQuality(ImageConverter::COMPRESSION_QUALITY)">
			<summary>
			Sets the image file compression quality.
			</summary> 
			<param name="quality"> Compression quality to be used for the image. One of the COMPRESSION_QUALITY_* values. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getCompressionQuality const">
			<summary>
			Returns the image file compression quality.
			</summary>  
			<returns>Compression quality used for the image. One of the COMPRESSION_QUALITY_* values.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setGPUCompression(bool)">
			<summary>
			Defines if GPU compression is used at converting the image.
			</summary> 
			<param name="compression"> true to enable image compression on GPU, or false to disable it. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.isGPUCompression const">
			<summary>
			Returns the value specifying if GPU compression is used at converting the image.
			</summary>  
			<returns>true if GPU compression is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setMipmapsMode(ImageConverter::MIPMAPS_MODE)">
			<summary>
			Sets the filtering type for the image mipmaps.
			</summary> 
			<param name="mode"> Mipmaps mode to be used. One of the MIPMAPS_MODE_* values. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getMipmapsMode const">
			<summary>
			Returns the filtering type set for the image mipmaps.
			</summary>  
			<returns>Mipmaps mode to be used. One of the MIPMAPS_MODE_* values.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setMipmapsGamma(float)">
			<summary>
			Sets the gamma correction value to be used for the mipmaps.
			</summary> 
			<param name="gamma"> Gamma correction value to be used for the mipmaps. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getMipmapsGamma const">
			<summary>
			Returns the gamma correction value used for the mipmaps.
			</summary>  
			<returns>Gamma correction value used for the mipmaps.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setGGXMipmapsQuality(float)">
			<summary>
			Sets the quality for mipmaps generated for cubemap images using the GGX BRDF microfacet model. The value is applied when the mipmap mode is set to GGX.
			</summary> 
			<param name="quality"> Quality of the GGX mipmaps for the cubemap image. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getGGXMipmapsQuality const">
			<summary>
			Returns the quality of mipmaps generated for cubemap images using the GGX BRDF microfacet model.
			</summary>  
			<returns>Quality of the GGX mipmaps for the cubemap image.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setRangeMode(ImageConverter::RANGE_MODE)">
			<summary>
			Sets the range mode to be applied at the image conversion.
			</summary> 
			<param name="mode"> Range mode to be applied at the image conversion. One of the RANGE_MODE_* values. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getRangeMode const">
			<summary>
			Returns the range mode applied at the image conversion.
			</summary>  
			<returns>Range mode applied at the image conversion. One of the RANGE_MODE_* values.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setRange(int,Unigine.Math.dvec4)">
			<summary>
			Sets the range to be applied at the image conversion.						The range of the final image will be clamped, if the set range values exceed the maximum values of the image conversion format.
			</summary> 
			<param name="channel"> Number of the channel to be inverted, in the range from 0 to the total number of channels. </param>
			<param name="value"> Range values: x and y coordinates of the value specify the original range, z and w specify the range to which the image will be converted. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getRange(int) const">
			<summary>
			Returns the range to be applied at the image conversion.
			</summary> 
			<param name="channel"> Number of the channel to be inverted, in the range from 0 to the total number of channels. </param> 
			<returns>Range values: x and y coordinates of the value specify the original range, z and w specify the range to which the image will be converted.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setFlipX(bool)">
			<summary>
			Flips the image horizontally.
			</summary> 
			<param name="flipx"> true if the image is to be flipped horizontally; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.isFlipX const">
			<summary>
			Returns the value indicating if the image is to be flipped horizontally.
			</summary>  
			<returns>true if the image is to be flipped horizontally; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setFlipY(bool)">
			<summary>
			Flips the image vertically.
			</summary> 
			<param name="flipy"> true if the image is to be flipped vertically; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.isFlipY const">
			<summary>
			Returns the value indicating if the image is to be flipped vertically.
			</summary>  
			<returns>true if the image is to be flipped vertically; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setBlur(int)">
			<summary>
			Sets the amount of blur in pixels.
			</summary> 
			<param name="blur"> Amount of blur in pixels. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getBlur const">
			<summary>
			Returns the amount of blur in pixels.
			</summary>  
			<returns>Amount of blur in pixels.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setRotate(int)">
			<summary>
			Sets the image rotation angle.
			</summary> 
			<param name="rotate"> Rotation angle, clock-wise. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.getRotate const">
			<summary>
			Returns the image rotation angle.
			</summary>  
			<returns>Rotation angle, clock-wise.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.getInvertChannel(int)">
			<summary>
			Returns the value indicating if the channel needs to be inverted.
			</summary> 
			<param name="channel"> Number of the channel to be inverted, in the range from 0 to the total number of channels. </param> 
			<returns>true if the channel needs to be inverted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.setInvertChannel(int,bool)">
			<summary>
			Inverts the values stored in the specified channel. Channels of images of half (FORMAT_R16F to FORMAT_RGBA16F) and float (FORMAT_R32F to FORMAT_RGBA32F) formats cannot be inverted.
			</summary> 
			<param name="channel"> Number of the channel to be inverted, in the range from 0 to the total number of channels. </param>
			<param name="value"> true if the channel needs to be inverted; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.reset">
			<summary>
			Sets the converter to the default values.
			</summary>  
		</member>
		<member name="M:Unigine.ImageConverter.copy(Unigine.Ptr{ImageConverter}) const">
			<summary>
			Copies data from the specified source converter.
			</summary> 
			<param name="converter"> Source converter. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.clone const">
			<summary>
			Creates a clone of the specified source converter.
			</summary>  
			<returns>Converter to be cloned.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.load(char)">
			<summary>
			Loads the image converter settings on the disk using the specified path.
			</summary> 
			<param name="path"> Path to the file with the image converter settings. </param> 
			<returns>true if the image converter settings are loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.load(Unigine.Ptr{Json})">
			<summary>
			Loads the .json object with the image converter settings.
			</summary> 
			<param name="json"> Object with the image converter settings. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.save(char) const">
			<summary>
			Saves image converter settings on the disk to the specified location.
			</summary> 
			<param name="path"> Path to the file to store the image converter settings. </param> 
			<returns>true if the image converter settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.save(Unigine.Ptr{Json}) const">
			<summary>
			Saves image converter settings to the specified .json object.
			</summary> 
			<param name="json"> Object with the image converter settings. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.updateParameters(Unigine.Ptr{Unigine.Image})">
			<summary>
			Validates the parameters of the image converter for the specified image. This method allows checking the resulting parameters before converting the image.
			</summary> 
			<param name="image"> Image to be converted. </param> 
		</member>
		<member name="M:Unigine.ImageConverter.run(Unigine.Ptr{Unigine.Image})">
			<summary>
			Runs the image converter.
			</summary> 
			<param name="image"> Image to be converted. </param> 
			<returns>true if the image has been converted successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.addBeginCallback(Unigine.CallbackBase2{Unigine.Ptr{ImageConverter},Unigine.Ptr{Unigine.Image}})">
			<summary>
			Adds a callback function to be called on beginning image conversion. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a begin image conversion callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added begin image conversion callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.removeBeginCallback(void)">
			<summary>
			Removes the specified callback from the list of begin image conversion callbacks.
			</summary> 
			<param name="id"> Begin callback ID obtained when adding it. </param> 
			<returns>True if the begin image conversion callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.clearBeginCallback">
			<summary>
			Clears all added begin image conversion callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.ImageConverter.addEndCallback(Unigine.CallbackBase2{Unigine.Ptr{ImageConverter},Unigine.Ptr{Unigine.Image}})">
			<summary>
			Adds a callback function to be called on completion of the image conversion. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting an image conversion completion callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added image conversion completion callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.removeEndCallback(void)">
			<summary>
			Removes the specified callback from the list of image conversion completion callbacks.
			</summary> 
			<param name="id"> End callback ID obtained when adding it. </param> 
			<returns>True if the image conversion completion callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.ImageConverter.clearEndCallback">
			<summary>
			Clears all added image conversion completion callbacks.
			</summary>  
		</member>
		<member name="F:Unigine.ImageConverter.MIPMAPS_MODE_DISABLE">
			<summary>
			Mipmaps are not generated.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.MIPMAPS_MODE_POINT">
			<summary>
			Point filtering method is used at mipmap generation.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.MIPMAPS_MODE_LINEAR">
			<summary>
			Linear filtering method is used at mipmap generation.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.MIPMAPS_MODE_COMBINED">
			<summary>
			Combination of the loaded 2D image with the most detailed mipmap image.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.MIPMAPS_MODE_GGX">
			<summary>
			Generation of mipmaps for cubemap images (IMAGE_CUBE or IMAGE_CUBE_ARRAY) using GGX BRDF microfacet model.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RESOLUTION_MODE_AUTO">
			<summary>
			Resolution set by the converter depending on the image format (for example, the 2D image is converted to 2D array / 3D image).
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RESOLUTION_MODE_ORIGINAL">
			<summary>
			Resolution of the original image.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RESOLUTION_MODE_MANUAL">
			<summary>
			Resolution set manually in the converter.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.COMPRESSION_QUALITY_LOW">
			<summary>
			Low quality of compression.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.COMPRESSION_QUALITY_HIGH">
			<summary>
			High quality of compression.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RESIZE_FILTER_POINT">
			<summary>
			Point filtering method used for resizing.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RESIZE_FILTER_LINEAR">
			<summary>
			Linear filtering method used for resizing.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RESIZE_FILTER_MIN">
			<summary>
			Minimum filtering method used for resizing.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RANGE_MODE_DISABLE">
			<summary>
			Image values are not normalized.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RANGE_MODE_NORMALIZE">
			<summary>
			Values in all channels of the image are normalized altogeter to the values from 0 to 1 (i.e. overall brightness of the image). Recommended to be used for colors.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RANGE_MODE_NORMALIZE_PER_CHANNEL">
			<summary>
			Normalization to the values from 0 to 1 is performed for each channel of the image separately.
		</summary>
		</member>
		<member name="F:Unigine.ImageConverter.RANGE_MODE_MANUAL">
			<summary>
			Normalization to manually set values is performed.
		</summary>
		</member>
	</members>
</doc>