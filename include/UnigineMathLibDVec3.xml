<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.dvec3.#ctor(hvec3)">
			<summary>
			Constructor. Initializes the vector using a given hvec3 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor">
			<summary>
			Default constructor. Produces a zero vector.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(Unigine.dvec3)">
			<summary>
			Constructor. Initializes the vector by copying a given source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(Unigine.dvec2,double)">
			<summary>
			Constructor. Initializes the vector using given two-component dvec2 source vector and a scalar.
			</summary> 
			<param name="v"> Two-component source vector. </param>
			<param name="z"> Z component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(double,double,double)">
			<summary>
			Constructor. Initializes the vector using given double values.
			</summary> 
			<param name="x"> X component of the vector. </param>
			<param name="y"> Y component of the vector. </param>
			<param name="z"> Z component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(double)">
			<summary>
			Constructor. Initializes the vector using a given scalar value: x=v, y=v, z=v.
			</summary> 
			<param name="v"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(Unigine.dvec2)">
			<summary>
			Constructor. Initializes the vector using a given two-component dvec2 source vector: x=v.x, y=v.y, z=0.0f.
			</summary> 
			<param name="v"> Two-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(Unigine.dvec4)">
			<summary>
			Constructor. Initializes the vector using a given four-component dvec4 source vector: x=v.x, y=v.y, z=v.z.
			</summary> 
			<param name="v"> Four-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(Unigine.vec3)">
			<summary>
			Constructor. Initializes the vector using a given vec3 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(Unigine.ivec3)">
			<summary>
			Constructor. Initializes the vector using a given ivec3 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(double)">
			<summary>
			Constructor. Initializes the vector using a given pointer to the array of double elements: x=v[0], y=v[1], z=v[2].
			</summary> 
			<param name="v"> Pointer to the array of double elements. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(__m128d,__m128d)">
			<summary>
			Constructor. Initializes the vector using two __m128d (4 floats) variables.We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="v0"> X and Y components of the vector in __m128d format. </param>
			<param name="v1"> Z component of the vector in __m128d format (along with alignment). </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(float)">
			<summary>
			Constructor. Initializes the vector using a given scalar value: x=v, y=v, z=v.
			</summary> 
			<param name="v"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(double,double,double,ConstexprTag)">
			<summary>
			Constructor. Initializes the vector using given constant double values.
			</summary> 
			<param name="x"> X component of the vector. </param>
			<param name="y"> Y component of the vector. </param>
			<param name="z"> Z component of the vector. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.#ctor(double,ConstexprTag)">
			<summary>
			Constructor. Initializes the vector using a given constant scalar value: x=v, y=v, z=v.
			</summary> 
			<param name="v"> Constant scalar value. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.abs">
			<summary>
			Returns the absolute values of the vector components.
			</summary>  
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.set(double,double,double)">
			<summary>
			Sets the vector by components.
			</summary> 
			<param name="x_"> X component of the vector. </param>
			<param name="y_"> Y component of the vector. </param>
			<param name="z_"> Z component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.set(double)">
			<summary>
			Sets the vector using the array of double elements: x=val[0], y=val[1], z=val[2].
			</summary> 
			<param name="val"> Pointer to the array of double elements. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.set(Unigine.dvec2,double)">
			<summary>
			Sets the vector using a two-component dvec2 source vector and a scalar.
			</summary> 
			<param name="val"> Two-component source vector. </param>
			<param name="z_"> Scalar. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.set(Unigine.dvec3)">
			<summary>
			Sets the vector equal to the specified source vector.
			</summary> 
			<param name="val"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.set(double)">
			<summary>
			Sets the vector components equal to specified scalar value: x=val, y=val, z=val.
			</summary> 
			<param name="val"> Scalar. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.get(double) const">
			<summary>
			Gets the vector: val[0]=x, val[1]=y, val[2]=z.
			</summary> 
			<param name="val"> Pointer to the array of float elements. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.get">
			<summary>
			Returns the pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.get const">
			<summary>
			Returns the constant pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.length const">
			<summary>
			Returns the length of the vector.
			</summary>  
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.length2 const">
			<summary>
			Returns the squared length of the vector.
			</summary>  
			<returns>Squared length of the vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.normalize">
			<summary>
			Returns normalized vector.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.normalizeValid">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator const double * const">
			<summary>
			Performs type conversion to const double *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.operator const void * const">
			<summary>
			Performs type conversion to const void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.operator double *">
			<summary>
			Performs type conversion to double *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.operator void *">
			<summary>
			Performs type conversion to void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.operator*=(double)">
			<summary>
			Performs scalar multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator*=(Unigine.dvec3)">
			<summary>
			Performs vector multiplication.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator+=(Unigine.dvec3)">
			<summary>
			Performs vector addition.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator- const">
			<summary>
			Performs vector negation.
			</summary>  
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator-=(Unigine.dvec3)">
			<summary>
			Performs vector subtraction.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator/=(Unigine.dvec3)">
			<summary>
			Performs componentwise division of vectors.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator/=(double)">
			<summary>
			Performs componentwise division of the vector by the scalar. Implemented using the calculation of inverse scalar value with subsequent by-component multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator=(Unigine.dvec3)">
			<summary>
			Performs vector assignment. Destination vector = Source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Result.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator[](int)">
			<summary>
			Performs array access to the vector item reference by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item reference.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.operator[](int) const">
			<summary>
			Performs array access to the vector item by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.mul(double)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> Vector multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.mul(Unigine.dvec3)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> Vector multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.div(double)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A double divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.div(Unigine.dvec3)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A dvec3 divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.add(double)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.add(Unigine.dvec3)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.operator+=(double)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.sub(double)">
			<summary>
			Subtracts each element of the specified value from the corresponding vector's element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.sub(Unigine.dvec3)">
			<summary>
			Subtracts each element of the specified value from the corresponding vector's element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.operator-=(double)">
			<summary>
			Subtracts each element of the specified value from the corresponding vector's element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec3.sum const">
			<summary>
			Returns the sum of vector components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.iLength const">
			<summary>
			Returns the inverted length of the vector.
			</summary>  
			<returns>Inverted length.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.maxXY const">
			<summary>
			Returns the maximum of X and Y components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.max const">
			<summary>
			Returns the maximum of X, Y, and Z components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.minXY">
			<summary>
			Returns the minimum of X and Y components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.min">
			<summary>
			Returns the minimum of X, Y, and Z components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec3.sign const">
			<summary>
			Returns the sign of all components as a dvec3 vector. If the sign of the component is more or equals 0, then the corresponding component of the result vector is 1.0; otherwise -1.0.
			</summary>  
			<returns>Result vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec3.hash const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_back">
			<summary>
			Vector (0.0, -1.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_down">
			<summary>
			Vector (0.0, 0.0, -1.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_eps">
			<summary>
			Vector filled with epsilon constant (1e-6f).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_forward">
			<summary>
			Vector (0.0, 1.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_inf">
			<summary>
			Vector filled with infinity constant (1e+9f).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_left">
			<summary>
			Vector (-1.0, 0.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_one">
			<summary>
			Vector filled with ones (1).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_right">
			<summary>
			Vector (1.0, 0.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_up">
			<summary>
			Vector (0.0, 0.0, 1.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec3.dvec3_zero">
			<summary>
			Vector filled with zeros (0).
		</summary>
		</member>
	</members>
</doc>