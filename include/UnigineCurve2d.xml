<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Curve2d.#ctor">
			<summary>
			Constructor. Creates a new 2d curve instance.
			</summary>  
		</member>
		<member name="M:Unigine.Curve2d.#ctor(Unigine.Ptr{Curve2d})">
			<summary>
			Constructor. Initializes the curve by copying the specified source curve.
			</summary> 
			<param name="curve"> Source curve. </param> 
		</member>
		<member name="M:Unigine.Curve2d.clear">
			<summary>
			Clears the curve removing all key points and tangents.
			</summary>  
		</member>
		<member name="M:Unigine.Curve2d.copy(Unigine.Ptr{Curve2d})">
			<summary>
			Copies all the data (all key points and tangents) from the specified source curve.
			</summary> 
			<param name="curve"> Source curve. </param> 
		</member>
		<member name="M:Unigine.Curve2d.getHash const">
			<summary>
			Returns a hash value calculated for the curve. This value is used for performance optimization and helps define if the curve really needs to be updated, or nothing has changed in its parameters (repeat mode, key points, and tangents are all the same).
			</summary>  
			<returns>Hash value calculated for the curve.</returns>
		</member>
		<member name="M:Unigine.Curve2d.getNumKeys const">
			<summary>
			Returns the current total number of key points in the curve .
			</summary>  
			<returns>Total number of key points in the curve.</returns>
		</member>
		<member name="M:Unigine.Curve2d.addKey(Unigine.Math.vec2)">
			<summary>
			Adds a new key point with the specified coordinates to the curve. Upon completion on this operation the CHANGED callback is fired.
			</summary> 
			<param name="point"> Coordinates of the new key point to be added. </param> 
			<returns>Number of the added key point.</returns>
		</member>
		<member name="M:Unigine.Curve2d.addKey(Unigine.Math.vec2,Unigine.Math.vec2,Unigine.Math.vec2)">
			<summary>
			Adds a new key point with the specified coordinates and tangents to the curve. Upon completion on this operation the CHANGED callback is fired.
			</summary> 
			<param name="point"> Coordinates of the new key point to be added. </param>
			<param name="left_tangent"> Coordinates of the left tangent at the key point. </param>
			<param name="right_tangent"> Coordinates of the right tangent at the key point. </param> 
			<returns>Number of the added key point.</returns>
		</member>
		<member name="M:Unigine.Curve2d.removeKey(int)">
			<summary>
			Removes the key point with the specified number from the curve. Upon completion on this operation the CHANGED callback is fired.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param> 
		</member>
		<member name="M:Unigine.Curve2d.moveKey(int,Unigine.Math.vec2)">
			<summary>
			Moves the key point with the specified number to a new position (preserving the tangents). Upon completion on this operation the CHANGED callback is fired. The index of key point will be updated automatically. This method can be used to implement dragging of keys on the curve. In case of moving multiple keys it is recommended to use the setKeyPoint() method to set new values for keys and then sort them all at once via the sortKeys() method to save performance.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param> 
		</member>
		<member name="M:Unigine.Curve2d.sortKeys">
			<summary>
			Sorts all key points ov the curve by time (X axis) in the ascending order. Upon completion on this operation the CHANGED callback is fired.
			</summary>  
		</member>
		<member name="M:Unigine.Curve2d.setKeyPoint(int,Unigine.Math.vec2)">
			<summary>
			Sets new coordinates for the specified key point (tangents are unaffected). Upon completion on this operation the CHANGED callback is fired. This method unlike the moveKey() does not update the index of the key point automatically. It can be used to implement dragging of multiple keys to set new values for them along with subsequent sorting all keys at once via the sortKeys() method to save performance.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param>
			<param name="point"> New coordinates to be set for the specified point. </param> 
		</member>
		<member name="M:Unigine.Curve2d.setKeyLeftTangent(int,Unigine.Math.vec2)">
			<summary>
			Sets new coordinates for the left tangent at the specified key point of the curve. Upon completion on this operation the CHANGED callback is fired.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param>
			<param name="point"> New coordinates of the left tangent at the specified key point to be set. </param> 
		</member>
		<member name="M:Unigine.Curve2d.setKeyRightTangent(int,Unigine.Math.vec2)">
			<summary>
			Sets new coordinates for the right tangent at the specified key point of the curve. Upon completion on this operation the CHANGED callback is fired.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param>
			<param name="point"> New coordinates of the right tangent at the specified key point to be set. </param> 
		</member>
		<member name="M:Unigine.Curve2d.getKeyPoint(int)">
			<summary>
			Returns the coordinates of the key point with the specified number.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param> 
			<returns>Current coordinates of the specified key point.</returns>
		</member>
		<member name="M:Unigine.Curve2d.getKeyLeftTangent(int)">
			<summary>
			Returns the current coordinates for the left tangent at the specified key point of the curve.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param> 
			<returns>Current coordinates of the left tangent at the specified key point.</returns>
		</member>
		<member name="M:Unigine.Curve2d.getKeyRightTangent(int)">
			<summary>
			Returns the current coordinates for the right tangent at the specified key point of the curve.
			</summary> 
			<param name="index"> Key point number, in the range from 0 to the total number of key points in the curve. </param> 
			<returns>Current coordinates of the right tangent at the specified key point.</returns>
		</member>
		<member name="M:Unigine.Curve2d.saveState(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves data of the curve to a binary stream.						Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream to which the curve data will be saved. </param> 
			<returns>true if the curve data is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores curve data from a binary stream.						Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream in which the saved curve parameter data is stored. </param> 
			<returns>true if the curve data is restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.save(Unigine.Ptr{Json}) const">
			<summary>
			Saves data of the curve to the specified instance of the Json class.
			</summary> 
			<param name="json"> Json class instance to which the curve data will be saved. </param> 
			<returns>true if the curve data is successfully saved to the specified Json class instance; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.load(Unigine.Ptr{Json})">
			<summary>
			Loads curve data from the specified instance of the Json class.
			</summary> 
			<param name="json"> Json class instance in which the curve data is stored. </param> 
			<returns>true if the curve data is successfully loaded from the specified Json class instance; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.save(Unigine.Ptr{Unigine.Xml}) const">
			<summary>
			Saves data of the curve to the specified instance of the Xml class.
			</summary> 
			<param name="xml"> Xml class instance to which the curve data will be saved. </param> 
			<returns>true if the curve data is successfully saved to the specified Xml class instance; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.load(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads curve data from the specified instance of the Xml class.
			</summary> 
			<param name="xml"> Xml class instance in which the curve data is stored. </param> 
			<returns>true if the curve data is successfully loaded from the specified Xml class instance; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.setRepeatModeStart(Curve2d::REPEAT_MODE)">
			<summary>
			Sets the mode for the beginning of the curve to be used for repeating the sequence defined by the key points of the curve (tiling curves).
			</summary> 
			<param name="start"> Repeat mode for the beginning of the curve (defines behavior before the first key point), one of the REPEAT_MODE_* values. </param> 
		</member>
		<member name="M:Unigine.Curve2d.getRepeatModeStart const">
			<summary>
			Returns the current mode for the beginning of the curve used for repeating the sequence defined by the key points of the curve (tiling curves).
			</summary>  
			<returns>Current repeat mode for the beginning of the curve (defines behavior before the first key point), one of the REPEAT_MODE_* values.</returns>
		</member>
		<member name="M:Unigine.Curve2d.setRepeatModeEnd(Curve2d::REPEAT_MODE)">
			<summary>
			Sets the mode for the end of the curve to be used for repeating the sequence defined by the key points of the curve (tiling curves).
			</summary> 
			<param name="end"> Repeat mode for the end of the curve (defines behavior after the last key point), one of the REPEAT_MODE_* values. </param> 
		</member>
		<member name="M:Unigine.Curve2d.getRepeatModeEnd const">
			<summary>
			Returns the current mode for the end of the curve used for repeating the sequence defined by the key points of the curve (tiling curves).
			</summary>  
			<returns>Current repeat mode for the end of the curve (defines behavior after the last key point), one of the REPEAT_MODE_* values.</returns>
		</member>
		<member name="M:Unigine.Curve2d.addChangedCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be called on changing the curve. The signature of the changed callback function must be as follows:					You can set a callback function as follows:					Example: Setting a changed callback function for a curve:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added changed callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Curve2d.removeChangedCallback(void)">
			<summary>
			Removes the specified callback from the list of changed callbacks.
			</summary> 
			<param name="id"> Changed callback ID obtained when adding it. </param> 
			<returns>True if the changed callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Curve2d.clearChangedCallbacks">
			<summary>
			Clears all added changed callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Curve2d.evaluate(float) const">
			<summary>
			Returns the evaluated value of the curve at the specified point in time.
			</summary> 
			<param name="time"> The time within the curve you want to evaluate (horizontal axis in the curve graph). </param> 
			<returns>The value of the curve, at the specified point in time.</returns>
		</member>
		<member name="F:Unigine.Curve2d.REPEAT_MODE_CLAMP">
			<summary>
			The value of the start or the end key is retained. Use this option if you don't want any changes before or after the effect created by the curve.
		</summary>
		</member>
		<member name="F:Unigine.Curve2d.REPEAT_MODE_LOOP">
			<summary>
			The curve is tiled. The created effect is repeated cyclically. If the values of the first and the last key are different, the transition between the curves will be abrupt.
		</summary>
		</member>
		<member name="F:Unigine.Curve2d.REPEAT_MODE_PING_PONG">
			<summary>
			Every next curve section is a reflection of the previous curve section. The created effect is repeated in the forward-and-backward manner.
		</summary>
		</member>
		<member name="F:Unigine.Curve2d.NUM_REPEAT_MODES">
			<summary>
			Number of repeat modes.
		</summary>
		</member>
		<member name="M:Unigine.Expression.#ctor(void,char,int)">
			<summary>
			Constructor. Creates the expression from the specified source buffer.
			</summary> 
			<param name="interpreter"> Interpreter pointer. </param>
			<param name="src"> Source buffer pointer. Source buffer is a string containing expression's source code. </param>
			<param name="scope"> 1 to treat the expression namespace as the global; otherwise, 0 (by default). </param> 
		</member>
		<member name="M:Unigine.Expression.isCompiled">
			<summary>
			Returns a value indicating if the given expression has been compiled.
			</summary>  
			<returns>1 if the expression has been compiled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Expression.getFunction(char,int)">
			<summary>
			Returns the ID of the function from the expression namespace. It can be used to call a function by its ID instead of the name (speeds up the function call; it is almost as fast the direct call).
			</summary> 
			<param name="name"> Name of the function. </param>
			<param name="num_args"> Number of function arguments. </param> 
			<returns>Function ID.</returns>
		</member>
		<member name="M:Unigine.Expression.isFunction(char,int)">
			<summary>
			Checks if a given user-defined function exists in the expression namespace.
			</summary> 
			<param name="name"> Full name of the target function. </param>
			<param name="num_args"> Number of arguments of the target function. </param> 
			<returns>1 if the function exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Expression.setName(char)">
			<summary>
			Sets a namespace name for the expression that can be used when calling expression methods.
			</summary> 
			<param name="name"> Namespace name. </param> 
		</member>
		<member name="M:Unigine.Expression.getName">
			<summary>
			Get a name used as a namespace name when calling expression methods.
			</summary>  
			<returns>Namespace name.</returns>
		</member>
		<member name="M:Unigine.Expression.setVariable(char,variable)">
			<summary>
			Set the value of the variable from the expression namespace by its name.
			</summary> 
			<param name="name"> Variable name. </param>
			<param name="value"> Variable value to set. </param> 
		</member>
		<member name="M:Unigine.Expression.getVariable(char)">
			<summary>
			Returns ID of the variable from the expression namespace. It can be used to pass a variable by its ID instead of the name. It speeds up passing of the variable and can be used when performance is crucial.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Variable, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Expression.isVariable(char)">
			<summary>
			Checks if a given user-defined variable exists in the expression namespace.
			</summary> 
			<param name="name"> Name of the target variable. </param> 
			<returns>1 if the variable exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Expression.run">
			<summary>
			Runs the given expression.
			</summary>  
			<returns>Argument value.</returns>
		</member>
		<member name="M:Unigine.Expression.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves the expression data (all its parameters) to the specified binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream to which the expression data will be saved. </param> 
			<returns>true if the expression data is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Expression.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the data of the expression (all its parameters) from the specified binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream in which the saved expression data is stored. </param> 
			<returns>true if the expression data is restored successfully; otherwise, false.</returns>
		</member>
	</members>
</doc>