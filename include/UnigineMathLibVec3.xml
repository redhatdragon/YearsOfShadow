<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.vec3.#ctor(__m128)">
			<summary>
			Constructor. Initializes the vector using a given 128-bit variable as a source.					We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="v"> 128-bit variable </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(hvec3)">
			<summary>
			Constructor. Initializes the vector using a given hvec3 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor">
			<summary>
			Default constructor. Produces a zero vector.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(Unigine.vec3)">
			<summary>
			Constructor. Initializes the vector by copying a given source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(Unigine.vec2,float)">
			<summary>
			Constructor. Initializes the vector using a given two-component vec2 source vector and a scalar.
			</summary> 
			<param name="v"> Two-component vector. </param>
			<param name="z"> Z component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(float,float,float)">
			<summary>
			Constructor. Initializes the vector using given float values.
			</summary> 
			<param name="x"> X component of the vector. </param>
			<param name="y"> Y component of the vector. </param>
			<param name="z"> Z component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(float)">
			<summary>
			Constructor. Initializes the vector using a given scalar value: x=v, y=v, z=v.
			</summary> 
			<param name="v"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(Unigine.vec2)">
			<summary>
			Constructor. Initializes the vector using a given vec2 source vector: x=v.x, y=v.y, z=0.0f.
			</summary> 
			<param name="v"> Two-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(Unigine.vec4)">
			<summary>
			Constructor. Initializes the vector using a given four-component vec4 source vector: x=v.x, y=v.y, z=v.z.
			</summary> 
			<param name="v"> Four-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(Unigine.dvec3)">
			<summary>
			Constructor. Initializes the vector using a given dvec3 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(Unigine.ivec3)">
			<summary>
			Constructor. Initializes the vector using a given ivec3 source vector .
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(float)">
			<summary>
			Constructor. Initializes the vector using a given pointer to the array of float elements: x=v[0], y=v[1], z=v[2].
			</summary> 
			<param name="v"> Pointer to the array of float elements. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(float,float,float,ConstexprTag)">
			<summary>
			Constructor. Initializes the vector using given constant float values.
			</summary> 
			<param name="x"> X component of the vector. </param>
			<param name="y"> Y component of the vector. </param>
			<param name="z"> Z component of the vector. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.#ctor(float,ConstexprTag)">
			<summary>
			Constructor. Initializes the vector using a given constant scalar value: x=v, y=v, z=v.
			</summary> 
			<param name="v"> Constant scalar value. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.abs">
			<summary>
			Returns the absolute values of the vector components.
			</summary>  
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.set(float,float,float)">
			<summary>
			Sets the vector by components.
			</summary> 
			<param name="x_"> X component of the vector. </param>
			<param name="y_"> Y component of the vector. </param>
			<param name="z_"> Z component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.set(float)">
			<summary>
			Sets the vector using the array of float elements: x=val[0], y=val[1], z=val[2].
			</summary> 
			<param name="val"> Pointer to the array of float elements. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.set(Unigine.vec4)">
			<summary>
			Sets the vector using a vec4 source vector: x=v.x, y=v.y, z=v.z.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.set(Unigine.vec2,float)">
			<summary>
			Sets the vector using a two-component vec2 source vector and a scalar.
			</summary> 
			<param name="val"> Two-component source vector. </param>
			<param name="z_"> Scalar. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.set(Unigine.vec3)">
			<summary>
			Sets the vector equal to the specified source vector.
			</summary> 
			<param name="val"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.set(float)">
			<summary>
			Sets the vector components equal to specified scalar value: x=val, y=val, z=val.
			</summary> 
			<param name="val"> Scalar. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.get(float) const">
			<summary>
			Gets the vector: val[0]=x, val[1]=y, val[2]=z.
			</summary> 
			<param name="val"> Pointer to the array of float elements. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.get">
			<summary>
			Returns the pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.get const">
			<summary>
			Returns the constant pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.length const">
			<summary>
			Returns the length of the vector.
			</summary>  
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.length2 const">
			<summary>
			Returns the squared length of the vector.
			</summary>  
			<returns>Squared length of the vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.maxXY const">
			<summary>
			Compares the X and Y components of the vector and returns the greater one.
			</summary>  
			<returns>The greater out of the X and Y components of the vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.max const">
			<summary>
			Compares all vector components and returns the maximum value.
			</summary>  
			<returns>The greatest out of the vector components.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.minXY">
			<summary>
			Compares the X and Y components of the vector and returns the lower one.
			</summary>  
			<returns>The lower value out of the X and Y components of the vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.normalize">
			<summary>
			Returns normalized vector.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.normalizeValid">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.normalizeFast">
			<summary>
			Returns normalized vector, calculated using the fast inverse square root algorithm.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.normalizeValidFast">
			<summary>
			Returns normalized vector, calculated using the fast inverse square root algorithm. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator const float * const">
			<summary>
			Performs type conversion to const float *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.operator const void * const">
			<summary>
			Performs type conversion to const void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.operator float *">
			<summary>
			Performs type conversion to float *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.operator void *">
			<summary>
			Performs type conversion to void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.operator*=(float)">
			<summary>
			Performs scalar multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator*=(Unigine.vec3)">
			<summary>
			Performs vector multiplication.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator+=(Unigine.vec3)">
			<summary>
			Performs vector addition.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator- const">
			<summary>
			Performs vector negation.
			</summary>  
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator-=(Unigine.vec3)">
			<summary>
			Performs vector subtraction.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator/=(Unigine.vec3)">
			<summary>
			Performs componentwise division of vectors.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator/=(float)">
			<summary>
			Performs componentwise division of the vector by the scalar. Implemented using the calculation of inverse scalar value with subsequent by-component multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator=(Unigine.vec3)">
			<summary>
			Performs vector assignment. Destination vector = Source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Result.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator=(__m128)">
			<summary>
			Sets the vector using a given 128-bit variable as a source.					We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="val"> 128-bit variable. </param> 
			<returns>Vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator[](int)">
			<summary>
			Performs array access to the vector item reference by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item reference.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.operator[](int) const">
			<summary>
			Performs array access to the vector item by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.mul(float)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> A float multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.mul(Unigine.vec3)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> Vector multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.div(float)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A float divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.div(Unigine.vec3)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A vec3 divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.sum const">
			<summary>
			Returns the sum of vector components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.add(float)">
			<summary>
			Performs addition of the specified argument.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.add(Unigine.vec3)">
			<summary>
			Performs addition of the specified argument.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.operator+=(float)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>This vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.sub(float)">
			<summary>
			Subtracts the argument from all elements of the vector.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.sub(Unigine.vec3)">
			<summary>
			Subtracts each element of the specified argument from ther corresponding element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.vec3.operator-=(float)">
			<summary>
			Subtracts the argument from all elements of the vector.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>This vector.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.lengthFast const">
			<summary>
			Returns the length of the vector (fast version).
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.iLength const">
			<summary>
			Returns the inverted length of the vector.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.iLengthFast const">
			<summary>
			Returns the inverted length of the vector (fast version).
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.min">
			<summary>
			Returns the minimum value among all components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.vec3.sign">
			<summary>
			Returns the vector with signs of the argument components.
			</summary>  
			<returns>Vector with signs of the argument components. 1.0 if v &gt;= 0.0 ; -1.0 if v &lt; 0.0.</returns>
		</member>
		<member name="M:Unigine.Math.vec3.hash const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Math.vec3.vec3_back">
			<summary>
			Vector (0.0, -1.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_down">
			<summary>
			Vector (0.0, 0.0, -1.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_eps">
			<summary>
			Vector filled with epsilon constant (1e-6f).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_forward">
			<summary>
			Vector (0.0, 1.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_half">
			<summary>
			Vector filled with 0.5.
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_inf">
			<summary>
			Vector filled with infinity constant (1e+9f).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_left">
			<summary>
			Vector (-1.0, 0.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_one">
			<summary>
			Vector filled with ones (1).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_right">
			<summary>
			Vector (1.0, 0.0, 0.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_up">
			<summary>
			Vector (0.0, 0.0, 1.0).
		</summary>
		</member>
		<member name="F:Unigine.Math.vec3.vec3_zero">
			<summary>
			Vector filled with zeros (0).
		</summary>
		</member>
	</members>
</doc>