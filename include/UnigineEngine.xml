<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Engine.get">
			<summary>
			Returns a pointer to the existing engine instance.
			</summary>  
			<returns>Pointer to the existing engine.</returns>
		</member>
		<member name="M:Unigine.Engine.getAppPath">
			<summary>
			Returns the path to a directory where binary executable file is stored.
			</summary>  
			<returns>Path to a directory where binary executable file is stored.</returns>
		</member>
		<member name="M:Unigine.Engine.getArg(int) const">
			<summary>
			Returns a command line argument by its index.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getArgf(int) const">
			<summary>
			Returns a command line argument by its index converted to a floating point value.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getArgi(int) const">
			<summary>
			Returns a command line argument by its index converted to an integer value.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getBuildConfiguration">
			<summary>
			Returns the current Engine build configuration.
			</summary>  
			<returns>Current build configuration. One of the BUILD_CONFIG_ values.</returns>
		</member>
		<member name="M:Unigine.Engine.getCachePath">
			<summary>
			Returns a path to a directory where cached files will be stored.
			</summary>  
			<returns>Path to the directory with cached files.</returns>
		</member>
		<member name="M:Unigine.Engine.getDataPath">
			<summary>
			Returns a path to the					-data_pathdirectory specified at the engine startup.
			</summary>  
			<returns>Path to the data directory.</returns>
		</member>
		<member name="M:Unigine.Engine.getLibraryModulePath">
			<summary>
			Returns a path to the Engine's dynamic library file.
			</summary>  
			<returns>Path to the Engine's dynamic library file.</returns>
		</member>
		<member name="M:Unigine.Engine.isActive const">
			<summary>
			Returns the active state of the Engine.
			</summary>  
			<returns>true if engine is active; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.isFocus const">
			<summary>
			Returns a value indicating if the Engine window is focused at the moment.
			</summary>  
			<returns>true if the Engine window is focused; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.isQuit const">
			<summary>
			Returns the quitting flag on engine quit.
			</summary>  
			<returns>true if engine is quitting; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorCache const">
			<summary>
			Returns a path to the editor script cache file.
			</summary>  
			<returns>Path to the editor script cache.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorFunction(char,int) const">
			<summary>
			Returns the editor function identifier.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>The editor script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorFunction(char,int) const">
			<summary>
			Returns a value indicating if the editor script function exists.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>true if the editor script function exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorInterpreter const">
			<summary>
			Returns a pointer to the editor interpreter.
			</summary>  
			<returns>Pointer to the editor interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorInterpreter const">
			<summary>
			Returns a value indicating if the function is called from the editor script.
			</summary>  
			<returns>true if the function is called from the editor script; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorLoaded const">
			<summary>
			Returns a value indicating if the editor script is loaded.
			</summary>  
			<returns>true if the editor script is loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorLogic(int) const">
			<summary>
			Returns the registered EditorLogic instance by its number.
			</summary> 
			<param name="num"> Number of the EditorLogic instance. </param> 
			<returns>EditorLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorScript">
			<summary>
			Returns a path to the editor script (provided by the					-editor_scriptcommand line argument).
			</summary>  
			<returns>Path to the editor script.</returns>
		</member>
		<member name="M:Unigine.Engine.setEditorVariable(char,Unigine.Variable)">
			<summary>
			Sets the editor script variable by its name.
			</summary> 
			<param name="name"> Name of the editor script variable. </param>
			<param name="v"> Value of the editor script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getEditorVariable(char) const">
			<summary>
			Returns the editor script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>Value of the editor script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorVariable(char) const">
			<summary>
			Returns a value indicating if the editor script variable exists.
			</summary> 
			<param name="name"> Name of the editor script variable. </param> 
			<returns>true if the editor script variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getError">
			<summary>
			Returns the system error message.
			</summary>  
			<returns>The system error message of the current frame, if there is one; otherwise an empty string.</returns>
		</member>
		<member name="M:Unigine.Engine.getExternDefine const">
			<summary>
			Returns the external definitions specified on the application start-up.
			</summary>  
			<returns>The list of external definitions.</returns>
		</member>
		<member name="M:Unigine.Engine.setBackgroundUpdate(bool)">
			<summary>
			Sets the value indicating whether the application window is updated when the window is hidden or out of focus (rendering frames in background). By default your UNIGINE application stops rendering frames and updating its main window, when it window goes out of focus (e.g. user switches to another window). Setting the background update mode enables constant rendering regardless of whether the Engine window is focused or in the background.
			</summary> 
			<param name="update"> Engine window update mode: true for constantly repeating update cycle (i.e. the application is updated even if the window is hidden or out of focus); otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Engine.isBackgroundUpdate">
			<summary>
			Returns a value indicating whether the Engine window is updated when the window is hidden or out of focus.
			</summary>  
			<returns>true if the update cycle is constantly repeated (i.e. the application is updated even if the window is hidden or out of focus); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getFeatures">
			<summary>
			Returns the list of features (like OpenGL, Direct3D, Microprofile, Geodetic, etc.).
			</summary>  
			<returns>The list of features (like OpenGL, Direct3D, Microprofile, Geodetic, etc.).</returns>
		</member>
		<member name="M:Unigine.Engine.getVersion">
			<summary>
			Returns the Engine version info.
			</summary>  
			<returns>Engine version info.</returns>
		</member>
		<member name="M:Unigine.Engine.isMainThread">
			<summary>
			Checks if the current thread is main.
			</summary>  
			<returns>true if the current thread is main; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getArg(int)">
			<summary>
			Returns the command-line argument by its index.
			</summary> 
			<param name="num"> Index of the argument </param> 
			<returns>Command-line argument</returns>
		</member>
		<member name="M:Unigine.Engine.getNumEditorLogics const">
			<summary>
			Returns the number of registered EditorLogic instances.
			</summary>  
			<returns>Number of EditorLogic instances.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumPluginPaths">
			<summary>
			Returns the number of paths to directories with plugins specified via					-plugin_pathcommand-line option.
			</summary>  
			<returns>Number of the specified paths to directories with plugins.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumPlugins const">
			<summary>
			Returns the number of loaded plugins.
			</summary>  
			<returns>Number of plugins.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumSystemLogics const">
			<summary>
			Returns the number of registered SystemLogic instances.
			</summary>  
			<returns>Number of SystemLogic instances.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumWorldLogics const">
			<summary>
			Returns the number of registered WorldLogic instances.
			</summary>  
			<returns>Number of WorldLogic instances.</returns>
		</member>
		<member name="M:Unigine.Engine.getPlugin(char)">
			<summary>
			Returns the loaded plugin interface.
			</summary> 
			<param name="name"> Name of the loaded plugin. </param> 
			<returns>Interface of the loaded plugin, if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginData(int) const">
			<summary>
			Returns the loaded plugin data.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Data of the loaded plugin, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginInterface(int) const">
			<summary>
			Returns the loaded plugin interface.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Interface of the loaded plugin, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginName(int) const">
			<summary>
			Returns the name of the loaded plugin by its index.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Loaded plugin name.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginOrder(int) const">
			<summary>
			Returns the execution order of the loaded plugin by its index.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Loaded plugin execution order.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginPath(int) const">
			<summary>
			Returns a path to a plugin directory specified via -plugin_path.
			</summary> 
			<param name="num"> Plugin path number in the row of the specified plugin paths. </param> 
			<returns>Path to a plugin directory.</returns>
		</member>
		<member name="M:Unigine.Engine.getPresentTime">
			<summary>
			Returns the total time spent on waiting for the GPU after all calculations on the CPU are completed. See the Profiler article for details.
			</summary>  
			<returns>Time value, in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getPrecision">
			<summary>
			Returns the Unigine Engine precision type.
			</summary>  
			<returns>Precision type.</returns>
		</member>
		<member name="M:Unigine.Engine.getRenderTime">
			<summary>
			Returns the time value, required to prepare all data to be rendered in the current frame and feed rendering commands from the CPU to the GPU. See the Profiler article for details.
			</summary>  
			<returns>Rendering time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getSavePath">
			<summary>
			Returns a path to a directory where a default configuration file, saved files and screenshots will be stored.
			</summary>  
			<returns>Path to a directory with the default configuration file, saved files, etc.</returns>
		</member>
		<member name="M:Unigine.Engine.getSoundApp const">
			<summary>
			Returns the current sound API.
			</summary>  
			<returns>Sound API used.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemCache const">
			<summary>
			Returns a path to the system script cache.
			</summary>  
			<returns>Path to the system script cache.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemFunction(char,int) const">
			<summary>
			Returns the system function identifier.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>System script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemFunction(char,int) const">
			<summary>
			Checks whether the system script function exists.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>true if the system script function exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemInterpreter const">
			<summary>
			Returns a pointer to the system interpreter.
			</summary>  
			<returns>Pointer to the system interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemInterpreter const">
			<summary>
			Checks if the function is called from the system script.
			</summary>  
			<returns>true when the function is called from the system script; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemLogic(int) const">
			<summary>
			Returns the registered SystemLogic instance by the given number.
			</summary> 
			<param name="num"> Number of the SystemLogic instance. </param> 
			<returns>SystemLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemScript">
			<summary>
			Returns a path to the system script.
			</summary>  
			<returns>Path to the system script.</returns>
		</member>
		<member name="M:Unigine.Engine.setSystemVariable(char,Unigine.Variable)">
			<summary>
			Sets a system script variable by a name.
			</summary> 
			<param name="name"> Name of the system script variable. </param>
			<param name="v"> Value of the system script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getSystemVariable(char) const">
			<summary>
			Returns the system script variable by its name.
			</summary> 
			<param name="name"> Name of the system script variable. </param> 
			<returns>System script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemVariable(char) const">
			<summary>
			Checks whether a system script variable exists.
			</summary> 
			<param name="name"> Name of the system script variable. </param> 
			<returns>true if the system script variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getTotalTime">
			<summary>
			Returns the total time that both rendering and calculating of the frame took (the duration of the main loop in the application execution sequence). Includes update, render, swap and wait GPU.
			</summary>  
			<returns>Total time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getTotalCPUTime">
			<summary>
			Returns the total CPU time taken to perform calculations for the frame (the duration of the main loop in the application execution sequence). Includes update, render and swap.
			</summary>  
			<returns>Total CPU time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getUpdateTime">
			<summary>
			Returns the duration of the update phase, during which the objects are prepared for their collision response to be calculated.
			</summary>  
			<returns>The update phase duration value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getVideoApp">
			<summary>
			Returns a graphics API used for rendering.
			</summary>  
			<returns>Graphics API used for rendering.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldFunction(char,int) const">
			<summary>
			Returns the world script function identifier.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldFunction(char,int) const">
			<summary>
			Returns value indicating if the world script function exists.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>true if the world script function exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldInterpreter const">
			<summary>
			Returns a pointer to the world interpreter.
			</summary>  
			<returns>Pointer to the world interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldInterpreter const">
			<summary>
			Returns a value indicating if the function is called from the world script.
			</summary>  
			<returns>true if the function is called from the world script; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldLoaded const">
			<summary>
			Returns a value indicating if the world script is loaded.
			</summary>  
			<returns>true if the world script is loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldLogic(int) const">
			<summary>
			Returns the registered WorldLogic instance by its number.
			</summary> 
			<param name="num"> Number of the WorldLogic instance. </param> 
			<returns>WorldLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.setWorldVariable(char,Unigine.Variable)">
			<summary>
			Sets a world script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param>
			<param name="v"> Value of the world script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getWorldVariable(char) const">
			<summary>
			Returns a world script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>World script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldVariable(char) const">
			<summary>
			Returns a value indicating if the world script variable exists.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>true if the world script variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addEditorLogic(EditorLogic)">
			<summary>
			Adds an EditorLogic instance to the engine runtime.
			</summary> 
			<param name="logic"> EditorLogic instance. </param> 
			<returns>true if the EditorLogic instance has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addPlugin(Plugin)">
			<summary>
			Adds a plugin to engine runtime by using a pointer to this plugin.
			</summary> 
			<param name="plugin"> Plugin pointer. </param> 
			<returns>true if the plugin ha been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addPlugin(char)">
			<summary>
			Adds a plugin to engine runtime by its name.
			</summary> 
			<param name="name"> Plugin name. </param> 
			<returns>true if the plugin has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addSystemLogic(SystemLogic)">
			<summary>
			Adds a SystemLogic instance to Engine runtime.
			</summary> 
			<param name="logic"> SystemLogic instance. </param> 
			<returns>true if the SystemLogic instance has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addWorldLogic(WorldLogic)">
			<summary>
			Adds a WorldLogic instance to the engine runtime.					Instances of the WorldLogic class should not be added while the world is loaded and the world script is being executed (as you can't change a world script while the world is loaded). In such a case the init() method shall not be called if the WorldLogic is added before opening the world.
			</summary> 
			<param name="logic"> WorldLogic instance. </param> 
			<returns>true if the WorldLogic instance has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.dialogError(char)">
			<summary>
			Displays a dialog window with errors set using the error() function.
			</summary> 
			<param name="title"> Title to be displayed in the error window. </param> 
		</member>
		<member name="M:Unigine.Engine.dialogMessage(char)">
			<summary>
			Displays a dialog window with the last message set using the message() function.
			</summary> 
			<param name="title"> Title to be displayed in the message window. </param> 
		</member>
		<member name="M:Unigine.Engine.findPlugin(char) const">
			<summary>
			Searches the index of the loaded plugin by its name.
			</summary> 
			<param name="name"> Name of the plugin. </param> 
			<returns>Index of the plugin if it is found, or -1 otherwise.</returns>
		</member>
		<member name="M:Unigine.Engine.main(SystemLogic,WorldLogic,EditorLogic)">
			<summary>
			Engine main loop. Replaces the following commands:
			</summary> 
			<param name="system"> A SystemLogic instance. </param>
			<param name="world"> A WorldLogic instance. </param>
			<param name="editor"> An EditorLogic instance. </param> 
		</member>
		<member name="M:Unigine.Engine.removeEditorLogic(EditorLogic)">
			<summary>
			Removes an EditorLogic instance from engine runtime.
			</summary> 
			<param name="logic"> An EditorLogic instance. </param> 
			<returns>true if the instance has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.removePlugin(Plugin)">
			<summary>
			Removes a plugin by using a pointer to this plugin.
			</summary> 
			<param name="plugin"> Plugin pointer to remove. </param> 
			<returns>true if the plugin has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.removeSystemLogic(SystemLogic)">
			<summary>
			Removes a SystemLogic instance from engine runtime.
			</summary> 
			<param name="logic"> A SystemLogic instance. </param> 
			<returns>true if the instance has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.removeWorldLogic(WorldLogic)">
			<summary>
			Removes a WorldLogic instance from engine runtime.					Instances of the WorldLogic class should not be removed while the world is loaded and the world script is being executed (as you can't change a world script while the world is loaded). In such a case the shutdown() method shall not be called if the WorldLogic is removed before closing the world.
			</summary> 
			<param name="logic"> A WorldLogic instance. </param> 
			<returns>true if the instance has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs the editor script function by its name.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="args"> Pointer to editor script function arguments. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int)">
			<summary>
			Runs the editor script function by its id. The target function can receive up to 8 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,int)">
			<summary>
			Runs the editor script function by its id.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="args"> Pointer to editor script function arguments. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs system script function by its name.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="args"> Pointer to system script function arguments. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int)">
			<summary>
			Runs the system script function by its id. The target function can receive up to 8 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,int)">
			<summary>
			Runs system script function by its id.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="args"> Pointer to system script function arguments. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 1 argument.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 4 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable)">
			<summary>
			Runs the world script function by its identifier. The target function must receive one argument.
			</summary> 
			<param name="id"> Identifier of the world script function. </param>
			<param name="a0"> Argument </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs the world script function by its name.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="args"> Pointer to world script function arguments. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int)">
			<summary>
			Runs the world script function by its id.
			</summary> 
			<param name="id"> ID of the world script function. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,int)">
			<summary>
			Runs the world script function by its id.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="args"> Pointer to world script function arguments. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Runs the world script function by its id. The target function must receive 4 arguments.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.shutdown">
			<summary>
			Deletes the pointer to the existing engine instance.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.iterate">
			<summary>
			Engine iterate function (update, render, swap). This function must be called every frame.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.isEvaluation const">
			<summary>
			Returns a value indicating if the current version of the Engine is for evaluation only.
			</summary>  
			<returns>true if the evaluation version of the Engine is used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.startFps">
			<summary>
			Starts the FPS counter if it was stopped. All function calls are placed into a stack, so the number of calls to this function should correspond to the number of calls to the stopFps() function.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.stopFps">
			<summary>
			Stops the FPS counter. This function should be called if application window is hidden or some heavy non-rendering tasks are processing. All function calls are placed into a stack, so the number of calls to this function should correspond to the number of calls to the startFps() function.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.getFps">
			<summary>
			Returns the current value of the Engine FPS counter.
			</summary>  
			<returns>Value of the Engine FPS counter.</returns>
		</member>
		<member name="M:Unigine.Engine.getIFps">
			<summary>
			Returns an inverse value of the Engine FPS counter.
			</summary>  
			<returns>Inverse value of the Engine FPS counter (1/FPS).</returns>
		</member>
		<member name="M:Unigine.Engine.getStatisticsFpsMin">
			<summary>
			Returns the minimum FPS counter value for the last 600 frames.
			</summary>  
			<returns>Minimum FPS counter value for the last 600 frames.</returns>
		</member>
		<member name="M:Unigine.Engine.getStatisticsFpsAvg">
			<summary>
			Returns the average FPS counter value for the last 600 frames.
			</summary>  
			<returns>Average FPS counter value for the last 600 frames.</returns>
		</member>
		<member name="M:Unigine.Engine.getStatisticsFpsMax">
			<summary>
			Returns the maximum FPS counter value for the last 600 frames.
			</summary>  
			<returns>Maximum FPS counter value for the last 600 frames.</returns>
		</member>
		<member name="M:Unigine.Engine.getVideoContextFlags">
			<summary>
			Returns the current video context flags.
			</summary>  
			<returns>A set of current video context flags as an integer value.</returns>
		</member>
		<member name="M:Unigine.Engine.getFrame">
			<summary>
			Returns the number of the current engine frame.
			</summary>  
			<returns>Engine frame number.</returns>
		</member>
		<member name="M:Unigine.Engine.addCallback(Unigine.Engine.CALLBACK_INDEX,Unigine.CallbackBase)">
			<summary>
			Adds a callback for the specified stage of the execution sequence. Callback functions can be used to get access to WorldLogic::update(), node update, GUI (and callback) update, WorldLogic::postUpdate() within the main loop.
			</summary> 
			<param name="callback"> Stage of the execution sequence for which a callback is to be added. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the execution sequence step, _END — to its completion. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Engine.removeCallback(Unigine.Engine.CALLBACK_INDEX,void)">
			<summary>
			Removes the specified callback from the list of callbacks for the specified stage of the execution sequence. Callback functions can be used to get access to WorldLogic::update(), node update, GUI (and callback) update, WorldLogic::postUpdate() within the main loop.
			</summary> 
			<param name="callback"> Stage of the execution sequence for which a callback is to be added. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the execution sequence step, _END — to its completion. </param>
			<param name="id"> Callback ID obtained when the callback is added. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Engine.clearCallbacks(Unigine.Engine.CALLBACK_INDEX)">
			<summary>
			Clears all added callbacks for the specified stage of the execution sequence. Callback functions can be used to get access to WorldLogic::update(), node update, GUI (and callback) update, WorldLogic::postUpdate() within the main loop.
			</summary> 
			<param name="callback"> Stage of the execution sequence for which a callback is to be added. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the execution sequence step, _END — to its completion. </param> 
		</member>
		<member name="M:Unigine.Engine.init(int,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,wchar_t)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(InitParameters,int,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="init_parameters"> Structure of initializing parameters. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(InitParameters,int,wchar_t)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="init_parameters"> Structure of initializing parameters. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.quit">
			<summary>
			The Engine requests to exit the application.
			</summary>  
		</member>
		<member name="F:Unigine.Engine.GCMODE_DEFAULT">
			<summary>
			Default C# garbage collector mode. In this case heavy spikes and excessive memory consumption are imminent if you don't manage your objects properly and do not use the Dispose() method.
		</summary>
		</member>
		<member name="F:Unigine.Engine.GCMODE_USE_MEMORY_PRESSURE">
			<summary>
			Passes the information about C++ memory consumption to C#. This results in more frequent GC calls preventing the application from eating too much memory right after startup and removing heavy spikes.
		</summary>
		</member>
		<member name="F:Unigine.Engine.GCMODE_EVERY_FRAME">
			<summary>
			The garbage collector is called every frame. This results in overall performance reduction, but removes heavy spikes.
		</summary>
		</member>
		<member name="F:Unigine.Engine.GCMODE_WORLD_SHUTDOWN">
			<summary>
			The garbage collector is called on closing the world. This mode is ideal if the number of memory allocations is your code is insignificant.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_DEBUG">
			<summary>
			Debug build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_DEVELOPMENT">
			<summary>
			Development build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_RELEASE">
			<summary>
			Release build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.NUM_CALLBACKS">
			<summary>
			Callback counter.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SWAP">
			<summary>
			Callback after the swap stage is finished.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_DELETE_OBJECTS">
			<summary>
			Callback after the objects are deleted.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_DELETE_OBJECTS">
			<summary>
			Callback before the objects are deleted.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PLUGINS_SWAP">
			<summary>
			Callback after the plugin swap() function is called, if it exists.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PLUGINS_SWAP">
			<summary>
			Callback before the plugin swap() function is called, if it exists.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_WORLD_SWAP">
			<summary>
			Callback after the world logic swap() function is executed.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_WORLD_SWAP">
			<summary>
			Callback before the world logic swap() function is executed.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PATHFINDING">
			<summary>
			Callback after the pathfinding is updated.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PHYSICS_SYNC">
			<summary>
			Callback after the physics synchronization is finished.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PHYSICS_SYNC">
			<summary>
			Callback before the physics synchronization is started.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PHYSICS">
			<summary>
			Callback after the physics calculations are finished.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_VIDEOGRAB">
			<summary>
			Callback after the videograbbing stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_VIDEOGRAB">
			<summary>
			Callback before the videograbbing stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SWAP">
			<summary>
			Callback before the swap stage is started.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_RENDER">
			<summary>
			Callback after the rendering stage is finished.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_POST_RENDER">
			<summary>
			Callback after the post-rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_POST_RENDER">
			<summary>
			Callback before the post-rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_GUI_RENDER">
			<summary>
			Callback after the GUI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_GUI_RENDER">
			<summary>
			Callback before the GUI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PLUGINS_GUI">
			<summary>
			Callback after the gui() function of plugins is called.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PLUGINS_GUI">
			<summary>
			Callback before the gui() function of plugins is called.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_RENDER_WORLD">
			<summary>
			Callback after the world rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_RENDER_WORLD">
			<summary>
			Callback before the world rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PLUGINS_RENDER">
			<summary>
			Callback after the plugins rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PLUGINS_RENDER">
			<summary>
			Callback before the plugins rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_EDITOR_RENDER">
			<summary>
			Callback after the editor rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_EDITOR_RENDER">
			<summary>
			Callback before the editor rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_RENDER">
			<summary>
			Callback before the rendering stage is started.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_UPDATE">
			<summary>
			Callback after the update stage is finished.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PATHFINDING">
			<summary>
			Callback before the pathfinding module is updated.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PHYSICS">
			<summary>
			Callback before the physics module is updated.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_FILESYSTEM_UPDATE">
			<summary>
			Callback after the filesystem update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_FILESYSTEM_UPDATE">
			<summary>
			Callback before the filesystem update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_ASYNC_TASKS_UPDATE">
			<summary>
			Callback after the asynchronous tasks update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_ASYNC_TASKS_UPDATE">
			<summary>
			Callback before the asynchronous tasks update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SPATIAL_UPDATE">
			<summary>
			Callback after the spatial tree update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SPATIAL_UPDATE">
			<summary>
			Callback before the spatial tree update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PLUGINS_POST_UPDATE">
			<summary>
			Callback after the plugins postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PLUGINS_POST_UPDATE">
			<summary>
			Callback before the plugins postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_EDITOR_POST_UPDATE">
			<summary>
			Callback after the editor logic postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_EDITOR_POST_UPDATE">
			<summary>
			Callback before the editor logic postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SYSTEM_LOGIC_POST_UPDATE">
			<summary>
			Callback after the system logic postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SYSTEM_LOGIC_POST_UPDATE">
			<summary>
			Callback before the system logic postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SYSTEM_SCRIPT_POST_UPDATE">
			<summary>
			Callback after the system script postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SYSTEM_SCRIPT_POST_UPDATE">
			<summary>
			Callback before the system script postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_WORLD_POST_UPDATE">
			<summary>
			Callback after the world logic postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_WORLD_POST_UPDATE">
			<summary>
			Callback before the world logic postupdate stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_GUI_UPDATE">
			<summary>
			Callback after the GUI update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_GUI_UPDATE">
			<summary>
			Callback before the GUI update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_WORLD_UPDATE">
			<summary>
			Callback after the world logic update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_WORLD_UPDATE">
			<summary>
			Callback before the world logic update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SYSTEM_LOGIC_UPDATE">
			<summary>
			Callback after the system logic update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SYSTEM_LOGIC_UPDATE">
			<summary>
			Callback before the system logic update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SYSTEM_SCRIPT_UPDATE">
			<summary>
			Callback after the system script update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SYSTEM_SCRIPT_UPDATE">
			<summary>
			Callback before the system script update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_EDITOR_UPDATE">
			<summary>
			Callback after the editor update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_EDITOR_UPDATE">
			<summary>
			Callback before the editor update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PLUGINS_UPDATE">
			<summary>
			Callback after the plugins update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PLUGINS_UPDATE">
			<summary>
			Callback before the plugins update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SOUNDS_UPDATE">
			<summary>
			Callback after the sounds update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SOUNDS_UPDATE">
			<summary>
			Callback before the sounds update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_EXPRESSION_UPDATE">
			<summary>
			Callback after the expressions update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_EXPRESSION_UPDATE">
			<summary>
			Callback before the expressions update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_RENDER_UPDATE">
			<summary>
			Callback after the render functions update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_RENDER_UPDATE">
			<summary>
			Callback before the render functions update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_GAME_UPDATE">
			<summary>
			Callback after the game logic update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_GAME_UPDATE">
			<summary>
			Callback before the game logic update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_LANDSCAPE_ASYNC_UPDATE">
			<summary>
			Callback after the landscape asynchronous update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_LANDSCAPE_ASYNC_UPDATE">
			<summary>
			Callback before the landscape asynchronous update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_LANDSCAPE_UPDATE">
			<summary>
			Callback after the landscape update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_LANDSCAPE_UPDATE">
			<summary>
			Callback before the landscape update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_RENDER_MANAGER_UPDATE">
			<summary>
			Callback after the render manager update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_RENDER_MANAGER_UPDATE">
			<summary>
			Callback before the render manager update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_SOUND_MANAGER_UPDATE">
			<summary>
			Callback after the sound manager update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_SOUND_MANAGER_UPDATE">
			<summary>
			Callback before the sound manager update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_WORLD_MANAGER_UPDATE">
			<summary>
			Callback after the world manager update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_WORLD_MANAGER_UPDATE">
			<summary>
			Callback before the world manager update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_CONTROLS_UPDATE">
			<summary>
			Callback after the controls update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_CONTROLS_UPDATE">
			<summary>
			Callback before the controls update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_INPUT_UPDATE">
			<summary>
			Callback after the input update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_INPUT_UPDATE">
			<summary>
			Callback before the input update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_END_PROPERTIES_UPDATE">
			<summary>
			Callback after the properties update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_PROPERTIES_UPDATE">
			<summary>
			Callback before the properties update stage.
		</summary>
		</member>
		<member name="F:Unigine.Engine.CALLBACK_BEGIN_UPDATE">
			<summary>
			Callback before the update stage is started.
		</summary>
		</member>
		<member name="F:Unigine.Engine.PRECISION_PRECISION_DOUBLE">
			<summary>
			Double precision type.
		</summary>
		</member>
		<member name="F:Unigine.Engine.PRECISION_PRECISION_FLOAT">
			<summary>
			Float precision type.
		</summary>
		</member>
	</members>
</doc>