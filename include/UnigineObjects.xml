<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Object.setBody(Unigine.Ptr{Unigine.Body},bool)">
			<summary>
			Assigns a physical body to the object.
			</summary> 
			<param name="body"> Physical body to be assigned to the object. </param>
			<param name="update"> Update flag. Set this flag to update the object after assigning the specified body to it. </param> 
		</member>
		<member name="M:Unigine.Object.setBody(Unigine.Ptr{Unigine.Body})">
			<summary>
			Assigns a physical body to the object.
			</summary> 
			<param name="body"> Physical body to be assigned to the object. </param> 
		</member>
		<member name="M:Unigine.Object.getBody const">
			<summary>
			Returns a physical body assigned to the object.
			</summary>  
			<returns>Body assigned to the object or NULL (0), if no body is assigned. </returns>
		</member>
		<member name="M:Unigine.Object.getBodyRigid const">
			<summary>
			Returns a rigid body assigned to the object.
			</summary>  
			<returns>Rigid body assigned to the object or NULL (0), if no body is assigned or the body is not rigid. </returns>
		</member>
		<member name="M:Unigine.Object.getBoundBox(int) const">
			<summary>
			Returns the bounding box of a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Bounding box.</returns>
		</member>
		<member name="M:Unigine.Object.getBoundSphere(int) const">
			<summary>
			Returns the bounding sphere of a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Bounding sphere.</returns>
		</member>
		<member name="M:Unigine.Object.setBakeToEnvProbe(bool,int)">
			<summary>
			Sets a value indicating if the specified surface is to be baked to environment probes.
			</summary> 
			<param name="enabled"> 1 to enable baking of the specified surface to environment probes, 0 - to disable it. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getBakeToEnvProbe(int) const">
			<summary>
			Returns a value indicating if the specified surface is to be baked to environment probes.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>1 if the specified surface is to be baked to environment probes; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setBakeToGI(bool,int)">
			<summary>
			Sets a value indicating if the specified surface is to be baked to GI (voxel probes and lightmaps).
			</summary> 
			<param name="enabled"> 1 to enable baking of the specified surface to GI, 0 - to disable it. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getBakeToGI(int) const">
			<summary>
			Returns a value indicating if the specified surface is to be baked to GI (voxel probes and lightmaps).
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>1 if the specified surface is to be baked to GI; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setCastEnvProbeShadow(bool,int)">
			<summary>
			Enables or disables casting shadows from environment probes by the specified surface.
			</summary> 
			<param name="enabled"> 1 to enable casting shadows from environment probes by the specified surface, 0 to disable it. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getCastEnvProbeShadow(int) const">
			<summary>
			Returns a value indicating if casting shadows from environment probes by the specified surface is enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>1 if casting shadows from environment probes by the specified surface is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setCastShadow(bool,int)">
			<summary>
			Enables or disables casting shadows from non-world lights for a given surface.
			</summary> 
			<param name="enabled"> 1 if shadows are to be cast by a given surface; otherwise, 0. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getCastShadow(int) const">
			<summary>
			Returns the surface cast shadow flag, which indicates if a given surface should cast shadows from non-world lights.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Positive number if shadows are cast by a given surface; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setCastWorldShadow(bool,int)">
			<summary>
			Enables or disables casting shadows from world lights for a given surface.
			</summary> 
			<param name="enabled"> true if world shadows are to be cast by a given surface; otherwise, false. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getCastWorldShadow(int) const">
			<summary>
			Returns the surface cast world shadow flag, which indicates if a given surface should cast shadows from world lights.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Positive number if world shadows are cast by a given surface; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setCollision(bool,int)">
			<summary>
			Enables or disables collision detection for a given surface.
			</summary> 
			<param name="enabled"> 1 if collision detection is enabled for a given surface; otherwise, 0. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getCollision(int) const">
			<summary>
			Returns the surface collision flag, which indicates if collision detection for a given surface is enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Positive number if collision detection is enabled for a given surface; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setCollisionMask(int,int)">
			<summary>
			Sets a collision mask for a given surface. Two objects collide, if they both have matching masks.
			</summary> 
			<param name="mask"> Surface collision mask. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getCollisionMask(int) const">
			<summary>
			Returns the collision mask for a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface collision mask.</returns>
		</member>
		<member name="M:Unigine.Object.setEnabled(bool)">
			<summary>
			Enables or disables the node.
			</summary> 
			<param name="enabled"> 1 to enable the node, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Object.setEnabled(bool,int)">
			<summary>
			Enables or disables a given surface.
			</summary> 
			<param name="enabled"> 1 to enable the surface, 0 to disable it. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.isEnabled(int) const">
			<summary>
			Returns a value indicating if a given surface is enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Positive number if the surface is enabled; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.Object.isEnabled const">
			<summary>
			Returns a value indicating if the node and its parent nodes are enabled.
			</summary>  
			<returns>Positive number if the node and its parent nodes are enabled; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.Object.setIntersection(bool,int)">
			<summary>
			Enables or disables intersections with a given surface.
			</summary> 
			<param name="enabled"> true to enable intersections with a given surface, false to disable them.  </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Ptr{ObjectIntersectionTexCoord},int) const">
			<summary>
			Checks if there is an intersection between a line and a given surface. If the function returns true the data about the texture coordinates of the intersection point will be put to ObjectIntersectionTexCoord object.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="v"> ObjectIntersectionTexCoord class instance to store corresponding intersection data. </param>
			<param name="surface"> Surface number. </param> 
			<returns>true if there is an intersection with a given surface; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(int) const">
			<summary>
			Returns a surface intersection flag. This flag indicates if intersections with a given surface are enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>true if intersections with a given surface are enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Ptr{ObjectIntersectionNormal},int) const">
			<summary>
			Checks if there is an intersection between a line and a given surface. If the function returns true the data about the normal at the intersection point will be put to ObjectIntersectionNormal object.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="v"> ObjectIntersectionNormal class instance to store corresponding intersection data. </param>
			<param name="surface"> Surface number. </param> 
			<returns>true if there is an intersection with a given surface; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,int,Unigine.Ptr{ObjectIntersection},int) const">
			<summary>
			Checks if there is an intersection between a line and a surface with a given intersection mask. If the function returns true the data about the intersection point will be put to ObjectIntersection object and the number of the first intersected surface will be put to the return variable.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="mask"> Intersection mask. </param>
			<param name="v"> ObjectIntersection class instance to store corresponding intersection data. </param>
			<param name="ret_surface"> Intersected surface index. </param> 
			<returns>true if there is an intersection; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Ptr{ObjectIntersection},int) const">
			<summary>
			Checks if there is an intersection between a line and a given surface. If the function returns true the data about the intersection point will be put to ObjectIntersection object.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="v"> ObjectIntersection class instance to store corresponding intersection data. </param>
			<param name="surface"> Surface number. </param> 
			<returns>true if there is an intersection with a given surface; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,int,Unigine.Ptr{ObjectIntersectionNormal},int) const">
			<summary>
			Checks if there is an intersection between a line and a surface with a given intersection mask. If the function returns true the data about the normal at the intersection point will be put to ObjectIntersectionNormal object and the number of the first intersected surface will be put to the return variable.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="mask"> Intersection mask. </param>
			<param name="v"> ObjectIntersectionNormal class instance to store corresponding intersection data. </param>
			<param name="ret_surface"> Intersected surface index. </param> 
			<returns>true if there is an intersection; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,int,Unigine.Ptr{ObjectIntersectionTexCoord},int) const">
			<summary>
			Checks if there is an intersection between a line and a surface with a given intersection mask. If the function returns true the data about the texture coordinates of the intersection point will be put to ObjectIntersectionNormal object and the number of the first intersected surface will be put to the return variable.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="mask"> Intersection mask. </param>
			<param name="v"> ObjectIntersectionTexCoord class instance to store corresponding intersection data. </param>
			<param name="ret_surface"> Intersected surface index. </param> 
			<returns>true if there is an intersection; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,int,Unigine.Math.Vec3,Unigine.Math.vec3,Unigine.Math.vec4,int,int,int) const">
			<summary>
			Checks if there is an intersection between a line and a surface with a given intersection mask. If the function returns true the data about the intersection (point, normal and texture coordinates) and the number of the first intersected surface will be put to corresponding return variables.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="mask"> Intersection mask. </param>
			<param name="ret_point"> Intersection point coordinates. Pass NULL if this parameter is not required. </param>
			<param name="ret_normal"> Coordinates of the normal vector to the intersection point. Pass NULL if this parameter is not required. </param>
			<param name="ret_texcoord"> Texture coordinates of the intersection point (vec4, where vec4.xy is for the first (0) UV channel, vec4.zw is for the second (1) UV channel). Pass NULL if this parameter is not required. </param>
			<param name="ret_index"> Intersected triangle number. Pass NULL if this parameter is not required. </param>
			<param name="ret_instance"> Intersected instance number. Pass NULL if this parameter is not required.Intersected instance number can be obtained for the following classes:ObjectMeshSkinnedObjectMeshClusterObjectMeshSplineCluster </param>
			<param name="ret_surface"> Intersected surface number. Pass NULL if this parameter is not required. </param> 
			<returns>true if there is at least one intersection found; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Math.vec3,Unigine.Math.vec4,int,int,int) const">
			<summary>
			Checks if there is an intersection between a line and a given surface. If the function returns true the data about the intersection (point, normal and texture coordinates) will be put to corresponding return variables.				The following objects have individual parameters, that control accuracy of intersection detection for them:											ObjectLandscapeTerrain						ObjectWaterGlobal
			</summary> 
			<param name="p0"> Line start point coordinates (local). </param>
			<param name="p1"> Line end point coordinates (local). </param>
			<param name="ret_point"> Intersection point coordinates. Pass NULL if this parameter is not required. </param>
			<param name="ret_normal"> Coordinates of the normal vector to the intersection point. Pass NULL if this parameter is not required. </param>
			<param name="ret_texcoord"> Texture coordinates of the intersection point (vec4, where vec4.xy is for the first (0) UV channel, vec4.zw is for the second (1) UV channel). Pass NULL if this parameter is not required. </param>
			<param name="ret_index"> Intersected triangle number. Pass NULL if this parameter is not required. </param>
			<param name="ret_instance"> Intersected instance number. Pass NULL if this parameter is not required.Intersected instance number can be obtained for the following classes:ObjectMeshSkinnedObjectMeshClusterObjectMeshSplineCluster </param>
			<param name="surface"> Surface number. </param> 
			<returns>true if there is an intersection with a given surface; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.setIntersectionMask(int,int)">
			<summary>
			Sets an intersection mask for a given surface.
			</summary> 
			<param name="mask"> Surface intersection mask. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getIntersectionMask(int) const">
			<summary>
			Returns the intersection mask for a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface intersection mask.</returns>
		</member>
		<member name="M:Unigine.Object.setPhysicsIntersection(bool,int)">
			<summary>
			Enables or disables physics intersections (between physical objects with bodies and collider shapes, or ray intersections with collider geometry) for a given surface.
			</summary> 
			<param name="enabled"> true to enable physics intersections with a given surface, false to disable them. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getPhysicsIntersection(int) const">
			<summary>
			Returns a surface physics intersection flag. This flag indicates if physics intersections (between physical objects with bodies and collider shapes, or ray intersections with collider geometry) with a given surface are enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>true if intersections with a given surface are enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Object.setPhysicsIntersectionMask(int,int)">
			<summary>
			Sets the physics intersection mask for a surface with the specified number.
			</summary> 
			<param name="mask"> Surface physics intersection mask. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getPhysicsIntersectionMask(int) const">
			<summary>
			Returns the physics intersection mask for a surface with the specified number.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface physics intersection mask set for the specified surface.</returns>
		</member>
		<member name="M:Unigine.Object.setShadowMask(int,int)">
			<summary>
			Sets a shadow mask for a given surface.					For the shadow from an object's surface to be rendered for a light source, this mask must match the following ones (one bit, at least):													Shadow mask of the light source																						Shadow mask of the material assigned to this surface
			</summary> 
			<param name="mask"> Surface shadow mask. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getShadowMask(int) const">
			<summary>
			Returns the shadow mask for a given surface.					For the shadow from an object's surface to be rendered for a light source, this mask must match the following ones (one bit, at least):													Shadow mask of the light source																						Shadow mask of the material assigned to this surface
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface shadow mask.</returns>
		</member>
		<member name="M:Unigine.Object.getMaterial(int) const">
			<summary>
			Returns a material used for a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Material smart pointer.</returns>
		</member>
		<member name="M:Unigine.Object.getMaterialInherit(int)">
			<summary>
			Inherits the surface material (i.e. creates a material instance). Modifications made to a new material instance will not affect the source material.					A child material will be created only once, all subsequent calls to this method will return the first created child material.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Inherited material smart pointer.</returns>
		</member>
		<member name="M:Unigine.Object.isMaterialInherited(int) const">
			<summary>
			Returns the value indicating if a given surface material is inherited. Modifications made in a material instance do not affect the source material.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Positive number if the material is inherited; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.clearMaterialInherit(int)">
			<summary>
			Removes the inherited material and sets back the source(parent) material for the specified surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.setMaterialParameterInt(char,int,int)">
			<summary>
			Sets the value of a given integer parameter of the surface material.					When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterInt(char,int) const">
			<summary>
			Returns the value of a given integer parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterInt2(char,Unigine.Math.ivec2,int)">
			<summary>
			Sets the value of a given ivec2 parameter of the surface material. When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterInt2(char,int) const">
			<summary>
			Returns the value of a given ivec2 parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterInt3(char,Unigine.Math.ivec3,int)">
			<summary>
			Sets the value of a given ivec3 parameter of the surface material. When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterInt3(char,int) const">
			<summary>
			Returns the value of a given ivec3 parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterInt4(char,Unigine.Math.ivec4,int)">
			<summary>
			Sets the value of a given ivec4 parameter of the surface material. When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterInt4(char,int) const">
			<summary>
			Returns the value of a given ivec4 parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterFloat(char,float,int)">
			<summary>
			Sets the value of a given float parameter of the surface material.					When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterFloat(char,int) const">
			<summary>
			Returns the value of a given float parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterFloat2(char,Unigine.Math.vec2,int)">
			<summary>
			Sets the value of a given vec2 parameter of the surface material. When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterFloat2(char,int) const">
			<summary>
			Returns the value of a given vec2 parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterFloat3(char,Unigine.Math.vec3,int)">
			<summary>
			Sets the value of a given vec3 parameter of the surface material. When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterFloat3(char,int) const">
			<summary>
			Returns the value of a given vec3 parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialParameterFloat4(char,Unigine.Math.vec4,int)">
			<summary>
			Sets the value of a given vec4 parameter of the surface material. When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="parameter"> Parameter value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialParameterFloat4(char,int) const">
			<summary>
			Returns the value of a given vec4 parameter of the surface material.
			</summary> 
			<param name="name"> Parameter name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Parameter value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialState(char,int,int)">
			<summary>
			Sets the state value for a given surface material.					When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Material state name. </param>
			<param name="state"> State value. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialState(char,int) const">
			<summary>
			Returns the state value of a given surface material.
			</summary> 
			<param name="name"> Material state name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>State value.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialTexture(char,char,int)">
			<summary>
			Sets the path to a given texture of a given surface material.					When called for the first time, this method creates a copy of the source material (which is equal to the getMaterialInherit method).
			</summary> 
			<param name="name"> Material texture name. </param>
			<param name="texture"> Path to the texture file. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialTexture(char,int) const">
			<summary>
			Returns the path to a given texture of a given surface material.
			</summary> 
			<param name="name"> Material texture name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Path to the texture file.</returns>
		</member>
		<member name="M:Unigine.Object.setMinVisibleDistance(float,int)">
			<summary>
			Updates the minimum visibility distance of a given surface. It is the distance, starting from which the surface begins to fade in until it becomes completely visible.
			</summary> 
			<param name="distance"> Minimum visibility distance, in units. If a negative value is provided, 0 will be used instead. The default value is -inf. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMinVisibleDistance(int) const">
			<summary>
			Returns minimum visibility distance of a given surface. It is the distance, starting from which the surface begins to fade in until it becomes completely visible.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Minimum visibility distance, in units.</returns>
		</member>
		<member name="M:Unigine.Object.setMaxVisibleDistance(float,int)">
			<summary>
			Updates the maximum visibility distance of a given surface. It is the distance, starting from which the surface begins to fade out until it becomes completely invisible.
			</summary> 
			<param name="distance"> Maximum visibility distance, in units. If a negative value is provided, 0 will be used instead. The default value is inf. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaxVisibleDistance(int) const">
			<summary>
			Returns the maximum visibility distance of a given surface. It is the distance, starting from which the surface begins to fade out until it becomes completely invisible.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Maximum visibility distance, in units.</returns>
		</member>
		<member name="M:Unigine.Object.setMinFadeDistance(float,int)">
			<summary>
			Updates the minimum fade-in distance of a given surface. Over this distance the surface smoothly becomes visible due to alpha fading. It is counted starting from the minimum visibility distance.
			</summary> 
			<param name="distance"> Minimum fade-in distance, in units. If a negative value is provided, 0 will be used instead. The default value is 0. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMinFadeDistance(int) const">
			<summary>
			Returns the minimum fade-in distance of a given surface. Over this distance the surface smoothly becomes visible due to alpha fading. It is counted starting from the minimum visibility distance.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Minimum fade-in distance, in units.</returns>
		</member>
		<member name="M:Unigine.Object.setMaxFadeDistance(float,int)">
			<summary>
			Updates the maximum fade-out distance of a given surface. Over this distance the surface smoothly becomes invisible due to alpha fading. It is counted off starting from the maximum visibility distance.
			</summary> 
			<param name="distance"> Maximum fade-out distance, in units. If a negative value is provided, 0 will be used instead. The default value is 0. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaxFadeDistance(int) const">
			<summary>
			Returns the maximum fade-out distance. Over this distance the surface smoothly becomes invisible due to alpha fading. It is counted starting from the maximum visibility distance.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Maximum fade-out distance, in units.</returns>
		</member>
		<member name="M:Unigine.Object.setMinParent(int,int)">
			<summary>
			Sets surface minimum LOD parent surface number.
			</summary> 
			<param name="parent"> Surface minimum LOD parent surface number. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMinParent(int) const">
			<summary>
			Returns the surface minimum LOD parent surface number.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface minimum LOD parent surface number.</returns>
		</member>
		<member name="M:Unigine.Object.setMaxParent(int,int)">
			<summary>
			Sets a surface maximum LOD parent surface number.
			</summary> 
			<param name="parent"> Surface maximum LOD parent surface number. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getMaxParent(int) const">
			<summary>
			Returns the surface maximum LOD parent surface number.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface maximum LOD parent surface number.</returns>
		</member>
		<member name="M:Unigine.Object.getNumSurfaces const">
			<summary>
			Returns the number of surfaces of the object.
			</summary>  
		</member>
		<member name="M:Unigine.Object.getNumTriangles(int) const">
			<summary>
			Returns the number of triangles comprising a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Number of triangles.</returns>
		</member>
		<member name="M:Unigine.Object.setParent(int,int)">
			<summary>
			Sets or clears the parent surface for a given surface.
			</summary> 
			<param name="parent"> Number of the parent surface or -1 to clear the parent.  </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getParent(int) const">
			<summary>
			Returns the number of the parent surface for a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Parent surface number. If -1 is returned, the parent surface is not specified for a given surface.</returns>
		</member>
		<member name="M:Unigine.Object.setSurfaceProperty(char,char)">
			<summary>
			Sets a new property for a given surface.
			</summary> 
			<param name="name"> Name of the new property. </param>
			<param name="pattern"> Pattern (string with a regular expression), against which surface names will be matched. </param> 
			<returns>1 if the property is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setSurfaceProperty(char,int)">
			<summary>
			Sets a new property for the specified surface.
			</summary> 
			<param name="name"> Name of the new property. </param>
			<param name="surface"> Surface number. </param> 
			<returns>1 if the property is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setSurfaceProperty(Unigine.UGUID,int)">
			<summary>
			Sets a new property for the specified surface.
			</summary> 
			<param name="guid"> Property GUID. </param>
			<param name="surface"> Surface number. </param> 
			<returns>1 if the property is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setSurfaceProperty(Unigine.UGUID,char)">
			<summary>
			Sets a new property for the specified surface(s).
			</summary> 
			<param name="guid"> Property GUID. </param>
			<param name="pattern"> Pattern (string with a regular expression), against which surface names will be matched. </param> 
			<returns>1 if the property is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setSurfaceProperty(Unigine.Ptr{Unigine.Property},int)">
			<summary>
			Sets a new property for the specified surface.
			</summary> 
			<param name="property"> Property smart pointer. </param>
			<param name="surface"> Surface number. </param> 
			<returns>1 if the property is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setSurfaceProperty(Unigine.Ptr{Unigine.Property},char)">
			<summary>
			Sets a new property for the specified surface(s).
			</summary> 
			<param name="property"> Property smart pointer. </param>
			<param name="pattern"> Pattern (string with a regular expression), against which surface names will be matched. </param> 
			<returns>1 if the property is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.getSurfaceProperty(int) const">
			<summary>
			Returns the property smart pointer.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Object.getSurfacePropertyInherit(int)">
			<summary>
			Inherits the property for the specific object. All changes of the inherited property will not affect the reference one.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Inherited property smart pointer.</returns>
		</member>
		<member name="M:Unigine.Object.clearSurfaceProperty(int)">
			<summary>
			Removes the assigned property from the specified surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.clearSurfacePropertyInherit(int)">
			<summary>
			Removes the inherited property and sets back the source(parent) property for the specified surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.isSurfacePropertyInherited(int) const">
			<summary>
			Returns a value indicating if a given property is inherited.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Positive number if the surface property is inherited; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.getSurfacePropertyName(int) const">
			<summary>
			Returns the name of the property of a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Property name.</returns>
		</member>
		<member name="M:Unigine.Object.getSurfaceName(int) const">
			<summary>
			Returns the name of a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface name.</returns>
		</member>
		<member name="M:Unigine.Object.setViewportMask(int,int)">
			<summary>
			Sets a viewport mask for a given surface. The object surface is rendered, if its mask matches the player (camera) and material masks.
			</summary> 
			<param name="mask"> Surface viewport mask. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getViewportMask(int) const">
			<summary>
			Returns a viewport mask for a given surface. The object surface is rendered, if its mask matches the player (camera) and material masks.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface viewport mask.</returns>
		</member>
		<member name="M:Unigine.Object.getWorldBoundBox(int) const">
			<summary>
			Returns the world bounding box of a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Bounding box (in world coordinates).</returns>
		</member>
		<member name="M:Unigine.Object.getWorldBoundSphere(int) const">
			<summary>
			Returns the world bounding sphere of a given surface.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Bounding sphere (in world coordinates).</returns>
		</member>
		<member name="M:Unigine.Object.findSurface(char) const">
			<summary>
			Searches for a surface with a given name.
			</summary> 
			<param name="name"> Surface name. </param> 
			<returns>Surface number if it exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Object.flushBodyTransform">
			<summary>
			Forces to set the transformations of the body for the node.
			</summary>  
		</member>
		<member name="M:Unigine.Object.render(Render::PASS,int)">
			<summary>
								Renders raw object's surface to texture in specified pass.					All camera parameters should be set manually.					Usage Example
			</summary> 
			<param name="pass"> A rendering pass. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.setSoundOcclusion(float,int)">
			<summary>
			Sets a new sound occlusion value for the specified surface of the object, that determines how much it affects sounds in case of occlusion. For a sound source to be occluded by the specified surface, at least one bit of its occlusion mask should match the occlusion mask of the sound source.					Sound occlusion must be enabled.
			</summary> 
			<param name="occlusion"> Occlusion value in the range [0.0f, 1.0f] to be set for the specified surface.0.0f - no occlusion, sound volume will stay the same in case of occlusion by the surface.1.0f - maximum occlusion, sound will not be heard at all in case of occlusion by the surface.The default value is0.0f.  </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getSoundOcclusion(int) const">
			<summary>
			Returns the current sound occlusion value for the specified surface of the object, that determines how much it affects sounds in case of occlusion. For a sound source to be occluded by the specified surface, at least one bit of its occlusion mask should match the occlusion mask of the sound source.					Sound occlusion must be enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Current occlusion value in the range [0.0f, 1.0f] set for the specified surface.0.0f - no occlusion, sound volume will stay the same in case of occlusion by the surface.1.0f - maximum occlusion, sound will not be heard at all in case of occlusion by the surface.The default value is0.0f. </returns>
		</member>
		<member name="M:Unigine.Object.setSoundOcclusionMask(int,int)">
			<summary>
			Sets a new sound occlusion mask for the specified surface of the object. For a sound source to be occluded by the specified surface, at least one bit of this mask should match the occlusion mask of the sound source. Each surface has its own occlusion value, that determines how much it affects sounds in case of occlusion.					Sound occlusion must be enabled.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask for sound source occlusion. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getSoundOcclusionMask(int) const">
			<summary>
			Returns sound occlusion mask for the specified surface of the object. For a sound source to be occluded by the specified surface, at least one bit of this mask should match the occlusion mask of the sound source. Each surface has its own occlusion value, that determines how much it affects sounds in case of occlusion.					Sound occlusion must be enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Integer, each bit of which is a mask for sound source occlusion.</returns>
		</member>
		<member name="M:Unigine.Object.setPhysicsFriction(float,int)">
			<summary>
			Sets the coefficient of friction for the specified surface. This coefficient allows to model more rough rubbing of surfaces and is opposite to the body's movement direction. Friction parameter values of both surfaces being in contact are considered.	The resulting calculated friction depends on the objects' masses and gravity, and the angle between contacting surfaces.											The higher the value, the less tendency the body has to slide.					Friction is calculated by the contact between physical bodies.
			</summary> 
			<param name="value"> Friction coefficient value in the range [0.0f, 1.0f] to be set for the specified surface. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getPhysicsFriction(int) const">
			<summary>
			Returns the current coefficient of friction for the specified surface. This coefficient allows to model more rough rubbing of surfaces and is opposite to the body's movement direction. Friction parameter values of both surfaces being in contact are considered.	The resulting calculated friction depends on the objects' masses and gravity, and the angle between contacting surfaces.											The higher the value, the less tendency the body has to slide.					Friction is calculated by the contact between physical bodies.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Current friction coefficient value in the range [0.0f, 1.0f] set for the specified surface.</returns>
		</member>
		<member name="M:Unigine.Object.setPhysicsRestitution(float,int)">
			<summary>
			Sets the coefficient of restitution for the specified surface. This coefficient determines the degree of relative kinetic energy retained after a collision. It defines how bouncy the object is by contacting with another object. It depends on the elasticity of the materials of colliding bodies. The simulated restitution, like friction, considers the total value for both objects being in contact.											The maximum value of 1.0f models elastic collision. Objects bounce off according to the impulse they get by contact.						The minimum value of 0.0f models inelastic collision. Objects do not bounce at all.					Restitution is calculated by the contact between physical bodies.
			</summary> 
			<param name="value"> Restitution coefficient value in the range [0.0f, 1.0f] to be set for the specified surface. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getPhysicsRestitution(int) const">
			<summary>
			Returns the current coefficient of restitution for the specified surface. This coefficient determines the degree of relative kinetic energy retained after a collision. It defines how bouncy the object is by contacting with another object. It depends on the elasticity of the materials of colliding bodies. The simulated restitution, like friction, considers the total value for both objects being in contact.											The maximum value of 1.0f models elastic collision. Objects bounce off according to the impulse they get by contact.						The minimum value of 0.0f models inelastic collision. Objects do not bounce at all.					Restitution is calculated by the contact between physical bodies.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Current restitution coefficient value in the range [0.0f, 1.0f] set for the specified surface.</returns>
		</member>
		<member name="M:Unigine.Object.setShadowMode(Object::SURFACE_SHADOW_MODE,int)">
			<summary>
			Sets the shadow mode for the specified surface. To cast a shadow from a light source (Omni, Proj, or World), the surface's shadow mode should be adjusted in accordance with the shadow mode of the light source.
			</summary> 
			<param name="mode"> Surface shadow mode to be set, one of the following:SURFACE_SHADOW_MODE_DYNAMICSURFACE_SHADOW_MODE_MIXED </param>
			<param name="surface"> Target surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getShadowMode(int) const">
			<summary>
			Returns the shadow mode set for the specified surface. To cast a shadow from a light source (Omni, Proj, or World), the surface's shadow mode should be adjusted in accordance with the shadow mode of the light source.
			</summary> 
			<param name="surface"> Target surface number. </param> 
			<returns>Surface shadow mode, one of the following:SURFACE_SHADOW_MODE_DYNAMICSURFACE_SHADOW_MODE_MIXED</returns>
		</member>
		<member name="M:Unigine.Object.getLostMaterialGUID(int) const">
			<summary>
			Returns the GUID of a lost material. If for some reason a material assigned to the specified surface is missing, this method can be used to get it's GUID.
			</summary> 
			<param name="surface"> Target surface number. </param> 
			<returns>Lost material GUID.</returns>
		</member>
		<member name="M:Unigine.Object.getLostSurfacePropertyGUID(int) const">
			<summary>
			Returns the GUID of a lost surface property. If for some reason a property assigned to the specified surface is missing, this method can be used to get it's GUID.
			</summary> 
			<param name="surface"> Target surface number. </param> 
			<returns>Lost property GUID.</returns>
		</member>
		<member name="M:Unigine.Object.isVisibleCamera const">
			<summary>
			Checks if the object is rendered.
			</summary>  
			<returns>1 if the object is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.isVisibleShadow const">
			<summary>
			Checks if only the object shadow is rendered.
			</summary>  
			<returns>1 if the object shadow is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Object.setLightingMode(Object::SURFACE_LIGHTING_MODE,int)">
			<summary>
			Sets the lighting mode for the specified surface.
			</summary> 
			<param name="mode"> Surface lighting mode to be set, one of the following:SURFACE_LIGHTING_MODE_STATICSURFACE_LIGHTING_MODE_DYNAMICSURFACE_LIGHTING_MODE_ADVANCED </param>
			<param name="surface"> Target surface number. </param> 
		</member>
		<member name="M:Unigine.Object.getLightingMode(int) const">
			<summary>
			Returns the lighting mode for the specified surface.
			</summary> 
			<param name="surface"> Target surface number. </param> 
			<returns>Surface lighting mode, one of the following:SURFACE_LIGHTING_MODE_STATICSURFACE_LIGHTING_MODE_DYNAMICSURFACE_LIGHTING_MODE_ADVANCED</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialPath(char,int)">
			<summary>
			Sets the material by path to a given surface.
			</summary> 
			<param name="path"> Material path. </param>
			<param name="surface"> Target surface number. </param> 
		</member>
		<member name="M:Unigine.Object.setMaterialPath(char,char)">
			<summary>
			Sets the material by path to given surfaces.
			</summary> 
			<param name="path"> Material path. </param>
			<param name="pattern"> Pattern (string with a regular expression), against which surface names will be matched. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialPath(int) const">
			<summary>
			Returns the path of the material assigned to a given surface.
			</summary> 
			<param name="surface"> Target surface number. </param> 
			<returns>Material path.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterialGUID(Unigine.UGUID,int)">
			<summary>
			Sets a new material with a given GUID to the specified surface.
			</summary> 
			<param name="guid"> Material GUID. </param>
			<param name="surface"> Target surface number. </param> 
		</member>
		<member name="M:Unigine.Object.setMaterialGUID(Unigine.UGUID,char)">
			<summary>
			Sets a new material with a given GUID to the specified surface.
			</summary> 
			<param name="guid"> Material GUID. </param>
			<param name="pattern"> Pattern (string with a regular expression), against which surface names will be matched. </param> 
		</member>
		<member name="M:Unigine.Object.getMaterialGUID(int) const">
			<summary>
			Returns a GUID of the material for the specified surface.
			</summary> 
			<param name="surface"> Target surface number. </param> 
			<returns>Material GUID.</returns>
		</member>
		<member name="M:Unigine.Object.setMaterial(Unigine.Ptr{Unigine.Material},int)">
			<summary>
			Sets a new material for the specified surface.
			</summary> 
			<param name="mat"> Material smart pointer. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.Object.setMaterial(Unigine.Ptr{Unigine.Material},char)">
			<summary>
			Sets a new material for the specified surface.
			</summary> 
			<param name="mat"> Material smart pointer. </param>
			<param name="pattern"> Pattern (string with a regular expression), against which surface names will be matched. </param> 
		</member>
		<member name="F:Unigine.Object.SURFACE_SHADOW_MODE_DYNAMIC">
			<summary>
			Mode to cast shadows only if the surface is lit by a dynamic light source.
		</summary>
		</member>
		<member name="F:Unigine.Object.SURFACE_SHADOW_MODE_MIXED">
			<summary>
			Mode to cast shadows from both static and dynamic light sources.
		</summary>
		</member>
		<member name="F:Unigine.Object.SURFACE_LIGHTING_MODE_ADVANCED">
			<summary>
			Enables manual adjustment of all lighting-related settings.
		</summary>
		</member>
		<member name="F:Unigine.Object.SURFACE_LIGHTING_MODE_DYNAMIC">
			<summary>
			Excludes the surface from use in static GI and static reflections and is suitable for dynamic shadows.
		</summary>
		</member>
		<member name="F:Unigine.Object.SURFACE_LIGHTING_MODE_STATIC">
			<summary>
			Optimized for use in static GI, static reflections and cached shadows.
		</summary>
		</member>
		<member name="M:Unigine.ObjectBillboards.#ctor">
			<summary>
			Constructor. Creates a new Billboards object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectBillboards.setAngle(int,float)">
			<summary>
			Updates an angle of a given billboard, which is used to set the billboard orientation.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param>
			<param name="angle"> Billboard angle in degrees to set the billboard orientation. Positive values rotate the billboard clockwise, negative ones rotate it counter-clockwise. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getAngle(int) const">
			<summary>
			Returns the current orientation of a given billboard. Positive values mean clockwise rotated billboard, negative ones mean counter-clockwise rotation.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
			<returns>Billboard angle in degrees. The default is 0 degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.setBillboardPosition(int,Unigine.Math.vec3)">
			<summary>
			Sets the new position for the specified billboard.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param>
			<param name="position"> Billboard position coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getBillboardPosition(int) const">
			<summary>
			Returns the position of the specified billboard.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
			<returns>Billboard position coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.setDepthSort(int)">
			<summary>
			Sets a value indicating if billboards should be sorted in the back-to-front order according to their position. This option should be enabled, if alpha blending is used for the billboard material (except for the additive blending).
			</summary> 
			<param name="sort"> 1 to enable the depth sorting, 0 to disable it. The default is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getDepthSort const">
			<summary>
			Returns a value indicating whether depth sorting (in the back-to-front order) is enabled for billboards. This option should be enabled, if alpha blending is used for the billboard material (except for the additive blending).
			</summary>  
			<returns>1 if the depth sorting is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.setHeight(int,float)">
			<summary>
			Updates a height of a given billboard.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param>
			<param name="height"> Height of the billboard, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getHeight(int) const">
			<summary>
			Returns the current height of a given billboard.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
			<returns>Height of the billboard, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.setNormal(int,Unigine.Math.vec3)">
			<summary>
			Updates a normal vector of a given billboard, which is used to orient billboard (used only with billboards_impostor_base material).
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param>
			<param name="normal"> Billboard normal coordinates local to the object. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getNormal(int) const">
			<summary>
			Returns the normal vector of a given billboard (used only with billboards_impostor_base material).
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
			<returns>Billboard normal coordinates local to the object.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.getNumBillboards const">
			<summary>
			Returns the total number of billboards contained in and managed by Billboards object.
			</summary>  
			<returns>Number of billboards.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.setTexCoord(int,Unigine.Math.vec4)">
			<summary>
			Updates texture coordinates of a given billboard. The default is vec4(1,1,0,0).											The first pair of coordinates (x and x) sets texture scale by X and Y axes. For example, by the scale of 2 the texture is repeated twice on the billboard.						The second pair (z and w) set texture offset along X and Y axes. For example, by the offset of 0.5 along X axis the texture is repositioned to the right (so that the edge of the texture is rendered in the center).
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param>
			<param name="texcoord"> Texture coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getTexCoord(int) const">
			<summary>
			Returns the texture coordinates of a given billboard. The default is vec4(1,1,0,0).											The first pair of coordinates (x and x) sets texture scale by X and Y axes. For example, by the scale of 2 the texture is repeated twice on the billboard.						The second pair (z and w) set texture offset along X and Y axes. For example, by the offset of 0.5 along X axis the texture is repositioned to the right (so that the edge of the texture is rendered in the center).
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
			<returns>Texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.setWidth(int,float)">
			<summary>
			Updates a width of a given billboard.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param>
			<param name="width"> Width of the billboard, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.getWidth(int) const">
			<summary>
			Returns the current width of a given billboard.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
			<returns>Width of the billboard, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.addBillboard(float,float)">
			<summary>
			Adds a billboard with given width and height to be managed by the Billboards object. A position, texture coordinates and an angle of the new billboard are set to default:											position is set to vec3(0,0,0) 						texture coordinates are set to vec4(1,1,0,0) 						angle is set to 0.
			</summary> 
			<param name="width"> Width of the billboard, in units. </param>
			<param name="height"> Height of the billboard, in units. </param> 
			<returns>Number of the added billboard.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.allocateBillboards(int)">
			<summary>
			Allocate a buffer for a given number of billboards to be created.  With this function, memory can be allocated once rather than in chunks, making the creation faster.
			</summary> 
			<param name="num"> The number of billboards to be created in the allocated buffer. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.clearBillboards">
			<summary>
			Deletes all billboards from the Billboards object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectBillboards.removeBillboard(int)">
			<summary>
			Deletes a given billboard from Billboards object.
			</summary> 
			<param name="num"> Billboard number in range from 0 to the total number of billboards. </param> 
		</member>
		<member name="M:Unigine.ObjectBillboards.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.saveStateSelf(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the object's state to the specified stream.					This method saves all object's parameters including the list of billboards.To save the object's billboards only, use saveStateBillboards().					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreStateSelf() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.restoreStateSelf(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the object's state from the specified stream.					This method restores all object's parameters including the list of billboards. To restore the object's billboards only, use restoreStateBillboards().					Restoring from the stream requires creating a blob to save into and saving the state using the saveStateSelf() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.saveStateBillboards(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the state of the object's billboards to the specified stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreStateBillboards() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectBillboards.restoreStateBillboards(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the state of the object's billboards from the specified stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveStateBillboards() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectCloudLayer.#ctor">
			<summary>
			Constructor. Creates a new empty cloud layer object with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectCloudLayer.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>Object Cloud Layer type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectCloudLayer.getIntersectionThreshold const">
			<summary>
			Returns current intersection threshold value.
			</summary>  
			<returns>Intersection threshold value.</returns>
		</member>
		<member name="M:Unigine.ObjectCloudLayer.setAnimationNoiseOffset(Unigine.Math.vec4)">
			<summary>
			Sets a given noise animation offset value.
			</summary> 
			<param name="offset"> Noise animation offset (a vec4 value, where X, Y, and Z components represent 3D noise texture offsets along the X-axis, Y-axis, and Z-axis respectively). </param> 
		</member>
		<member name="M:Unigine.ObjectCloudLayer.setAnimationCoverageOffset(Unigine.Math.vec4)">
			<summary>
			Sets a given coverage animation offset value.
			</summary> 
			<param name="offset"> Coverage animation offset (a vec4 value, where X and Y components represent coverage texture offsets along the X-axis and Y-axis respectively). </param> 
		</member>
		<member name="M:Unigine.ObjectCloudLayer.getAnimationNoiseOffset const">
			<summary>
			Returns current noise animation offset value.
			</summary>  
			<returns>Noise animation offset (a vec4 value, where X, Y, and Z components represent 3D noise texture offsets along the X-axis, Y-axis, and Z-axis respectively).</returns>
		</member>
		<member name="M:Unigine.ObjectCloudLayer.getIntersectionAccuracy const">
			<summary>
			Returns current intersection accuracy value.
			</summary>  
			<returns>Intersection accuracy value.</returns>
		</member>
		<member name="M:Unigine.ObjectCloudLayer.setIntersectionAccuracy(float)">
			<summary>
			Sets a given intersection accuracy value.
			</summary> 
			<param name="accuracy"> Intersection accuracy value. </param> 
		</member>
		<member name="M:Unigine.ObjectCloudLayer.setIntersectionThreshold(float)">
			<summary>
			Sets a given intersection threshold value.
			</summary> 
			<param name="threshold"> Intersection threshold value. </param> 
		</member>
		<member name="M:Unigine.ObjectCloudLayer.getAnimationCoverageOffset const">
			<summary>
			Returns current coverage animation offset value.
			</summary>  
			<returns>Coverage animation offset (a vec4 value, where X and Y components represent coverage texture offsets along the X-axis and Y-axis respectively, both Z and W components are 0).</returns>
		</member>
		<member name="M:Unigine.ObjectCloudLayer.refreshCloudsRegionMask">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.ObjectCloudLayer.getDensity(Unigine.Math.Vec3) const">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDummy.#ctor">
			<summary>
			Constructor. Creates a new dummy object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDummy.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.#ctor(int)">
			<summary>
			Constructor. Creates a new dynamic object. By default, no flags are used.
			</summary> 
			<param name="flags"> Dynamic flags: one of the OBJECT_DYNAMIC_* or OBJECT_IMMUTABLE_* flags. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getAttributes const">
			<summary>
			Returns an array of vertex attributes.
			</summary>  
			<returns>Array of vertex attributes.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setBoundBox(Unigine.BoundBox)">
			<summary>
			Sets a bounding box of a specified size for a given dynamic object surface.
			</summary> 
			<param name="bb"> Bounding box. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setBoundBox(Unigine.BoundBox,int)">
			<summary>
			Sets a bounding box of a specified size for a given dynamic object surface.
			</summary> 
			<param name="bb"> Bounding box. </param>
			<param name="surface"> Surface number in range from 0 to the total number of dynamic mesh surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setIndex(int,int)">
			<summary>
			Updates the index in the index buffer (replaces the index with the given number with the specified index of the vertex).
			</summary> 
			<param name="num"> Index number in the index buffer. </param>
			<param name="index"> Vertex index in the index buffer to set. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getIndex(int) const">
			<summary>
			Returns the index of the vertex by the index number.
			</summary> 
			<param name="num"> Index number. </param> 
			<returns>Vertex index in the index buffer.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setIndicesArray(int[])">
			<summary>
			Updates the specified indices array.					To apply changes you should call the flushIndices() method after updating the indices array.
			</summary> 
			<param name="indices"> Indices array. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setInstancing(int)">
			<summary>
			Activates the hardware instancing technique.
			</summary> 
			<param name="instancing"> Instancing flag. 1 to enable hardware instancing, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getInstancing const">
			<summary>
			Returns a value indicating if the hardware instancing flag is enabled.
			</summary>  
			<returns>1 if the hardware instancing flag is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.getNumAttributes const">
			<summary>
			Returns the number of vertex attributes.
			</summary>  
			<returns>Number of vertex attributes.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setNumIndices(int)">
			<summary>
			Sets the number of vertex indices.
			</summary> 
			<param name="indices"> Number of indices. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getNumIndices const">
			<summary>
			Returns the number of vertex indices used by the object.
			</summary>  
			<returns>Number of indices.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setNumVertex(int)">
			<summary>
			Sets the number of mesh vertices.
			</summary> 
			<param name="vertex"> Number of mesh vertices. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getNumVertex const">
			<summary>
			Returns the number of vertices composing the object.
			</summary>  
			<returns>Number of vertices.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setMaterialNodeType(Node::TYPE)">
			<summary>
			Sets the node type to be used by the renderer to determine which materials can be applied to the object.					As ObjectDynamic is a custom user-defined object, so the user should determine the node type for the renderer to treat this object properly. Setting inappropriate node type may lead to system crashes.
			</summary> 
			<param name="type"> Node type ID. One of the node type identifiers. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getMaterialNodeType const">
			<summary>
			Returns the node type to be used by the renderer to determine which materials can be applied to the object.					As ObjectDynamic is a custom user-defined object, so the user should determine the node type for the renderer to treat this object properly. Setting inappropriate node type may lead to system crashes.
			</summary>  
			<returns>Node type ID. One of the node type identifiers.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setParameterBool(char,bool)">
			<summary>
			Sets boolean shader parameter of the specified value.
			</summary> 
			<param name="name"> Shader parameter name. </param>
			<param name="value"> Parameter value. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setParameterFloat(char,float[])">
			<summary>
			Sets float shader parameter of the specified value.
			</summary> 
			<param name="name"> Name of the parameter. </param>
			<param name="value"> Parameter value pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setParameterFloatArray(char,float[],int)">
			<summary>
			Sets an array of the specified number of float shader parameters.
			</summary> 
			<param name="name"> Name of the parameter. </param>
			<param name="value"> Parameter values. </param>
			<param name="num"> Number of shader parameters. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setParameterInt(char,int[])">
			<summary>
			Sets integer shader parameter of the specified value.
			</summary> 
			<param name="name"> Name of the parameter. </param>
			<param name="value"> Parameter value. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setSurfaceBegin(int,int)">
			<summary>
			Sets the begin index for the specified object surface.
			</summary> 
			<param name="begin"> The index to be set as the begin one for the surface. </param>
			<param name="surface"> Number of the target surface. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getSurfaceBegin(int) const">
			<summary>
			Returns the begin index of the specified object surface.
			</summary> 
			<param name="surface"> The number of the target surface in range from 0 to the total number of surfaces. </param> 
			<returns>The begin index.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setSurfaceEnd(int,int)">
			<summary>
			Sets the end index for the specified object surface.
			</summary> 
			<param name="end"> The index to be set as the end one for the surface. </param>
			<param name="surface"> Number of the target surface. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getSurfaceEnd(int) const">
			<summary>
			Returns the end index of the specified object surface.
			</summary> 
			<param name="surface"> The number of the target surface in range from 0 to the total number of surfaces. </param> 
			<returns>The end index.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setSurfaceMode(ObjectDynamic::MODE,int)">
			<summary>
			Sets primitives to render an object surface with: triangles (by default), lines or points.
			</summary> 
			<param name="mode"> Surface rendering mode. </param>
			<param name="surface"> Number of a target surface. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getSurfaceMode(int) const">
			<summary>
			Returns primitives used to render the object surface with: triangles (by default), lines or points.
			</summary> 
			<param name="surface"> Number of a target surface. </param> 
			<returns>Surface rendering mode:OBJECT_DYNAMIC_MODE_POINTS = 0OBJECT_DYNAMIC_MODE_LINESOBJECT_DYNAMIC_MODE_TRIANGLES</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setSurfaceName(char,int)">
			<summary>
			Sets the name for the specified surface.					The name will be set only if the specified surface was added via the addSurface() method.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="surface"> Number of a target surface in range from 0 to the total number of surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertex(int,void)">
			<summary>
			Updates a vertex in the vertices buffer.
			</summary> 
			<param name="num"> Vertex number. </param>
			<param name="vertex"> Vertex pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexArray(void,int)">
			<summary>
			Updates the vertices array.
			</summary> 
			<param name="vertex"> Vertices array pointer. </param>
			<param name="num_vertex"> Number of vertices. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexFloat(int,float[])">
			<summary>
			Updates the last added vertex to the vertex of the float type with the given parameters.
			</summary> 
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexFloat(int,int,float[])">
			<summary>
			Updates the given vertex to the vertex of the float type with the given parameters
			</summary> 
			<param name="vertex"> Vertex index. </param>
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexFormat(ObjectDynamic::Attribute[])">
			<summary>
			Sets the number of the vertex attributes.					The example of setting 4 different vertices attributes:
			</summary> 
			<param name="attributes"> Number of the vertex attributes, can be up to 16 attributes for one vertex. The numeration starts from 0. Each attribute consists of:An offset of the vertex in bytes, depends on the vertex type and size.Type of the vertex: TYPE_FLOAT, TYPE_HALF, TYPE_UCHARSize of the vertex: can be 1,2,3,4 for float type; 2,4 for half type; 4 for UChar typeWhen it goes to shader, 0 -attribute always comes with the size of 4, no matter what size is specified in the method. All the other attributes comes with the specified sizes. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexHalf(int,float[])">
			<summary>
			Updates the last added vertex to the vertex of the half-float type with the given parameters.
			</summary> 
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexHalf(int,int,float[])">
			<summary>
			Updates the last added vertex to the vertex of the half-float type with the given parameters.
			</summary> 
			<param name="vertex"> Vertex index. </param>
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.getVertexSize const">
			<summary>
			Returns the size of the current vertex, bytes.
			</summary>  
			<returns>Vertex size.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexUChar(int,uchar[])">
			<summary>
			Updates the last added vertex with the vertex of the unsigned char type with the given parameters.
			</summary> 
			<param name="attribute"> The number of the attribute, as set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexUChar(int,int,uchar[])">
			<summary>
			Updates the last added vertex with the vertex of the unsigned char type with the given parameters.
			</summary> 
			<param name="vertex"> Vertex index. </param>
			<param name="attribute"> The number of the attribute, as set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexUShort(int,ushort[])">
			<summary>
			Updates the last added vertex to the vertex of the unsigned short type with the given parameters.
			</summary> 
			<param name="attribute"> Attribute number. </param>
			<param name="value"> Value pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.setVertexUShort(int,int,ushort[])">
			<summary>
			Updates the given vertex to the vertex of the unsigned short type with the given parameters.
			</summary> 
			<param name="vertex"> Vertex index. </param>
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addIndex(int)">
			<summary>
			Adds an index to the index buffer.
			</summary> 
			<param name="index"> Index to add. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addIndicesArray(int[])">
			<summary>
			Adds an array of the specified number of indices.
			</summary> 
			<param name="indices"> Indices array. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addLineStrip(int)">
			<summary>
			Adds a line strip to the object.					This method does not add the new vertices, but allocates their indices. Vertices should be created with addVertexFloat(), addVertexHalf() or addVertexUChar() methods accordingly to the required vertex type.
			</summary> 
			<param name="num_vertex"> Number of vertices. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addPoints(int)">
			<summary>
			Adds the points to the object.					This method does not add the new vertices, but allocates their indices. Vertices should be created with addVertexFloat(), addVertexHalf() or addVertexUChar() methods accordingly to the required vertex type.
			</summary> 
			<param name="num_points"> Number of points. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addSurface(char)">
			<summary>
			Adds all the last listed and unsigned vertices and triangles to a new surface with a specified name.
			</summary> 
			<param name="name"> Name of the new surface. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addTriangleFan(int)">
			<summary>
			Adds a triangle fan to the object.					This method does not add the new vertices, but allocates their indices. Vertices should be created with addVertexFloat(), addVertexHalf() or addVertexUChar() methods accordingly to the required vertex type.
			</summary> 
			<param name="num_vertex"> Number of vertices composing the fan. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addTriangleQuads(int)">
			<summary>
			Adds a given number of quadrilaterals to the mesh. This method does not add vertices, rather it allocates indices, for which vertices should be then created with the addVertex() function. Indices will point to vertices starting from the current last vertex in the vertex buffer.
			</summary> 
			<param name="num_quads"> Number of quadrilaterals. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addTriangles(int)">
			<summary>
			Adds a given number of triangles to the object.					This method does not add the new vertices, but allocates their indices. Vertices should be created with addVertexFloat(), addVertexHalf() or addVertexUChar() methods accordingly to the required vertex type.
			</summary> 
			<param name="num_triangles"> Number of triangles. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addTriangleStrip(int)">
			<summary>
			Adds a triangle strip to the object.					This method does not add the new vertices, but allocates their indices. Vertices should be created with addVertexFloat(), addVertexHalf() or addVertexUChar() methods accordingly to the required vertex type.
			</summary> 
			<param name="num_vertex"> Number of vertices composing the strip. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addVertex(void)">
			<summary>
			Adds a vertex to the vertices buffer.
			</summary> 
			<param name="vertex"> Vertex pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addVertexArray(void,int)">
			<summary>
			Adds an array of the specified vertices number.
			</summary> 
			<param name="vertex"> Vertices array pointer. </param>
			<param name="num_vertex"> Number of vertices. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addVertexFloat(int,float[])">
			<summary>
			Adds a vertex of a float type with the given attribute, coordinates and size to the object.					Before adding a vertex, make sure that you set all the attributes for it with the setVertexFormat() method.
			</summary> 
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addVertexHalf(int,float[])">
			<summary>
			Adds a vertex of the half-float type with the given attribute, coordinates and size to the object.					Before adding a vertex, make sure that you set all the attributes for it with the setVertexFormat() method.
			</summary> 
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addVertexUChar(int,uchar[])">
			<summary>
			Adds a vertex of an unsigned char value with the given attribute, coordinates and size to the object.
			</summary> 
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.addVertexUShort(int,ushort[])">
			<summary>
			Adds a vertex of an unsigned short value with the given attribute, coordinates and size to the object.
			</summary> 
			<param name="attribute"> The number of the attribute, set in the setVertexFormat() method. </param>
			<param name="value"> Vertex coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.allocateIndices(int)">
			<summary>
			Allocate an index buffer for a given number of indices that will be used for an object. With this function, memory can be allocated once rather than in chunks, making the creation faster.
			</summary> 
			<param name="num"> The number of indices that will be stored in a buffer. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.allocateVertex(int)">
			<summary>
			Allocate a vertex buffer for a given number of vertices that will be used for an object.  With this function, memory can be allocated once rather than in chunks, making the creation faster.
			</summary> 
			<param name="num"> The number of vertices that will be stored in a buffer. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.clearIndices">
			<summary>
			Clears all the vertex indices in the object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDynamic.clearSurfaces">
			<summary>
			Clears all the surface settings.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDynamic.clearVertex">
			<summary>
			Clears all the current vertex settings.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDynamic.flushIndices">
			<summary>
			Flushes the index buffer and sends all data to GPU. If you change the contents of the index buffers, you should call this method.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDynamic.flushVertex">
			<summary>
			Flushes the vertex buffer and sends all data to GPU. This method is called automatically, if the length of the vertex buffer changes. If you change the contents of the vertex buffers, you should call this method.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectDynamic.removeIndices(int,int)">
			<summary>
			Removes the specified number of indices starting from the given index.
			</summary> 
			<param name="num"> Number of the index in the index buffer. </param>
			<param name="size"> Number of indices to remove. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.removeVertex(int,int,int)">
			<summary>
			Removes the specified number of vertices starting from the given vertex. To fix the index buffer after removal of vertices, pass 1 as the 3rd argument.
			</summary> 
			<param name="num"> Number of the vertex in the vertex buffer. </param>
			<param name="size"> Number of vertices to remove. </param>
			<param name="indices"> 1 to fix the index buffer after removal of vertices; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>Object Dynamic type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectDynamic.updateSurfaceBegin(int)">
			<summary>
			Synchronizes surface begin index.
			</summary> 
			<param name="surface"> The number of the target surface in range from 0 to the total number of surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectDynamic.updateSurfaceEnd(int)">
			<summary>
			Synchronizes surface end index.
			</summary> 
			<param name="surface"> The number of the target surface in range from 0 to the total number of surfaces. </param> 
		</member>
		<member name="F:Unigine.ObjectDynamic.DYNAMIC_ALL">
			<summary>
			A flag indicating both dynamic indices and vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.DYNAMIC_INDICES">
			<summary>
			A flag indicating dynamic indices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.DYNAMIC_VERTEX">
			<summary>
			A flag indicating dynamic vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.IMMUTABLE_ALL">
			<summary>
			A flag indicating both immutable indices and vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.IMMUTABLE_INDICES">
			<summary>
			A flag indicating immutable indices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.IMMUTABLE_VERTEX">
			<summary>
			A flag indicating immutable vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.MODE_LINES">
			<summary>
			Mode to render the lines.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.MODE_POINTS">
			<summary>
			Mode to render the points.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.MODE_QUAD_PATCHES">
			<summary>
			Mode to render the quad patches.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.MODE_TRIANGLES">
			<summary>
			Mode to render the triangles.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.MODE_TRIANGLE_PATCHES">
			<summary>
			Mode to render the triangle patches.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.TYPE_DOUBLE">
			<summary>
			Double type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.TYPE_FLOAT">
			<summary>
			Float type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.TYPE_HALF">
			<summary>
			Half-float type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.TYPE_UCHAR">
			<summary>
			Unsigned char type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectDynamic.TYPE_USHORT">
			<summary>
			Unsigned short type to store vertices.
		</summary>
		</member>
		<member name="M:Unigine.ObjectExtern.#ctor(int)">
			<summary>
			Constructor. Creates a custom user-defined object.
			</summary> 
			<param name="class_id"> Unique class ID. </param> 
		</member>
		<member name="M:Unigine.ObjectExtern.getClassID const">
			<summary>
			Returns the unique class ID of the object.
			</summary>  
			<returns>Class ID if the object exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectExtern.setMaterialNodeType(int)">
			<summary>
			Sets the node type to be used by the renderer to determine which materials can be applied to the object.					As ObjectExtern is a custom user-defined object, so the user should determine the node type for the renderer to treat this object properly. Setting inappropriate node type may lead to system crashes.
			</summary> 
			<param name="type"> Node type ID. One of the node type identifiers. </param> 
		</member>
		<member name="M:Unigine.ObjectExtern.getMaterialNodeType const">
			<summary>
			Returns the node type to be used by the renderer to determine which materials can be applied to the object.					As ObjectExtern is a custom user-defined object, so the user should determine the node type for the renderer to treat this object properly. Setting inappropriate node type may lead to system crashes.
			</summary>  
			<returns>Node type ID. One of the node type identifiers.</returns>
		</member>
		<member name="M:Unigine.ObjectExtern.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>ObjectExtern type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getClassID">
			<summary>
			Returns a unique class ID.
			</summary>  
			<returns>Unique class ID.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getCollision(Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Vector{int,int,Unigine.VectorAllocator})">
			<summary>
			Spatial collision with the bounding box.
			</summary> 
			<param name="p0"> Coordinates of the start point of the line. </param>
			<param name="p1"> Coordinates of the end point of the line. </param>
			<param name="surfaces"> Return array with surface numbers. </param> 
			<returns>Returns 1 if the array of surfaces is not empty.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getCollision(Unigine.BoundBox,Unigine.Vector{int,int,Unigine.VectorAllocator})">
			<summary>
			Spatial collision with the bounding box.
			</summary> 
			<param name="bb"> Bounding box. </param>
			<param name="surfaces"> Return array with surface numbers. </param> 
			<returns>Returns 1 if the array of surfaces is not empty.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getIntersection(Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Math.Vec3,Unigine.Math.vec3,Unigine.Math.vec4,int,int,int)">
			<summary>
			Returns a value indicating that the line intersects the object surface.
			</summary> 
			<param name="p0"> Coordinates of the start point of the line. </param>
			<param name="p1"> Coordinates of the end point of the line. </param>
			<param name="ret_point"> Intersection point coordinates. Pass NULL if this parameter is not required. </param>
			<param name="ret_normal"> Intersection normal vector. Pass NULL if this parameter is not required. </param>
			<param name="ret_texcoord"> Intersection texture coordinates. Pass NULL if this parameter is not required. </param>
			<param name="ret_index"> Intersected triangle number. Pass NULL if this parameter is not required. </param>
			<param name="ret_instance"> Intersected instance number. Pass NULL if this parameter is not required. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Returns 1 if the intersection occurs.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getNode const">
			<summary>
			Returns the Node smart pointer.
			</summary>  
			<returns>Node smart pointer.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getNumSurfaces">
			<summary>
			Returns the number of object surfaces.
			</summary>  
			<returns>The number of object surfaces.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getNumTriangles(int)">
			<summary>
			Returns the number of triangles.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Returns the number of triangles.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getObject const">
			<summary>
			Returns the Object smart pointer.
			</summary>  
			<returns>Object smart pointer.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getObjectExtern const">
			<summary>
			Returns the ObjectExtern smart pointer.
			</summary>  
			<returns>ObjectExtern smart pointer.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getOrder(Unigine.Math.Vec3,int)">
			<summary>
			Returns the rendering order with respect to the camera position.
			</summary> 
			<param name="camera"> World camera position. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Surface rendering order.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getRandomPoint(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,int)">
			<summary>
			Returns a random point from a surface.
			</summary> 
			<param name="ret_point"> Random point coordinates. </param>
			<param name="ret_normal"> Random normal vector. </param>
			<param name="ret_velocity"> Random velocity vector. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Returns 1 if the random point is valid.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getResource(int)">
			<summary>
			Returns the unique render resource identifier.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface resource identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getSequence(Unigine.Math.Vec3,int)">
			<summary>
			Returns the rendering sequence with respect to the camera position.
			</summary> 
			<param name="camera"> World camera position. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Surface rendering sequence.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getSurfaceName(int)">
			<summary>
			Returns the object surface name.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Surface name.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.getTransparentDistance(Unigine.Math.Vec3,int)">
			<summary>
			Returns the transparent rendering distance.
			</summary> 
			<param name="camera"> World camera position. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Surface rendering distance.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.create(int)">
			<summary>
			Renders a create function.
			</summary> 
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.findSurface(char)">
			<summary>
			Returns the number of the object surface by its name.
			</summary> 
			<param name="name"> Surface name. </param> 
			<returns>Surface number.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.hasCreate">
			<summary>
			Returns a value indicating that the object has a create function.
			</summary>  
			<returns>Returns 1 if the object has a create function.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.hasLods">
			<summary>
			Returns a value indicating if the object has LODs.
			</summary>  
			<returns>Returns 1 if the object has surface LODs.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.hasRender">
			<summary>
			Returns a value indicating that the object has a render function.
			</summary>  
			<returns>Returns 1 if the object has a render function.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.hasShadow">
			<summary>
			Returns a value indicating that the object has a shadow function.
			</summary>  
			<returns>Returns 1 if the object has a shadow function.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads an object state from the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>Returns 1 if the object state was successfully loaded; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.preRender(float)">
			<summary>
			Pre-render function, i.e. after the update() and before the render() function.
			</summary> 
			<param name="ifps"> Inverse FPS value. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.render(Render::PASS,int)">
			<summary>
			Renders the render function.
			</summary> 
			<param name="pass"> Rendering pass. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.renderHandler">
			<summary>
			Renders the handler.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.renderShadow(Render::PASS,int)">
			<summary>
			Renders render function.
			</summary> 
			<param name="pass"> Rendering pass. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.renderVisualizer">
			<summary>
			Renders the visualizer.					You should enable the engine visualizer by the show_visualizer 1 console command.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.resizeSurfaces const">
			<summary>
			Resizes all of the object surfaces.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves an object state into the stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreState() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores an object state from the stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveState() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.saveWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Saves an object state into the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>Returns 1 if the object state was successfully saved; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.update(float)">
			<summary>
			Update function.
			</summary> 
			<param name="ifps"> Inverse FPS value. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.updateEnabled">
			<summary>
			Updates enabled.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.updateEnabled(int)">
			<summary>
			Updates enabled.
			</summary> 
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.updatePosition">
			<summary>
			Updates a position.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.updateSurfaces const">
			<summary>
			Updates all of the object surfaces.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.updateTransform">
			<summary>
			Updates transformation.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectExternBase.setUpdateDistanceLimit(float)">
			<summary>
			Sets the distance from the camera within which the object should be updated.
			</summary> 
			<param name="distance"> Distance from the camera within which the object should be updated (in units). </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.getUpdateDistanceLimit">
			<summary>
			Returns the distance from the camera within which the object should be updated.
			</summary>  
			<returns>Distance from the camera within which the object should be updated (in units).</returns>
		</member>
		<member name="M:Unigine.ObjectExternBase.setForceUpdate(bool)">
			<summary>
			Sets a value indicating if the object should be constantly updated each frame, regardless of the update distance.
			</summary> 
			<param name="enabled"> true to enable forced updating for the object; false - to disable forced updating and take the update distance into account. </param> 
		</member>
		<member name="M:Unigine.ObjectExternBase.isForceUpdate">
			<summary>
			Returns a value indicating if the object should be constantly updated each frame, regardless of the update distance.
			</summary>  
			<returns>true if the object is constantly updated each frame; otherwise, false</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.#ctor">
			<summary>
			Constructor. Creates a new grass object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectGrass.setAngle(float)">
			<summary>
			Sets the angle cosine defining the slope steepness appropriate for grass growing.
			</summary> 
			<param name="angle"> Slope angle cosine in range from 0 to 1. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getAngle const">
			<summary>
			Returns the current angle cosine defining the slope steepness appropriate for grass growing.
			</summary>  
			<returns>Slope angle cosine.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setAspect(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the aspect of the grass polygons (width to height ratio).
			</summary> 
			<param name="mean"> Mean value of grass aspect. </param>
			<param name="spread"> Spread value of grass aspect. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getAspectMean const">
			<summary>
			Returns the current mean value of the grass aspect (width to height ratio), defined for four diffuse texture columns.
			</summary>  
			<returns>Mean value of grass aspect.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getAspectSpread const">
			<summary>
			Returns the current spread value of the grass aspect (width to height ratio), defined for four diffuse texture columns.
			</summary>  
			<returns>Spread value of grass aspect.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setDensity(float)">
			<summary>
			Sets the density factor for the grass per square unit.
			</summary> 
			<param name="density"> Density factor. If a negative value is provided, 0 will be used instead.  </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getDensity const">
			<summary>
			Returns the current density factor for the grass per square unit.
			</summary>  
			<returns>Density factor.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setFieldMask(int)">
			<summary>
			Sets a mask specifying the area of the Field node to be applied to the grass.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getFieldMask const">
			<summary>
			Returns a mask specifying the area of the Field node to be applied to the grass.
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setIntersection(int)">
			<summary>
			Sets a value indicating whether grass should grow upon the ground: either the terrain or a mesh set as a parent node.
			</summary> 
			<param name="intersection"> Positive number to enable intersection; 0 to disable.  </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getIntersection const">
			<summary>
			Returns a value indicating whether grass grow upon the ground: either the terrain or a mesh set as a parent node.
			</summary>  
			<returns>Positive number if intersection is enabled; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskFlipX(int)">
			<summary>
			Flip the mask by X axis.
			</summary> 
			<param name="maskflipx"> Positive value to flip the mask; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskFlipX const">
			<summary>
			Returns a flag indicating if a mask is flipped by X axis.
			</summary>  
			<returns>Positive value if the mask is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskFlipY(int)">
			<summary>
			Flip the mask by Y axis.
			</summary> 
			<param name="maskflipy"> Positive value to flip the mask; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskFlipY const">
			<summary>
			Returns a flag indicating if a mask is flipped by Y axis.
			</summary>  
			<returns>Positive value if the mask is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskImage(Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Sets an image that defines the areas of growing grass. Possible mask formats are R8, RG8, RGB8 and RGBA8.
			</summary> 
			<param name="image"> Pointer to the image. </param>
			<param name="invalidate"> Invalidate flag. Set 1 to invalidate all grass cells; otherwise, set 0. All invalidated cells will be regenerated. </param> 
			<returns>1 if the mask image is successfully set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Writes the image that is currently used to define the areas of grass growing into the given buffer. Possible mask formats are R8, RG8, RGB8 and RGBA8.
			</summary> 
			<param name="image"> Image buffer to store a mask into. </param> 
			<returns>1 if the mask image is successfully written into the buffer; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskImageName(char,int)">
			<summary>
			Sets the name of a mask image that defines the areas of growing grass. Possible mask formats are R8, RG8, RGB8 and RGBA8.
			</summary> 
			<param name="image_name"> Name (path) of the mask image. </param>
			<param name="invalidate"> Invalidate flag. Set 1 to invalidate all grass cells; otherwise, set 0. All invalidated cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskImageName const">
			<summary>
			Returns a name of the current mask image that defines the areas of grass growing. Possible mask formats are R8, RG8, RGB8 and RGBA8.
			</summary>  
			<returns>Name (path) of the mask image.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskInverse(int)">
			<summary>
			Specifies if the grass should be rendered inside or outside the mask mesh contour.
			</summary> 
			<param name="inverse"> 0 to render the grass inside the mesh contour; 1 to render it outside. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskInverse const">
			<summary>
			Returns a flag indicating if the grass is rendered inside or outside the mask mesh contour.
			</summary>  
			<returns>0 if the grass is rendered inside the mesh contour; 1 if outside.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskMaxValue(int)">
			<summary>
			Sets the maximum value of the mask application range.
			</summary> 
			<param name="value"> Maximum mask value, [0;255]. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskMaxValue const">
			<summary>
			Returns the maximum value of the mask application range.
			</summary>  
			<returns>Maximum mask value.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskMesh(Unigine.Ptr{Unigine.Mesh},int)">
			<summary>
			Sets a mesh to be used as a mask on-the-fly. Limitations:											Before the method is called, another mesh must be set via setMaskMeshName() first.						If the world is reloaded, the mesh set via setMaskMeshName() will be loaded.						If the memory limit is exceeded, the new mesh might be replaced with the mesh set via setMaskMeshName().
			</summary> 
			<param name="mesh"> Pointer to the mesh. </param>
			<param name="invalidate"> Invalidate flag. Set 1 to invalidate all grass cells; otherwise, set 0. All invalidated cells will be regenerated. </param> 
			<returns>1 if the mesh is set successfully; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mask mesh (if it exists) to the specified target mesh.
			</summary> 
			<param name="mesh"> Pointer to the mesh to copy the current mask mesh to. </param> 
			<returns>1 if mesh mask exists; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskMeshName(char,int)">
			<summary>
			Sets a mesh to be used as a mask for the grass. This mesh should be plane.
			</summary> 
			<param name="mesh_name"> Path to the *.mesh file. </param>
			<param name="invalidate"> Invalidate flag. Set 1 to invalidate all grass cells; otherwise, set 0. All invalidated cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskMeshName const">
			<summary>
			Returns the name (path) of the current mesh used as a mask for the grass. This mesh should be plane.
			</summary>  
			<returns>Path to the *.mesh file.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaskMinValue(int)">
			<summary>
			Sets the minimum value of the mask application range.
			</summary> 
			<param name="value"> Minimum mask value, [0;255]. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaskMinValue const">
			<summary>
			Returns the minimum value of the mask application range.
			</summary>  
			<returns>Minimum mask value.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setTerrainMasks(Unigine.Math.ivec4)">
			<summary>
			Sets a new set of Landscape Terrain masks to be used for grass placement.
			</summary> 
			<param name="masks"> Four-component vector combining Landscape Terrain mask indices (each component in the [0; 19] range) to be used for the corresponding diffuse texture column. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getTerrainMasks const">
			<summary>
			Returns the current set of Landscape Terrain masks used for grass placement.
			</summary>  
			<returns>Four-component vector combining Landscape Terrain mask indices (each component in the [0; 19] range) to be used for the corresponding diffuse texture column.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaxBend(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the maximum grass bending parameters (rendered in areas with the highest density according to the mask). Bend angles (mean and spread) are defined for four diffuse texture columns. The resulting value is determined as follows:					Result = Mean + Random * Spread, where					Random is a random value in range from					-1 to 1.
			</summary> 
			<param name="mean"> Vector of mean values of grass bending angles to be set for four diffuse texture columns. </param>
			<param name="spread"> Vector of spread values of grass bending angles to be set for four diffuse texture columns. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaxBendMean const">
			<summary>
			Returns the mean value for the maximum grass bending (rendered in areas with the highest density according to the mask). Bend angles are defined for four diffuse texture columns.
			</summary>  
			<returns>Vector of mean values of grass bending angles for four diffuse texture columns.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getMaxBendSpread const">
			<summary>
			Returns the spread value for the maximum grass bending (rendered in areas with the highest density according to the mask). Bend angles are defined for four diffuse texture columns.
			</summary>  
			<returns>Vector of spread values of grass bending angles for four diffuse texture columns.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMinBend(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the minimum grass bending parameters (rendered in areas with the lowest density according to the mask). Bend angles (mean and spread) are defined for four diffuse texture columns. The resulting value is determined as follows:					Result = Mean + Random * Spread, where					Random is a random value in range from					-1 to 1.
			</summary> 
			<param name="mean"> Vector of mean values of grass bending angles to be set for four diffuse texture columns. </param>
			<param name="spread"> Vector of spread values of grass bending angles to be set for four diffuse texture columns. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMinBendMean const">
			<summary>
			Returns the mean value for the minimum grass bending (rendered in areas with the lowest density according to the mask). Bend angles are defined for four diffuse texture columns.
			</summary>  
			<returns>Vector of mean values of grass bending angles for four diffuse texture columns.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getMinBendSpread const">
			<summary>
			Returns the spread value for the minimum grass bending (rendered in areas with the lowest density according to the mask). Bend angles are defined for four diffuse texture columns.
			</summary>  
			<returns>Vector of spread values of grass bending angles for four diffuse texture columns.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMaxHeight(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the maximum grass height (rendered in areas with the highest density according to the mask). The height is defined for four diffuse texture columns, as mean and spread values (					Result = Mean + Random * Spread, where					Random is a random value in range from -1 to 1).
			</summary> 
			<param name="mean"> Mean value for the maximum grass height in units. If a negative value is provided, EPSILON will be used instead. </param>
			<param name="spread"> Spread value for the maximum grass height in units. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMaxHeightMean const">
			<summary>
			Returns the mean value for the maximum grass height (rendered in areas with the highest density according to the mask). The height is defined for four diffuse texture columns.
			</summary>  
			<returns>Mean value for the maximum grass height in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getMaxHeightSpread const">
			<summary>
			Returns the spread value for the maximum grass height (rendered in areas with the highest density according to the mask). The height is defined for four diffuse texture columns.
			</summary>  
			<returns>Spread value for the maximum grass height in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setMinHeight(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the minimum grass height (rendered in areas with the lowest density according to the mask). The height is defined for four diffuse texture columns, as mean and spread values (					Result = Mean + Random * Spread, where					Random is a random value in range from -1 to 1).
			</summary> 
			<param name="mean"> Mean value for the minimum grass height in units. If a negative value is provided, EPSILON will be used instead. </param>
			<param name="spread"> Spread value for the minimum grass height in units. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getMinHeightMean const">
			<summary>
			Returns the mean value for the minimum grass height (rendered in areas with the lowest density according to the mask). The height is defined for four diffuse texture columns.
			</summary>  
			<returns>Mean value for the minimum grass height in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getMinHeightSpread const">
			<summary>
			Returns the spread value for the minimum grass height (rendered in areas with the lowest density according to the mask). The height is defined for four diffuse texture columns.
			</summary>  
			<returns>Spread value for the minimum grass height in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setNumTextures(int)">
			<summary>
			Sets the number of rows contained in the grass diffuse texture.
			</summary> 
			<param name="textures"> Number of rows in the grass diffuse texture in the [1; 4] range. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getNumTextures const">
			<summary>
			Returns the number of rows contained in the grass diffuse texture.
			</summary>  
			<returns>The number of rows in the grass diffuse texture in the [1; 4] range.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setOffset(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the grass offset from the surface along the surface normal, defined for four diffuse texture columns. If a negative mean value is provided, vec4_eps will be used instead.
			</summary> 
			<param name="mean"> Mean value of grass polygons offset in units. </param>
			<param name="spread"> Spread value of grass polygons offset in units. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getOffsetMean const">
			<summary>
			Returns the current mean value of the grass offset from the surface along the surface normal, defined for four diffuse texture columns.
			</summary>  
			<returns>Mean value of grass polygons offset in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getOffsetSpread const">
			<summary>
			Returns the current spread value for the grass offset from the surface along the surface normal, defined for four diffuse texture columns.
			</summary>  
			<returns>Spread value for grass polygons offset in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setOrientation(int)">
			<summary>
			Sets a flag to orient grass polygons along the normal of its parent (for example, a terrain).
			</summary> 
			<param name="orientation"> 1 to orient the grass along the normals of the ground; 0 to render it always pointing upwards. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getOrientation const">
			<summary>
			Returns a flag indicating if grass polygons are oriented along the normal of its parent (for example, a terrain).
			</summary>  
			<returns>1 if the grass is oriented along the normals of the ground; 0 if it always points upwards.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setProbability(Unigine.Math.vec4)">
			<summary>
			Sets the grass rendering probability per column (in the diffuse texture). The higher the value for some column, the more frequently it will be rendered.
			</summary> 
			<param name="probability"> Per-column probability. Any values can be set, since they are normalized. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getProbability const">
			<summary>
			Returns the current grass rendering probability per column (in the diffuse texture). The higher the value for some column, the more frequently it will be rendered.
			</summary>  
			<returns>Per-column probability.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setRotation(Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Sets the grass rotation. Rotation is defined for four diffuse texture columns, as mean and spread values (					Result = Mean + Random * Spread, where					Random is a random value in range from -1 to 1).
			</summary> 
			<param name="mean"> Mean value of grass polygons rotation, in degrees. </param>
			<param name="spread"> Spread value of grass polygons rotation, in degrees. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getRotationMean const">
			<summary>
			Returns the current mean value for the grass rotation, defined for four diffuse texture columns.
			</summary>  
			<returns>Mean value of grass polygons rotation, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getRotationSpread const">
			<summary>
			Returns the current spread value for the grass rotation, defined for four diffuse texture columns.
			</summary>  
			<returns>Spread value of grass polygons rotation, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setSeed(int)">
			<summary>
			Sets the seed for pseudo-random positioning of grass.
			</summary> 
			<param name="seed"> Number used to initialize a pseudo-random sequence. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getSeed const">
			<summary>
			Returns the seed used for pseudo-random positioning of grass.
			</summary>  
			<returns>Number used to initialize a pseudo-random sequence.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setSizeX(float)">
			<summary>
			Sets the width of the grass object along the X-coordinate.
			</summary> 
			<param name="sizex"> X-coordinate width in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getSizeX const">
			<summary>
			Returns the current width of the grass object along the X-coordinate.
			</summary>  
			<returns>X-coordinate width in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setSizeY(float)">
			<summary>
			Sets the length of the grass object along the Y-coordinate.
			</summary> 
			<param name="sizey"> Y-coordinate length in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getSizeY const">
			<summary>
			Returns the current length of the grass object along the Y-coordinate.
			</summary>  
			<returns>Y-coordinate length in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.getSpawnCount const">
			<summary>
			Returns the number of cells to be generated.
			</summary>  
			<returns>Number of cells to be generated if the scene generation is not completed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setStep(float)">
			<summary>
			Sets the step for cells used to render grass.
			</summary> 
			<param name="step"> Step for grass cells. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getStep const">
			<summary>
			Returns the current step for cells used to render grass.
			</summary>  
			<returns>Step for grass cells.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setSubdivision(int)">
			<summary>
			Subdivide grass rendering cells into smaller sub-cells. It is used if a grass node is used as a distant LOD for WorldClutter or ObjectMeshClutter with smaller cells. This way, positions of randomly scattered objects will coincide with those of grass-based impostors.
			</summary> 
			<param name="subdivision"> Divisor for cells. The value is clamped to a range [1;32]. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getSubdivision const">
			<summary>
			Returns the current divisor used to subdivide grass rendering cells into smaller sub-cells. Subdividing is used if a grass node is used as a distant LOD for WorldClutter or ObjectMeshClutter with smaller cells. This way, positions of randomly scattered objects will coincide with those of grass-based impostors.
			</summary>  
			<returns>Divisor for cells.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setThinning(int)">
			<summary>
			Sets a flag to thin out grass with a distance (random grass polygons are not rendered across the grass Fade distance).
			</summary> 
			<param name="thinning"> 1 to thin out the grass; 0 to render all grass polygons at the distance. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getThinning const">
			<summary>
			Returns a flag indicating if the grass is thinned out with a distance (random grass polygons are not rendered across the grass Fade distance).
			</summary>  
			<returns>1 if the grass is thinned out; 0 if all grass polygons are rendered at the distance.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setThreshold(float)">
			<summary>
			Sets the threshold for density, starting from which the grass will be rendered.
			</summary> 
			<param name="threshold"> Threshold value in range from 0 to 1. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getThreshold const">
			<summary>
			Returns the current threshold for density, starting from which the grass is rendered.
			</summary>  
			<returns>Threshold value.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setVariation(int)">
			<summary>
			Sets the random horizontal flip for grass polygons.
			</summary> 
			<param name="variation"> 1 to enable grass flipping, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getVariation const">
			<summary>
			Returns a value indicating if the random horizontal flip for grass polygons is set.
			</summary>  
			<returns>1 if grass flipping is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.invalidate">
			<summary>
			Invalidates all grass cells. All invalidated cells will be regenerated.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectGrass.invalidate(Unigine.Math.WorldBoundBox)">
			<summary>
			Invalidates all grass cells within the area specified by the given bounding box. All invalidated cells will be regenerated.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, where grass cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.setCutoutIntersectionMask(int)">
			<summary>
			Sets a new cutout intersection mask. This mask allows you to cut out the grass in the areas of intersection with objects and decals (e.g. can be used to remove grass under houses or from the surface of roads projected using decals). The grass will be cut out by objects and decals that have their intersection mask matching this one (one bit at least).					To set intersection masks the following methods can be used:													for decals use getIntersectionMask()							for objects use getIntersectionMask()
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getCutoutIntersectionMask const">
			<summary>
			Returns the current cutout intersection mask. This mask allows you to cut out the grass in the areas of intersection with objects and decals (e.g. can be used to remove grass under houses or from the surface of roads projected using decals). The grass will be cut out by objects and decals that have their intersection mask matching this one (one bit at least).					To set intersection masks the following methods can be used:													for decals use getIntersectionMask()							for objects use getIntersectionMask()
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.ObjectGrass.setCutoutInverse(int)">
			<summary>
			Sets a value indicating whether the grass should be rendered inside or outside the areas determined by the cutout intersection mask.
			</summary> 
			<param name="inverse"> 0 to render the grass outside the areas determined by the cutout intersection mask; 1 to render the grass inside these areas. </param> 
		</member>
		<member name="M:Unigine.ObjectGrass.getCutoutInverse const">
			<summary>
			Returns a value indicating if the grass is rendered inside or outside the areas determined by the cutout intersection mask.
			</summary>  
			<returns>0 if the grass is rendered outside the areas determined by the cutout intersection mask; 1 if inside.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.#ctor(float,float,char)">
			<summary>
			Constructor. Creates a new GUI object with given properties.
			</summary> 
			<param name="width"> Physical width of the new GUI object in units. </param>
			<param name="height"> Physical height of the new GUI object in units. </param>
			<param name="name"> Path to the folder with GUI skin (the RC file and textures). If no value is specified, the default gui skin will be used. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.setBackground(bool)">
			<summary>
			Sets a value indicating if the GUI background (black screen) should be rendered.
			</summary> 
			<param name="background"> true to render GUI background, false to keep it transparent. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.isBackground const">
			<summary>
			Returns a value indicating if GUI background (black screen) is rendered.
			</summary>  
			<returns>true if background is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setBillboard(bool)">
			<summary>
			Sets a value indicating if the GUI object should be a billboard.
			</summary> 
			<param name="billboard"> true to render the GUI object as a billboard; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.isBillboard const">
			<summary>
			Returns a value indicating if the GUI object is a billboard.
			</summary>  
			<returns>true if GUI object is a billboard; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setControlDistance(float)">
			<summary>
			Sets a distance at which the GUI becomes controllable.
			</summary> 
			<param name="distance"> New distance in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.getControlDistance const">
			<summary>
			Returns the distance, at which the GUI becomes controllable.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setDepthTest(bool)">
			<summary>
			Sets a value indicating if depth test should be used for the GUI object.
			</summary> 
			<param name="test"> true to use depth test; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.isDepthTest const">
			<summary>
			Returns a value indicating if the GUI object uses depth test.
			</summary>  
			<returns>true if the GUI object uses depth test; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.getGui const">
			<summary>
			Returns a Gui instance associated with the object. This function is used when assigning a widget to the GUI object.					When you create an instance of the ObjectGui class, it is automatically associated with a Gui instance.
			</summary>  
			<returns>Gui smart pointer.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setMouse(Unigine.Math.Vec3,Unigine.Math.Vec3,int,int)">
			<summary>
			Sets mouse cursor position in the virtual control mode.
			</summary> 
			<param name="p0"> Start point. A line segment between the start and the end points must intersect ObjectGui. The point of intersection determines x and y coordinates on the ObjectGui. </param>
			<param name="p1"> End point. A line segment between the start and the end points must intersect ObjectGui. The point of intersection determines x and y coordinates on the ObjectGui. </param>
			<param name="mouse_button"> Mouse button status. Set 1 to indicate that the button is clicked; otherwise, 0. </param>
			<param name="mouse_show"> Mouse cursor status. Set 1 to show mouse cursor; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.setMouseMode(int)">
			<summary>
			Sets mouse mode. This method can be used to set a virtual control mode for the mouse.
			</summary> 
			<param name="mode"> Mouse mode. One of the MOUSE_* variables. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.getMouseMode const">
			<summary>
			Returns the current mouse mode.
			</summary>  
			<returns>Mouse mode. One of the MOUSE_* variables.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setMouseShow(bool)">
			<summary>
			Sets a value indicating if the mouse cursor should be rendered in the GUI object.
			</summary> 
			<param name="show"> true to render the mouse cursor; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.isMouseShow const">
			<summary>
			Returns a value indicating if the mouse cursor is rendered in the GUI object.
			</summary>  
			<returns>true if the cursor is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.getPhysicalHeight const">
			<summary>
			Returns the physical height of the GUI object.
			</summary>  
			<returns>Height in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setPhysicalSize(float,float)">
			<summary>
			Sets physical dimensions of the GUI object.
			</summary> 
			<param name="width"> New width in units. If a negative value is provided, 0 will be used instead. </param>
			<param name="height"> New height in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.getPhysicalWidth const">
			<summary>
			Returns the physical width of the GUI object.
			</summary>  
			<returns>Width in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setPolygonOffset(float)">
			<summary>
			Sets an offset of the GUI object above the background to avoid z-fighting.
			</summary> 
			<param name="offset"> Polygon offset in units.  If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.getPolygonOffset const">
			<summary>
			Returns an offset of the GUI object above the background to avoid z-fighting.
			</summary>  
			<returns>Polygon offset in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.getScreenHeight const">
			<summary>
			Returns the screen height of the GUI object.
			</summary>  
			<returns>Height in pixels.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.setScreenSize(int,int)">
			<summary>
			Sets screen dimensions of the GUI object.
			</summary> 
			<param name="width"> New width in pixels. If a negative value is provided, 0 will be used instead. </param>
			<param name="height"> New height in pixels. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGui.getScreenWidth const">
			<summary>
			Returns the screen width of the GUI object.
			</summary>  
			<returns>Width in pixels.</returns>
		</member>
		<member name="M:Unigine.ObjectGui.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="F:Unigine.ObjectGui.MOUSE_VIRTUAL">
			<summary>
			Virtual mouse control mode.
		</summary>
		</member>
		<member name="F:Unigine.ObjectGui.MOUSE_STANDARD">
			<summary>
			Standard mouse control mode.
		</summary>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.#ctor(Unigine.Ptr{Unigine.Mesh},char)">
			<summary>
			ObjectGuiMesh constructor. Creates a new GUI mesh from a given file.
			</summary> 
			<param name="mesh"> Source Mesh to be used. </param>
			<param name="path"> A name of a new GUI mesh. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.#ctor(char,char,bool)">
			<summary>
			An ObjectGuiMesh constructor. The ObjectGuiMesh will be created on the basis of the specified mesh.
			</summary> 
			<param name="mesh_name"> Path to the .mesh file. </param>
			<param name="path"> Name of the new GUI mesh. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to 1, so a copy of the mesh geometry will be created and changes won't be applied.This argument is available only if the first argument is string. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setControlDistance(float)">
			<summary>
			Sets a distance at which the GUI becomes controllable.
			</summary> 
			<param name="distance"> A new distance in units. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getControlDistance const">
			<summary>
			Returns the distance at which the GUI becomes controllable.
			</summary>  
			<returns>The distance in units.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getGui const">
			<summary>
			Returns a Gui instance associated with the object.
			</summary>  
			<returns>Gui smart pointer.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Copies the source mesh into the current mesh.
			</summary> 
			<param name="mesh"> Pointer to the source mesh that must be copied. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mesh into the source mesh passed as an argument. For example, you can obtain geometry of the gui mesh and then change it:
			</summary> 
			<param name="mesh"> Pointer to the source mesh. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setMeshName(char)">
			<summary>
			Sets a new mesh name.
			</summary> 
			<param name="name"> Name to be set for the mesh. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getMeshName const">
			<summary>
			Returns the mesh name.
			</summary>  
			<returns>Mesh name.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setMouse(Unigine.Math.Vec3,Unigine.Math.Vec3,int,int)">
			<summary>
			Sets mouse cursor position in the virtual control mode.
			</summary> 
			<param name="p0"> Start point. A line segment between the start and the end points must intersect ObjectGui. The point of intersection determines x and y coordinates on the ObjectGui. </param>
			<param name="p1"> End point. A line segment between the start and the end points must intersect ObjectGui. The point of intersection determines x and y coordinates on the ObjectGui. </param>
			<param name="mouse_button"> Mouse button status. Set 1 to indicate that the button is clicked; otherwise, 0. </param>
			<param name="mouse_show"> Mouse cursor status. Set 1 to show mouse cursor; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setMouseMode(int)">
			<summary>
			Sets mouse mode. This method can be used to set a virtual control mode for the mouse.
			</summary> 
			<param name="mode"> Mouse mode. One of the MOUSE_* variables. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getMouseMode const">
			<summary>
			Returns the current mouse mode.
			</summary>  
			<returns>Mouse mode. One of the MOUSE_* variables.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setMouseShow(bool)">
			<summary>
			Sets a value indicating if the mouse cursor should be rendered in the mesh GUI object.
			</summary> 
			<param name="show"> true to render the mouse cursor; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.isMouseShow const">
			<summary>
			Returns a value indicating if the mouse cursor is rendered in the mesh GUI object.
			</summary>  
			<returns>true if the cursor is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setBackground(bool)">
			<summary>
			Sets a value indicating if the GUI background (black screen) should be rendered.
			</summary> 
			<param name="background"> true to render GUI background, false to keep it transparent. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.isBackground const">
			<summary>
			Returns a value indicating if GUI background (black screen) is rendered.
			</summary>  
			<returns>true if background is rendered; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getScreenHeight const">
			<summary>
			Returns the screen height of the mesh GUI object.
			</summary>  
			<returns>Height in pixels.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.setScreenSize(int,int)">
			<summary>
			Sets screen dimensions of the mesh GUI object.
			</summary> 
			<param name="width"> New width in pixels. If a negative value is provided, 0 will be used instead. </param>
			<param name="height"> New height in pixels. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectGuiMesh.getScreenWidth const">
			<summary>
			Returns the screen width of the mesh GUI object.
			</summary>  
			<returns>Width in pixels.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.createMesh(char,bool)">
			<summary>
			Creates the GUI mesh with the specified parameters.
			</summary> 
			<param name="path"> Path to the *.mesh file. </param>
			<param name="unique"> Dynamic flag:false - If the mesh vertices are changed in run-time, meshes loaded from the same file will be also changed.true - If the mesh vertices are changed in run-time, meshes loaded from the same file won't be changed </param> 
			<returns>true if the mesh is created successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.flushMesh">
			<summary>
			Flushes the mesh geometry into the video memory.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectGuiMesh.loadMesh(char)">
			<summary>
			Loads a mesh file.
			</summary> 
			<param name="path"> Path to the .mesh file. </param> 
			<returns>1 if the mesh is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.saveMesh(char)">
			<summary>
			Saves the mesh into the .mesh format.
			</summary> 
			<param name="path"> Path to the .mesh file. </param> 
			<returns>1 if the mesh is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectGuiMesh.type">
			<summary>
			Returns the type identifier of ObjectMeshStatic.
			</summary>  
			<returns>ObjectMeshStatic type identifier.</returns>
		</member>
		<member name="F:Unigine.ObjectGuiMesh.MOUSE_VIRTUAL">
			<summary>
			Virtual mouse control mode.
		</summary>
		</member>
		<member name="F:Unigine.ObjectGuiMesh.MOUSE_STANDARD">
			<summary>
			Standard mouse control mode.
		</summary>
		</member>
		<member name="M:Unigine.ObjectIntersection.#ctor">
			<summary>
			The ObjectIntersection constructor.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectIntersection.setIndex(int)">
			<summary>
			Sets the new intersection triangle number.
			</summary> 
			<param name="index"> Intersection triangle number. </param> 
		</member>
		<member name="M:Unigine.ObjectIntersection.getIndex const">
			<summary>
			Returns the number of the intersected triangle.
			</summary>  
			<returns>Intersected triangle number.</returns>
		</member>
		<member name="M:Unigine.ObjectIntersection.setInstance(int)">
			<summary>
			Sets the new intersected instance number.					Intersected instance number can be obtained for the following classes:													ObjectMeshSkinned							ObjectMeshCluster							ObjectMeshSplineCluster
			</summary> 
			<param name="instance"> Intersected instance number. </param> 
		</member>
		<member name="M:Unigine.ObjectIntersection.getInstance const">
			<summary>
			Returns the number of the intersected instance.					Intersected instance number can be obtained for the following classes:													ObjectMeshSkinned							ObjectMeshCluster							ObjectMeshSplineCluster
			</summary>  
			<returns>Intersected instance number.</returns>
		</member>
		<member name="M:Unigine.ObjectIntersection.setPoint(Unigine.Math.Vec3)">
			<summary>
			Sets new coordinates of the intersection point.
			</summary> 
			<param name="point"> Coordinates of the intersection point. </param> 
		</member>
		<member name="M:Unigine.ObjectIntersection.getPoint const">
			<summary>
			Returns coordinates of the intersection point.
			</summary>  
			<returns>Coordinates of the intersection point.</returns>
		</member>
		<member name="M:Unigine.ObjectIntersection.getType const">
			<summary>
			Returns the object intersection type identifier.
			</summary>  
			<returns>Object intersection type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectIntersection.getTypeName const">
			<summary>
			Returns the object intersection type name.
			</summary>  
			<returns>Object intersection type name.</returns>
		</member>
		<member name="F:Unigine.ObjectIntersection.NUM_OBJECT_INTERSECTIONS">
			<summary>
			Number of object intersection types.
		</summary>
		</member>
		<member name="F:Unigine.ObjectIntersection.OBJECT_INTERSECTION_TEX_COORD">
			<summary>
			ObjectIntersectionTexCoord (stores the point of intersection, surface and triangle indices + normal and texture coordinates at the point of intersection).
		</summary>
		</member>
		<member name="F:Unigine.ObjectIntersection.OBJECT_INTERSECTION_NORMAL">
			<summary>
			ObjectIntersectionNormal (stores the point of intersection, surface and triangle indices + normal coordinates at the point of intersection).
		</summary>
		</member>
		<member name="F:Unigine.ObjectIntersection.OBJECT_INTERSECTION">
			<summary>
			ObjectIntersection (stores only the point of intersection, surface and triangle indices).
		</summary>
		</member>
		<member name="M:Unigine.ObjectIntersectionNormal.#ctor">
			<summary>
			The ObjectIntersectionNormal constructor.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectIntersectionNormal.setNormal(Unigine.Math.vec3)">
			<summary>
			Sets the new normal of the intersection point.
			</summary> 
			<param name="normal"> Normal of the intersection point. </param> 
		</member>
		<member name="M:Unigine.ObjectIntersectionNormal.getNormal const">
			<summary>
			Returns the normal of the intersection point.
			</summary>  
			<returns>Normal of the intersection point.</returns>
		</member>
		<member name="M:Unigine.ObjectIntersectionTexCoord.#ctor">
			<summary>
			The ObjectIntersectionTexCoord constructor.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectIntersectionTexCoord.setTexCoord(Unigine.Math.vec4)">
			<summary>
			Sets new texture coordinates of the intersection point.
			</summary> 
			<param name="coord"> Texture coordinates of the intersection point. </param> 
		</member>
		<member name="M:Unigine.ObjectIntersectionTexCoord.getTexCoord const">
			<summary>
			Returns texture coordinates of the intersection point.
			</summary>  
			<returns>Texture coordinates of the intersection point (where vec4.xy is for the first UV channel, vec4.zw is for the second UV channel).</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.#ctor">
			<summary>
			The ObjectLandscapeTerrain constructor.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.setActiveTerrain(bool)">
			<summary>
			Sets a value indicating if the landscape terrain is active.
			</summary> 
			<param name="enabled"> true to set the landscape terrain as active, false - to set it as inactive. </param> 
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.isActiveTerrain">
			<summary>
			Returns a value indicating if the landscape terrain is active.
			</summary>  
			<returns>true if the landscape terrain is active; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.setIntersectionPrecision(float)">
			<summary>
			Sets a new precision value to be used for intersection detection.
			</summary> 
			<param name="begin"> Precision for intersection detection as a fraction of maximum precision in the [0; 1] range. The default value is 0.5f. Maximum precision is determined by the Engine on the basis of the data of your Landscape Terrain. </param> 
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getIntersectionPrecision">
			<summary>
			Returns the current precision value used for intersection detection.
			</summary>  
			<returns>Precision for intersection detection as a fraction of maximum precision in the [0; 1] range. The default value is 0.5f. Maximum precision is determined by the Engine on the basis of the data of your Landscape Terrain.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getNumDetailMasks">
			<summary>
			Returns the total number of detail masks of the landscape terrain.
			</summary>  
			<returns>Total number of detail masks of the landscape terrain.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getDetailMask(int)">
			<summary>
			Returns the detail mask by its index. The number of detail masks is fixed and is equal to 20.
			</summary> 
			<param name="num"> Detail mask index in the [0; 19] range. </param> 
			<returns>Detail mask having the specified index.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getDetailMaskSortRender(int)">
			<summary>
			Returns the detail mask by its rendering order. The number of detail masks is fixed and is equal to 20, masks rendering order is back to front.
			</summary> 
			<param name="num"> Detail mask rendering order, in the [0; 19] range. </param> 
			<returns>Detail mask having the specified rendering order.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.findDetailMask(char)">
			<summary>
			Returns a child detail's number by its name. The search is performed among the immediate children only.
			</summary> 
			<param name="name"> Detail mask name. </param> 
			<returns>Detail mask having the specified name (if it exists); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getDetailMasks(Unigine.Vector{Unigine.Ptr{Unigine.TerrainDetailMask},int,Unigine.VectorAllocator})">
			<summary>
			Builds the list of all detail masks of the landscape terrain and puts them to the specified buffer. The number of detail masks is fixed and is equal to 20.
			</summary> 
			<param name="masks"> Buffer to which the list of detail masks it to be put. </param> 
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getDetailMasksSortRender(Unigine.Vector{Unigine.Ptr{Unigine.TerrainDetailMask},int,Unigine.VectorAllocator})">
			<summary>
			Builds the list of all detail masks of the landscape terrain according to their rendering order (back to front) and puts them to the specified buffer. The number of detail masks is fixed and is equal to 20.
			</summary> 
			<param name="masks"> Buffer to which the list of detail masks it to be put. </param> 
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.getLastStreamingFrame const">
			<summary>
			Returns the number of the frame when the last commit to the Virtual Texture was performed. This method enables you to check if the Landscape Terrain data is loaded completely at the moment (the Virtual Texture is created and the last commit to it is already applied).
			</summary>  
			<returns>Number of the last streaming frame.</returns>
		</member>
		<member name="M:Unigine.ObjectLandscapeTerrain.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>ObjectLandscapeTerrain type identifier. </returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setName(char)">
			<summary>
			Sets a new name for the detail.
			</summary> 
			<param name="name"> New terrain detail name to be set. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getName const">
			<summary>
			Returns the name of the detail.
			</summary>  
			<returns>Current name of the detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setEnabled(bool)">
			<summary>
			Sets a value indicating if the terrain detail is enabled.
			</summary> 
			<param name="enabled"> true to enable the terrain detail, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.isEnabled const">
			<summary>
			Returns a value indicating if the terrain detail is enabled.
			</summary>  
			<returns>true if the terrain detail is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.isActive const">
			<summary>
			Returns a value indicating if the terrain detail is active.
			</summary>  
			<returns>true if the terrain detail is active; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaskByAlbedo(Unigine.Math.vec4)">
			<summary>
			Sets a new color to be used as a mask for the detail. In this case, all areas on the terrain having selected color will be covered by the detail.
			</summary> 
			<param name="albedo"> Four-component vector (R, G, B, A) representing a new color to be used as a mask for the detail. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaskByAlbedo const">
			<summary>
			Returns the color currently used as a mask for the detail. In this case, all areas on the terrain having selected color will be covered by the detail.
			</summary>  
			<returns>Four-component vector (R, G, B, A) representing a color currently used as a mask for the detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMinVisibleHeight(float)">
			<summary>
			Sets the minimum height value for the detail, starting from which the detail begins to fade in until it becomes completely visible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Minimum height value for the detail, in units. The default value is -inf. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMinVisibleHeight const">
			<summary>
			Returns the minimum height value for the detail, starting from which the detail begins to fade in until it becomes completely visible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Minimum height value for the detail, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaxVisibleHeight(float)">
			<summary>
			Sets the maximum height value for the detail, starting from which the detail begins to fade out until it becomes completely invisible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Maximum height value for the detail, in units. The default value is inf. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaxVisibleHeight const">
			<summary>
			Returns the maximum height value for the detail, starting from which the detail begins to fade out until it becomes completely invisible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Maximum height value for the detail, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMinFadeHeight(float)">
			<summary>
			Sets the fade in height range for the detail. Over this height range below the minimum height value the detail will fade in until it is completely visible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Fade in height range value for the detail, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMinFadeHeight const">
			<summary>
			Returns the current fade in height range for the detail. Over this height range below the minimum height value the detail will fade in until it is completely visible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Fade in height range value for the detail, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaxFadeHeight(float)">
			<summary>
			Sets the fade out height range for the detail. Over this height range below the maximum height value the detail will fade out until it is completely invisible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Fade out height range value for the detail, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaxFadeHeight const">
			<summary>
			Returns the current fade out height range for the detail. Over this height range below the maximum height value the detail will fade out until it is completely invisible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Fade out height range value for the detail, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMinVisibleTexelSize(float)">
			<summary>
			Sets the minimum texel size value for the detail, starting from which the detail begins to fade in until it becomes completely visible. This parameter is used to modulate the detail mask by texel size.
			</summary> 
			<param name="size"> Minimum texel size value for the detail to be set. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMinVisibleTexelSize const">
			<summary>
			Returns the minimum texel size value for the detail, starting from which the detail begins to fade in until it becomes completely visible. This parameter is used to modulate the detail mask by texel size.
			</summary>  
			<returns>Minimum texel size value for the detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaxVisibleTexelSize(float)">
			<summary>
			Sets the maximum texel size value for the detail, starting from which the detail begins to fade out until it becomes completely invisible. This parameter is used to modulate the detail mask by texel size.
			</summary> 
			<param name="size"> Maximum texel size value for the detail to be set. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaxVisibleTexelSize const">
			<summary>
			Returns the maximum texel size value for the detail, starting from which the detail begins to fade out until it becomes completely invisible. This parameter is used to modulate the detail mask by texel size.
			</summary>  
			<returns>Maximum texel size value for the detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMinFadeTexelSize(float)">
			<summary>
			Sets the fade in texel size range for the detail. Over this range below the minimum texel size value the detail will fade in until it is completely visible. This parameter is used to modulate the detail mask by texel size.
			</summary> 
			<param name="size"> Fade in texel size range value for the detail to be set, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMinFadeTexelSize const">
			<summary>
			Returns the current fade in texel size range for the detail. Over this range below the minimum texel size value the detail will fade in until it is completely visible. This parameter is used to modulate the detail mask by texel size.
			</summary>  
			<returns>Fade in texel size range value for the detail, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaxFadeTexelSize(float)">
			<summary>
			Sets the fade out texel size range for the detail. Over this range below the maximum texel size value the detail will fade out until it is completely invisible. This parameter is used to modulate the detail mask by texel size.
			</summary> 
			<param name="size"> Fade out texel size range value for the detail to be set, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaxFadeTexelSize const">
			<summary>
			Returns the current fade out texel size range for the detail. Over this range below the maximum texel size value the detail will fade out until it is completely invisible. This parameter is used to modulate the detail mask by texel size.
			</summary>  
			<returns>Fade out texel size range value for the detail, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaskThreshold(float)">
			<summary>
			Sets a new mask threshold value for the detail. Control blending of the detail according to the mask. The Threshold parameter controls the spread intensity of the layer. Lower values provide bigger spread.
			</summary> 
			<param name="threshold"> New mask threshold value to be set in the [0; 1] range. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaskThreshold const">
			<summary>
			Returns a mask threshold value for the detail. Control blending of the detail according to the mask. The Threshold parameter controls the spread intensity of the layer. Lower values provide bigger spread.
			</summary>  
			<returns>Current mask threshold value in the [0; 1] range.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaskContrast(float)">
			<summary>
			Sets a new mask contrast value.
			</summary> 
			<param name="contrast"> New mask contrast value to be set in the [0; 1] range. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaskContrast const">
			<summary>
			Returns a current mask contrast value.
			</summary>  
			<returns>Current mask contrast value in the [0; 1] range.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setDetailMask(Unigine.Ptr{Unigine.TerrainDetailMask})">
			<summary>
			Sets the specified detail mask to be used for the detail.
			</summary> 
			<param name="mask"> Detail mask to be used for the detail. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getDetailMask const">
			<summary>
			Returns the detail mask currently used for the detail.
			</summary>  
			<returns>Detail mask currently used for the detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.getMaterial const">
			<summary>
			Returns the detail material used for the detail.
			</summary>  
			<returns>Material currently used for the detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets a new detail material to be used for the detail.
			</summary> 
			<param name="material"> New material to be used for the detail. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.copy(Unigine.Ptr{Unigine.TerrainDetail}) const">
			<summary>
			Copies the detail to the specified destination detail (with all its children).
			</summary> 
			<param name="dest_detail"> Destination detail to which the detail is to be copied. </param> 
			<returns>Destination detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.clone const">
			<summary>
			Clones the terrain detail (with all its children).
			</summary>  
			<returns>Cloned detail.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaterialPath(char)">
			<summary>
			Sets the detail material by a given path.
			</summary> 
			<param name="path"> Material path. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaterialPath const">
			<summary>
			Returns the path of the assigned detail material.
			</summary>  
			<returns>Material path.</returns>
		</member>
		<member name="M:Unigine.TerrainDetail.setMaterialGUID(Unigine.UGUID)">
			<summary>
			Sets the material by a GUID.
			</summary> 
			<param name="materialguid"> Material GUID. </param> 
		</member>
		<member name="M:Unigine.TerrainDetail.getMaterialGUID const">
			<summary>
			Returns the GUID of the assigned detail material.
			</summary>  
		</member>
		<member name="M:Unigine.TerrainDetailMask.setName(char)">
			<summary>
			Sets a new name for the detail mask.
			</summary> 
			<param name="name"> New terrain detail mask name to be set. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.getName">
			<summary>
			Returns the name of the detail mask.
			</summary>  
			<returns>Current name of the detail mask.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.setEnabled(bool)">
			<summary>
			Sets a value indicating if the terrain detail mask is enabled.
			</summary> 
			<param name="enabled"> true to enable the terrain detail mask, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.isEnabled">
			<summary>
			Returns a value indicating if the terrain detail mask is enabled.
			</summary>  
			<returns>true if the terrain detail mask is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.getRenderOrder">
			<summary>
			Returns rendering order of the detail mask. Rendering order of masks can be changed via the swapRenderOrder()method.
			</summary>  
			<returns>Rendering order of the detail mask in the [0; 19] range.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.swapRenderOrder(Unigine.Ptr{Unigine.TerrainDetailMask})">
			<summary>
			Swap rendering order of this detail mask with the specified one.
			</summary> 
			<param name="mask"> Target detail mask. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.addDetail">
			<summary>
			Adds a new detail for this mask.
			</summary>  
			<returns>New detail added for this mask.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.getNumDetails">
			<summary>
			Returns the number of details of this detail mask.
			</summary>  
			<returns>Number of details of this detail mask.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.getDetail(int)">
			<summary>
			Returns a detail by its index.
			</summary> 
			<param name="num"> Detail index. </param> 
			<returns>Detail with the specified index (if it exists); otherwise, an assertion failure error is reported.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.isDetail(Unigine.Ptr{Unigine.TerrainDetail})">
			<summary>
			Checks if the specified detail belongs to this detail mask.
			</summary> 
			<param name="detail"> Detail to be checked. </param> 
			<returns>1 if the specified terrain detail belongs to this mask; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.findDetailIndex(char)">
			<summary>
			Returns a detail index by its name.
			</summary> 
			<param name="name"> Detail name. </param> 
			<returns>Index of the detail having the specified name (if it exists); otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.findDetail(char)">
			<summary>
			Returns a detail attached to the detail mask by its name.
			</summary> 
			<param name="name"> Detail name. </param> 
			<returns>Detail with the specified name (if it exists); otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.setDetailIndex(Unigine.Ptr{Unigine.TerrainDetail},int)">
			<summary>
			Replaces a detail with a given index with the specified detail.
			</summary> 
			<param name="detail"> Detail to be set instead of the one with the given index. </param>
			<param name="index"> Index of the detail to be replaced with the specified one. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.getDetailIndex(Unigine.Ptr{Unigine.TerrainDetail})">
			<summary>
			Returns the index of the specified detail.
			</summary> 
			<param name="detail"> Detail for which an index is to be found. </param> 
			<returns>Index of the specified detail (if it exists); otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.swapDetail(int,int)">
			<summary>
			Swaps the two details with given indices.
			</summary> 
			<param name="num_0"> First detail index. </param>
			<param name="num_1"> Second detail index. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.getIndex">
			<summary>
			Returns the index of the detail mask.
			</summary>  
			<returns>Index of the detail mask in the [0; 19] range.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.setDithering(float)">
			<summary>
			Sets a new dither amount for the detail mask of the landscape terrain. Dithering enables reduction of graphical artefacts in case of increased Mask Contrast values set for details. This value is multiplied by the global dither amount.
			</summary> 
			<param name="dithering"> New dither amount to be set for the detail mask in the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.getDithering const">
			<summary>
			Returns the current dither amount for the detail mask of the landscape terrain. Dithering enables reduction of graphical artefacts in case of increased Mask Contrast values set for details. This value is multiplied by the global dither amount.
			</summary>  
			<returns>Current dither amount for the detail mask in the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.setDefaultValue(float)">
			<summary>
			Sets a default (background) value to be used for the mask.
			</summary> 
			<param name="value"> Value to be used for the mask as default. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.getDefaultValue const">
			<summary>
			Returns the current default (background) value for the mask.
			</summary>  
			<returns>Value currently used for the mask as default.</returns>
		</member>
		<member name="M:Unigine.TerrainDetailMask.setMaskByAlbedo(Unigine.Math.vec4)">
			<summary>
			Sets a new albedo color to be used as a mask.
			</summary> 
			<param name="albedo"> Albedo color to be used as a mask, as a four-component vector (R,G,B,A).. </param> 
		</member>
		<member name="M:Unigine.TerrainDetailMask.getMaskByAlbedo const">
			<summary>
			Returns the albedo color currently used as a mask.
			</summary>  
			<returns>Albedo color currently used as a mask, as a four-component vector (R,G,B,A).</returns>
		</member>
		<member name="M:Unigine.Landscape.getTemporaryTexture(Unigine.Math.ivec2)">
			<summary>
			Returns a fragment of terrain data as a LandscapeTextures of the specified resolution.
			</summary> 
			<param name="resolution"> Resolution of a temporary texture to be obtained. </param> 
			<returns>LandscapeTextures instance containing a fragment of terrain data.</returns>
		</member>
		<member name="M:Unigine.Landscape.releaseTemporaryTexture(Unigine.Ptr{Unigine.LandscapeTextures})">
			<summary>
			Releases the specified temporary texture.
			</summary> 
			<param name="texture"> Temporary landscape texture to be released. </param> 
		</member>
		<member name="M:Unigine.Landscape.terrainLoad(Unigine.Math.WorldBoundBox)">
			<summary>
			Loads terrain data (tiles) for all landscape layer maps within the specified bounding box to cache.
			</summary> 
			<param name="bb"> Bounding box, defining landscape layer maps for which the data is to be loaded. </param> 
			<returns>true if terrain data was successfully loaded for all landscape layer maps within the specified bounding box; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Landscape.render(Unigine.Ptr{Unigine.LandscapeTextures},Unigine.Math.Mat4,Unigine.Math.Scalar)">
			<summary>
			Renders the area of the specified landscape layer maps defined by the specified transform and texel size, to the specified buffers.
			</summary> 
			<param name="buffers"> Target texture buffers to which the specified landscape layer maps are to be rendered. </param>
			<param name="transform"> Transformation of the landscape terrain area to be rendered (Z-coordinate is ignored). </param>
			<param name="texel_size"> Texel size to be used. Defines the size of the area depending on the buffers resolution. </param> 
			<returns>true if the data of the landscape terrain area (all landscape layer maps) defined by the specified transformation and texel size, was successfully rendered to the specified buffers; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Landscape.render(Unigine.Ptr{Unigine.LandscapeTextures},Unigine.Math.Mat4,Unigine.Math.Scalar,int)">
			<summary>
			Renders the area of the specified landscape layer maps defined by the specified transform and texel size, to the specified buffers. Use the padding parameter to set inner padding size for the area (when necessary).
			</summary> 
			<param name="buffers"> Target texture buffers to which the specified landscape layer maps are to be rendered. </param>
			<param name="transform"> Transformation of the landscape terrain area to be rendered (Z-coordinate is ignored). </param>
			<param name="texel_size"> Texel size to be used. Defines the size of the area depending on the buffers resolution. </param>
			<param name="padding"> Inner padding size for the area to be rendered (if necessary). </param> 
			<returns>true if the data of the landscape terrain area (all landscape layer maps) defined by the specified transformation and texel size, was successfully rendered to the specified buffers; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Landscape.render(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeLayerMap},int,Unigine.VectorAllocator},Unigine.Ptr{Unigine.LandscapeTextures},Unigine.Math.Mat4,Unigine.Math.Scalar)">
			<summary>
			Renders the area of the specified landscape layer maps defined by the specified transform and texel size, to the specified buffers. Use the padding parameter to set inner padding size for the area (when necessary).
			</summary> 
			<param name="maps"> List of the landscape layer maps to be rendered. </param>
			<param name="buffers"> Target texture buffers to which the specified landscape layer maps are to be rendered. </param>
			<param name="transform"> Transformation of the landscape terrain area to be rendered (Z-coordinate is ignored). </param>
			<param name="texel_size"> Texel size to be used. Defines the size of the area depending on the buffers resolution. </param> 
			<returns>true if the data of the landscape terrain area (specified landscape layer maps) defined by the specified transformation and texel size, was successfully rendered to the specified buffers; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Landscape.render(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeLayerMap},int,Unigine.VectorAllocator},Unigine.Ptr{Unigine.LandscapeTextures},Unigine.Math.Mat4,Unigine.Math.Scalar,int)">
			<summary>
			Renders the area of the specified landscape layer maps defined by the specified transform and texel size, to the specified buffers. Use the padding parameter to set inner padding size for the area (when necessary).
			</summary> 
			<param name="maps"> List of the landscape layer maps to be rendered. </param>
			<param name="buffers"> Target texture buffers to which the specified landscape layer maps are to be rendered. </param>
			<param name="transform"> Transformation of the landscape terrain area to be rendered (Z-coordinate is ignored). </param>
			<param name="texel_size"> Texel size to be used. Defines the size of the area depending on the buffers resolution. </param>
			<param name="padding"> Inner padding size for the area to be rendered. </param> 
			<returns>true if the data of the landscape terrain area (specified landscape layer maps) defined by the specified transformation and texel size, was successfully rendered to the specified buffers; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Landscape.asyncTextureDraw(int,Unigine.UGUID,Unigine.Math.ivec2,Unigine.Math.ivec2,int,Unigine.Vector{Unigine.Math.WorldBoundBox,int,Unigine.VectorAllocator})">
			<summary>
			Commences an asynchronous GPU-based drawing operation with forced pre-loading of terrain data within the specified bounding box (all landscape layer maps). The drawing operation represents modification of the texture buffer of the specified size taken at specified coordinates and combining data layers defined by the specified flags. The operation itself is to be implemented in the TextureDrawCallback handler. This method can be used for implementing GPU-based terrain modification (e.g. brushes) that requires additional data beyond the area specified by coords and resolution parameters as well as the data of other landscape layer maps (e.g. a copy brush).
			</summary> 
			<param name="operation_id"> Draw operation ID. </param>
			<param name="guid"> GUID of the landscape layer map file to be modified. </param>
			<param name="coord"> Coordinates of the upper left corner of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="resolution"> Resolution of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="flags_file_data"> Data layer mask. A combination of FLAGS_FILE_DATA_* flags indicating data layers to be affected (heights, albedo, certain masks). </param>
			<param name="bounds_preload"> Bounding box (world) specifying the area containing terrain tiles (all landscape layer maps) to be loaded to memory prior to making modifications. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncTextureDraw(int,Unigine.UGUID,Unigine.Math.ivec2,Unigine.Math.ivec2,int)">
			<summary>
			Commences an asynchronous GPU-based drawing operation. The drawing operation represents modification of the texture buffer of the specified size taken at specified coordinates and combining data layers defined by the specified flags. The operation itself is to be implemented in the TextureDrawCallback handler. This method can be used for implementing GPU-based terrain modification (e.g. brushes).
			</summary> 
			<param name="operation_id"> Draw operation ID. </param>
			<param name="guid"> GUID of the landscape layer map file to be modified. </param>
			<param name="coord"> Coordinates of the upper left corner of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="resolution"> Resolution of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="flags_file_data"> Data layer mask. A combination of FLAGS_FILE_DATA_* flags indicating data layers to be affected (heights, albedo, certain masks). </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncTextureDraw(int,Unigine.UGUID,Unigine.Math.ivec2,Unigine.Math.ivec2)">
			<summary>
			Commences an asynchronous GPU-based drawing operation. The drawing operation represents modification of the texture buffer of the specified size taken at specified coordinates and combining all data layers. The operation itself is to be implemented in the TextureDrawCallback handler. This method can be used for implementing GPU-based terrain modification (e.g. brushes).
			</summary> 
			<param name="operation_id"> Draw operation ID. </param>
			<param name="guid"> GUID of the landscape layer map file to be modified. </param>
			<param name="coord"> Coordinates of the upper left corner of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="resolution"> Resolution of the landscape layer map data segment to be modified along the X and Y axes. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncTextureDraw(Unigine.UGUID,Unigine.Math.ivec2,Unigine.Math.ivec2,int,Unigine.Vector{Unigine.Math.WorldBoundBox,int,Unigine.VectorAllocator})">
			<summary>
			Commences an asynchronous GPU-based drawing operation with forced pre-loading of terrain data within the specified bounding box (all landscape layer maps). The drawing operation represents modification of the texture buffer of the specified size taken at specified coordinates and combining data layers defined by the specified flags. The operation itself is to be implemented in the TextureDrawCallback handler. This method can be used for implementing GPU-based terrain modification (e.g. brushes) that requires additional data beyond the area specified by coords and resolution parameters as well as the data of other landscape layer maps (e.g. a copy brush).
			</summary> 
			<param name="guid"> GUI </param>
			<param name="guid"> GUID of the landscape layer map file to be modified. </param>
			<param name="coord"> Coordinates of the upper left corner of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="resolution"> Resolution of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="flags_file_data"> Data layer mask. A combination of FLAGS_FILE_DATA_* flags indicating data layers to be affected (heights, albedo, certain masks). </param>
			<param name="bounds_preload"> Bounding box (world) specifying the area containing terrain tiles (all landscape layer maps) to be loaded to memory prior to making modifications. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncTextureDraw(Unigine.UGUID,Unigine.Math.ivec2,Unigine.Math.ivec2,int)">
			<summary>
			Commences an asynchronous GPU-based drawing operation. The drawing operation represents modification of the texture buffer of the specified size taken at specified coordinates and combining data layers defined by the specified flags. The operation itself is to be implemented in the TextureDrawCallback handler. This method can be used for implementing GPU-based terrain modification (e.g. brushes).
			</summary> 
			<param name="guid"> GUID of the landscape layer map file to be modified. </param>
			<param name="coord"> Coordinates of the upper left corner of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="resolution"> Resolution of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="flags_file_data"> Data layer mask. A combination of FLAGS_FILE_DATA_* flags indicating data layers to be affected (heights, albedo, certain masks). </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncTextureDraw(Unigine.UGUID,Unigine.Math.ivec2,Unigine.Math.ivec2)">
			<summary>
			Commences an asynchronous GPU-based drawing operation. The drawing operation represents modification of the texture buffer of the specified size taken at specified coordinates and combining all data layers. The operation itself is to be implemented in the TextureDrawCallback handler. This method can be used for implementing GPU-based terrain modification (e.g. brushes).
			</summary> 
			<param name="guid"> GUID of the landscape layer map file to be modified. </param>
			<param name="coord"> Coordinates of the upper left corner of the landscape layer map data segment to be modified along the X and Y axes. </param>
			<param name="resolution"> Resolution of the landscape layer map data segment to be modified along the X and Y axes. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncApplyDiff(int,Unigine.UGUID,char)">
			<summary>
			Applies the state of the landscape layer map stored in the specified file to the landscape layer map file with the specified GUID.
			</summary> 
			<param name="operation_id"> Operation ID. </param>
			<param name="guid"> GUID of the landscape layer map file to which a state stored at the specified path is to be applied. </param>
			<param name="path"> Path to a file where the current landscape map modification state is stored. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncApplyDiff(Unigine.UGUID,char)">
			<summary>
			Applies the state of the landscape layer map stored in the specified file to the landscape layer map file with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the landscape layer map file to which a state stored at the specified path is to be applied. </param>
			<param name="path"> Path to a file where the current landscape map modification state is stored. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncSaveFile(int,Unigine.UGUID)">
			<summary>
			Saves the landscape layer map file with the specified GUID.
			</summary> 
			<param name="operation_id"> Operation ID. </param>
			<param name="file_guid"> GUID of the landscape layer map file. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncSaveFile(Unigine.UGUID)">
			<summary>
			Saves the landscape layer map file with the specified GUID.
			</summary> 
			<param name="file_guid"> GUID of the landscape layer map file. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncSaveFile(int,Unigine.UGUID,char,char)">
			<summary>
			Saves the specified landscape layer map file applying all changes along with saving old and new states (diff) to temporary files. These temporary files can be used to perform undo/redo operations via the applyDiff() method.
			</summary> 
			<param name="operation_id"> Operation ID. </param>
			<param name="guid"> GUID of the landscape layer map file. </param>
			<param name="path_new_state"> Path to a file to store the new landscape layer map state. </param>
			<param name="path_old_state"> Path to a file to store the old landscape layer map state. </param> 
		</member>
		<member name="M:Unigine.Landscape.asyncSaveFile(Unigine.UGUID,char,char)">
			<summary>
			Saves the specified landscape layer map file applying all changes along with saving old and new states (diff) to temporary files. These temporary files can be used to perform undo/redo operations via the applyDiff() method.
			
			</summary> 
			<param name="guid"> GUID of the landscape layer map file. </param>
			<param name="path_new_state"> Path to a file to store the new landscape layer map state. </param>
			<param name="path_old_state"> Path to a file to store the old landscape layer map state. </param> 
		</member>
		<member name="M:Unigine.Landscape.isFilesClosed">
			<summary>
			Returns a value indicating if .lmap files for all landscape layer maps are closed. Call this method before making any changes (modification, deletion, renaming) to .lmap files of the landscape terrain object to ensure that these files are not currently used by the Engine to avoid conflicts. If not, you can use the filesClose() method co close them.
			</summary>  
			<returns>true if .lmap files for all landscape layer maps are closed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Landscape.filesClose(Unigine.Vector{Unigine.UGUID,int,Unigine.VectorAllocator})">
			<summary>
			Closes .lmap files for all landscape layer maps and reloads the ones with specified GUIDs. This method should be called before making any changes (modification, deletion, renaming) to .lmap files of the landscape terrain object to avoid conflicts, as these files are streamed continuosly by the Engine. Thus, by calling this method you inform the Engine that it should stop streaming terrain data. The list informs the Engine which files are no longer valid and should be reloaded or removed. As you're done with modification you should call the filesOpen() method to resume streaming operations.
			</summary> 
			<param name="reload_files"> List of GUIDs of .lmap files to be reloaded. This list should contain .lmap files, that were deleted or having their data changed (albedo, heights, masks). If there are no such files, you can simply call the filesClose() method. </param> 
		</member>
		<member name="M:Unigine.Landscape.filesClose">
			<summary>
			Closes .lmap files for all landscape layer maps. This method should be called before making any changes (modification, deletion, renaming) to .lmap files of the landscape terrain object to avoid conflicts, as these files are streamed continuosly by the Engine. Thus, by calling this method you inform the Engine that it should stop streaming terrain data. As you're done with modification you should call the filesOpen() method to resume streaming operations.
			</summary>  
		</member>
		<member name="M:Unigine.Landscape.filesOpen">
			<summary>
			Opens .lmap files for all landscape layer maps. This method should be called after making any changes (modification, deletion, renaming) to .lmap files of the landscape terrain object. Prior to making such modifications the filesClose() method should be called.
			</summary>  
		</member>
		<member name="M:Unigine.Landscape.getActiveTerrain">
			<summary>
			Returns the current active Landscape Terrain object.If a scene contains multiple Landscape Terrain objects, only one of them can be active (rendered).
			</summary>  
			<returns>Landscape Terrain object that is currently active.</returns>
		</member>
		<member name="M:Unigine.Landscape.addTextureDrawCallback(Unigine.CallbackBase5{Unigine.UGUID,int,Unigine.Ptr{Unigine.LandscapeTextures},Unigine.Math.ivec2,int})">
			<summary>
			Adds a callback function to be called when a Texture Draw (GPU-based terrain modification) operation is performed. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a texture draw callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added texture draw callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Landscape.removeTextureDrawCallback(void)">
			<summary>
			Removes the specified callback from the list of texture draw callbacks.
			</summary> 
			<param name="id"> Texture draw callback ID obtained when adding it. </param> 
			<returns>True if the texture draw callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Landscape.clearTextureDrawCallback">
			<summary>
			Clears all added texture draw callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Landscape.addApplyDiffCallback(Unigine.CallbackBase3{Unigine.UGUID,int,char})">
			<summary>
			Adds a callback function to be called on applying a diff to the landscape layer map file. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting an apply diff callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added apply diff callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Landscape.removeApplyDiffCallback(void)">
			<summary>
			Removes the specified callback from the list of apply diff callbacks.
			</summary> 
			<param name="id"> Apply diff callback ID obtained when adding it. </param> 
			<returns>True if the apply diff callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Landscape.clearApplyDiffCallback">
			<summary>
			Clears all added apply diff callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Landscape.addSaveFileCallback(Unigine.CallbackBase4{Unigine.UGUID,int,char,char})">
			<summary>
			Adds a callback function to be called on applying changes made to a landscape layer map file and saving old and new states to temporary files. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting an apply diff callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added save file callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Landscape.removeSaveFileCallback(void)">
			<summary>
			Removes the specified callback from the list of save file callbacks.
			</summary> 
			<param name="id"> Save file callback ID obtained when adding it. </param> 
			<returns>True if the save file callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Landscape.clearSaveFileCallback">
			<summary>
			Clears all added save file callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.Landscape.generateOperationID">
			<summary>
			Generates a new ID for the operation. This ID is used to manage operations.
			</summary>  
			<returns>New operation ID.</returns>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_HEIGHT">
			<summary>
			Heights data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_ALBEDO">
			<summary>
			Albedo data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_0">
			<summary>
			Mask0 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_1">
			<summary>
			Mask1 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_2">
			<summary>
			Mask2 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_3">
			<summary>
			Mask3 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_4">
			<summary>
			Mask4 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_5">
			<summary>
			Mask5 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_6">
			<summary>
			Mask6 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_7">
			<summary>
			Mask7 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_8">
			<summary>
			Mask8 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_9">
			<summary>
			Mask9 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_10">
			<summary>
			Mask10 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_11">
			<summary>
			Mask11 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_12">
			<summary>
			Mask12 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_13">
			<summary>
			Mask13 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_14">
			<summary>
			Mask14 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_15">
			<summary>
			Mask15 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_16">
			<summary>
			Mask16 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_17">
			<summary>
			Mask17 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_18">
			<summary>
			Mask18 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_DATA_MASK_19">
			<summary>
			Mask19 data type.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_HEIGHT">
			<summary>
			Heights data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_ALBEDO">
			<summary>
			Albedo data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_0">
			<summary>
			Mask0 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_1">
			<summary>
			Mask1 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_2">
			<summary>
			Mask2 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_3">
			<summary>
			Mask3 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_4">
			<summary>
			Mask4 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_5">
			<summary>
			Mask5 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_6">
			<summary>
			Mask6 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_7">
			<summary>
			Mask7 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_8">
			<summary>
			Mask8 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_9">
			<summary>
			Mask9 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_10">
			<summary>
			Mask10 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_11">
			<summary>
			Mask11 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_12">
			<summary>
			Mask12 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_13">
			<summary>
			Mask13 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_14">
			<summary>
			Mask14 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_15">
			<summary>
			Mask15 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_16">
			<summary>
			Mask16 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_17">
			<summary>
			Mask17 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_18">
			<summary>
			Mask18 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_DATA_MASK_19">
			<summary>
			Mask19 data flag.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_HEIGHT">
			<summary>
			Landscape map file heights data.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_ALBEDO">
			<summary>
			Landscape map file albedo data.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_MASK_0">
			<summary>
			Landscape map file detail mask data (masks with indices 0, 1, 2, 3).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_MASK_1">
			<summary>
			Landscape map file detail mask data (masks with indices 4, 5, 6, 7).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_MASK_2">
			<summary>
			Landscape map file detail mask data (masks 8, 9, 10, 11).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_MASK_3">
			<summary>
			Landscape map file detail mask data (masks with indices 12, 13, 14, 15).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_MASK_4">
			<summary>
			Landscape map file detail mask data (masks with indices 16, 17, 18, 19).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_OPACITY_HEIGHT">
			<summary>
			Landscape map file height opacity data.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_OPACITY_MASK_0">
			<summary>
			Landscape map file detail mask opacity data (masks with indices 0, 1, 2, 3).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_OPACITY_MASK_1">
			<summary>
			Landscape map file detail mask opacity data (masks with indices 4, 5, 6, 7).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_OPACITY_MASK_2">
			<summary>
			Landscape map file detail mask opacity data (masks with indices 8, 9, 10, 11).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_OPACITY_MASK_3">
			<summary>
			Landscape map file detail mask opacity data (masks with indices 12, 13, 14, 15).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.TYPE_FILE_DATA_OPACITY_MASK_4">
			<summary>
			Landscape map file detail mask opacity data (masks with indices 16, 17, 18, 19).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_HEIGHT">
			<summary>
			Landscape map file height data.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_ALBEDO">
			<summary>
			Landscape map file albedo data.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_MASK_0">
			<summary>
			Landscape map file first masks data block (masks with indices 0,1,2,3).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_MASK_1">
			<summary>
			Landscape map file second masks data block (masks with indices 4,5,6,7).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_MASK_2">
			<summary>
			Landscape map file third masks data block (masks with indices 8,9,10,11).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_MASK_3">
			<summary>
			Landscape map file fourth masks data block (masks with indices 12,13,14,15).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_MASK_4">
			<summary>
			Landscape map file fifth masks data block (masks with indices 16,17,18,19).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_OPACITY_HEIGHT">
			<summary>
			Landscape map file height opacity data.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_OPACITY_MASK_0">
			<summary>
			Landscape map file first masks opacity data block (for masks with indices 0,1,2,3).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_OPACITY_MASK_1">
			<summary>
			Landscape map file second masks opacity data block (for masks with indices 4,5,6,7).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_OPACITY_MASK_2">
			<summary>
			Landscape map file third masks opacity data block (for masks with indices 8,9,10,11).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_OPACITY_MASK_3">
			<summary>
			Landscape map file fourth masks opacity data block (for masks with indices 12,13,14,15).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.FLAGS_FILE_DATA_OPACITY_MASK_4">
			<summary>
			Landscape map file fifth masks opacity data block (for masks with indices 16,17,18,19).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.COMPRESSOR_TYPE_NONE">
			<summary>
			No compression is used.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.COMPRESSOR_TYPE_JACKALLESS">
			<summary>
			Our Method compression is used. It is optimized for compressing 2D and 3D textures and provides better results than LZ4 and Zlib without deteriorating the quality.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.COMPRESSOR_TYPE_LZ4">
			<summary>
			LZ4 compression is used (temporary option, planned to be removed in the upcoming releases).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.COMPRESSOR_TYPE_ZLIB">
			<summary>
			Zlib compression (can provide up to 2 times higher compression ratio, but takes up to 20 times longer).
		</summary>
		</member>
		<member name="F:Unigine.Landscape.ALPHA_BLEND">
			<summary>
			Alpha blending mode - the colors of the layer map and the underlying one are blended.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.ADDITIVE">
			<summary>
			Additive blending mode - data of the layer map is added atop of the data of underlying maps.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.OVERLAY">
			<summary>
			Overlay blending mode - data of the layer map replaces the data of underlying maps.
		</summary>
		</member>
		<member name="F:Unigine.Landscape.MULTIPLICATIVE">
			<summary>
			Multiplicative blending mode - albedo colors of the underlying map are multiplied by the colors of the layer map.
		</summary>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.#ctor">
			<summary>
			The LandscapeLayerMap constructor.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setPath(char)">
			<summary>
			Sets a new path to the *.lmap file containing landscape map data.
			</summary> 
			<param name="path"> New path to the *.lmap file with landscape map data. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getPath const">
			<summary>
			Returns the current path to the *.lmap file containing landscape map data.
			</summary>  
			<returns>Path to the *.lmap file containing landscape map data.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getGUID">
			<summary>
			Returns the GUID of the LandscapeLayerMap node.
			</summary>  
			<returns>GUID of the LandscapeLayerMap node.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setIntersection(bool)">
			<summary>
			Sets a value indicating if intersection detection is enabled for the landscape layer map.
			</summary> 
			<param name="intersection"> true to enable intersection detection for the landscape layer map, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isIntersection const">
			<summary>
			Returns a value indicating if intersection detection is enabled for the landscape layer map.
			</summary>  
			<returns>true if intersection detection for the landscape layer map is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setIntersectionBicubicFilter(bool)">
			<summary>
			Sets a value indicating if bicubic filtering is enabled for height texture (collision and intersection detection and fetch requests) and normals texture (intersection detection and fetch requests).
			</summary> 
			<param name="filter"> true to enable bicubic filtering is enabled for height texture (collision and intersection detection and fetch requests) and normals texture (intersection detection and fetch requests), false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isIntersectionBicubicFilter const">
			<summary>
			Returns a value indicating if bicubic filtering is enabled for height texture (collision and intersection detection and fetch requests) and normals texture (intersection detection and fetch requests).
			</summary>  
			<returns>true if bicubic filtering is enabled for height texture (collision and intersection detection and fetch requests) and normals texture (intersection detection and fetch requests); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setCollision(bool)">
			<summary>
			Sets a value indicating if collision detection is enabled for the landscape layer map.
			</summary> 
			<param name="collision"> true to enable collision detection for the landscape layer map, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isCollision const">
			<summary>
			Returns a value indicating if collision detection is enabled for the landscape layer map.
			</summary>  
			<returns>true if collision detection for the landscape layer map is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setCulling(bool)">
			<summary>
			Sets a value indicating if heights data of the layer map is to be used for culling precalculation. In order to define which parts of the terrain are to be rendered a culling test is required. This test is performed on the basis of a precalculated low-detail height map, combining heights data of all landscape layer maps having a significant impact on the result. 					Precalculation is performed on the CPU side, so processing a large number of landscape layer maps may reduce performance. 					Moreover, some layer maps may be used as decals (i.e. their impact on the resulting height map is insignificant). 					For such cases you can simply disable this option to avoid unnecessary calculations.					Disabling this option for a single
			</summary> 
			<param name="culling"> true to use the layer map for culling, false - to ignore it. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isCulling const">
			<summary>
			Returns a value indicating if heights data of the layer map is to be used for culling precalculation. In order to define which parts of the terrain are to be rendered a culling test is required. This test is performed on the basis of a precalculated low-detail height map, combining heights data of all landscape layer maps having a significant impact on the result. Precalculation is performed on the CPU side, so processing a large number of landscape layer maps may reduce performance. Moreover, some layer maps may be used as decals (i.e. their impact on the resulting height map is insignificant). For such cases you can simply disable this option to avoid unnecessary calculations.
			</summary>  
			<returns>true if heights data of the layer map is to be used for culling precalculation; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setOrder(int)">
			<summary>
			Returns a new rendering order for the landscape layer map. A map with a higher order value shall be rendered above the ones with lower ones.
			</summary> 
			<param name="order"> New rendering order to be set for the landscape layer map. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getOrder const">
			<summary>
			Sets the current rendering order for the landscape layer map. A map with a higher order value shall be rendered above the ones with lower ones.
			</summary>  
			<returns>Current rendering order of the landscape layer map.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setSize(Unigine.Math.Vec2)">
			<summary>
			Sets a new size for the landscape layer map.
			</summary> 
			<param name="size"> The two-component vector (X, Y) defining the size of the landscape layer map along X and Y axes, in units. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getSize const">
			<summary>
			Returns the current size of the landscape layer map.
			</summary>  
			<returns>The two-component vector (X, Y) defining the size of the landscape layer map along X and Y axes, in units.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setHeightScale(float)">
			<summary>
			Sets a new scale factor to be used for heights data. Height values of landscape layer map are multiplied by this value during terrain rendering.
			</summary> 
			<param name="scale"> The scale factor used for heights data. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getHeightScale const">
			<summary>
			Returns the current scale factor used for heights data. Height values of landscape layer map are multiplied by this value during terrain rendering.
			</summary>  
			<returns>The scale factor used for heights data.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getTexelSize const">
			<summary>
			Returns the current texel size for the landscape layer map textures.
			</summary>  
			<returns>The two-component vector (X, Y) defining the size of the texel of the landscape layer map textures along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isInit const">
			<summary>
			Returns a value indicating if the landscape layer map is initialized.
			</summary>  
			<returns>true if async operation is completed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getExtremumHeight(float)">
			<summary>
			Returns the minimum and maximum height of the landscape layer map as a two-component vector.
			</summary> 
			<param name="precision"> Precision value in the [0.0f, 1.0f] range. The default value is 1.0f (maximum). </param> 
			<returns>The two-component vector (X, Y) defining the minimum (X) and maximum (Y) height of the landscape layer map.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>LandscapeLayerMap type identifier. </returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getResolution const">
			<summary>
			Returns the current landscape map resolution.
			</summary>  
			<returns>The two-component vector (X, Y) representing landscape map resolution along X and Y axes, in pixels.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.setFadeAttenuation(Unigine.Math.vec2)">
			<summary>
			Sets a new fade attenuation of landscape layer map. This parameter defines the distance of the map transparency attenuation, starting from the edge of the map.
			</summary> 
			<param name="attenuation"> The two-component vector (X, Y) defining the fade attenuation of the landscape layer map along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getFadeAttenuation const">
			<summary>
			Returns the current fade attenuation for the landscape layer map. This parameter defines the distance of the map transparency attenuation, starting from the edge of the map.
			</summary>  
			<returns>The two-component vector (X, Y) defining the fade attenuation of the landscape layer map along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isEnabledHeight const">
			<summary>
			Returns the value specifying if heightmap data is enabled for the landscape layer map.
			</summary>  
			<returns>true if heightmap data is enabled for the landscape layer map; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isEnabledAlbedo const">
			<summary>
			Returns the value specifying if albedo data is enabled for the landscape layer map.
			</summary>  
			<returns>true if albedo data is enabled for the landscape layer map; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isEnabledMask(int) const">
			<summary>
			Returns the value specifying if the specified mask is enabled for the landscape layer map.
			</summary> 
			<param name="mask"> Mask index. </param> 
			<returns>true if the specified mask is enabled for the landscape layer map; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isEnabledOpacityHeight const">
			<summary>
			Returns the value specifying if heightmap with an additional opacity mask applied is enabled for the landscape layer map.
			</summary>  
			<returns>true if heightmap with an opacity mask is enabled for the landscape layer map; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isEnabledOpacityAlbedo const">
			<summary>
			Returns the value specifying if albedo data with an additional opacity mask applied is enabled for the landscape layer map.
			</summary>  
			<returns>true if heightmap with an opacity mask is enabled for the landscape layer map; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isEnabledOpacityMask(int) const">
			<summary>
			Returns the value specifying if the specified mask with an additional opacity mask applied is enabled for the landscape layer map.
			</summary> 
			<param name="mask"> Mask index. </param> 
			<returns>true if heightmap with an opacity mask is enabled for the landscape layer map; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getHeightBlending const">
			<summary>
			Returns the blending mode set for the height data.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getAlbedoBlending const">
			<summary>
			Returns the blending mode set for the albedo data.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getMaskBlending(int) const">
			<summary>
			Returns the blending mode set for the mask data.
			</summary> 
			<param name="mask"> Mask index. </param> 
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getHeightFadeAttenuation const">
			<summary>
			Returns the current fade attenuation for height data of the landscape map. This parameter defines the distance of the transparency attenuation starting from the edge of the map.
			</summary>  
			<returns>The two-component vector (X, Y) defining the fade attenuation of the height data along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getAlbedoFadeAttenuation const">
			<summary>
			Returns the current fade attenuation for albedo data of the landscape map. This parameter defines the distance of the transparency attenuation starting from the edge of the map.
			</summary>  
			<returns>The two-component vector (X, Y) defining the fade attenuation of the albedo data along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.getMaskFadeAttenuation(int) const">
			<summary>
			Returns the current fade attenuation for the data of the specified detail mask. This parameter defines the distance of the transparency attenuation starting from the edge of the map.
			</summary> 
			<param name="mask"> Mask index. </param> 
			<returns>The two-component vector (X, Y) defining the fade attenuation of the detail mask data along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeLayerMap.isCompressed const">
			<summary>
			Returns the value indicating if the landscape layer map is compressed.
			</summary>  
			<returns>true if the landscape layer map is compressed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.#ctor">
			<summary>
			The LandscapeMapFileCreator constructor.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.setResolution(Unigine.Math.ivec2)">
			<summary>
			Sets a new landscape map resolution.
			</summary> 
			<param name="resolution"> Two-component vector (X, Y) representing new landscape map resolution along X and Y axes to be set, in pixels. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.getResolution">
			<summary>
			Returns the current landscape map resolution.
			</summary>  
			<returns>Two-component vector (X, Y) representing current landscape map resolution along X and Y axes, in pixels.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.setGrid(Unigine.Math.ivec2)">
			<summary>
			Sets a new grid size for the landscape map.
			</summary> 
			<param name="grid"> Two-component vector (X, Y) representing number of tiles of the landscape map along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.getGrid">
			<summary>
			Returns the current grid size for the landscape map.
			</summary>  
			<returns>Two-component vector (X, Y) representing number of tiles of the landscape map along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.getProgress">
			<summary>
			Returns the current landscape map file creation progress.
			</summary>  
			<returns>Current landscape map file creation progress (percentage).</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.getTimeSeconds">
			<summary>
			Returns the landscape map file creation time. You can use this method to get total file generation time when processing an End callback.
			</summary>  
			<returns>Landscape map file creation time, in seconds.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.setPath(char)">
			<summary>
			Sets a new path to the .lmap file to be generated.
			</summary> 
			<param name="path"> New path to the .lmap file to be generated. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.getPath">
			<summary>
			Returns a path to the .lmap file to be generated.
			</summary>  
			<returns>Path to the .lmap file to be generated.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.setDownscaleFilter(Landscape::TYPE_FILE_DATA,Image::FILTER)">
			<summary>
			Sets a new filtering type to be used for image downscaling performed for LODs of the specified file data type.
			</summary> 
			<param name="file_data_type"> File data type. </param>
			<param name="filter"> Filter type to be used for downscaling. See the Unigine::Image Enumerations with FILTER_* prefixes. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.getDownscaleFilter(Landscape::TYPE_FILE_DATA) const">
			<summary>
			Returns the current filtering type used for image downscaling performed for LODs of the specified file data type.
			</summary> 
			<param name="file_data_type"> File data type. </param> 
			<returns>Filter type  used for image downscaling. See the Unigine::Image Enumerations with FILTER_* prefixes.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.run(bool,bool)">
			<summary>
			Runs the landscape map file creation process. You can set callbacks to be fired in the beginning, upon completion and during the process to monitor progress and display statistics. Creates the landscape map file path if it doesn’t exist yet (including subdirectories).
			</summary> 
			<param name="is_empty"> true to create an empty .lmap file (e.g., when you create a layer map to be manually sculpted from scratch using brushes), false - to get necessary data from the sources and put them to the generated .lmap file. </param>
			<param name="is_safe"> true to make the Engine automatically call filesClose()/fileOpen() methods when performing operations (before modifying an .lmap file the Engine should release files via filesClose(), while after modification fileOpen() should be called), false - to call filesClose()/fileOpen() methods manually.The Landscape class has two overloads for the filesClose() method:filesClose() - to be called in case of moving an .lmap file (no data reloading is performed as the file itself was not modified - saves time on reloading data)filesClose(reload_files) - to be called in case of deleting or modifying an .lmap file.When is_safe = true the Engine shall always call filesClose(reload_files) with complete data reloading. </param> 
			<returns>true if the operation is successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.addCreateCallback(Unigine.CallbackBase4{Unigine.Ptr{LandscapeMapFileCreator},Unigine.Ptr{Unigine.LandscapeImages},int,int})">
			<summary>
			Adds a callback function to be called on creating a landscape layer map file. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a landscape layer map file creation callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added landscape layer map file creation callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.removeCreateCallback(void)">
			<summary>
			Removes the specified callback from the list of create file callbacks.
			</summary> 
			<param name="id"> Create file callback ID obtained when adding it. </param> 
			<returns>True if the create file callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.clearCreateCallback">
			<summary>
			Clears all added create file callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.addProgressCallback(Unigine.CallbackBase1{Unigine.Ptr{LandscapeMapFileCreator}})">
			<summary>
			Adds a callback function to be called on landscape map file creation progress. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a progress callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added progress callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.removeProgressCallback(void)">
			<summary>
			Removes the specified callback from the list of progress callbacks.
			</summary> 
			<param name="id"> Progress callback ID obtained when adding it. </param> 
			<returns>True if the progress callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.clearProgressCallback">
			<summary>
			Clears all added progress callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.addBeginCallback(Unigine.CallbackBase1{Unigine.Ptr{LandscapeMapFileCreator}})">
			<summary>
			Adds a callback function to be called on beginning the landscape map file creation. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a begin file creation callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added begin file creation callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.removeBeginCallback(void)">
			<summary>
			Removes the specified callback from the list of begin file creation callbacks.
			</summary> 
			<param name="id"> Begin callback ID obtained when adding it. </param> 
			<returns>True if the begin file creation callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.clearBeginCallback">
			<summary>
			Clears all added begin file creation callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.addEndCallback(Unigine.CallbackBase1{Unigine.Ptr{LandscapeMapFileCreator}})">
			<summary>
			Adds a callback function to be called on completion of the landscape map file creation. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a file creation completion callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added file creation completion callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.removeEndCallback(void)">
			<summary>
			Removes the specified callback from the list of file creation completion callbacks.
			</summary> 
			<param name="id"> End callback ID obtained when adding it. </param> 
			<returns>True if the progress callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCreator.clearEndCallback">
			<summary>
			Clears all added file creation completion callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.#ctor">
			<summary>
			Constructor.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.isCompressing const">
			<summary>
			Returns the value indicating if the compression is in progress.
			</summary>  
			<returns>true if the compression is running; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.isDecompressing const">
			<summary>
			Returns the value indicating if the decompression is in progress.
			</summary>  
			<returns>true if the decompression is running; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getProgress const">
			<summary>
			Returns the current landscape map file compression progress.
			</summary>  
			<returns>Current landscape map file compression progress (percentage).</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.compress(bool)">
			<summary>
			Starts the landscape map file compression process.
			</summary> 
			<param name="is_safe"> true to make the Engine automatically call filesClose()/fileOpen() methods when performing operations (before modifying an .lmap file the Engine should release files via filesClose(), while after modification fileOpen() should be called), false — to call filesClose()/fileOpen() methods manually.The Landscape class has two overloads for the filesClose() method:filesClose() — to be called in case of moving an .lmap file (no data reloading is performed as the file itself was not modified — saves time on reloading data)filesClose(reload_files) — to be called in case of deleting or modifying an .lmap file.When is_safe = true the Engine shall always call filesClose(reload_files) with complete data reloading. </param> 
			<returns>true if the compression operation is successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.decompress(bool)">
			<summary>
			Starts the landscape map file decompression process.
			</summary> 
			<param name="is_safe"> true to make the Engine automatically call filesClose()/fileOpen() methods when performing operations (before modifying an .lmap file the Engine should release files via filesClose(), while after modification fileOpen() should be called), false — to call filesClose()/fileOpen() methods manually.The Landscape class has two overloads for the filesClose() method:filesClose() — to be called in case of moving an .lmap file (no data reloading is performed as the file itself was not modified — saves time on reloading data)filesClose(reload_files) — to be called in case of deleting or modifying an .lmap file.When is_safe = true the Engine shall always call filesClose(reload_files) with complete data reloading. </param> 
			<returns>true if the decompression operation is successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.stop">
			<summary>
			Stops the landscape map file compression/decompression process.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setHeightCompressor(Landscape::COMPRESSOR_TYPE)">
			<summary>
			Sets the type of the compressor used for height data compression.
			</summary> 
			<param name="compressor"> Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getHeightCompressor const">
			<summary>
			Returns the current type of the compressor used for height data compression.
			</summary>  
			<returns>Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setAlbedoCompressor(Landscape::COMPRESSOR_TYPE)">
			<summary>
			Sets the type of the compressor used for albedo data compression.
			</summary> 
			<param name="compressor"> Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getAlbedoCompressor const">
			<summary>
			Returns the current type of the compressor used for albedo data compression.
			</summary>  
			<returns>Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setOpacityHeightCompressor(Landscape::COMPRESSOR_TYPE)">
			<summary>
			Sets the type of the compressor used for compression of the opacity height data.
			</summary> 
			<param name="compressor"> Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getOpacityHeightCompressor const">
			<summary>
			Returns the current type of the compressor used for compression of the opacity height data.
			</summary>  
			<returns>Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setMaskCompressor(int,Landscape::COMPRESSOR_TYPE)">
			<summary>
			Sets the type of the compressor used for the specified mask.
			</summary> 
			<param name="mask"> Mask number. </param>
			<param name="compressor_type"> Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setMaskOpacityCompressor(int,Landscape::COMPRESSOR_TYPE)">
			<summary>
			Sets the type of the compressor used for the opacity data of the specified mask.
			</summary> 
			<param name="mask"> Mask number. </param>
			<param name="compressor_type"> Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setCompressorAll(Landscape::COMPRESSOR_TYPE)">
			<summary>
			Sets the type of the compressor used to compress all data.
			</summary> 
			<param name="compressor_type"> Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getMaskCompressor(int)">
			<summary>
			Returns the current type of the compressor used for the specified mask.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getMaskOpacityCompressor(int)">
			<summary>
			Returns the current type of the compressor used for the opacity data of the specified mask.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>Compressor type:0 – None1 – Our Method2 – LZ43 – Zlib</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setEnabledAlbedoTextureCompression(bool)">
			<summary>
			Sets the albedo texture compression enabled or disabled.
			</summary> 
			<param name="compression"> true to enable albedo texture compression; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.isEnabledAlbedoTextureCompression const">
			<summary>
			Returns the value indicating if the albedo texture compression is enabled.
			</summary>  
			<returns>true if the albedo texture compression is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setEnabledOpacityHeightTextureCompression(bool)">
			<summary>
			Sets the compression of the opacity height texture enabled or disabled.
			</summary> 
			<param name="compression"> true to enable compression of the opacity height texture; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.isEnabledOpacityHeightTextureCompression const">
			<summary>
			Returns the value indicating if the compression of the opacity height texture is enabled.
			</summary>  
			<returns>true if the compression of the opacity height texture is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setEnabledMaskTextureCompression(int,bool)">
			<summary>
			Enables or disables compression of the specified mask texture.
			</summary> 
			<param name="mask"> Mask number. </param>
			<param name="enable"> true to enable the mask texture compression; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setEnabledMaskOpacityTextureCompression(int,bool)">
			<summary>
			Enables or disables compression of the specified mask opacity texture.
			</summary> 
			<param name="mask"> Mask number. </param>
			<param name="enable"> true to enable the compression of the mask opacity texture; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.isEnabledMaskTextureCompression(int)">
			<summary>
			Returns a value undicating if the mask texture compression is enabled.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>true if the mask texture compression is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.isEnabledMaskOpacityTextureCompression(int)">
			<summary>
			Returns the value indicating if the compression of the mask opacity texture is enabled.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>true if the mask opacity texture compression is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getGUID const">
			<summary>
			Returns a GUID of the .lmap file containing landscape map data.
			</summary>  
			<returns>GUID of the .lmap file.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.setCacheDirectory(char)">
			<summary>
			Sets a path to the directory that is used to store the cache. By default the cache is located in the same place where the UnigineEditor's cache is (you can find it in the UnigineEditor Settings tab). If there is not enough memory, you can use another disk. A full copy of the current terrain will be temporarily stored in the cache directory, so you should take this into account when estimating the cache size. SSD is recommended for fast data copying.
			</summary> 
			<param name="directory"> The path to the directory that stores the cache. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileCompression.getCacheDirectory const">
			<summary>
			Returns the current path to the directory that is used to store the cache.
			</summary>  
			<returns>The path to the directory that stores the cache.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.#ctor">
			<summary>
			The LandscapeMapFileSettings constructor.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setHeightBlending(Landscape::BLENDING_MODE)">
			<summary>
			Sets a new blending mode to be used for heights data of the landscape map.
			</summary> 
			<param name="blending"> Blending mode to be used for heights data. One of the following values:Alpha BlendAdditive </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getHeightBlending const">
			<summary>
			Returns the current blending mode used for heights data of the landscape map.
			</summary>  
			<returns>Blending mode used for heights data. One of the following values:Alpha BlendAdditive</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setAlbedoBlending(Landscape::BLENDING_MODE)">
			<summary>
			Sets a new blending mode to be used for albedo data of the landscape map.
			</summary> 
			<param name="blending"> Blending mode to be used for albedo data. One of the following values:Alpha BlendAdditiveOverlayMultiplicative </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getAlbedoBlending const">
			<summary>
			Returns the current blending mode used for albedo data of the landscape map.
			</summary>  
			<returns>Blending mode used for albedo data. One of the following values:Alpha BlendAdditiveOverlayMultiplicative</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setMaskBlending(int,Landscape::BLENDING_MODE)">
			<summary>
			Sets a new blending mode to be used for the data of the specified detail mask.
			</summary> 
			<param name="mask"> Detail mask number in the [0; 19] range. </param>
			<param name="blend"> Blending mode used for the data of the specified detail mask. One of the following values:Alpha BlendAdditiveOverlayMultiplicative </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getMaskBlending(int) const">
			<summary>
			Returns the current blending mode used for the data of the specified detail mask.
			</summary> 
			<param name="mask"> Detail mask number in the [0; 19] range. </param> 
			<returns>Blending mode used for the data of the specified detail mask. One of the following values:Alpha BlendAdditiveOverlayMultiplicative</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setEnabledHeight(bool)">
			<summary>
			Sets a value indicating if heights data of the landscape layer map is to be used.
			</summary> 
			<param name="height"> true to enable using heights data of the landscape layer map, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledHeight const">
			<summary>
			Returns a value indicating if heights data of the landscape layer map is to be used.
			</summary>  
			<returns>true if heights data of the landscape layer map is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setEnabledAlbedo(bool)">
			<summary>
			Sets a value indicating if albedo data of the landscape layer map is to be used.
			</summary> 
			<param name="albedo"> true to enable using albedo data of the landscape layer map, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledAlbedo const">
			<summary>
			Returns a value indicating if albedo data of the landscape layer map is to be used.
			</summary>  
			<returns>true if albedo data of the landscape layer map is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setEnabledMask(int,bool)">
			<summary>
			Sets a value indicating if the data of the detail mask with the specified number is to be used.
			</summary> 
			<param name="mask"> Detail mask number in the [0; 19] range. </param>
			<param name="enabled"> true to enable using the data of the specified detail mask, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledMask(int) const">
			<summary>
			Returns a value indicating if the data of the detail mask with the specified number is to be used.
			</summary> 
			<param name="mask"> Detail mask number in the [0; 19] range. </param> 
			<returns>true if the data of the detail mask with the specified number is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setEnabledOpacityHeight(bool)">
			<summary>
			Sets a value indicating if opacity information for heights data of the landscape layer map is to be used. Opacity information is required to blend data of several landscape layer maps.
			</summary> 
			<param name="height"> true to enable using opacity information for heights data of the landscape layer map, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledOpacityHeight const">
			<summary>
			Returns a value indicating if opacity information for heights data of the landscape layer map is to be used. Opacity information is required to blend data of several landscape layer maps.
			</summary>  
			<returns>true if opacity information for heights data of the landscape layer map is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setEnabledOpacityAlbedo(bool)">
			<summary>
			Sets a value indicating if opacity information for albedo data of the landscape layer map is to be used. Opacity information is required to blend data of several landscape layer maps.
			</summary> 
			<param name="albedo"> true to enable using opacity information for albedo data of the landscape layer map, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledOpacityAlbedo const">
			<summary>
			Returns a value indicating if opacity information for the albedo data of the landscape layer map is to be used. Opacity information is required to blend data of several landscape layer maps.
			</summary>  
			<returns>true if opacity information for the albedo data of the landscape layer map is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setEnabledOpacityMask(int,bool)">
			<summary>
			Sets a value indicating if opacity information for the heights data of the detail mask with the specified number is to be used. Opacity information is required to blend data of several landscape layer maps.
			</summary> 
			<param name="mask"> Detail mask number in the [0; 19] range. </param>
			<param name="enabled"> true to enable using opacity information for the data of the specified detail mask, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledOpacityMask(int) const">
			<summary>
			Returns a value indicating if opacity information for the data of the detail mask with the specified number is to be used. Opacity information is required to blend data of several landscape layer maps.
			</summary> 
			<param name="mask"> Detail mask number in the [0; 19] range. </param> 
			<returns>true if opacity information for the data of the detail mask with the specified number is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getTilesSize const">
			<summary>
			Returns the size of the landscape map tiles.
			</summary>  
			<returns>Two-component vector (X, Y) representing the number of tiles in the landscape layer map along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getResolution const">
			<summary>
			Returns the landscape layer map resolution.
			</summary>  
			<returns>Two-component vector (X, Y) representing landscape layer map resolution along X and Y axes, in pixels.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getGUID const">
			<summary>
			Returns a GUID of the .lmap file containing landscape map data.
			</summary>  
			<returns>GUID of the .lmap file.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isLoaded const">
			<summary>
			Returns a value indicating if the landscape map file (.lmap) is loaded.
			</summary>  
			<returns>true if opacity information for the data of the detail mask with the specified number is to be used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.load(Unigine.UGUID)">
			<summary>
			Loads landscape map settings from a file with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the .lmap file containing landscape map data. </param> 
			<returns>true if landscape map settings were successfully loaded from the file with the specified GUID; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.apply">
			<summary>
			Applies all settings stored in the landscape map file (.lmap).
			</summary>  
			<returns>true if landscape map file settings were successfully applied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setHeightFadeAttenuation(Unigine.Math.vec2)">
			<summary>
			Sets a new fade attenuation to be used for heights data of the landscape map. This parameter defines the distance of the transparency attenuation, starting from the edge of the map.
			</summary> 
			<param name="attenuation"> Two-component vector (X, Y) defining the fade attenuation of the height data along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getHeightFadeAttenuation const">
			<summary>
			Returns the current fade attenuation for heights data of the landscape map. This parameter defines the distance of the transparency attenuation, starting from the edge of the map.
			</summary>  
			<returns>Two-component vector (X, Y) defining the fade attenuation of the height data along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setAlbedoFadeAttenuation(Unigine.Math.vec2)">
			<summary>
			Sets a new fade attenuation to be used for albedo data of the landscape map. This parameter defines the distance of the transparency attenuation, starting from the edge of the map.
			</summary> 
			<param name="attenuation"> Two-component vector (X, Y) defining the fade attenuation of the albedo data along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getAlbedoFadeAttenuation const">
			<summary>
			Returns the current fade attenuation for albedo data of the landscape map. This parameter defines the distance of the transparency attenuation, starting from the edge of the map.
			</summary>  
			<returns>Two-component vector (X, Y) defining the fade attenuation of the albedo data along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.setMaskFadeAttenuation(int,Unigine.Math.vec2)">
			<summary>
			Sets a new fade attenuation to be used for the data of the specified detail mask. This parameter defines the distance of the transparency attenuation, starting from the edge of the map.
			</summary> 
			<param name="mask"> Mask number. </param>
			<param name="fade_attenuation"> Two-component vector (X, Y) defining the fade attenuation of the detail mask data along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getMaskFadeAttenuation(int) const">
			<summary>
			Returns the current fade attenuation for the data of the specified detail mask. This parameter defines the distance of the transparency attenuation, starting from the edge of the map.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>Two-component vector (X, Y) defining the fade attenuation of the detail mask data along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getHeightCompressor const">
			<summary>
			Returns the type of compression currently used for height data.
			</summary>  
			<returns>Type of compression currently used for height data.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getAlbedoCompressor const">
			<summary>
			Returns the type of compression currently used for albedo data.
			</summary>  
			<returns>Type of compression currently used for albedo data.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getOpacityHeightCompressor const">
			<summary>
			Returns the type of compression currently used for opacity height data.
			</summary>  
			<returns>Type of compression currently used for opacity height data.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getMaskCompressor(int)">
			<summary>
			Returns the type of compression currently used for the data of the mask with the specified number.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>Type of compression currently used for the data of the mask with the specified number.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.getMaskOpacityCompressor(int)">
			<summary>
			Returns the type of compression currently used for the opacity data of the mask with the specified number.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>Type of compression currently used for the opacity data of the mask with the specified number.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isCompressed const">
			<summary>
			Returns the value indicating if the .lmap file is compressed.
			</summary>  
			<returns>true if the file is compressed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledAlbedoTextureCompression const">
			<summary>
			Returns a value indicating if albedo texture compression is enabled.
			</summary>  
			<returns>true if albedo texture compression is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledOpacityHeightTextureCompression const">
			<summary>
			Returns a value indicating if opacity height texture compression is enabled.
			</summary>  
			<returns>true if opacity height texture compression is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledMaskTextureCompression(int)">
			<summary>
			Returns a value indicating if compression of the mask texture for the mask with the specified number is enabled.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>true if compression of the mask texture for the mask with the specified number is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeMapFileSettings.isEnabledMaskOpacityTextureCompression(int)">
			<summary>
			Returns a value indicating if compression of the opacity texture for the mask with the specified number is enabled.
			</summary> 
			<param name="mask"> Mask number. </param> 
			<returns>true if compression of the opacity texture for the mask with the specified number is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.#ctor">
			<summary>
			The LandscapeFetch constructor.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeFetch.getPosition">
			<summary>
			Returns the coordinates of the fetch/intersection point.
			</summary>  
			<returns>Fetch/intersection point coordinates as a three-component vector.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.getHeight">
			<summary>
			Returns the height value at the point.
			</summary>  
			<returns>Height value at the point.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.getNormal">
			<summary>
			Returns normal vector coordinates at the point.To get valid normal information via this method, engage normal data for the fetch/intersection request.
			</summary>  
			<returns>Normal vector coordinates at the point.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.getAlbedo">
			<summary>
			Returns albedo color information at the point.To get valid albedo color information via this method, engage albedo data for the fetch/intersection request.
			</summary>  
			<returns>Albedo color at the point as a 4 component vector (R, G, B, A).</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.isIntersection">
			<summary>
			Returns a value indicating if an intersection was detected.
			</summary>  
			<returns>true if an intersection was detected; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.getMask(int)">
			<summary>
			Returns information stored for the point in the detail mask with the specified number.To get valid detail mask information via this method, engage mask data for the fetch/intersection request.
			</summary> 
			<param name="num"> Number of the detail mask in the [0; 19] range. </param> 
			<returns>Value for the point stored in the detail mask with the specified number.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setUses(int)">
			<summary>
			Sets multiple flags engaging/disengaging certain data types for the fetch/intersection request.
			</summary> 
			<param name="uses"> Combination of data engagement flags to be set. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.getUses">
			<summary>
			Returns the current state of flags engaging/disengaging certain data types for the fetch/intersection request.
			</summary>  
			<returns>Current combination of data engagement flags.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setUsesHeight(bool)">
			<summary>
			Sets a value indicating if heights data is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point). This option is enabled by default.
			</summary> 
			<param name="height"> true to engage height data in the fetch/intersection request, false - to disengage. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.isUsesHeight">
			<summary>
			Returns a value indicating if heights data is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point). This option is enabled by default.
			</summary>  
			<returns>true if heights data is engaged in the fetch/intersection request; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setUsesNormal(bool)">
			<summary>
			Sets a value indicating if normals data is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point).Enable this option to get normal information for the point.
			</summary> 
			<param name="normal"> true to engage normals data in the fetch/intersection request, false - to disengage. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.isUsesNormal">
			<summary>
			Returns a value indicating if normals data is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point).Enable this option to get normal information for the point.
			</summary>  
			<returns>true if normals data is engaged in the fetch/intersection request; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setUsesAlbedo(bool)">
			<summary>
			Sets a value indicating if albedo data is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point).Enable this option to get albedo information for the point.
			</summary> 
			<param name="albedo"> true to engage albedo data in the fetch/intersection request, false - to disengage. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.isUsesAlbedo">
			<summary>
			Returns a value indicating if albedo data is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point).Enable this option to get albedo information for the point.
			</summary>  
			<returns>true if albedo data is engaged in the fetch/intersection request; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setUsesMask(int,bool)">
			<summary>
			Sets a value indicating if data of the specified detail mask is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point).Enable this option to get detail mask data for the point.
			</summary> 
			<param name="num"> Detail mask number in the [0; 19] range. </param>
			<param name="value"> true to engage data of the specified detail mask in the fetch/intersection request, false - to disengage. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.isUsesMask(int)">
			<summary>
			Returns a value indicating if data of the specified detail mask is engaged in the fetch/intersection request. When the data type is engaged, you can obtain it via the corresponding get() method. Disengaging unnecessary data when performing requests saves some performance (e.g., you can engage albedo data only if you need only color information at a certain point).Enable this option to get detail mask data for the point.
			</summary> 
			<param name="num"> Detail mask number in the [0; 19] range. </param> 
			<returns>true if data of the specified detail mask is engaged in the fetch/intersection request; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setHolesEnabled(bool)">
			<summary>
			Sets a value indicating if checking for terrain holes in the fetch/intersection request is enabled. This option is enabled by default. When disabled terrain holes created using decals are ignored.
			</summary> 
			<param name="albedo"> true to enable checking for terrain holes in the fetch/intersection request, false - to disable it. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.isHolesEnabled">
			<summary>
			Returns a value indicating if checking for terrain holes in the fetch/intersection request is enabled. This option is enabled by default. When disabled terrain holes created using decals are ignored.
			</summary>  
			<returns>true if checking for terrain holes in the fetch/intersection request is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setIntersectionPrecision(float)">
			<summary>
			Sets a new precision value to be used for intersection detection requested by intersectionForce() and intersectionAsync() methods.
			</summary> 
			<param name="begin"> Precision for intersection detection as a fraction of maximum precision in the [0; 1] range. The default value is 0.5f. Maximum precision is determined by the Engine on the basis of the data of your Landscape Terrain. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.getIntersectionPrecision">
			<summary>
			Returns the current precision value used for intersection detection requested by intersectionForce() and intersectionAsync() methods.
			</summary>  
			<returns>Precision for intersection detection as a fraction of maximum precision in the [0; 1] range. The default value is 0.5f. Maximum precision is determined by the Engine on the basis of the data of your Landscape Terrain.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setIntersectionPositionBegin(Unigine.Math.Vec3)">
			<summary>
			Sets the coordinates of the starting point for intersection detection.
			</summary> 
			<param name="begin"> Three-component vector specifying starting point coordinates along X, Y, and Z axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.getIntersectionPositionBegin const">
			<summary>
			Returns the coordinates of the starting point for intersection detection.
			</summary>  
			<returns>Three-component vector specifying starting point coordinates along X, Y, and Z axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setIntersectionPositionEnd(Unigine.Math.Vec3)">
			<summary>
			Sets the coordinates of the end point for intersection detection.
			</summary> 
			<param name="end"> Three-component vector specifying end point coordinates along X, Y, and Z axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.getIntersectionPositionEnd const">
			<summary>
			Returns the coordinates of the end point for intersection detection.
			</summary>  
			<returns>Three-component vector specifying end point coordinates along X, Y, and Z axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.setFetchPosition(Unigine.Math.Vec2)">
			<summary>
			Sets a point for which terrain data is to be fetched.
			</summary> 
			<param name="position"> Two-component vector specifying point coordinates along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.getFetchPosition const">
			<summary>
			Returns the current point for which terrain data is to be fetched.
			</summary>  
			<returns>Two-component vector specifying point coordinates along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.fetchForce">
			<summary>
			Fetches terrain data in forced mode for the point specified by the setFetchPosition(). You can use the fetchAsync() method to reduce load, when an instant result is not required.
			</summary>  
			<returns>true if terrain data was successfully obtained for the specified point; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.fetchForce(Unigine.Math.Vec2)">
			<summary>
			Fetches terrain data in forced mode for the specified point. You can use the fetchAsync() method to reduce load, when an instant result is not required.
			</summary> 
			<param name="position"> Coordinates of the point. </param> 
			<returns>true if terrain data was successfully obtained for the specified point; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.intersectionForce">
			<summary>
			Performs tracing along the line from the p0 point specified by the setIntersectionPositionBegin() to the p1 point specified by the setIntersectionPositionEnd() to find an intersection with the terrain in forced mode. You can use the intersectionAsync() method to reduce load, when an instant result is not required.
			</summary>  
			<returns>true if an intersection with the terrain was found; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.intersectionForce(Unigine.Math.Vec3,Unigine.Math.Vec3)">
			<summary>
			Performs tracing along the line from the p0 point to the p1 point to find an intersection with the terrain in forced mode. You can use the intersectionAsync() method to reduce load, when an instant result is not required.
			</summary> 
			<param name="p0"> Coordinates of the p0 point. </param>
			<param name="p1"> Coordinates of the p1 point. </param> 
			<returns>true if an intersection with the terrain was found; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.fetchAsync(bool)">
			<summary>
			Fetches terrain data for the point specified by the setFetchPosition() in asynchronous mode (the corresponding task shall be put to the queue, to wait until the result is obtained use the wait() method). For an instant result use the fetchForce() method.
			</summary> 
			<param name="critical"> true to set high priority for the fetch task, false - to set normal priority. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.fetchAsync(Unigine.Math.Vec2,bool)">
			<summary>
			Fetches terrain data for the specified point in asynchronous mode (the corresponding task shall be put to the queue, to wait until the result is obtained use the wait() method). For an instant result use the fetchForce() method.
			</summary> 
			<param name="position"> Coordinates of the point. </param>
			<param name="critical"> true to set high priority for the fetch task, false - to set normal priority. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.intersectionAsync(bool)">
			<summary>
			Performs tracing along the line from the p0 point specified by the setIntersectionPositionBegin() to the p1 point specified by the setIntersectionPositionEnd() to find an intersection with the terrain in asynchronous mode (the corresponding task shall be put to the queue, to wait until the result is obtained use the wait() method). For an instant result use the intersectionForce() method.
			</summary> 
			<param name="critical"> true to set high priority for the intersection task, false - to set normal priority. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.intersectionAsync(Unigine.Math.Vec3,Unigine.Math.Vec3,bool)">
			<summary>
			Performs tracing along the line from the p0 point to the p1 point to find an intersection with the terrain in asynchronous mode (the corresponding task shall be put to the queue, to wait until the result is obtained use the wait() method). For an instant result use the intersectionForce() method.
			</summary> 
			<param name="p0"> Coordinates of the p0 point. </param>
			<param name="p1"> Coordinates of the p1 point. </param>
			<param name="critical"> true to set high priority for the intersection task, false - to set normal priority. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.fetchForce(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeFetch},int,Unigine.VectorAllocator})">
			<summary>
			Fetches (batch) terrain data in forced mode for the point specified by the setFetchPosition(). You can use the fetchAsync() method to reduce load, when an instant result is not required.
			</summary> 
			<param name="fetches"> List of fetch requests to be completed. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.intersectionForce(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeFetch},int,Unigine.VectorAllocator})">
			<summary>
			Performs tracing (batch) along the line from the p0 point specified by the setIntersectionPositionBegin() to the p1 point specified by the setIntersectionPositionEnd() to find an intersection with the terrain in forced mode. You can use the intersectionAsync() method to reduce load, when an instant result is not required.
			</summary> 
			<param name="fetches"> List of fetch requests to be completed. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.fetchAsync(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeFetch},int,Unigine.VectorAllocator},bool)">
			<summary>
			Fetches (batch) terrain data for the point specified by the setFetchPosition() in asynchronous mode (the corresponding task shall be put to the queue, to wait until the result is obtained use the wait() method). For an instant result use the fetchForce() method.
			</summary> 
			<param name="fetches"> List of fetch requests to be completed. </param>
			<param name="critical"> true to set high priority for the fetch task, false - to set normal priority. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.intersectionAsync(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeFetch},int,Unigine.VectorAllocator},bool)">
			<summary>
			Performs tracing (batch) along the line from the p0 point specified by the setIntersectionPositionBegin() to the p1 point specified by the setIntersectionPositionEnd() to find an intersection with the terrain in asynchronous mode (the corresponding task shall be put to the queue, to wait until the result is obtained use the wait() method). For an instant result use the intersectionForce() method.
			</summary> 
			<param name="fetches"> List of fetch requests to be completed. </param>
			<param name="critical"> true to set high priority for the intersection task, false - to set normal priority. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.wait">
			<summary>
			Waits for completion of the fetch operation. As the operation is completed you can obtain necessary data via get*() methods.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeFetch.wait(Unigine.Vector{Unigine.Ptr{Unigine.LandscapeFetch},int,Unigine.VectorAllocator})">
			<summary>
			Waits for completion of the specified fetch operations. As the operations are completed you can obtain necessary data via get*() methods.
			</summary> 
			<param name="fetches"> List of fetch requests to be completed. </param> 
		</member>
		<member name="M:Unigine.LandscapeFetch.isAsyncCompleted">
			<summary>
			Returns a value indicating if async operation is completed. As the operation is completed you can obtain necessary data via get*() methods.
			</summary>  
			<returns>true if async operation is completed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.addStartCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be called on beginning of the fetch process. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a fetch start callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added fetch start callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.removeStartCallback(void)">
			<summary>
			Removes the specified callback from the list of file fetch start callbacks.
			</summary> 
			<param name="id"> Start callback ID obtained when adding it. </param> 
			<returns>True if the fetch start callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.clearStartCallback">
			<summary>
			Clears all added fetch start callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeFetch.addEndCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be called on fetch completion. The signature of the callback function must be as follows:						You can set a callback function as follows:						Example: Setting a fetch completion callback function for a certain class:
			</summary> 
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added fetch end callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.removeEndCallback(void)">
			<summary>
			Removes the specified callback from the list of file fetch end callbacks.
			</summary> 
			<param name="id"> End callback ID obtained when adding it. </param> 
			<returns>True if the fetch end callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.LandscapeFetch.clearEndCallback">
			<summary>
			Clears all added fetch end callbacks.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeImages.#ctor(Unigine.Math.ivec2)">
			<summary>
			Creates a new LandscapeImages object to store the data for a terrain area of the specified resolution.
			</summary> 
			<param name="resolution"> Two-component vector containing image resolution along X and Y axes. </param> 
			<returns>LandscapeImages instance - a data container for a terrain area of the specified size.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.getHeight">
			<summary>
			Returns height data as an image.
			</summary>  
			<returns>Image (R32F) containing height data.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.getAlbedo">
			<summary>
			Returns albedo data as an RGBA8 image. Opacity data is stored in the alpha-channel.
			</summary>  
			<returns>Image (RGBA8) containing albedo data.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.getMask(int)">
			<summary>
			Returns mask data as an RGBA8 image.Each detail mask can be represented by a single-channel image. For optimization purposes detail mask data is stored in blocks - RGBA8 images (each containing 4 masks, one mask per each channel). There are 5 blocks, as the terrain has 20 detail masks available. Thus, the data of the 9th detail mask shall be stored in the R-channel of the third block (index = 2).
			</summary> 
			<param name="num"> Masks data block index. </param> 
			<returns>Image (RGBA8) containing mask data.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.getOpacityHeight">
			<summary>
			Returns opacity information for height data as an R32F image.
			</summary>  
			<returns>Image (R32F) containing opacity information for height data.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.getOpacityMask(int)">
			<summary>
			Returns opacity information for mask data as an RGBA8 image. Each mask can be represented by a single-channel image. For optimization purposes opacity information for mask data is stored in blocks - RGBA8 images (each containing 4 masks, one mask per each channel). There are 5 blocks, as the terrain has 20 detail masks available. Thus, the data of the 9th detail mask shall be stored in the R-channel of the third block (index = 2).
			</summary> 
			<param name="num"> Masks data block index. </param> 
			<returns>Image (RGBA8) containing opacity information for mask data.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.get(int)">
			<summary>
			Returns the image of the specified type.
			</summary> 
			<param name="type"> Landscape map data type identifier. One of the LANDSCAPE_TYPE_FILE_DATA_* values. </param> 
			<returns>Image of the specified type.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.getResolution">
			<summary>
			Returns the current image resolution.
			</summary>  
			<returns>Two-component vector containing image resolution along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.resize(Unigine.Math.ivec2)">
			<summary>
			Sets a new image resolution.
			</summary> 
			<param name="new_resolution"> Two-component vector containing new image resolution along X and Y axes to be set. </param> 
		</member>
		<member name="M:Unigine.LandscapeImages.copy(Unigine.Ptr{Unigine.LandscapeImages})">
			<summary>
			Copies this LandscapeImages buffer to the specified one (all data layers).
			</summary> 
			<param name="image"> Destination LandscapeImages buffer to which this one is to be copied. </param> 
			<returns>Destination LandscapeImages buffer.</returns>
		</member>
		<member name="M:Unigine.LandscapeImages.clone">
			<summary>
			Clones the LandscapeImages buffer (all data layers).
			</summary>  
			<returns>Cloned LandscapeImages buffer.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.#ctor(Unigine.Math.ivec2)">
			<summary>
			Creates a new LandscapeTextures object to store the data for a terrain area of the specified resolution.
			</summary> 
			<param name="resolution"> Two-component vector containing texture resolution along X and Y axes. </param> 
		</member>
		<member name="M:Unigine.LandscapeTextures.getHeight">
			<summary>
			Returns height data as an R32F texture.
			</summary>  
			<returns>Texture (R32F) containing height data.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getAlbedo">
			<summary>
			Returns albedo data as an RGBA8 texture. Opacity data is stored in the alpha-channel.
			</summary>  
			<returns>Texture (RGBA8) containing albedo data.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getMask(int)">
			<summary>
			Returns mask data as an RGBA8 texture.Each detail mask can be represented by a single-channel texture. For optimization purposes detail mask data is stored in blocks - RGBA8 textures (each containing 4 masks, one mask per each channel). There are 5 blocks, as the terrain has 20 detail masks available. Thus, the data of the 9th detail mask shall be stored in the R-channel of the third block (index = 2).
			</summary> 
			<param name="num"> Masks data block index. </param> 
			<returns>Texture (RGBA8) containing mask data.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getOpacityHeight">
			<summary>
			Returns opacity information for height data as an R32F texture.
			</summary>  
			<returns>Texture (R32F) containing opacity information for height texture.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getOpacityMask(int)">
			<summary>
			Returns opacity information for mask data as an RGBA8 texture. Each mask can be represented by a single-channel texture. For optimization purposes opacity information for mask data is stored in blocks - RGBA8 textures (each containing 4 masks, one mask per each channel). There are 5 blocks, as the terrain has 20 detail masks available. Thus, the data of the 9th detail mask shall be stored in the R-channel of the third block (index = 2).
			</summary> 
			<param name="num"> Masks data block index. </param> 
			<returns>Texture (RGBA8) containing opacity information for mask data.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.get(int)">
			<summary>
			Returns the texture of the specified type.
			</summary> 
			<param name="type"> Landscape map data type identifier. One of the LANDSCAPE_TYPE_FILE_DATA_* values. </param> 
			<returns>Texture of the specified type.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getRenderTarget">
			<summary>
			Returns the render target containing terrain data.
			</summary>  
			<returns>Render target containing terrain data.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getResolution">
			<summary>
			Returns the current texture resolution.
			</summary>  
			<returns>Two-component vector containing texture resolution along X and Y axes.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.getNumMipmaps">
			<summary>
			Returns the total number of mipmaps for the textures (maximum value among all data layers).
			</summary>  
			<returns>Total number of mipmaps for the textures.</returns>
		</member>
		<member name="M:Unigine.LandscapeTextures.createMipmaps">
			<summary>
			Generates mipmaps for the textures of all data layers.
			</summary>  
		</member>
		<member name="M:Unigine.LandscapeTextures.clearBuffers">
			<summary>
			Clears all levels of the textures of all data layers (fills all elements with 0-values).
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshStatic.#ctor(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			ObjectMeshStatic constructor. Creates a new mesh object from a given file.
			</summary> 
			<param name="mesh"> A mesh smart pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.ObjectMeshStatic(char,bool)">
			<summary>
			ObjectMeshStatic constructor. Creates a new mesh object from a given file.
			</summary> 
			<param name="path"> Path to the mesh file. </param>
			<param name="v"> A variable of one of the following types:Mesh mesh - The source mesh.string name - The path to the .mesh file. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to true (1), so a copy of the mesh geometry will be created and changes won't be applied. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setCIndex(int,int,int)">
			<summary>
			Sets the new coordinate index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices for the given surface.To get the total number of coordinate indices for the given surface, use the getNumCIndices() method. </param>
			<param name="index"> Coordinate index to be set in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getCIndex(int,int) const">
			<summary>
			Returns the coordinate index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices for the given surface.To get the total number of coordinate indices for the given surface, use the getNumCIndices() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Coordinate index.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setColor(int,Unigine.Math.vec4,int)">
			<summary>
			Sets the color for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex color entries of the given surface.To get the total number of vertex color entries for the surface, call the getNumColors() method. </param>
			<param name="color"> Vertex color to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getColor(int,int) const">
			<summary>
			Returns the color of the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex color entries of the given surface.To get the total number of vertex color entries for the surface, call the getNumColors() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Vertex color.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mesh into the destination mesh. For example, you can obtain geometry of the static mesh and then change it:
			</summary> 
			<param name="mesh"> Destination mesh. </param> 
			<returns>true if the mesh is copied successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setMesh(Unigine.Ptr{Unigine.Mesh},bool)">
			<summary>
			Copies a given source mesh into the current mesh. For example, you can copy a mesh into another one as follows:
			</summary> 
			<param name="mesh"> Source mesh to be copied. </param>
			<param name="unique"> Unique flag used when you create several objects out of a single Mesh instance :false (0) - An instance of source mesh geometry is created. If the source geometry is changed at runtime, its instances will be changed as well.true (1) - A copy of source mesh geometry is created and changes made to the source geometry do not affect the mesh. </param> 
			<returns>true if the mesh is copied successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setMeshName(char)">
			<summary>
			Sets the new path to the mesh. Does not update mesh immediately using the new path, unlike the setMeshNameForce() method
			</summary> 
			<param name="name"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setMeshNameForce(char)">
			<summary>
			Sets the new path to the mesh and forces mesh creation using the new path. The new mesh is created from the specified path immediately with the unique flag set to 0.
			</summary> 
			<param name="path"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getMeshName const">
			<summary>
			Returns the path to the current mesh file.
			</summary>  
			<returns>Path to the mesh file.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getMeshSurface(Unigine.Ptr{Unigine.Mesh},int,int) const">
			<summary>
			Copies the specified mesh surface into the destination mesh.
			</summary> 
			<param name="mesh"> Destination mesh pointer to copy a surface into. </param>
			<param name="surface"> Number of the mesh surface to be copied. </param>
			<param name="target"> Number of the surface target to be copied. The default value is -1 (all targets). </param> 
			<returns>Number of the added mesh surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNormal(int,int,int) const">
			<summary>
			Returns the normal for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface target.Vertex normals are calculated using vertex tangents. To get the total number of vertex tangent entries for the surface target, call the getNumTangents() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex normal.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumCIndices(int) const">
			<summary>
			Returns the number of coordinate indices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of coordinate indices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumColors(int) const">
			<summary>
			Returns the total number of vertex color entries for the given surface.					Colors are specified for triangle vertices.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Number of vertex color entries.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumSurfaceTargets(int) const">
			<summary>
			Returns the number of surface targets for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of surface targets.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumTangents(int) const">
			<summary>
			Returns the number of vertex tangent entries of the given mesh surface.					Tangents are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of surface tangent vectors.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setNumTexCoords0(int,int)">
			<summary>
			Sets the number of the first UV map texture coordinates for the given mesh surface.					First UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="num"> Number of the first UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumTexCoords0(int) const">
			<summary>
			Returns the number of the first UV map texture coordinates for the given mesh surface.					First UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the first UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setNumTexCoords1(int,int)">
			<summary>
			Sets the number of the second UV map texture coordinates for the given mesh surface.					Second UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="num"> Number of the second UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumTexCoords1(int) const">
			<summary>
			Returns the number of the second UV map texture coordinates for the given mesh surface.					Second UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the second UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumTIndices(int) const">
			<summary>
			Returns the number of triangle indices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of triangle indices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getNumVertex(int) const">
			<summary>
			Returns the number of coordinate vertices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the surface vertices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getSurfaceTargetName(int,int) const">
			<summary>
			Returns the name of the target for the given mesh surface by the target number.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Number of the surface target. </param> 
			<returns>Surface target name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setSurfaceTransform(Unigine.Math.mat4,int,int)">
			<summary>
			Updates the transformation of the specified mesh surface.
			</summary> 
			<param name="transform"> Transformation matrix. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Number of the surface target. The default value is -1 (all targets). </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setTangent(int,Unigine.Math.quat,int,int)">
			<summary>
			Sets the new tangent for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface.To get the total number of vertex tangent entries for the surface, call the getNumTangents() method. </param>
			<param name="tangent"> Tangent to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getTangent(int,int,int) const">
			<summary>
			Returns the tangent for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface.To get the total number of vertex tangent entries for the surface, call the getNumTangents() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex tangent.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setTexCoord0(int,Unigine.Math.vec2,int)">
			<summary>
			Sets first UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of first UV map texture coordinate entries of the given surface.To get the total number of first UV map texture coordinate entries for the surface, call the getNumTexCoords0() method. </param>
			<param name="texcoord"> First UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getTexCoord0(int,int) const">
			<summary>
			Returns first UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of first UV map texture coordinate entries of the given surface.To get the total number of first UV map texture coordinate entries for the surface, call the getNumTexCoords0() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>First UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setTexCoord1(int,Unigine.Math.vec2,int)">
			<summary>
			Sets second UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of second UV map texture coordinate entries of the given surface.To get the total number of second UV map texture coordinate entries for the surface, call the getNumTexCoords1() method. </param>
			<param name="texcoord"> Second UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getTexCoord1(int,int) const">
			<summary>
			Returns second UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of second UV map texture coordinate entries of the given surface.To get the total number of second UV map texture coordinate entries for the surface, call the getNumTexCoords1() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Second UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setTIndex(int,int,int)">
			<summary>
			Sets the new triangle index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of triangle indices for the given surface. </param>
			<param name="index"> Triangle index to be set in the range from 0 to the total number of triangle vertices for the given surface. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getTIndex(int,int) const">
			<summary>
			Returns the triangle index for the given surface by using the index number.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of triangle indices for the given surface. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Triangle index.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setVertex(int,Unigine.Math.vec3,int,int)">
			<summary>
			Sets the coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="vertex"> Vertex coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getVertex(int,int,int) const">
			<summary>
			Returns coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.addEmptySurface(char,int,int)">
			<summary>
			Appends a new empty surface to the current mesh.
			</summary> 
			<param name="name"> The name of the new surface. </param>
			<param name="num_vertex"> Number of the new surface vertices. </param>
			<param name="num_indices"> Number of the new surface indices. </param> 
			<returns>Number of the appended surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.addMeshSurface(int,Unigine.Ptr{ObjectMeshStatic},int,int)">
			<summary>
			Appends a new mesh surface to the current mesh.
			</summary> 
			<param name="dest_surface"> Number of the surface to copy the mesh to. </param>
			<param name="v0"> Argument of one of the following types:string name - The name of the new surface.int dest_surface - The number of the new surface. </param>
			<param name="v1"> Argument of one of the following types:Mesh mesh - The source mesh to copy the surface from.ObjectMeshStatic mesh - The source mesh to copy the surface from. </param>
			<param name="mesh"> Source ObjectMeshStatic to copy a surface from. </param>
			<param name="surface"> Mesh surface number to copy. </param>
			<param name="target"> Mesh target number to copy. The default value is -1 (all targets). </param> 
			<returns>Number of the last added surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.addMeshSurface(char,Unigine.Ptr{Unigine.Mesh},int,int)">
			<summary>
			Appends a new mesh surface to the current mesh.
			</summary> 
			<param name="name"> Name of the new surface of the current mesh. </param>
			<param name="mesh"> Mesh pointer to copy a surface from. </param>
			<param name="surface"> Mesh surface number to copy. </param>
			<param name="target"> Mesh target number to copy. The default value is -1 (all targets). </param> 
			<returns>Number of the last added surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.addMeshSurface(char,Unigine.Ptr{ObjectMeshStatic},int,int)">
			<summary>
			Appends a new mesh surface to the current mesh.
			</summary> 
			<param name="name"> Name of the new surface of the current mesh. </param>
			<param name="mesh"> Mesh pointer to copy a surface from. </param>
			<param name="surface"> Mesh surface number to copy. </param>
			<param name="target"> Mesh target number to copy. The default value is -1 (all targets). </param> 
			<returns>Number of the last added surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.addSurfaceTarget(int,char)">
			<summary>
			Adds a new target to the specified surface of the current mesh.
			</summary> 
			<param name="surface"> Surface number. </param>
			<param name="name"> The name of the new target. </param> 
			<returns>Number of the added target.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.createMesh(char,bool)">
			<summary>
			Creates the static mesh with the specified parameters.
			</summary> 
			<param name="path"> Path to the mesh file. </param> 
			<returns>true if the mesh is created successfully; otherwise - false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.findSurfaceTarget(char,int) const">
			<summary>
			Searches for the target number by the target name.
			</summary> 
			<param name="name"> The name of the target. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Target number if it is exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.flushMesh">
			<summary>
			Flushes the mesh geometry into the video memory.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshStatic.loadMesh(char)">
			<summary>
			Loads the mesh for the current mesh from the .mesh file. This function doesn't change the mesh name.
			</summary> 
			<param name="path"> Path to the .mesh file. </param> 
			<returns>true if the mesh is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.saveMesh(char) const">
			<summary>
			Saves the mesh to the .mesh format.					Before saving the mesh to a file, you should set a name for it via the setMeshName() method.
			
			</summary> 
			<param name="path"> Path to the file, to which the mesh is to be saved. </param> 
			<returns>true if the mesh is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Node type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.updateSurfaceBounds(int)">
			<summary>
			Updates mesh bounds. This method is to be called to recalculate bounds after changing a mesh surface (e.g. modifying positions of coordinate vertices).
			</summary> 
			<param name="surface"> Surface number (use -1 for all surfaces). </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getMeshStatic const">
			<summary>
			Returns a MeshStatic class instance for the object.
			</summary>  
			<returns>MeshStatic class instance for the object.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.isFlushed const">
			<summary>
			Returns a value indicating if vertex data of the mesh was flushed (create/upload operation) to video memory.
			</summary>  
			<returns>true if vertex data of the mesh was flushed (create/upload operation) to video memory; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setLightmapEnabled(bool,int)">
			<summary>
			Sets a value indicating if lightmapping is to be enabled for the surface with the specified number.
			</summary> 
			<param name="enabled"> true to enable lightmapping for the surface with the specified number, or false - to disable. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.isLightmapEnabled(int) const">
			<summary>
			Returns a value indicating if lightmapping is enabled for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>true if lightmapping is enabled for the surface with the specified number;otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setLightmapMode(ObjectMeshStatic::LIGHTMAP_MODE,int)">
			<summary>
			Sets a new lightmap mode for the surface with the specified number.
			</summary> 
			<param name="mode"> New lightmap mode to be set for the surface with the specified number. One of the LIGHTMAP_MODE values. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getLightmapMode(int) const">
			<summary>
			Returns the current lightmap mode for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Current lightmap mode for the surface with the specified number. One of the LIGHTMAP_MODE values.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setLightmapSourceSurface(int,int)">
			<summary>
			Sets a new source mesh surface number for the surface with the specified number. A lightmap texture generated for the source mesh surface shall be used for the specified surface (available only when the lightmap mode for the surface is set to LIGHTMAP_MODE_SURFACE mode. This can be used as optimization for LODs.
			</summary> 
			<param name="source_surface"> Source mesh surface number. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getLightmapSourceSurface(int) const">
			<summary>
			Returns the current source mesh surface number for the surface with the specified number. A lightmap texture generated for the source mesh surface is used for the specified surface (available only when the lightmap mode for the surface is set to LIGHTMAP_MODE_SURFACE mode. This can be used as optimization for LODs.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Source mesh surface number.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.isLightmapCompression(int)">
			<summary>
			Returns a value indicating if the lightmap texture baked for the surface with the specified number is to be compressed. Compressed lightmaps are lightweight, but please note that some compression artifacts may appear.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>true if the lightmap texture baked for the surface with the specified number is to be compressed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setLightmapCompression(bool,int)">
			<summary>
			Sets a value indicating if the lightmap texture baked for the surface with the specified number is to be compressed. Compressed lightmaps are lightweight, but please note that some compression artifacts may appear.
			</summary> 
			<param name="enabled"> true to enable compression for the lightmap texture baked for the surface with the specified number, or false - to disable. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setLightmapQuality(ObjectMeshStatic::LIGHTMAP_QUALITY,int)">
			<summary>
			Sets a new lightmap baking quality preset for the surface with the specified number.
			</summary> 
			<param name="quality"> New lightmap baking quality preset to be used for the surface with the specified number. One of the LIGHTMAP_QUALITY values. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getLightmapQuality(int) const">
			<summary>
			Returns the current lightmap baking quality preset for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Current lightmap baking quality preset for the surface with the specified number. One of the LIGHTMAP_QUALITY values.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setLightmapTexturePath(char,int)">
			<summary>
			Sets a new path to the baked lightmap texture to be used for the surface with the specified number. You can use this method to specify a lightmap texture generated in a third-party software.
			</summary> 
			<param name="path"> Path to the baked lightmap texture to be used for the surface with the specified number. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getLightmapTexturePath(int) const">
			<summary>
			Returns the path to the baked lightmap texture currently used for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Path to the baked lightmap texture currently used for the surface with the specified number.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setSurfaceCustomTextureEnabled(bool,int)">
			<summary>
			Sets a value indicating if a custom texture is to be used for the surface with the specified number.
			</summary> 
			<param name="enabled"> true to enable using the custom texture for the surface with the specified number, or false - to disable. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.isSurfaceCustomTextureEnabled(int) const">
			<summary>
			Returns a value indicating if a custom texture is to be used for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>true if a custom texture is to be used for the surface with the specified number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setSurfaceCustomTextureMode(ObjectMeshStatic::SURFACE_CUSTOM_TEXTURE_MODE,int)">
			<summary>
			Sets a new mode for the custom texture of the surface with the specified number. This mode defines the source of the custom texture for the surface: either use a unique custom texture, or use a custom texture that is assigned to another surface of the mesh.
			</summary> 
			<param name="mode"> Custom texture mode to be set for the surface with the specified number. One of the SURFACE_CUSTOM_TEXTURE_MODE_ values. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getSurfaceCustomTextureMode(int) const">
			<summary>
			Returns the current mode for the custom texture of the surface with the specified number. This mode defines the source of the custom texture for the surface: either use a unique custom texture, or use a custom texture that is assigned to another surface of the mesh.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Current custom texture mode for the surface with the specified number. One of the SURFACE_CUSTOM_TEXTURE_MODE_ values.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setSurfaceCustomTextureSourceSurface(int,int)">
			<summary>
			Sets a new source mesh surface number for the surface with the specified number. A custom texture generated for the source mesh surface shall be used for the specified surface (available only when the custom texture mode for the surface is set to SURFACE_CUSTOM_TEXTURE_MODE_SURFACE. This can be used as optimization for LODs.
			</summary> 
			<param name="source_surface"> Source mesh surface number. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getSurfaceCustomTextureSourceSurface(int) const">
			<summary>
			Returns the current source mesh surface number for the surface with the specified number. A custom texture generated for the source mesh surface is used for the specified surface (available only when the custom texture mode for the surface is set to SURFACE_CUSTOM_TEXTURE_MODE_SURFACE. This can be used as optimization for LODs.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Source mesh surface number.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setSurfaceCustomTexturePath(char,int)">
			<summary>
			Sets a new path to the custom texture to be used for the surface with the specified number. You can use this method to specify a texture generated in a third-party software.
			</summary> 
			<param name="path"> Path to the custom texture to be assigned to the surface with the specified number. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getSurfaceCustomTexturePath(int) const">
			<summary>
			Returns the path to the custom texture currently assigned to the surface with the specified index.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Path to the custom texture currently assigned to the surface with the specified number.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshStatic.setSurfaceCustomTexture(Unigine.Ptr{Unigine.Texture},int)">
			<summary>
			Sets a new texture to be used as a custom texture for the surface with the specified number. You can use this method to set any texture.
			</summary> 
			<param name="texture"> Texture to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshStatic.getSurfaceCustomTexture(int) const">
			<summary>
			Returns the texture currently used as a custom texture for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Texture used as a custom texture for the specified surface.</returns>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_QUALITY_ULTRA">
			<summary>
			Ultra quality preset for lightmaps.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_QUALITY_HIGH">
			<summary>
			High quality preset for lightmaps.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_QUALITY_MEDIUM">
			<summary>
			Medium quality preset for lightmaps.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_QUALITY_LOW">
			<summary>
			Low quality preset for lightmaps.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_QUALITY_DRAFT">
			<summary>
			Draft quality preset for lightmaps.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_QUALITY_GLOBAL">
			<summary>
			Global quality preset set in the Bake Lighting settings.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_MODE_SURFACE">
			<summary>
			Reuse an already baked lightmap texture from another surface. Can be used for LODs.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_MODE_CUSTOM">
			<summary>
			Use a custom lightmap texture for the surface.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.LIGHTMAP_MODE_UNIQUE">
			<summary>
			Bake a unique lightmap texture for the surface.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.SURFACE_CUSTOM_TEXTURE_MODE_UNIQUE">
			<summary>
			Use a unique custom texture for the surface.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshStatic.SURFACE_CUSTOM_TEXTURE_MODE_SURFACE">
			<summary>
			Use the custom texture from another surface. This option is intended for use with LODs having the same UV maps.
		</summary>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.#ctor(char,bool)">
			<summary>
			ObjectMeshCluster constructor.
			</summary> 
			<param name="path"> Name of the mesh file. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to true (1), so a copy of the mesh geometry will be created and changes won't be applied. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.setFadeDistance(float)">
			<summary>
			Sets the distance up to which meshes handled by the mesh cluster will be fading out (that is, fewer meshes will be rendered instead of all). The distance is measured starting from the visible distance. The default is 0. Using fade distance allows the objects to disappear one by one until up to the fade distance only a few left. It makes the disappearing smooth and much less noticeable.
			</summary> 
			<param name="distance"> Fading distance for meshes in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getFadeDistance const">
			<summary>
			Returns the distance up to which meshes handled by the mesh cluster will be fading out. The default is 0.
			</summary>  
			<returns>Fading distance for meshes in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Copies the source mesh into the current mesh.
			</summary> 
			<param name="mesh"> Source mesh to be copied. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mesh into the target mesh.
			</summary> 
			<param name="mesh"> Target mesh. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.setMeshName(char)">
			<summary>
			Sets a new path to the mesh handled by the mesh cluster. Does not update mesh immediately using the new path, unlike the setMeshNameForce() method.
			</summary> 
			<param name="name"> Path to the mesh to be set. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.setMeshNameForce(char)">
			<summary>
			Sets a new path to the mesh handled by the mesh cluster and forces mesh creation using the new path. The new mesh is created from the specified path immediately with the unique flag set to 0.
			</summary> 
			<param name="name"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getMeshName const">
			<summary>
			Returns the path to the mesh handled by a mesh cluster.
			</summary>  
			<returns>Path to the mesh.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.addMeshTransform">
			<summary>
			Adds a new mesh instance transformation to the cluster. To set the new added transformation pass the return value of this method to the setMeshTransform() method.
			</summary>  
			<returns>Number of the last added mesh instance.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.setMeshTransform(int,Unigine.Math.mat4)">
			<summary>
			Sets the transformation for the given mesh instance.
			</summary> 
			<param name="num"> Mesh instance number. </param>
			<param name="transform"> Mesh transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getMeshTransform(int) const">
			<summary>
			Returns the transformation of the given mesh instance.
			</summary> 
			<param name="num"> Mesh instance number. </param> 
			<returns>Mesh transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.removeMeshTransform(int)">
			<summary>
			Removes the transformation of the specified mesh instance from the cluster.
			</summary> 
			<param name="num"> Mesh instance number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.removeMeshTransformFast(int)">
			<summary>
			Removes the transformation of the specified mesh instance from the cluster.
			</summary> 
			<param name="num"> Mesh instance number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.updateSpatialTree">
			<summary>
			Updates the spatial tree of the mesh cluster. Spatial tree is updated in the next frame, this method can be used to update the tree immediately.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getNumMeshes const">
			<summary>
			Returns the total number of meshes handled by the mesh cluster.
			</summary>  
			<returns>Number of meshes.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getNumSurfaceTargets(int) const">
			<summary>
			Returns the total number of surface targets.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Total number of surface targets.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getSurfaceTargetName(int,int) const">
			<summary>
			Returns the name of a given surface target.
			</summary> 
			<param name="surface"> Surface number. </param>
			<param name="target"> Target number. </param> 
			<returns>Target name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.setVisibleDistance(float)">
			<summary>
			Sets the distance up to which meshes handled by the mesh cluster will be rendered. The default is infinity (in this case, fade distance will be ignored).
			</summary> 
			<param name="distance"> Visibility distance for meshes in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getVisibleDistance const">
			<summary>
			Returns the distance up to which meshes handled by the mesh cluster are rendered. The default is infinity (in this case, fade distance is ignored).
			</summary>  
			<returns>Visibility distance for meshes in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.clearMeshes">
			<summary>
			Deletes all meshes currently baked into mesh cluster.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshCluster.createMesh(char,bool)">
			<summary>
			Creates a mesh.
			</summary> 
			<param name="path"> Path to the mesh file. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to 1, so a copy of the mesh geometry will be created and changes won't be applied. </param> 
			<returns>true if the mesh is created successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.createMeshes(Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Creates meshes is accordance with the transformations vector (world coordinates) and bakes them into the cluster. All baked meshes are identical to the source mesh and have the same material applied to their surfaces.
			</summary> 
			<param name="transforms"> Transformations vector in world coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.appendMeshes(Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Appends new meshes with transformations stored in the specified vector (world coordinates) and bakes them into the cluster. All baked meshes are identical to the source mesh and have the same material applied to their surfaces.
			</summary> 
			<param name="transforms"> Transformations vector in world coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshCluster.findSurfaceTarget(char,int) const">
			<summary>
			Searches for a surface target with a given name.
			</summary> 
			<param name="name"> Target name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Target number if it exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.flushMesh">
			<summary>
			Flushes the mesh geometry into the video memory.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshCluster.loadMesh(char)">
			<summary>
			Loads the mesh for the current mesh from the .mesh file. This function doesn't change the mesh name.
			</summary> 
			<param name="path"> Path to the .mesh file. </param> 
			<returns>true if the mesh is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.saveMesh(char)">
			<summary>
			Saves the cluster mesh to a .mesh file.
			</summary> 
			<param name="path"> Path to the .mesh file. </param> 
			<returns>true if the mesh is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Node type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.removeClusterTransforms(Unigine.Math.WorldBoundBox)">
			<summary>
			Removes cluster meshes, found within the specified bounding box, from the cluster.
			</summary> 
			<param name="bb"> Bounding box defining the area, within which the cluster meshes are to be removed from the cluster. </param> 
			<returns>true if cluster meshes, found within the specified bounding box are successfully removed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.removeClusterTransformsFromSphere(Unigine.Math.WorldBoundSphere)">
			<summary>
			Removes cluster meshes, found within the specified bounding sphere, from the cluster.
			</summary> 
			<param name="bb"> Bounding sphere defining the area, for which the transformations of cluster meshes are to be collected. </param> 
			<returns>true if cluster meshes, found within the specified bounding sphere are successfully removed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.detachClusterTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator})">
			<summary>
			Detaches cluster meshes found within the area specified by the given bounding box from the cluster and puts their transformations (local coordinates) to the specified buffer.
			</summary> 
			<param name="bb"> Bounding box defining the area, within which the cluster meshes are to be detached from the cluster. </param>
			<param name="transforms"> Buffer to store transformations of detached cluster meshes. </param> 
			<returns>true if cluster meshes have been detached from the cluster; otherwise false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.detachClusterWorldTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Detaches cluster meshes found within the area specified by the given bounding box from the cluster and puts their transformations (world coordinates) to the specified buffer.
			</summary> 
			<param name="bb"> Bounding box defining the area, within which the cluster meshes are to be detached from the cluster. </param>
			<param name="transforms"> Buffer to store transformations of detached cluster meshes. </param> 
			<returns>true if cluster meshes have been detached from the cluster; otherwise false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.detachClusterWorldTransformsFromSphere(Unigine.Math.WorldBoundSphere,Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Detaches cluster meshes found within the area specified by the given bounding box from the cluster and puts their transformations (world coordinates) to the specified buffer.
			</summary> 
			<param name="bb"> Bounding sphere defining the area, for which the transformations of cluster meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of cluster meshes, in world coordinates. </param> 
			<returns>true if cluster meshes have been detached from the cluster; otherwise false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getClusterTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator})">
			<summary>
			Collects transformations (local coordinates) for all cluster meshes within the area specified by the given bounding box and puts them to the specified buffer.
			</summary> 
			<param name="bounds"> Bounding box defining the area, for which the transformations of cluster meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of cluster meshes. </param> 
			<returns>true, if there are transformations of cluster meshes; or false, if there are no transformations of cluster meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getClusterWorldTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Collects transformations (world coordinates) for all cluster meshes within the area specified by the given bounding box and puts them to the specified buffer.
			</summary> 
			<param name="bounds"> Bounding box defining the area, for which the transformations of cluster meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of cluster meshes, in world coordinates. </param> 
			<returns>true, if there are transformations of cluster meshes; or false, if there are no transformations of cluster meshes within the specified area.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getClusterWorldTransformsFromSphere(Unigine.Math.WorldBoundSphere,Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Collects transformations (world coordinates) for all cluster meshes within the area specified by the given bounding sphere and puts them to the specified buffer.
			</summary> 
			<param name="bounds"> Bounding sphere defining the area, for which the transformations of cluster meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of cluster meshes, in world coordinates. </param> 
			<returns>true, if there are transformations of cluster meshes; or false, if there are no transformations of cluster meshes within the specified area.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshCluster.getInstancesFromSphere(Unigine.Math.WorldBoundSphere,Unigine.Vector{int,int,Unigine.VectorAllocator})">
			<summary>
			Returns the indices of instances inside the bounding sphere.
			</summary> 
			<param name="bb"> Bounding sphere defining the area within which instances are to be collected. </param>
			<param name="instances"> Vector containing instance indices. </param> 
			<returns>true, if there is at least one instance inside the bounding sphere; or false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.#ctor(char,bool)">
			<summary>
			ObjectMeshClutter constructor.
			</summary> 
			<param name="arg1"> Name of the mesh file. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to true (1), so a copy of the mesh geometry will be created and changes won't be applied. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setAngle(float)">
			<summary>
			Sets the angle cosine that defines the slope steepness appropriate for positioning meshes.
			</summary> 
			<param name="angle"> Slope angle cosine. The provided value will be clipped in range [0;1]. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getAngle const">
			<summary>
			Returns the current angle cosine that defines the slope steepness appropriate for positioning meshes.
			</summary>  
			<returns>Slope angle cosine.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setCollision(bool)">
			<summary>
			Sets a value indicating if collisions with the object should be taken into account.					If the collision parameter is set to 0, the new geometry will never be generated by collision detection request.
			</summary> 
			<param name="collision"> true to take collisions into account and make the object important for physics; false to allow collisions only with already generated geometry. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getCollision const">
			<summary>
			Returns a value indicating if collisions with the object should be taken into account.					If the return value is false the new geometry will never be generated by collision detection request.
			</summary>  
			<returns>1 if collisions are taken into account; 0 if collisions are allowed only with already generated geometry.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setDensity(float)">
			<summary>
			Sets the density factor that defines the number of meshes per square unit.
			</summary> 
			<param name="density"> Density factor. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getDensity const">
			<summary>
			Returns the current density factor that defines the number of meshes per square unit.
			</summary>  
			<returns>Density factor.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setFadeDistance(float)">
			<summary>
			Sets the distance up to which meshes scattered by the mesh clutter will be fading out (that is, fewer meshes will be rendered instead of all). The distance is measured starting from the visible distance.					In order for a fade distance to be applied, visibility distance should not be infinite.
			</summary> 
			<param name="distance"> Distance of fading for meshes in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getFadeDistance const">
			<summary>
			Returns the current distance up to which meshes scattered by the mesh clutter are fading out (that is, fewer meshes will be rendered instead of all). The distance is measured starting from the visible distance.					In order for a fade distance to be applied, visibility distance should not be infinite.
			</summary>  
			<returns>Distance of nodes fading in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setIntersection(bool)">
			<summary>
			Sets a value indicating whether meshes should be scattered upon the ground (along its relief): either the terrain or a mesh set as a parent node.
			</summary> 
			<param name="intersection"> Positive number to enable intersection; 0 to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getIntersection const">
			<summary>
			Returns a value indicating whether meshes are scattered upon the ground (along its relief): either the terrain or a mesh set as a parent node.
			</summary>  
			<returns>1 if intersection is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskFlipX(int)">
			<summary>
			Flip the mask by X axis.
			</summary> 
			<param name="value"> Positive value to flip the mask; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskFlipX const">
			<summary>
			Returns a flag indicating if a mask is flipped by X axis.
			</summary>  
			<returns>Positive value if the mask is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskFlipY(int)">
			<summary>
			Flip the mask by Y axis.
			</summary> 
			<param name="value"> Positive value to flip the mask; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskFlipY const">
			<summary>
			Returns a flag indicating if a mask is flipped by Y axis.
			</summary>  
			<returns>Positive value if the mask is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskImage(Unigine.Ptr{Unigine.Image},bool)">
			<summary>
			Sets an image (in R8 format) as a mask, that defines placement of meshes.
			</summary> 
			<param name="image"> Image smart pointer. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all mesh clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
			<returns>1 if the mask image is successfully set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Writes the image that is currently used as a mask for placement of meshes to the given buffer.
			</summary> 
			<param name="image"> Image smart pointer. </param> 
			<returns>1 if the mask image is successfully written into the buffer; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskImageName(char,bool)">
			<summary>
			Sets the path to a mask image (in R8 format) that defines the placement of meshes.
			</summary> 
			<param name="image_name"> Path to the mask image. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all mesh clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskImageName(char)">
			<summary>
			Sets the path to a mask image (in R8 format) that defines the placement of meshes.
			</summary> 
			<param name="name"> Path to the mask image (in R8 format). </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskImageName const">
			<summary>
			Returns the path to a mask image (in R8 format) that defines the placement of meshes.
			</summary>  
			<returns>Path to the mask image.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskInverse(int)">
			<summary>
			Specifies if clutter meshes should be rendered inside or outside the mask mesh contour.
			</summary> 
			<param name="inverse"> 0 to render clutter meshes inside the mask mesh contour; 1 to render them outside. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskInverse const">
			<summary>
			Returns a flag indicating if clutter meshes are rendered inside or outside the mask mesh contour.
			</summary>  
			<returns>0 if clutter meshes are rendered inside the mask mesh contour; 1 if outside.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskMaxValue(int)">
			<summary>
			Sets the maximum value of the mask application range.
			</summary> 
			<param name="value"> Maximum mask value, [0;255]. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskMaxValue const">
			<summary>
			Returns the maximum value of the mask application range.
			</summary>  
			<returns>Maximum mask value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskMesh(Unigine.Ptr{Unigine.Mesh},bool)">
			<summary>
			Sets a mesh to be used as a mask on-the-fly. Limitations:											Before the method is called, another mesh must be set via setMaskMeshName() first.						If the world is reloaded, the mesh set via setMaskMeshName() will be loaded.						If the memory limit is exceeded, the new mesh might be replaced with the mesh set via setMaskMeshName().
			</summary> 
			<param name="mesh"> Pointer to the mesh. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all mesh clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
			<returns>1 if the mesh is set successfully; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mask mesh (if it exists) to the specified target mesh.
			</summary> 
			<param name="mesh"> Pointer to the mesh to copy the current mask mesh to. </param> 
			<returns>1 if mesh mask exists; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskMeshName(char,bool)">
			<summary>
			Sets a mesh to be used as a mask for the mesh clutter. This mesh should be plane.
			</summary> 
			<param name="mesh_name"> Path to the *.mesh file. </param>
			<param name="invalidate"> Invalidate flag. Set true to invalidate all mesh clutter cells; otherwise, set false. All invalidated cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskMeshName(char)">
			<summary>
			Sets a mesh to be used as a mask for the mesh clutter. This mesh should be plane.
			</summary> 
			<param name="name"> Path to the *.mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.createClutterTransforms">
			<summary>
			Creates transformations for all clutter meshes.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskMeshName const">
			<summary>
			Returns the name (path) of the current mesh used as a mask for the mesh clutter. This mesh should be plane.
			</summary>  
			<returns>Path to the *.mesh file.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaskMinValue(int)">
			<summary>
			Sets the minimum value of the mask application range.
			</summary> 
			<param name="value"> Minimum mask value, [0;255]. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaskMinValue const">
			<summary>
			Returns the minimum value of the mask application range.
			</summary>  
			<returns>Minimum mask value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setTerrainMask(int)">
			<summary>
			Sets a new Landscape Terrain mask to be used to define placement of meshes.
			</summary> 
			<param name="mask"> Index of Landscape Terrain mask to be used to define placement of meshes, in the [0; 19] range. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getTerrainMask const">
			<summary>
			Returns the index of the Landscape Terrain mask currently used to define placement of meshes.
			</summary>  
			<returns>Index of the Landscape Terrain mask currently used to define placement of meshes, in the [0; 19] range.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMaxScale(float,float)">
			<summary>
			Sets the scale for meshes in the areas with high density (according to the mask). With the minimum scale it is possible to automatically render, for example, big trees in the center of the forest. A spread value allows you to control the range of scales relative to the mean value.
			</summary> 
			<param name="mean"> Scale mean value. </param>
			<param name="spread"> Maximum spread value to randomly upscale or downscale objects. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaxScaleMean const">
			<summary>
			Returns the scale mean value for meshes in the areas with high density (according to the mask).
			</summary>  
			<returns>Scale mean value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMaxScaleSpread const">
			<summary>
			Returns the scale spread value that controls the range of mesh scales in the areas with high density (according to the mask).
			</summary>  
			<returns>Scale spread value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Copies the source mesh into the current mesh.
			</summary> 
			<param name="mesh"> The source mesh to be copied. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mesh into the source mesh.
			</summary> 
			<param name="mesh"> The source mesh. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMeshesRotation(Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Sets the parameters of pseudo-random rotation of meshes along X, Y and Z axes.
			</summary> 
			<param name="mean"> Mean values of meshes rotation angles, in degrees. </param>
			<param name="spread"> Maximum spread values of meshes rotation angles, in degrees. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMeshesRotationMean const">
			<summary>
			Returns the vector of mean values of meshes rotation along X, Y and Z axes.
			</summary>  
			<returns>Mean values of meshes rotation angles, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMeshesRotationSpread const">
			<summary>
			Returns the vector of spread values of meshes rotation along X, Y and Z axes.
			</summary>  
			<returns>Maximum spread values of meshes rotation angles, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMeshName(char)">
			<summary>
			Sets a path to the mesh scattered by the mesh clutter. Does not update mesh immediately using the new path, unlike the setMeshNameForce() method.
			</summary> 
			<param name="name"> Path to the mesh to be set. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMeshNameForce(char)">
			<summary>
			Sets a new path to the mesh handled by the mesh clutter and forces mesh creation using the new path. The new mesh is created from the specified path immediately with the unique flag set to 0.
			</summary> 
			<param name="name"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMeshName const">
			<summary>
			Returns the name of the mesh scattered by mesh clutter.
			</summary>  
			<returns>Mesh name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setMinScale(float,float)">
			<summary>
			Sets the scale for meshes in the areas with low density (according to the mask). With the minimum scale it is possible to automatically render, for example, small trees at the forest border. A spread value allows you to control the range of scales relative to the mean value.
			</summary> 
			<param name="mean"> Scale mean value. </param>
			<param name="spread"> Maximum spread value to randomly upscale or downscale objects. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMinScaleMean const">
			<summary>
			Returns the scale mean value for meshes in the areas with low density (according to the mask).
			</summary>  
			<returns>Scale mean value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getMinScaleSpread const">
			<summary>
			Returns the scale spread value that controls the range of mesh scales in the areas with low density (according to the mask).
			</summary>  
			<returns>Scale spread value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getNumSurfaceTargets(int) const">
			<summary>
			Returns the total number of surface targets.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Total number of surface targets.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setOffset(float,float)">
			<summary>
			Sets the vertical offset that determines the placement of meshes above or below the surface.
			</summary> 
			<param name="mean"> Mean value of the offset in units. </param>
			<param name="spread"> Spread value of the offset in units. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getOffsetMean const">
			<summary>
			Returns the current mean value of the vertical offset that determines the placement of meshes above or below the surface.
			</summary>  
			<returns>Mean value of the offset in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getOffsetSpread const">
			<summary>
			Returns the current spread value of the vertical offset that determines the placement of meshes above or below the surface.
			</summary>  
			<returns>Spread value of the offset in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setOrientation(bool)">
			<summary>
			Sets a value indicating whether meshes should be oriented along the normals of the ground (either the terrain or a mesh set as a parent node).
			</summary> 
			<param name="orientation"> Positive number to enable orientation; 0 to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getOrientation const">
			<summary>
			Returns a value indicating whether meshes are oriented along the normals of the ground (either the terrain or a mesh set as a parent node).
			</summary>  
			<returns>1 if orientation is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setSeed(int)">
			<summary>
			Sets the seed for pseudo-random positioning of meshes.
			</summary> 
			<param name="seed"> Number used to initialize a pseudo-random sequence. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getSeed const">
			<summary>
			Returns the seed used for pseudo-random positioning of meshes.
			</summary>  
			<returns>Number used to initialize a pseudo-random sequence.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setSizeX(float)">
			<summary>
			Sets the width of the mesh clutter along the X-coordinate.
			</summary> 
			<param name="sizex"> X-coordinate width in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getSizeX const">
			<summary>
			Returns the current width of the mesh clutter along the X-coordinate.
			</summary>  
			<returns>X-coordinate width in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setSizeY(float)">
			<summary>
			Sets the length of the mesh clutter along the Y-coordinate.
			</summary> 
			<param name="sizey"> Y-coordinate length in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getSizeY const">
			<summary>
			Returns the current length of the mesh clutter along the Y-coordinate.
			</summary>  
			<returns>Y-coordinate length in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getSpawnCount const">
			<summary>
			Returns the number of cells to be generated.
			</summary>  
			<returns>Number of cells to be generated if the scene generation is not completed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setStep(float)">
			<summary>
			Sets the step for cells used to render mesh clutter.
			</summary> 
			<param name="step"> Step for clutter cells in units. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getStep const">
			<summary>
			Returns the step for cells used to render meshes scattered by the mesh clutter.
			</summary>  
			<returns>Step for clutter cells in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getSurfaceTargetName(int,int) const">
			<summary>
			Returns the name of a given surface target.
			</summary> 
			<param name="surface"> Surface number. </param>
			<param name="target"> Target number. </param> 
			<returns>Target name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setThreshold(float)">
			<summary>
			Sets the density threshold (for a mask) starting from which meshes are rendered if placed dense enough.
			</summary> 
			<param name="threshold"> Density threshold. The provided value will be clipped in range [0;1]. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getThreshold const">
			<summary>
			Returns the current density threshold (for a mask) starting from which meshes are rendered if placed dense enough.
			</summary>  
			<returns>Density threshold.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setVisibleDistance(float)">
			<summary>
			Sets the distance up to which meshes scattered by the mesh clutter will be rendered.
			</summary> 
			<param name="distance"> Distance of visibility for meshes in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getVisibleDistance const">
			<summary>
			Returns the current distance up to which meshes scattered by the mesh clutter are rendered.
			</summary>  
			<returns>Distance of visibility for meshes in units.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.createMesh(char,bool)">
			<summary>
			Creates the clutter mesh with the specified parameters.
			</summary> 
			<param name="name"> Path to the mesh file. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to 1, so a copy of the mesh geometry will be created and changes won't be applied. </param> 
			<returns>true if the mesh is created successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.findSurfaceTarget(char,int) const">
			<summary>
			Searches for a surface target with a given name.
			</summary> 
			<param name="name"> Target name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Target number if it exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.flushMesh">
			<summary>
			Flushes the clutter mesh geometry into the video memory.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshClutter.invalidate">
			<summary>
			Invalidates all mesh clutter cells. All invalidated cells will be regenerated.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshClutter.invalidate(Unigine.Math.WorldBoundBox)">
			<summary>
			Invalidates all mesh clutter cells within the area specified by the given bounding box. All invalidated cells will be regenerated.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, where mesh clutter cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.loadMesh(char)">
			<summary>
			Loads a new mesh instead of the current mesh from the .mesh file. This function doesn't change the mesh name.
			</summary> 
			<param name="name"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.saveMesh(char)">
			<summary>
			Saves the mesh into the .mesh format.
			</summary> 
			<param name="name"> Path to the mesh file. </param> 
			<returns>1 if the mesh is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.type">
			<summary>
			Returns the node type.
			</summary>  
			<returns>Node type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.clearClutterExcludes">
			<summary>
			Restores all cells removed by the calls to the setClutterExclude() method. Restored cells will be regenerated.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setClutterExclude(Unigine.Math.WorldBoundBox,int)">
			<summary>
			Removes all cells within the area specified by the given bounding box. Generation of these cells will be skipped. This method can be used to replace some parts of the clutter with modified meshes (e.g., broken trees within the area around the shell crater in the forest).
			</summary> 
			<param name="bounds"> Bounding box, defining the area, where mesh clutter cells will not be generated. </param>
			<param name="exclude"> Exclude flag. Set 1 to remove all mesh clutter cells within the area; otherwise, set 0 to restore the removed ones. Restored cells will be regenerated. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getClutterTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator},bool,bool) const">
			<summary>
			Collects transformations for all clutter meshes in the generated cells within the area specified by the given bounding box and puts them to the specified buffer.					Generation of clutter cells is performed in separate threads. Some of the cells may have their lifetime expired. Therefore, the content of certain cells might be unavailable at the moment, such cells are considered as not generated.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, for which the transformations of clutter meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of clutter meshes. </param>
			<param name="precise"> Precision flag:1 - transformations will be collected for clutter meshes within the specified bounding box0 - transformations will be collected for clutter meshes within the cells intersected by the specified bounding box </param>
			<param name="force"> Force flag.1 - regenerate all cells within the area, that were not generated, before collecting transformations for the meshes inside them.0 - transformations will be collected only for the meshes inside the clutter cells, that were generated. </param> 
			<returns>1, if there are transformations of clutter meshes; or 0, if there are no transformations of clutter meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getClutterTransforms(Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator}) const">
			<summary>
			Collects transformations for all clutter meshes within the generated cells and puts them to the specified buffer.					Generation of clutter cells is performed in separate threads. Some of the cells may have their lifetime expired. Therefore, the content of certain cells might be unavailable at the moment, such cells are considered as not generated.
			</summary> 
			<param name="transforms"> Buffer to store transformations of clutter meshes. </param> 
			<returns>1, if there are transformations of clutter meshes; or 0, if there are no transformations of clutter meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getClutterWorldTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator},bool,bool) const">
			<summary>
			Collects transformations (in world coordinates) for all clutter meshes in the generated cells within the area specified by the given bounding box and puts them to the specified buffer.					Generation of clutter cells is performed in separate threads. Some of the cells may have their lifetime expired. Therefore, the content of certain cells might be unavailable at the moment, such cells are considered as not generated.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, for which the transformations of clutter meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of clutter meshes, in world coordinates. </param>
			<param name="precise"> Precision flag:1 - transformations will be collected for clutter meshes within the specified bounding box0 - transformations will be collected for clutter meshes within the cells intersected by the specified bounding box </param>
			<param name="force"> Force flag.1 - regenerate all cells within the area, that were not generated, before collecting transformations for the meshes inside them.0 - transformations will be collected only for the meshes inside the clutter cells, that were generated. </param> 
			<returns>1, if there are transformations of clutter meshes; or 0, if there are no transformations of clutter meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getClutterWorldTransforms(Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator}) const">
			<summary>
			Collects transformations (in world coordinates) for all clutter meshes within the generated cells and puts them to the specified buffer.					Generation of clutter cells is performed in separate threads. Some of the cells may have their lifetime expired. Therefore, the content of certain cells might be unavailable at the moment, such cells are considered as not generated.
			</summary> 
			<param name="transforms"> Buffer to store transformations of clutter meshes, in world coordinates. </param> 
			<returns>1, if there are transformations of clutter meshes; or 0, if there are no transformations of clutter meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getClutterLocalTransforms(Unigine.BoundBox,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator},int,int) const">
			<summary>
			Collects transformations (in local coordinates) for all clutter meshes within the generated cells and puts them to the specified buffer.					Generation of clutter cells is performed in separate threads. Some of the cells may have their lifetime expired. Therefore, the content of certain cells might be unavailable at the moment, such cells are considered as not generated.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, for which the transformations of clutter meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of clutter meshes, in local coordinates. </param>
			<param name="precise"> Precision flag:1 - transformations will be collected for clutter meshes within the specified bounding box0 - transformations will be collected for clutter meshes within the cells intersected by the specified bounding box </param>
			<param name="force"> Force flag.1 - regenerate all cells within the area, that were not generated, before collecting transformations for the meshes inside them.0 - transformations will be collected only for the meshes inside the clutter cells, that were generated. </param> 
			<returns>1, if there are transformations of clutter meshes; or 0, if there are no transformations of clutter meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setCutoutIntersectionMask(int)">
			<summary>
			Sets a new cutout intersection mask. This mask allows you to cut out clutter objects in the areas of intersection with other objects and decals (e.g. can be used to remove vegetation under houses or from the surface of roads projected using decals). Clutter objects will be cut out by objects and decals that have their intersection mask matching this one (one bit at least).					To set intersection masks the following methods can be used:													for decals use getIntersectionMask()							for objects use getIntersectionMask()
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getCutoutIntersectionMask const">
			<summary>
			Returns the current cutout intersection mask. This mask allows you to cut out clutter objects in the areas of intersection with other objects and decals (e.g. can be used to remove vegetation under houses or from the surface of roads projected using decals). Clutter objects will be cut out by objects and decals that have their intersection mask matching this one (one bit at least).					To set intersection masks the following methods can be used:													for decals use getIntersectionMask()							for objects use getIntersectionMask()
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshClutter.setCutoutInverse(int)">
			<summary>
			Sets a value indicating whether the clutter objects should be rendered inside or outside the areas determined by the cutout intersection mask.
			</summary> 
			<param name="inverse"> 0 to render clutter objects outside the areas determined by the cutout intersection mask; 1 to render the clutter objects inside these areas. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshClutter.getCutoutInverse const">
			<summary>
			Returns a value indicating if the clutter objects is rendered inside or outside the areas determined by the cutout intersection mask.
			</summary>  
			<returns>0 if clutter objects are rendered outside the areas determined by the cutout intersection mask; 1 if inside.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.ObjectMeshDynamic(Unigine.Ptr{Unigine.Mesh},int)">
			<summary>
			ObjectMeshDynamic constructor.
			</summary> 
			<param name="mesh"> Mesh smart pointer. </param>
			<param name="flags"> Dynamic flag: one of the DYNAMIC_* or IMMUTABLE_*. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.#ctor(int)">
			<summary>
			ObjectMeshDynamic constructor.
			</summary> 
			<param name="flags"> Dynamic flag: one of the DYNAMIC_* or IMMUTABLE_*. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.#ctor(char,int)">
			<summary>
			ObjectMeshDynamic constructor.
			</summary> 
			<param name="path"> Path to the mesh file. </param>
			<param name="flags"> Dynamic flag: one of the DYNAMIC_* or IMMUTABLE_*. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setBoundBox(Unigine.BoundBox)">
			<summary>
			Sets a bounding box of a specified size for a given dynamic mesh surface.
			</summary> 
			<param name="bb"> Bounding box. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setBoundBox(Unigine.BoundBox,int)">
			<summary>
			Sets a bounding box of a specified size for a given dynamic mesh surface.
			</summary> 
			<param name="bb"> Bounding box. </param>
			<param name="surface"> Surface number in range from 0 to the total number of dynamic mesh surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setColor(int,Unigine.Math.vec4)">
			<summary>
			Updates the color of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param>
			<param name="color"> Color. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getColor(int) const">
			<summary>
			Returns the color of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param> 
			<returns>Color.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setIndex(int,int)">
			<summary>
			Updates an index in the index buffer (replaces the index with the given number with the specified index of the vertex).
			</summary> 
			<param name="num"> Index number in range from 0 to the total number of indices in the index buffer. </param>
			<param name="index"> Vertex index in the index buffer to set. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getIndex(int) const">
			<summary>
			Returns the index of the vertex by the index number.
			</summary> 
			<param name="num"> Index number in range from 0 to the total number of indices in the index buffer. </param> 
			<returns>Vertex index in the index buffer.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setIndicesArray(int[])">
			<summary>
			Updates an array of indices.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Allows for reinitialization of the ObjectMeshDynamic: it copies a given mesh into the current dynamic mesh. For example, you can copy a mesh into another one as follows:
			</summary> 
			<param name="mesh"> Mesh smart pointer. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current dynamic mesh into the received mesh. For example, you can obtain geometry of the dynamic mesh and then change it:
			</summary> 
			<param name="mesh"> Mesh smart pointer. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setMeshName(char)">
			<summary>
			Sets the mesh name.
			</summary> 
			<param name="name"> Mesh name. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getMeshName const">
			<summary>
			Gets the mesh name.
			</summary>  
			<returns>Mesh name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getNormal(int) const">
			<summary>
			Returns the normal vector coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param> 
			<returns>Normal vector.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setNumIndices(int)">
			<summary>
			Sets the number of vertex indices.
			</summary> 
			<param name="indices"> Number of indices. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getNumIndices const">
			<summary>
			Returns the number of vertex indices.
			</summary>  
			<returns>Number of indices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setNumVertex(int)">
			<summary>
			Sets the number of mesh vertices.
			</summary> 
			<param name="vertex"> Number of mesh vertices. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getNumVertex const">
			<summary>
			Returns the number of mesh vertices.
			</summary>  
			<returns>Number of mesh vertices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setSurfaceBegin(int,int)">
			<summary>
			Sets the begin index for the specified surface of the dynamic object mesh.
			</summary> 
			<param name="begin"> Index to be set as the begin one for the surface. </param>
			<param name="surface"> Number of a target surface in range from 0 to the total number of mesh surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getSurfaceBegin(int) const">
			<summary>
			Returns the begin index of the specified mesh surface.
			</summary> 
			<param name="surface"> Number of a target surface in range from 0 to the total number of mesh surfaces. </param> 
			<returns>Returns the begin index of the surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setSurfaceEnd(int,int)">
			<summary>
			Sets the end index for the specified surface of the dynamic object mesh.
			</summary> 
			<param name="end"> Index to be set as the end one for the surface. </param>
			<param name="surface"> Number of a target surface in range from 0 to the total number of mesh surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getSurfaceEnd(int) const">
			<summary>
			Returns the end index of the specified mesh surface.
			</summary> 
			<param name="surface"> Number of a target surface in range from 0 to the total number of mesh surfaces. </param> 
			<returns>Returns the end index of the surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setSurfaceName(char,int)">
			<summary>
			Sets the name for the specified surface. The name will be set only if the specified surface was added via the addSurface() method.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="surface"> Number of a target surface in range from 0 to the total number of mesh surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setTangent(int,Unigine.Math.quat)">
			<summary>
			Updates the tangent vector coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param>
			<param name="tangent"> Tangent vector coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getTangent(int) const">
			<summary>
			Returns the tangent vector coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param> 
			<returns>Tangent vector.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setTexCoord(int,Unigine.Math.vec4)">
			<summary>
			Updates texture coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param>
			<param name="texcoord"> New coordinate pairs for both texture channels. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getTexCoord(int) const">
			<summary>
			Returns texture coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param> 
			<returns>Coordinate pairs for both texture channels.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setVertex(int,Unigine.Math.vec3)">
			<summary>
			Updates coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number. </param>
			<param name="xyz"> New vertex coordinates in the mesh system of coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getVertex(int) const">
			<summary>
			Returns coordinates of a given vertex.
			</summary> 
			<param name="num"> Vertex number in range from 0 to the total number of mesh vertices. </param> 
			<returns>Vertex coordinates in the mesh system of coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setVertexArray(ObjectMeshDynamic::Vertex[])">
			<summary>
			Updates the vertex array of the dynamic mesh.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getVertexArray const">
			<summary>
			Returns an array of vertices of the dynamic mesh.
			</summary>  
			<returns>Pointer to the array of vertices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.isFlushed const">
			<summary>
			Returns a value indicating if vertex data of the mesh was flushed (create/upload operation) to video memory.
			</summary>  
			<returns>true if vertex data of the mesh was flushed (create/upload operation) to video memory; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addColor(Unigine.Math.vec4)">
			<summary>
			Adds a color with given coordinates to the last added vertex.
			</summary> 
			<param name="color"> Color. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addIndex(int)">
			<summary>
			Adds an index to the index buffer.
			</summary> 
			<param name="index"> Index to add. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addIndicesArray(int[])">
			<summary>
			Adds an array of indices.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addSurface(char)">
			<summary>
			Adds all the last listed and unsigned vertices and triangles to a new surface with a specified name.
			</summary> 
			<param name="name"> Name of the new surface. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addTangent(Unigine.Math.quat)">
			<summary>
			Adds a tangent vector with given coordinates to the last added vertex.
			</summary> 
			<param name="tangent"> Tangent vector coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addTexCoord(Unigine.Math.vec4)">
			<summary>
			Adds texture coordinates to the last added vertex.
			</summary> 
			<param name="texcoord"> Coordinate pairs for both texture channels. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addTriangleFan(int)">
			<summary>
			Adds a triangle fan to the mesh. This method does not add vertices, rather it allocates indices, for which vertices should be then created with the addVertex() function. Indices will point to vertices starting from the current last vertex in the vertex buffer.
			</summary> 
			<param name="num_vertex"> Number of vertices of the fan. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addTriangleQuads(int)">
			<summary>
			Adds a given number of quadrilaterals to the mesh. This method does not add vertices, rather it allocates indices, for which vertices should be then created with the addVertex() function. Indices will point to vertices starting from the current last vertex in the vertex buffer.
			</summary> 
			<param name="num_quads"> Number of quadrilaterals. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addTriangles(int)">
			<summary>
			Adds a given number of triangles to the mesh. This method does not add vertices, rather it allocates indices, for which vertices should be then created with the addVertex() function. Indices will point to vertices starting from the current last vertex in the vertex buffer.
			</summary> 
			<param name="num_triangles"> Number of triangles. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addTriangleStrip(int)">
			<summary>
			Adds a triangle strip to the mesh. This method does not add vertices, rather it allocates indices, for which vertices should be then created with the addVertex() function. Indices will point to vertices starting from the current last vertex in the vertex buffer.
			</summary> 
			<param name="num_vertex"> Number of vertices of the strip. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addVertex(Unigine.Math.vec3)">
			<summary>
			Adds a vertex with given coordinates to the mesh.
			</summary> 
			<param name="xyz"> Vertex coordinates in the mesh system of coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.addVertexArray(ObjectMeshDynamic::Vertex[])">
			<summary>
			Adds an array of vertices to the dynamic mesh.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.allocateIndices(int)">
			<summary>
			Allocates a given number of vertex indices in the index buffer. With this function, memory can be allocated once rather than in chunks, making the creation faster.
			</summary> 
			<param name="num"> Number of vertex indices that will be stored in the buffer. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.allocateVertex(int)">
			<summary>
			Allocates a given number of vertices in the vertex buffer. With this function, memory can be allocated once rather than in chunks, making the creation faster.
			</summary> 
			<param name="num"> Number of vertices to allocate. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.clearIndices">
			<summary>
			Clears all vertex indices in the mesh.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.clearSurfaces">
			<summary>
			Clears all the surface settings.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.clearVertex">
			<summary>
			Clears all of the mesh vertex settings.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.flushIndices">
			<summary>
			Flushes the index buffer and sends all data to GPU. This method is called automatically, if the length of the index buffer changes. If you change the contents of the index buffers, you should call this method.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.flushVertex">
			<summary>
			Flushes the vertex buffer and sends all data to GPU. This method is called automatically, if the length of the vertex buffer changes. If you change the contents of the vertex buffer, you should call this method.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.loadMesh(char)">
			<summary>
			Loads a mesh for the current mesh from the file. This function doesn't change the mesh name.
			</summary> 
			<param name="path"> Mesh file name. </param> 
			<returns>true if the mesh is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.removeIndices(int,int)">
			<summary>
			Removes the specified number of indices starting from the given index.
			</summary> 
			<param name="num"> Index number. </param>
			<param name="size"> Number of indices to remove. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.removeSurface(int)">
			<summary>
			Removes the surface with the given index.
			</summary> 
			<param name="surface"> Surface index. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.removeSurfaces(char)">
			<summary>
			Removes surfaces with the given name.
			</summary> 
			<param name="name"> Surface name. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.removeVertex(int,int,int)">
			<summary>
			Removes the specified number of vertices starting from the given vertex. To fix the index buffer after removal of vertices, pass true as the 3rd argument.
			</summary> 
			<param name="num"> Vertex number. </param>
			<param name="size"> Number of vertices to remove. </param>
			<param name="indices"> 1 to fix the index buffer after removal of vertices; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.saveMesh(char)">
			<summary>
			Saves the dynamic mesh into .mesh or .anim format.
			</summary> 
			<param name="path"> Mesh file name. </param> 
			<returns>true if the mesh is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.updateBounds">
			<summary>
			Calculates a bounding box and a bounding sphere for the current mesh.
			</summary>  
			<returns>1 if the bounds are calculated successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.updateIndices">
			<summary>
			Updates vertex and index buffers by removing duplicated vertices and rearranging the indices of the created mesh to optimize it for faster rendering.
			</summary>  
			<returns>true if the indices are updated successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.updateSurfaceBegin(int)">
			<summary>
			Synchronizes surface begin index.
			</summary> 
			<param name="surface"> Number of a target surface in range from 0 to the total number of mesh surfaces. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.updateSurfaceEnd(int)">
			<summary>
			Synchronizes surface end index.
			</summary> 
			<param name="surface"> Number of a target surface. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.updateTangents">
			<summary>
			Updates tangent vectors of the mesh vertices.
			</summary>  
			<returns>true if the tangents are updated successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setFPSVisibleCamera(int)">
			<summary>
			Sets the update rate value when the object is rendered to the viewport. The default value is infinity.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary> 
			<param name="camera"> Update rate value when the object is rendered. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getFPSVisibleCamera const">
			<summary>
			Returns the update rate value when the object is rendered to the viewport.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary>  
			<returns>Update rate value when the object is rendered.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setFPSVisibleShadow(int)">
			<summary>
			Sets the update rate value when only object shadows are rendered. The default value is 30 fps.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary> 
			<param name="shadow"> Update rate value when only object shadows are rendered. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getFPSVisibleShadow const">
			<summary>
			Returns the update rate value when only object shadows are rendered.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary>  
			<returns>Update rate value when only object shadows are rendered.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setFPSInvisible(int)">
			<summary>
			Sets the update rate value when the object is not rendered at all. The default value is 0 fps.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary> 
			<param name="invisible"> Update rate value when the object is not rendered at all. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getFPSInvisible const">
			<summary>
			Returns the update rate value when the object is not rendered at all.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary>  
			<returns>Update rate value when the object is not rendered at all.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.setUpdateDistanceLimit(float)">
			<summary>
			Sets the distance from the camera within which the object should be updated. The default value is infinity.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary> 
			<param name="limit"> Distance from the camera within which the object should be updated. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.getUpdateDistanceLimit const">
			<summary>
			Returns the distance from the camera within which the object should be updated.					This method is effective when the object has BODY_ROPE, BODY_CLOTH, or BODY_WATER assigned.
			</summary>  
			<returns>Distance from the camera within which the object should be updated.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.isUniqueMesh const">
			<summary>
			Returns a value indicating if the mesh used by the object is unique (different from the one shared by other Dynamic Mesh objects in the world by default).
			</summary>  
			<returns>true if the object uses a unique mesh; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshDynamic.putUniqueMesh">
			<summary>
			Makes the mesh used by the object unique (different from the one shared by other Dynamic Mesh objects in the world by default).
			</summary>  
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.DYNAMIC_ALL">
			<summary>
			A flag indicating both dynamic indices and vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.DYNAMIC_INDICES">
			<summary>
			A flag indicating dynamic indices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.DYNAMIC_VERTEX">
			<summary>
			A flag indicating dynamic vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.IMMUTABLE_ALL">
			<summary>
			A flag indicating both immutable indices and vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.IMMUTABLE_INDICES">
			<summary>
			A flag indicating immutable indices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.IMMUTABLE_VERTEX">
			<summary>
			A flag indicating immutable vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.MODE_LINES">
			<summary>
			Mode to render lines.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.MODE_POINTS">
			<summary>
			Mode to render points.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.MODE_QUAD_PATCHES">
			<summary>
			Mode to render the quad patches.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.MODE_TRIANGLES">
			<summary>
			Mode to render triangles (to create meshes).
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.MODE_TRIANGLE_PATCHES">
			<summary>
			Mode to render the triangle patches.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.TYPE_DOUBLE">
			<summary>
			Double type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.TYPE_FLOAT">
			<summary>
			Float type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.TYPE_HALF">
			<summary>
			Half-float type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.TYPE_UCHAR">
			<summary>
			Unsigned char type to store vertices.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshDynamic.TYPE_USHORT">
			<summary>
			Unsigned short type to store vertices.
		</summary>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.#ctor(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			ObjectMeshSkinned constructor.
			</summary> 
			<param name="mesh"> Pointer to Mesh. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.ObjectMeshSkinned(char,bool)">
			<summary>
			ObjectMeshSkinned constructor.
			</summary> 
			<param name="path"> Path to the skinned mesh file. </param>
			<param name="unique"> When you create several objects out of a single .mesh file, the instance of the mesh geometry is created. If you then change the source geometry, its instances will be changed as well. To avoid this, set the unique flag to true (1), so a copy of the mesh geometry will be created and changes won't be applied. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setAnimation(int,int)">
			<summary>
			Sets the animation identifier for the given animation layer.
			</summary> 
			<param name="layer"> Layer number. </param>
			<param name="v"> The variable of one of the following types:string name - The animation layer name.int animation - The animation identifier. </param>
			<param name="animation"> Animation identifier. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setAnimation(int,char)">
			<summary>
			Sets the path to animation for the given animation layer.
			</summary> 
			<param name="layer"> Layer number. </param>
			<param name="path"> Path to animation file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getAnimation(int) const">
			<summary>
			Returns the animation identifier from the given animation layer.
			</summary> 
			<param name="layer"> Layer number. </param> 
			<returns>Animation identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getAnimationID(int) const">
			<summary>
			Returns the identifier of the animation at the specified position.
			</summary> 
			<param name="num"> Animation number. </param> 
			<returns>Animation identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getAnimationPath(int) const">
			<summary>
			Returns the path to a file containing the specified animation.
			</summary> 
			<param name="animation"> Animation identifier. </param> 
			<returns>Path to a file containing the specified animation.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setAnimName(char)">
			<summary>
			Sets a new path to the animation. Does not update animation immediately using the new path, unlike the setAnimNameForce() method.
			</summary> 
			<param name="name"> Path to the animation. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setAnimNameForce(char)">
			<summary>
			Sets the new path to the animation and forces setting this animation for the first animation layer.
			</summary> 
			<param name="name"> Path to the animation file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getAnimName const">
			<summary>
			Returns the path to the current animation.
			</summary>  
			<returns>Path to animation.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneBindTransform(int) const">
			<summary>
			Returns the bind pose bone transformation matrix. Bone transformations are relative.
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Bind pose bone transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneChild(int,int) const">
			<summary>
			Returns the number of a child of a given bone.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="child"> Child number. </param> 
			<returns>Number of the child in the collection of all bones.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneTransformWithChildren(int,Unigine.Math.mat4)">
			<summary>
			Sets transformation for the bone and all of its children (without considering node transformations).					Bones can be scaled only uniformly.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneName(int) const">
			<summary>
			Returns the name of the given bone.
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Bone name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneParent(int) const">
			<summary>
			Returns the number of the parent bone for a given one.
			</summary> 
			<param name="bone"> Number of the bone, for which the parent will be returned. </param> 
			<returns>Parent bone number, if the parent exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneTransform(int,Unigine.Math.mat4)">
			<summary>
			Sets a transformation matrix for a given bone (without considering node transformations).					Bones can be scaled only uniformly.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="transform"> Transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneTransform(int) const">
			<summary>
			Returns a transformation matrix of a given bone relatively to the parent object (not considering transformations of the node itself).
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneTransforms(int,Unigine.Math.mat4,int)">
			<summary>
			Sets a transformation matrix for given bones.
			</summary> 
			<param name="bones"> Bone numbers. </param>
			<param name="transforms"> Transformation matrices. </param>
			<param name="num_bones"> Number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setCIndex(int,int,int)">
			<summary>
			Sets the new coordinate index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices for the given surface.To get the total number of coordinate indices for the given surface, use the getNumCIndices() method. </param>
			<param name="index"> Coordinate index to be set in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getCIndex(int,int) const">
			<summary>
			Returns the coordinate index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices for the given surface.To get the total number of coordinate indices for the given surface, use the getNumCIndices() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Coordinate index.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setColor(int,Unigine.Math.vec4,int)">
			<summary>
			Sets the color for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex color entries of the given surface.To get the total number of vertex color entries for the surface, call the getNumColors() method. </param>
			<param name="color"> Vertex color to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getColor(int,int) const">
			<summary>
			Returns the color of the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex color entries of the given surface.To get the total number of vertex color entries for the surface, call the getNumColors() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Vertex color.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setControlled(bool)">
			<summary>
			Sets a value indicating if the animation should be controlled by a parent ObjectMeshSkinned (useful for attaching clothes to a character body).
			</summary> 
			<param name="controlled"> Controlled flag: true if the animation is controlled by a parent ObjectMeshSkinned; otherwise - false. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isControlled const">
			<summary>
			Returns a value indicating if the animation is controlled by a parent ObjectMeshSkinned.
			</summary>  
			<returns>true if the animation is controlled by a parent ObjectMeshSkinned; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setFrame(int,float,int,int)">
			<summary>
			Sets a frame for the given animation layer.
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="frame"> Frame number in the "from-to" interval. If the float argument is passed, animation is interpolated between nearby frames. 0 means the from frame. For larger values, a residue of a modulo (from-to) is calculated. If a negative value is provided, interpolation will be done from the current frame to the from frame. </param>
			<param name="from"> Start frame. -1 means the first frame of the animation. </param>
			<param name="to"> End frame. -1 means the last frame of the animation. </param> 
			<returns>The number of the frame.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getFrame(int) const">
			<summary>
			Returns the frame number passed as the time argument on the last setFrame() call.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
			<returns>Frame number.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getFrameFrom(int) const">
			<summary>
			Returns the start frame passed as the from argument on the last setFrame() call.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
			<returns>Start frame.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getFrameTo(int) const">
			<summary>
			Returns the end frame passed as the to argument on the last setFrame() call.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
			<returns>End frame.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneBindITransform(int) const">
			<summary>
			Returns the inverse bone transformation matrix of the bind pose in the world-space.					To get the bind pose transformation matrix in the world-space, use the inverse(getBoneITransform()).
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Inverse bind pose transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneITransform(int) const">
			<summary>
			Returns an inverse transformation matrix for a given bone relatively to the parent object.
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Inverse transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setLayer(int,bool,float)">
			<summary>
			Enables or disables the given animation layer and sets the value of the weight parameter.
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="enabled"> Enable flag. true to enable the layer, false to disable it. </param>
			<param name="weight"> Animation layer weight. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneLayerTransform(int,int,Unigine.Math.mat4)">
			<summary>
			Sets a transformation matrix for a given bone. The difference from the setBoneTransform() function is that this method takes into account only the transformation in the specified animation layer (no blending is performed).					The bone can be scaled only uniformly.
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="bone"> Bone number. </param>
			<param name="transform"> Bone transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneLayerTransform(int,int) const">
			<summary>
			Returns a transformation matrix of a given bone relatively to the parent object.					The difference from getBoneTransform() is that this method takes into account only the transformation in the animation layer (no blending is done).
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="bone"> Bone number. </param> 
			<returns>Bone transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isBoneLayerTransform(int,int) const">
			<summary>
			Returns a value indicating if the bone transformation is applied only to the animation layer (no blending is performed).
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="bone"> Bone number. </param> 
			<returns>true if the bone transformation is applied only to the animation layer; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneLayerTransformEnabled(int,int,bool)">
			<summary>
			Enables or disables a layer transformation for a given bone.
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="bone"> Bone number. </param>
			<param name="enabled"> Enabled flag: true to enable layer transformation, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setLayerEnabled(int,bool)">
			<summary>
			Enables or disables a given animation layer.
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="enabled"> true to enable the animation layer, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isLayerEnabled(int) const">
			<summary>
			Returns a value indicating if a given animation layer is enabled.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
			<returns>true if the layer is disabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setLayerWeight(int,float)">
			<summary>
			Sets a weight for the animation layer.
			</summary> 
			<param name="layer"> Animation layer number. </param>
			<param name="weight"> Animation layer weight. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getLayerWeight(int) const">
			<summary>
			Returns the weight of the animation layer.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
			<returns>Weight of the animation layer.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setLoop(int)">
			<summary>
			Sets a value indicating if the animation should be looped.
			</summary> 
			<param name="loop"> 1 is to play the animation in a loop, 0 is to play it only once.  </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getLoop const">
			<summary>
			Returns a value indicating if the animation is looped. 1 if the animation is looped; otherwise - 0.
			</summary>  
			<returns>The loop flag.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Copies the source mesh into the current mesh.
			</summary> 
			<param name="mesh"> The source mesh to be copied. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current mesh into the source mesh.
			</summary> 
			<param name="mesh"> Source mesh. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setMeshName(char)">
			<summary>
			Sets the path to the mesh. Does not update mesh immediately using the new path, unlike the setMeshNameForce() method
			</summary> 
			<param name="name"> Path to the mesh. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setMeshNameForce(char)">
			<summary>
			Sets the new path to the mesh and forces mesh creation using the new path. The new mesh is created from the specified path immediately with the unique flag set to 0.
			</summary> 
			<param name="path"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getMeshName const">
			<summary>
			Returns the path to the mesh.
			</summary>  
			<returns>Path to the mesh.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getMeshSurface(Unigine.Ptr{Unigine.Mesh},int,int) const">
			<summary>
			Copies the specified mesh surface to the destination mesh.
			</summary> 
			<param name="mesh"> Destination Mesh to copy the surface to. </param>
			<param name="surface"> Number of the mesh surface to be copied. </param>
			<param name="target"> Number of the surface morph target to be copied. The default value is -1 (all morph targets). </param> 
			<returns>Number of the new added mesh surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNormal(int,int,int) const">
			<summary>
			Returns the normal for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface target.Vertex normals are calculated using vertex tangents. To get the total number of vertex tangent entries for the surface target, call the getNumTangents() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex normal.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumAnimationBones(int) const">
			<summary>
			Returns the number of animation bones.
			</summary> 
			<param name="animation"> Animation number. </param> 
			<returns>Number of animation bones.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumAnimationFrames(int) const">
			<summary>
			Returns the number of animation frames.
			</summary> 
			<param name="animation"> Animation number. </param> 
			<returns>Number of animation frames.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumAnimations const">
			<summary>
			Returns the total number of all loaded animations.
			</summary>  
			<returns>Number of loaded animations.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumBoneChildren(int) const">
			<summary>
			Returns the number of children for the specified bone.
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Number of child bones.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumBones const">
			<summary>
			Returns the number of all bones taking part in animation.
			</summary>  
			<returns>Number of bones.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumCIndices(int) const">
			<summary>
			Returns the number of coordinate indices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of coordinate indices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumColors(int) const">
			<summary>
			Returns the total number of vertex color entries for the given surface.					Colors are specified for triangle vertices.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Number of vertex color entries.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumFrames(int) const">
			<summary>
			Returns the number of animation frames for a given layer.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
			<returns>Number of animation frames.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setNumLayers(int)">
			<summary>
			Sets the number of animation layers for blending. For example, when two layers are blended, bone transformations in between the layers are interpolated, and vertex positions can be calculated using the interpolated results. For more details, see the article on Skinned Mesh.
			</summary> 
			<param name="layers"> Number of animation layers (must be greater than 0). </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumLayers const">
			<summary>
			Returns the number of animation layers set for blending. For more details, see the article on Skinned Mesh.
			</summary>  
			<returns>Number of animation layers.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumSurfaceTargets(int) const">
			<summary>
			Returns the number of surface morph targets for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of surface morph targets.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumTangents(int) const">
			<summary>
			Returns the number of vertex tangent entries of the given mesh surface.					Tangents are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of surface tangent vectors.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setNumTargets(int,int)">
			<summary>
			Sets the number of animation morph targets for the given mesh surface.
			</summary> 
			<param name="num"> Number of animation morph targets. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumTargets(int) const">
			<summary>
			Returns the total number of morph targets of the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of animation morph targets.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setNumTexCoords0(int,int)">
			<summary>
			Sets the number of the first UV map texture coordinates for the given mesh surface.					First UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="num"> Number of the first UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumTexCoords0(int) const">
			<summary>
			Returns the number of the first UV map texture coordinates for the given mesh surface.					First UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the first UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setNumTexCoords1(int,int)">
			<summary>
			Sets the number of the second UV map texture coordinates for the given mesh surface.					Second UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="num"> Number of the second UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumTexCoords1(int) const">
			<summary>
			Returns the number of the second UV map texture coordinates for the given mesh surface.					Second UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the second UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumTIndices(int) const">
			<summary>
			Returns the number of triangle indices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of triangle indices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getNumVertex(int) const">
			<summary>
			Returns the number of coordinate vertices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the surface vertices.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isFlushed const">
			<summary>
			Returns a value indicating if vertex data of the mesh was flushed (create/upload operation) to video memory.
			</summary>  
			<returns>true if vertex data of the mesh was flushed (create/upload operation) to video memory; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isPlaying const">
			<summary>
			Returns playback status.
			</summary>  
			<returns>true if animation is playing; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setQuaternion(bool)">
			<summary>
			Enables or disables the dual-quaternion skinning mode. The dual-quaternion model is an accurate, computationally efficient, robust, and flexible method of representing rigid transforms and it is used in skeletal animation. See a Wikipedia article on dual quaternions and a beginners guide to dual-quaternions for more information.
			</summary> 
			<param name="quaternion"> true to enable dual-quaternion skinning mode, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isQuaternion const">
			<summary>
			Returns the value indicating if the dual-quaternion skinning mode is used. The dual-quaternion model is an accurate, computationally efficient, robust, and flexible method of representing rigid transforms and it is used in skeletal animation. See a Wikipedia article on dual quaternions and a beginners guide to dual-quaternions for more information.
			</summary>  
			<returns>true if dual-quaternion skinning mode is used; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getSkinnedNormal(int,int,int) const">
			<summary>
			Returns the skinned normal for the given triangle vertex.					A skinned normal is a recalculated normal for bones and morph targets used in skinning.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface target.Vertex normals are calculated using vertex tangents. To get the total number of vertex tangent entries for the surface target, call the getNumTangents() method. </param>
			<param name="index"> Coordinate index of the vertex.if -1 is passed, the coordinate index will be obtained for the first vertex having its triangle index equal to the specified triangle vertex number. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Skinned normal.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getSkinnedTangent(int,int,int) const">
			<summary>
			Returns the skinned tangent vector for the given triangle vertex.					A skinned tangent vector is a recalculated tangent vector for bones and morph targets used in skinning.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface target.To get the total number of vertex tangent entries for the surface target, call the getNumTangents() method. </param>
			<param name="index"> Coordinate index of the vertex.if -1 is passed, the coordinate index will be obtained for the first vertex having its triangle index equal to the specified triangle vertex number. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Skinned tangent.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getSkinnedVertex(int,int) const">
			<summary>
			Returns skinned coordinates of the given coordinate vertex.					A skinned vertex is a recalculated vertex for bones and morph targets used in skinning.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Vertex coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setSpeed(float)">
			<summary>
			Updates a multiplier value for the animation playback time.
			</summary> 
			<param name="speed"> Playback speed multiplier value. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getSpeed const">
			<summary>
			Returns a multiplier for animation playback time.
			</summary>  
			<returns>Playback speed multiplier value.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isStopped const">
			<summary>
			Returns stop status.
			</summary>  
			<returns>true if animation is stopped; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getSurfaceTargetName(int,int) const">
			<summary>
			Returns the name of the morph target for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Morph target number. </param> 
			<returns>Morph target name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setSurfaceTransform(Unigine.Math.mat4,int,int)">
			<summary>
			Transforms the given mesh surface target.
			</summary> 
			<param name="transform"> Transformation matrix. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Morph target number. The default value is -1 (the transformation will be applied to all morph targets). </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTangent(int,Unigine.Math.quat,int,int)">
			<summary>
			Sets the new tangent for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface.To get the total number of vertex tangent entries for the surface, call the getNumTangents() method. </param>
			<param name="tangent"> Tangent to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTangent(int,int,int) const">
			<summary>
			Returns the tangent for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface.To get the total number of vertex tangent entries for the surface, call the getNumTangents() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex tangent.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTarget(int,bool,int,float,int)">
			<summary>
			Enables or disables a given morph target and sets all its parameters.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="enabled"> Enable flag: true to enable the morph target; false to disable it. </param>
			<param name="index"> Target index. </param>
			<param name="weight"> Target weight. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTargetEnabled(int,bool,int)">
			<summary>
			Enables or disables a given morph target.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="enabled"> true to enable the morph target, false to disable it. </param>
			<param name="surface"> Surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isTargetEnabled(int,int) const">
			<summary>
			Returns a value indicating if the given morph target of the given surface is enabled.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>1 if the given morph target of the given surface is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTargetIndex(int,int,int)">
			<summary>
			Sets an index for the given morph target.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="index"> Morph target index. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTargetIndex(int,int) const">
			<summary>
			Returns the index of the morph target.
			Returns the index of the given morph target.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Index of the given morph target.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTargetWeight(int,float,int)">
			<summary>
			Sets a weight for the given animation target.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="weight"> Morph target weight. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTargetWeight(int,int) const">
			<summary>
			Returns the weight of the given morph target.
			</summary> 
			<param name="target"> Morph target number. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Morph target weight.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTexCoord0(int,Unigine.Math.vec2,int)">
			<summary>
			Sets first UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of first UV map texture coordinate entries of the given surface.To get the total number of first UV map texture coordinate entries for the surface, call the getNumTexCoords0() method. </param>
			<param name="texcoord"> First UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTexCoord0(int,int) const">
			<summary>
			Returns first UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of first UV map texture coordinate entries of the given surface.To get the total number of first UV map texture coordinate entries for the surface, call the getNumTexCoords0() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>First UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTexCoord1(int,Unigine.Math.vec2,int)">
			<summary>
			Sets second UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of second UV map texture coordinate entries of the given surface.To get the total number of second UV map texture coordinate entries for the surface, call the getNumTexCoords1() method. </param>
			<param name="texcoord"> Second UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTexCoord1(int,int) const">
			<summary>
			Returns second UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of second UV map texture coordinate entries of the given surface.To get the total number of second UV map texture coordinate entries for the surface, call the getNumTexCoords1() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Second UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTime(float)">
			<summary>
			Sets the animation time, in animation frames. The time count starts from the zero frame. If the time is set to be between frames, animation is blended. If the time is set outside the animation frame range, the animation is looped.					The setTime() function corresponds to The Play and Stop options in the editor. In all other cases use setFrame() to set the animation.
			</summary> 
			<param name="time"> Animation time. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTime const">
			<summary>
			Returns the current animation time, in animation frames. The time count starts from the zero frame.
			</summary>  
			<returns>Animation time.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setTIndex(int,int,int)">
			<summary>
			Sets the new triangle index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of triangle indices for the given surface.To get the total number of triangle indices, use the getNumTIndices() method. </param>
			<param name="index"> Triangle index to be set in the range from 0 to the total number of triangle vertices for the given surface.To get the total number of triangle vertices for the given surface, use the getNumTVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getTIndex(int,int) const">
			<summary>
			Returns the triangle index for the given surface by using the index number.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of triangle indices for the given surface.To get the total number of triangle indices for the given surface, use the getNumTIndices() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Triangle index.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setVertex(int,Unigine.Math.vec3,int,int)">
			<summary>
			Sets the coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="vertex"> Vertex coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getVertex(int,int,int) const">
			<summary>
			Returns coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneWorldTransformWithChildren(int,Unigine.Math.Mat4)">
			<summary>
			Sets the transformation for the given bone and all of its children in the world coordinate space (considering node transformations).					Bones can be scaled only uniformly.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="transform"> Transformation matrix in the world space. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBoneWorldTransform(int,Unigine.Math.Mat4)">
			<summary>
			Sets the transformation for the given bone in the world coordinate space.					Bones can be scaled only uniformly.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="transform"> Transformation matrix in the world space. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneWorldTransform(int) const">
			<summary>
			Returns the current transformation matrix applied to the bone in the world coordinate space (considering node transformations).
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Transformation matrix in the world space.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addAnimation(Unigine.Ptr{Unigine.Mesh},char)">
			<summary>
			Loads an additional animation from an external file.
			</summary> 
			<param name="mesh"> Mesh containing the animation to be added. </param>
			<param name="path"> The parameter is a virtual unique path defining the animation. After loading the animation clip, its internal representation will be identified by the path when using findAnimation, setAnimation, etc. The default 0 value implies that the names of the animation clips will be used.As the given mesh isn't associated with a file and, therefore, doesn't have path data, the path must be represented by an arbitrary unique string. You can generate a new string and use it as the virtual path for the animation. </param> 
			<returns>Animation identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addAnimation(char)">
			<summary>
			Loads the additional animation from an external file.
			</summary> 
			<param name="path"> Path to the animation file. The path can be represented by either a path to the file or its GUID, which is the recommended approach. After loading the animation, its internal representation is identified by the path when using findAnimation, setAnimation, etc. When you import your model with animations from an FBX container, the following path to your *.anim files should be used: &lt;path_to_your_fbx_file&gt;/&lt;file.fbx&gt;/&lt;your_anim_file.anim&gt;For example: object-&gt;addAnimation("models/soldier/soldier.fbx/run.anim"); </param> 
			<returns>Animation identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addEmptySurface(char,int,int)">
			<summary>
			Appends a new empty surface to the current mesh.
			</summary> 
			<param name="name"> Name of the new surface. </param>
			<param name="num_vertex"> Number of vertices of the new surface. </param>
			<param name="num_indices"> Number of indices of the new surface. </param> 
			<returns>Number of the new added surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addLayer">
			<summary>
			Appends a new animation layer to the current mesh.
			</summary>  
			<returns>Number of the new added animation layer.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addMeshSurface(char,Unigine.Ptr{ObjectMeshSkinned},int,int)">
			<summary>
			Appends a new mesh surface to the current mesh.
			</summary> 
			<param name="v0"> Argument of one of the following types:string name - Name of the new surface.int dest_surface - Number of the surface to append geometry to. </param>
			<param name="v1"> Argument of one of the following types:Mesh mesh - Source mesh to copy the surface from.ObjectMeshSkinned mesh - Source mesh to copy the surface from. </param>
			<param name="name"> Name of the new surface of the current mesh. </param>
			<param name="mesh"> Mesh pointer to copy a surface from. </param>
			<param name="surface"> Number of mesh surface to copy. </param>
			<param name="target"> Number of mesh target to copy. The default value is -1 (all morph targets will be copied). </param> 
			<returns>Number of the added mesh surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addMeshSurface(int,Unigine.Ptr{ObjectMeshSkinned},int,int)">
			<summary>
			Merges the specified surface from the source ObjectMeshSkinned with the specified destination surface of the mesh.
			</summary> 
			<param name="dest_surface"> Number of the destination surface, with which a surface from the source ObjectMeshSkinned is to be merged. </param>
			<param name="mesh"> Source ObjectMeshSkinned to copy a surface from. </param>
			<param name="surface"> Number of the source mesh surface to copy. </param>
			<param name="target"> Number of mesh target to merge. The default value is -1 (all morph targets will be merged). </param> 
			<returns>Number of the destination mesh surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addMeshSurface(char,Unigine.Ptr{Unigine.Mesh},int,int)">
			<summary>
			Appends a new mesh surface to the current mesh by copying the specified surface from the source mesh.
			</summary> 
			<param name="name"> Name of the new surface of the current mesh. </param>
			<param name="mesh"> Source mesh to copy a surface from. </param>
			<param name="surface"> Number of the source mesh surface to copy. </param>
			<param name="target"> Number of mesh target to copy. The default value is -1 (all morph targets will be copied). </param> 
			<returns>Number of the added mesh surface.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addSurfaceTarget(int,char)">
			<summary>
			Appends a new morph target to the given mesh surface.
			</summary> 
			<param name="surface"> Number of the surface, to which the morph target will be appended. </param>
			<param name="name"> Name of the new morph target. </param> 
			<returns>Number of the new added morph target.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addSurfaceTarget(int,Unigine.Ptr{ObjectMeshSkinned},int,int)">
			<summary>
			Appends a new morph target to the given mesh surface by copying it from the specified surface of the source ObjectMeshSkinned.
			</summary> 
			<param name="dest_surface"> Number of the surface, to which the morph target will be appended. </param>
			<param name="src_mesh"> Source ObjectMeshSkinned to copy the morph target from. </param>
			<param name="src_surface"> Number of the surface of the source ObjectMeshSkinned to copy the morph target from. </param>
			<param name="src_target"> Number of the morph target to copy. The default value is -1 (all morph targets will be copied). </param> 
			<returns>Number of the new added morph target.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addTarget(int)">
			<summary>
			Appends a new empty morph target to the given mesh surface.
			</summary> 
			<param name="surface"> Number of the surface, to which the morph target will be appended. </param> 
			<returns>number of the new added morph target.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.clearLayer(int)">
			<summary>
			Clears the given animation layer.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.copyLayer(int,int)">
			<summary>
								Copies source layer bones transformations to the destination layer. The copying conditions are the following:											If the destination layer has more bones than the source one, it will keep its former transformations.						If the source layer has more bones than destination one, those bones will be added to the destination layer.
			</summary> 
			<param name="dest"> Number of the destination layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="src"> Number of the source layer in range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.createMesh(char,bool)">
			<summary>
			Creates a skinned mesh.
			</summary> 
			<param name="path"> Path to the mesh file. </param>
			<param name="unique"> Dynamic flag:false (0) - If the mesh vertices are changed in run-time, meshes loaded from the same file will be also changed.true (1) - If the mesh vertices are changed in run-time, meshes loaded from the same file won't be changed </param> 
			<returns>1 if the mesh is created successfully; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.findAnimation(char) const">
			<summary>
			Searches for an animation using the given path.
			</summary> 
			<param name="path"> Path to animation file.Use the path specified on animation loading. </param> 
			<returns>Animation number, if found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.findBone(char) const">
			<summary>
			Searches for a bone with a given name.
			</summary> 
			<param name="name"> Bone name. </param> 
			<returns>Bone number if found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.findSurfaceTarget(char,int) const">
			<summary>
			Searches for a surface morph target with a given name.
			</summary> 
			<param name="name"> Name of the morph target. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the morph target, if exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.flushMesh">
			<summary>
			Flushes mesh geometry to the video memory.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.importLayer(int)">
			<summary>
			Copies the current bone state to the given animation layer.
			</summary> 
			<param name="layer"> Animation layer number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.inverseLayer(int,int)">
			<summary>
			Copies inverse transformations of bones from the source layer to the destination layer.					Destination layer is not cleared before transformations are written to it.
			</summary> 
			<param name="dest"> Number of the destination layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="src"> Number of the source layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.lerpLayer(int,int,int,float)">
			<summary>
			Copies interpolated bone transformations from two source layers to a destination layer.					If there is no bone in one of the source layers, the bone transformation from another one will be copied to the destination layer without interpolation.
			</summary> 
			<param name="dest"> Number of the destination layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="layer0"> Number of the first source layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="layer1"> Number of the second source layer in range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="weight"> Interpolation weight. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.loadMesh(char)">
			<summary>
			Loads a new mesh instead of the current mesh from the .mesh file. This function doesn't change the mesh name.
			</summary> 
			<param name="path"> The path to the .mesh file. </param> 
			<returns>1 if the mesh is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.mergeMeshSurface(int,Unigine.Ptr{ObjectMeshSkinned},int)">
			<summary>
			Merges the specified surface from the source ObjectMeshSkinned with the specified destination surface of the mesh.
			</summary> 
			<param name="dest_surface"> Number of the destination surface, with which a surface from the source ObjectMeshSkinned is to be merged. </param>
			<param name="src_mesh"> Source ObjectMeshSkinned to copy a surface from. </param>
			<param name="src_surface"> Number of source mesh surface to merge. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.mulLayer(int,int,int,float)">
			<summary>
			Copies multiplied bone transformations from two source layers to the destination layer.
			</summary> 
			<param name="dest"> Number of the destination layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="layer0"> Number of the first source layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="layer1"> Number of the second source layer in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param>
			<param name="weight"> Interpolation weight. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.play">
			<summary>
			Continues playback of the animation, if it was paused, or starts playback if it was stopped.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.removeAnimation(int)">
			<summary>
			Removes the given animation.
			</summary> 
			<param name="animation"> Animation number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.removeLayer(int)">
			<summary>
			Removes an animation layer.
			</summary> 
			<param name="layer"> Layer number in the range from 0 to the total number of animation layers.To get the total number of animation layers, use the getNumLayers() method. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.removeTarget(int,int)">
			<summary>
			Removes the given morph target.
			</summary> 
			<param name="target"> Target number in the range from 0 to the total number of morph targets.To get the total number of morph targets for a given surface, use the getNumTargets() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.saveMesh(char)">
			<summary>
			Saves the mesh to .mesh or .anim format.
			</summary> 
			<param name="path"> Path to the file including the file name and extension — *.mesh or *.anim. </param> 
			<returns>1 if the mesh is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.stop">
			<summary>
			Stops animation playback. This function saves the playback position so that playing of the animation can be resumed from the same point.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Node type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.updateSurfaceBounds(int)">
			<summary>
			Updates mesh surface bounds. This method is to be called to recalculate bounds after changing a mesh surface (e.g. modifying positions of coordinate vertices).
			</summary> 
			<param name="surface"> Number of the surface to recalculate bound for. The default value is -1 (all surfaces). </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setFPSVisibleCamera(int)">
			<summary>
			Sets the update rate value when the object is rendered to the viewport. The default value is set to infinity.
			</summary> 
			<param name="camera"> Update rate value when the object is rendered. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getFPSVisibleCamera const">
			<summary>
			Returns the update rate value when the object is rendered to the viewport.
			</summary>  
			<returns>Update rate value when the object is rendered.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setFPSVisibleShadow(int)">
			<summary>
			Sets the update rate value when only object shadows are rendered. The default value is set to 30 fps.
			</summary> 
			<param name="shadow"> Update rate value when only object shadows are rendered. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getFPSVisibleShadow const">
			<summary>
			Returns the update rate value when only object shadows are rendered.
			</summary>  
			<returns>Update rate value when only object shadows are rendered.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setFPSInvisible(int)">
			<summary>
			Sets the update rate value when the object is not rendered at all. The default value is 0 fps.
			</summary> 
			<param name="invisible"> Update rate value when the object is not rendered at all. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getFPSInvisible const">
			<summary>
			Returns the update rate value when the object is not rendered at all.
			</summary>  
			<returns>Update rate value when the object is not rendered at all.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setUpdateDistanceLimit(float)">
			<summary>
			Sets the distance from the camera within which the object should be updated. The default value is 200 units.
			</summary> 
			<param name="limit"> Distance from the camera within which the object should be updated. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getUpdateDistanceLimit const">
			<summary>
			Returns the distance from the camera within which the object should be updated.
			</summary>  
			<returns>Distance from the camera within which the object should be updated.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.updateSkinned">
			<summary>
			Forces update of all bone transformations.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneNotAdditionalBindLocalTransform(int) const">
			<summary>
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneNotAdditionalBindObjectTransform(int) const">
			<summary>
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBoneNotAdditionalBindWorldTransform(int) const">
			<summary>
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBindNode(int,Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets a new node whose transformation is to be used to control the transformation of the bone with the specified number.
			</summary> 
			<param name="bone"> Number of the bone to be controlled by the specified node, in the range from 0 to the total number of bones. </param>
			<param name="node"> Node whose transformation is used to control the transformation of the bone. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.removeBindNode(int)">
			<summary>
			Removes the assigned bind node from the bone with the specified number.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBindNode(int) const">
			<summary>
			Returns the bind node currently assigned to the bone with the specified number.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
			<returns>Node whose transformation is used to control the transformation of the bone if it is assigned; otherwise - nullptr.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBindNodeSpace(int,ObjectMeshSkinned::NODE_SPACE)">
			<summary>
			Sets a new value indicating which transformation of the bind node (World or Local) is to be used to override the transformation of the specified bone.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param>
			<param name="space"> Type of transformation of the bind node to be used to override the transformation of the specified bone, one of the NODE_SPACE* values. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBindNodeSpace(int) const">
			<summary>
			Returns the current value indicating which transformation of the bind node (World or Local) is to be used to override the transformation of the specified bone.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
			<returns>Type of transformation of the bind node to be used to override the transformation of the specified bone, one of the NODE_SPACE* values.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBindBoneSpace(int,ObjectMeshSkinned::BONE_SPACE)">
			<summary>
			Sets a value indicating which transformation of the specified bone is to be overridden by the bind node's transformation.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param>
			<param name="space"> Type of transformation of the specified bone to be overridden by the bind node's transformation, one of the BONE_SPACE* values. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBindBoneSpace(int) const">
			<summary>
			Returns the current value indicating which transformation of the specified bone is to be overridden by the bind node's transformation.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
			<returns>Current type of transformation of the specified bone overridden by the bind node's transformation, one of the BONE_SPACE* values.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBindMode(int,ObjectMeshSkinned::BIND_MODE)">
			<summary>
			Sets a new type of blending of bind node's and bone's transformations.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param>
			<param name="mode"> New type of blending of bind node's and bone's transformations:OVERRIDE - replace bone's transformation with the transformation of the node.ADDITIVE - node's transformation is added to the current transformation of the bone. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBindMode(int) const">
			<summary>
			Returns the current type of blending of bind node's and bone's transformations.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
			<returns>Current type of blending of bind node's and bone's transformations:OVERRIDE - replace bone's transformation with the transformation of the node.ADDITIVE - node's transformation is added to the current transformation of the bone.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setBindNodeOffset(int,Unigine.Math.Mat4)">
			<summary>
			Sets a new transformation matrix to be applied to the node's transformation before applying it to bone's transformation. This parameter serves for the purpose of additional correction of the node's transform for the bone's basis.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param>
			<param name="offset"> Transformation matrix applied to the node's transformation before applying it to bone's transformation. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.getBindNodeOffset(int) const">
			<summary>
			Returns the current transformation matrix which is applied to the node's transformation before applying it to bone's transformation. This parameter serves for the purpose of additional correction of the node's transform for the bone's basis.
			</summary> 
			<param name="bone"> Number of the bone, in the range from 0 to the total number of bones. </param> 
			<returns>Transformation matrix currently applied to the node's transformation before applying it to bone's transformation.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.addVisualizeBone(int)">
			<summary>
			Adds a bone with the specified number to the list of the bones for which the basis vectors are to be visualized.
			</summary> 
			<param name="bone"> Number of the bone to be added to the visualizer, in the range from 0 to the total number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.removeVisualizeBone(int)">
			<summary>
			Removes a bone with the specified number from the list of the bones for which the basis vectors are to be visualized.
			</summary> 
			<param name="bone"> Number of the bone to be removed from the visualizer, in the range from 0 to the total number of bones. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.clearVisualizeBones">
			<summary>
			Clears the list of the bones for which the basis vectors are to be visualized.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.setVisualizeAllBones(bool)">
			<summary>
			Sets a value indicating if visualization for bones and their basis vectors is enabled. The visualizer can be used for debugging purposes showing positions of bones and their basis vectors for multiple meshes simultaneously.
			</summary> 
			<param name="bones"> true to enable visualization of bones and their basis vectors; false — to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectMeshSkinned.isVisualizeAllBones const">
			<summary>
			Returns a value indicating if visualization for bones and their basis vectors is enabled. The visualizer can be used for debugging purposes showing positions of bones and their basis vectors for multiple meshes simultaneously.
			</summary>  
			<returns>true if visualization for bones and their basis vectors is enabled; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.BONE_SPACE_LOCAL">
			<summary>
			Coordinates relative to the parent bone.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.BONE_SPACE_OBJECT">
			<summary>
			Coordinates relative to the skinned mesh object.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.BONE_SPACE_WORLD">
			<summary>
			World coordinates.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.NODE_SPACE_LOCAL">
			<summary>
			Local transformation of the node.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.NODE_SPACE_WORLD">
			<summary>
			World transformation of the node.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.BIND_MODE_ADDITIVE">
			<summary>
			Bind node's transformation is added to the current transformation of the bone.
		</summary>
		</member>
		<member name="F:Unigine.ObjectMeshSkinned.BIND_MODE_OVERRIDE">
			<summary>
			Replace bone's transformation with the transformation of the bind node.
		</summary>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Node type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getMeshName const">
			<summary>
			Returns the name of the mesh handled by a mesh spline cluster.
			</summary>  
			<returns>Mesh name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getNumMeshes const">
			<summary>
			Returns the total number of meshes handled by the mesh spline cluster.
			</summary>  
			<returns>Number of meshes.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getMeshTransform(int) const">
			<summary>
			Returns the transformation of the given mesh instance.
			</summary> 
			<param name="num"> Mesh instance number. </param> 
			<returns>Mesh transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getClusterTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator})">
			<summary>
			Collects transformations (local coordinates) for all spline cluster meshes within the area specified by the given bounding box and puts them to the specified buffer.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, for which the transformations of spline cluster meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of spline cluster meshes. </param> 
			<returns>true, if there are transformations of spline cluster meshes; or false, if there are no transformations of spline cluster meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getClusterWorldTransforms(Unigine.Math.WorldBoundBox,Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator})">
			<summary>
			Collects transformations (world coordinates) for all spline cluster meshes within the area specified by the given bounding box and puts them to the specified buffer.
			</summary> 
			<param name="bounds"> Bounding box, defining the area, for which the transformations of spline cluster meshes are to be collected. </param>
			<param name="transforms"> Buffer to store transformations of spline cluster meshes. </param> 
			<returns>true, if there are transformations of spline cluster meshes; or false, if there are no transformations of spline cluster meshes found.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getNumSurfaceTargets(int) const">
			<summary>
			Returns the total number of surface targets.
			</summary> 
			<param name="surface"> Surface number. </param> 
			<returns>Total number of surface targets.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.getSurfaceTargetName(int,int) const">
			<summary>
			Returns the name of a given surface target.
			</summary> 
			<param name="surface"> Surface number. </param>
			<param name="target"> Target number. </param> 
			<returns>Target name.</returns>
		</member>
		<member name="M:Unigine.ObjectMeshSplineCluster.findSurfaceTarget(char,int) const">
			<summary>
			Searches for a surface target with a given name.
			</summary> 
			<param name="name"> Target name. </param>
			<param name="surface"> Surface number. </param> 
			<returns>Target number if it exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.ObjectParticles">
			<summary>
			Constructor. Creates a particle system.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectParticles.getBoundBoxParticles const">
			<summary>
			Returns the estimated bounding box considering the changes of the particle system (velocity, length, etc.).
			</summary>  
			<returns>Bounding box</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getBoundBoxSimulation const">
			<summary>
			Returns the exact bounding box of the particle system.
			</summary>  
			<returns>Bounding box</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setClearOnEnable(bool)">
			<summary>
			Enables or disables re-initialization of the particle system each time it is enabled. When this option is disabled, turning on the particle system will restore the state it had before it was turned off.
			</summary> 
			<param name="enable"> 1 to re-initialize particle system each time it is enabled; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isClearOnEnable const">
			<summary>
			Returns a value indicating if particle system is to be re-initialized each time it is enabled.
			</summary>  
			<returns>1 if particle system is to be re-initialized each time it is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setCollision(int)">
			<summary>
			Enables or disables detecting collision by the outer surface of the sphere that approximates the particles (each particle is approximated with the sphere). This method is slower than intersection detection, but more precise.
			</summary> 
			<param name="collision"> 1 to enable sphere-based collision detection, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getCollision const">
			<summary>
			Returns a value indicating if collision is detected by the outer surface of the sphere that approximates the particles. This method is slower than sphere center-based intersection detection, but more precise.
			</summary>  
			<returns>1 if the sphere-based collision detection is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getContactNormal(int) const">
			<summary>
			Returns the point of the particles collision with other objects.
			</summary> 
			<param name="num"> The collision point number. </param> 
			<returns>Collision point coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getContactObject(int) const">
			<summary>
			Returns the object that collided with particles collided in a given collision point.
			</summary> 
			<param name="num"> The collision point number. </param> 
			<returns>The object participated in collision.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getContactPoint(int) const">
			<summary>
			Returns the normal vector for the collision point of the particles with other objects.
			</summary> 
			<param name="num"> The collision point number. </param> 
			<returns>Normal vector coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getContactVelocity(int) const">
			<summary>
			Returns the velocity in the collision point of the particles with other objects.
			</summary> 
			<param name="num"> The collision point number. </param> 
			<returns>Velocity values for each of space dimensions.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setCulling(int)">
			<summary>
			Sets a value indicating if particles should disappear upon collision or intersection.
			</summary> 
			<param name="culling"> 1 to make particles disappear; 0 to continue rendering of particles after collision/intersection. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getCulling const">
			<summary>
			Returns a value indicating if particles would disappear upon collision or intersection.
			</summary>  
			<returns>1 if particles would disappear; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorAttached(int,int)">
			<summary>
			Attaches or detaches a given deflector to the particle system.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="attached"> 1 to attach the deflector, 0 to detach it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isDeflectorAttached(int) const">
			<summary>
			Returns a value indicating if a given deflector is attached to the particle system.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>1 if the deflector is attached; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorEnabled(int,bool)">
			<summary>
			Enables or disables the given deflector.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="enabled"> true to enable the deflector, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isDeflectorEnabled(int) const">
			<summary>
			Returns a value indicating if the given deflector is enabled.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>true if the deflector is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorRestitution(int,float)">
			<summary>
			Sets restitution of the deflector. Makes sense only for reflectors.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="restitution"> A new restitution. The provided value will be saturated in the range [0; 1]. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDeflectorRestitution(int) const">
			<summary>
			Returns the current restitution of the deflector. Makes sense only for reflectors.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>The current restitution.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorRoughness(int,float)">
			<summary>
			Sets roughness of the deflector surface. Makes sense only for reflectors.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="roughness"> A new roughness. The provided value will be saturated in the range [0; 1]. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDeflectorRoughness(int) const">
			<summary>
			Returns the current roughness of the deflector. Makes sense only for reflectors.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>The current roughness.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorSize(int,Unigine.Math.vec3)">
			<summary>
			Sets dimensions of a given deflector.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="size"> New dimensions. Only the first two components are taken into account (x and y). </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDeflectorSize(int) const">
			<summary>
			Returns the current dimensions of the given deflector.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>The current dimensions. Only the first two components should be taken into account (x and y).</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorTransform(int,Unigine.Math.Mat4)">
			<summary>
			Sets a transformation matrix for a given deflector. This matrix describes the position and orientation of the deflector.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="transform"> A new transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDeflectorTransform(int) const">
			<summary>
			Returns the transformation matrix of a given deflector. This matrix describes the position and orientation of the deflector. The default is the identity matrix.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>The transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDeflectorType(int,int)">
			<summary>
			Sets a type of a given deflector.
			</summary> 
			<param name="num"> The deflector number. </param>
			<param name="type"> DEFLECTOR_REFLECTOR or DEFLECTOR_CLIPPER. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDeflectorType(int) const">
			<summary>
			Returns a type of a given deflector.
			</summary> 
			<param name="num"> The deflector number. </param> 
			<returns>DEFLECTOR_REFLECTOR or DEFLECTOR_CLIPPER.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDelay(float,float)">
			<summary>
			Sets delay of particle system initialization relative to the parent particle one.
			</summary> 
			<param name="mean"> A mean value in seconds. If a negative value is provided, 0 will be used instead. </param>
			<param name="spread"> A spread value in seconds. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDelayMean const">
			<summary>
			Returns the mean value of particles initialization delay relative to the parent particle system.
			</summary>  
			<returns>The mean value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getDelaySpread const">
			<summary>
			Returns the spread value of particles initialization delay relative to the parent particle system.
			</summary>  
			<returns>The spread value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDepthSort(int)">
			<summary>
			Enables or disables depth sorting of particles. The depth sorting is required, if particles use alpha blending.
			</summary> 
			<param name="sort"> 1 to enable the depth sorting, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDepthSort const">
			<summary>
			Returns a value indicating if depth sorting of particles is enabled. Depth sorting is required, if particles use alpha blending.
			</summary>  
			<returns>1 if the depth sorting is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setDuration(float,float)">
			<summary>
			Sets a duration of each particle emission in seconds.
			</summary> 
			<param name="mean"> Mean value in seconds. If a negative value is provided, 0 will be used instead. </param>
			<param name="spread"> Spread value in seconds. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getDurationMean const">
			<summary>
			Returns the current mean value of particle emission intervals.
			</summary>  
			<returns>The mean value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getDurationSpread const">
			<summary>
			Returns the current spread value of particle emission intervals.
			</summary>  
			<returns>The spread value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterBased(bool)">
			<summary>
			Sets a value indicating if particles should follow emitter transformations, i.e. the direction of their flow should change after the emitter.
			</summary> 
			<param name="based"> 1 for particles to follow emitter transformations; 0 for them to flow independently. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isEmitterBased const">
			<summary>
			Returns a value indicating if particles follow emitter transformations, i.e. the direction of their flow changes after the emitter.
			</summary>  
			<returns>true if particles follow emitter transformations; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterContinuous(bool)">
			<summary>
			Sets a value indicating if additional spawn points should be generated when the emitter is moved, which provides a continuous flow of particles.
			</summary> 
			<param name="continuous"> true to create the continuous flow of particles; false to create the discrete flow with sparse generation points. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isEmitterContinuous const">
			<summary>
			Returns a value indicating if additional spawn points are generated when the emitter is moved, which provides a continuous flow of particles.
			</summary>  
			<returns>true if particles are created in the continuous flow; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterEnabled(bool)">
			<summary>
			Enables or disables particle emission.
			</summary> 
			<param name="enabled"> true to enable particle emission, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isEmitterEnabled const">
			<summary>
			Returns a value indicating if particle emission is enabled.
			</summary>  
			<returns>true if emission is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterSequence(int)">
			<summary>
			Sets the rendering order of the particle system inside the particles hierarchy.
			</summary> 
			<param name="sequence"> The rendering priority. Particle systems with the lowest order number are rendered first. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getEmitterSequence const">
			<summary>
			Returns the current rendering order of the particle system inside the particles hierarchy.
			</summary>  
			<returns>The current rendering priority.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterShift(bool)">
			<summary>
			Sets a value indicating if the emitter spawns particles only when it is moving. The further it has moved, if compared to its position in the previous frame, the more particles will be spawned. If the emitter is not moving, there are no particles at all.
			</summary> 
			<param name="shift"> true to enable the shift-based spawning; false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isEmitterShift const">
			<summary>
			Returns a value indicating if the emitter spawns particles only when it is moving. The further it has moved, if compared to its position in the previous frame, the more particles will be spawned. If the emitter is not moving, there are no particles at all.
			</summary>  
			<returns>true if the shift-based spawning is enabled; false if it is not.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterSize(Unigine.Math.vec3)">
			<summary>
			Sets a size of the emitter.
			</summary> 
			<param name="size"> A new emitter size. If negative values are provided, 0 will be used instead of them. Depending on the type of the emitter, this value is interpreted as follows:EMITTER_POINT, EMITTER_SPARK, EMITTER_RANDOM: all vector components are ignored.EMITTER_SPHERE: the first vector component is the radius of the sphere.EMITTER_CYLINDER: the first vector component is the radius of the cylinder, the second vector component is the height of the cylinder.EMITTER_BOX: all vector components are interpreted as box dimensions (x, y, z). </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getEmitterSize const">
			<summary>
			Returns the current emitter size.
			</summary>  
			<returns>The current size of the emitter. Depending on the type of the emitter, this value is interpreted as follows:EMITTER_POINT, EMITTER_SPARK, EMITTER_RANDOM: all vector components are ignored.EMITTER_SPHERE: the first vector component is the radius of the sphere.EMITTER_CYLINDER: the first vector component is the radius of the cylinder, the second vector component is the height of the cylinder.EMITTER_BOX: all vector components are interpreted as box dimensions (x, y, z).</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterSync(int)">
			<summary>
			Sets a value indicating if a particle system emitter needs to be synchronized to a parent particle system.
			</summary> 
			<param name="sync"> 1 to synchronize the emitter; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getEmitterSync const">
			<summary>
			Returns a value indicating if a particle system emitter is synchronized to a parent particle system.
			</summary>  
			<returns>1 if it is synchronized; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterType(int)">
			<summary>
			Sets a type of the emitter.
			</summary> 
			<param name="type"> The type of the emitter (one of the EMITTER_* values). </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getEmitterType const">
			<summary>
			Returns the type (shape) of the emitter.
			</summary>  
			<returns>The type of the emitter (one of the EMITTER_* values).</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterVelocity(Unigine.Math.vec3)">
			<summary>
			Sets the emitter velocity, which is added to the initial velocity of spawned particles. If the value is equal to 0, the actual velocity of emitter node will be used.
			</summary> 
			<param name="velocity"> Emitter velocity, in units per second. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getEmitterVelocity const">
			<summary>
			Returns the current emitter velocity, which is added to the initial velocity of spawned particles. If the value equals 0, the actual velocity of emitter node will be used.
			</summary>  
			<returns>The emitter velocity in units per second.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceAttached(int,int)">
			<summary>
			Attaches or detaches the given force to the particle system.
			</summary> 
			<param name="num"> Force number in the range from 0 to the total number of forces. </param>
			<param name="attached"> 1 to attach the force, 0 to detach it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isForceAttached(int) const">
			<summary>
			Returns a value indicating if the given force is attached to the particle system.
			</summary> 
			<param name="num"> Force number in the range from 0 to the total number of forces. </param> 
			<returns>1 if the force is attached; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceAttenuation(int,float)">
			<summary>
			Sets an attenuation factor for the specified force.
			</summary> 
			<param name="num"> Force number in the range from 0 to the total number of forces. </param>
			<param name="attenuation"> An attenuation factor. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getForceAttenuation(int) const">
			<summary>
			Returns the current attenuation factor for the specified force.
			</summary> 
			<param name="num"> Force number in the range from 0 to the total number of forces. </param> 
			<returns>The current attenuation factor.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceAttractor(int,float)">
			<summary>
			Sets the attraction force that will be applied to the particles in the specified force radius.
			</summary> 
			<param name="num"> The attraction force number. </param>
			<param name="attractor"> The force value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getForceAttractor(int) const">
			<summary>
			Returns the current attraction force applied to the particles in the specified force radius.
			</summary> 
			<param name="num"> The attraction force number. </param> 
			<returns>The force value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceEnabled(int,bool)">
			<summary>
			Enables or disables the given force.
			</summary> 
			<param name="num"> The force number. </param>
			<param name="enabled"> 1 to enable the force, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isForceEnabled(int) const">
			<summary>
			Returns a value indicating if the given force is enabled.
			</summary> 
			<param name="num"> The force number. </param> 
			<returns>1 if the force is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceRadius(int,float)">
			<summary>
			Sets a radius for applying the force.
			</summary> 
			<param name="num"> The force number. </param>
			<param name="radius"> A radius in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getForceRadius(int) const">
			<summary>
			Returns the current radius set for applying the force.
			</summary> 
			<param name="num"> The force number. </param> 
			<returns>The current radius in units.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceRotator(int,float)">
			<summary>
			Sets a rotation force that will be applied to the particles in the specified force radius.
			</summary> 
			<param name="num"> The rotation force number. </param>
			<param name="rotator"> The force value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getForceRotator(int) const">
			<summary>
			Returns the current rotation force applied to the particles in the specified force radius.
			</summary> 
			<param name="num"> The rotation force number. </param> 
			<returns>The force value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setForceTransform(int,Unigine.Math.Mat4)">
			<summary>
			Sets a transformation matrix for the specified force.
			</summary> 
			<param name="num"> The force number. </param>
			<param name="transform"> A transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getForceTransform(int) const">
			<summary>
			Returns the current transformation matrix for the specified force.
			</summary> 
			<param name="num"> The force number. </param> 
			<returns>The transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setPhysicsIntersection(int)">
			<summary>
			Enables or disables detecting collision by the center of the sphere that approximates the particles. This method is faster than collision detection, but less precise. Physics intersections are detected only for matching bit masks.
			</summary> 
			<param name="intersection"> 1 to detect intersections, 0 not to detect. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getPhysicsIntersection const">
			<summary>
			Returns a value indicating if collisions are to be detected by the center of the sphere that approximates the particles. This method is faster than sphere-based collision detection, but less precise. Physics intersections are detected only for matching bit masks.
			</summary>  
			<returns>1 if the sphere center-based intersection detection is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setLife(float,float)">
			<summary>
			Sets a lifetime duration of particles in seconds.
			</summary> 
			<param name="mean"> A mean value in seconds. If a too small value is provided, 1E-6 will be used instead. </param>
			<param name="spread"> A spread value in seconds. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getLifeMean const">
			<summary>
			Returns the current mean value of particle lifetime duration.
			</summary>  
			<returns>The mean value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getLifeSpread const">
			<summary>
			Returns the current spread value of particle lifetime duration.
			</summary>  
			<returns>The spread value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setLinearDamping(float)">
			<summary>
			Sets a linear damping of particles.
			</summary> 
			<param name="damping"> a new linear damping. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getLinearDamping const">
			<summary>
			Returns the current linear damping of particles.
			</summary>  
			<returns>The current linear damping.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setMaxWarmingTime(float)">
			<summary>
			Sets max time for particles simulation during the warming, in seconds.
			</summary> 
			<param name="time"> Time, in seconds. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getMaxWarmingTime const">
			<summary>
			Returns max time value for particles simulation during the warming, in seconds.
			</summary>  
			<returns>Time, in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseAttached(int,int)">
			<summary>
			Sets the noise as an attached.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="attached"> 1 to enable the Attached flag, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isNoiseAttached(int) const">
			<summary>
			Returns a value indicating if the given noise is attached to the particle system.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>1 if the noise is attached; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseEnabled(int,bool)">
			<summary>
			Enables or disables the given noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="enabled"> 1 to enable the noise, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isNoiseEnabled(int) const">
			<summary>
			Returns a value indicating if the given noise is enabled.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>1 if the noise is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseForce(int,float)">
			<summary>
			Sets the Force parameter value for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="force"> The noise force value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseForce(int) const">
			<summary>
			Returns the Force parameter value for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>The noise force value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseFrequency(int,int)">
			<summary>
			Sets the Frequency parameter value for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="frequency"> The noise frequency value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseFrequency(int) const">
			<summary>
			Returns the Frequency parameter value for the required noise.
			</summary> 
			<param name="num"> The target noise number. </param> 
			<returns>The noise frequency value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseImage(int) const">
			<summary>
			Returns the spatial texture for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>The texture of the noise.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseOffset(int,Unigine.Math.vec3)">
			<summary>
			Sets the Offset parameter coordinates values for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="offset"> Offset coordinates values. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseOffset(int) const">
			<summary>
			Returns the Offset parameter coordinates values for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>Offset coordinates values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseScale(int,float)">
			<summary>
			Sets the Scale parameter value for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="scale"> The noise scale value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseScale(int) const">
			<summary>
			Returns the Scale parameter value for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>The noise scale value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseSize(int,int)">
			<summary>
			Sets the Size parameter value for the required noise.
			</summary> 
			<param name="num"> The target noise number. </param>
			<param name="size"> The noise size value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseSize(int) const">
			<summary>
			Returns the Size parameter value for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>The noise size value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseStep(int,Unigine.Math.vec3)">
			<summary>
			Sets the Step parameter coordinates values for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="step"> Step coordinates values. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseStep(int) const">
			<summary>
			Returns the Step parameter coordinates values for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>Step coordinates values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseTransform(int,Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="transform"> The noise transformation matrix. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseTransform(int) const">
			<summary>
			Returns the transformation matrix for the required noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>The noise transformation matrix.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getNumContacts const">
			<summary>
			Returns the total number of particles collisions with other objects.
			</summary>  
			<returns>Number of collisions.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNumDeflectors(int)">
			<summary>
			Sets the new number of deflectors.
			</summary> 
			<param name="deflectors"> Number of deflectors. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNumDeflectors const">
			<summary>
			Returns the current number of deflectors.
			</summary>  
			<returns>The number of deflectors.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNumForces(int)">
			<summary>
			Sets the new number of forces.
			</summary> 
			<param name="forces"> Number of forces. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNumForces const">
			<summary>
			Returns the number of the currently acting forces.
			</summary>  
			<returns>The number of forces.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNumNoises(int)">
			<summary>
			Sets the new number of noises.
			</summary> 
			<param name="noises"> Number of noises. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNumNoises const">
			<summary>
			Returns the current number of noises.
			</summary>  
			<returns>Number of noises.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getNumParticles const">
			<summary>
			Returns the current number of particles.
			</summary>  
			<returns>The number of particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getParticlePosition(int) const">
			<summary>
			Returns the position of a given particle.
			</summary> 
			<param name="num"> The particle number. </param> 
			<returns>Position coordinates for the particle.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getParticleRadius(int) const">
			<summary>
			Returns the radius of a given particle.
			</summary> 
			<param name="num"> The particle number. </param> 
			<returns>Radius of the particle.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setParticlesType(int)">
			<summary>
			Sets a type of particles to emit.
			</summary> 
			<param name="type"> A type of particles (one of the TYPE_* values). </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getParticlesType const">
			<summary>
			Returns the type of emitted particles.
			</summary>  
			<returns>The type of particles (one of the TYPE_* values).</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getParticleTransforms(Unigine.Vector{Unigine.Math.Mat4,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns transformation matrices for spawned particles.
			</summary> 
			<param name="transforms"> Array to which the transformation matrices will be added. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getParticleVelocity(int) const">
			<summary>
			Returns the velocity vector for a specified particle.
			</summary> 
			<param name="num"> The particle number. </param> 
			<returns>The velocity vector.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setPeriod(float,float)">
			<summary>
			Sets an interval of emitter inactivity in seconds.
			</summary> 
			<param name="mean"> A mean value in seconds. If a negative value is provided, 0 will be used instead. </param>
			<param name="spread"> A spread value in seconds. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getPeriodMean const">
			<summary>
			Returns the current mean value of emitter inactivity intervals.
			</summary>  
			<returns>The mean value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getPeriodSpread const">
			<summary>
			Returns the current spread value of emitter inactivity intervals.
			</summary>  
			<returns>The spread value in seconds.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setPhysicalMask(int)">
			<summary>
			Sets a bit mask for interactions with physicals. Two objects interact, if they both have matching masks.
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getPhysicalMask const">
			<summary>
			Returns the bit mask for interactions with physicals. Two objects interact, if they both have matching masks.
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setPhysicalMass(float)">
			<summary>
			Sets the mass of the particles. This value matters only for computing physical interactions.
			</summary> 
			<param name="mass"> The mass of the particles. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getPhysicalMass const">
			<summary>
			Returns the current mass of the particles. This value matters only for computing physical interactions.
			</summary>  
			<returns>The mass of the particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setProceduralRendering(bool)">
			<summary>
			Enables particle system rendering to procedural texture to be used by an orthographic decal or a field height. For example, ship wake waves are simulated using this feature.
			</summary> 
			<param name="rendering"> 1 to enable rendering to procedural texture, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.isProceduralRendering const">
			<summary>
			Returns the value indicating if the procedural rendering enabled or not. This feature enables rendering of particles into an orthographic decal or a field height, and can be used, for example, to create ship wake waves.
			</summary>  
			<returns>1 if the procedural rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setProceduralParenting(int)">
			<summary>
			Sets the type of relationship between the particle system and a decal / field node that uses the procedural texture.					Procedural rendering must be enabled.
			</summary> 
			<param name="parenting"> Relationship type to be used for rendering the particle system to a procedural texture:0 - a decal/field node that uses the procedural texture is a child of the particle system.1 - a decal/field node that uses the procedural texture is a parent of the particle system. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getProceduralParenting const">
			<summary>
			Returns the current type of relationship between the particle system and a decal / field node that uses the procedural texture.					Procedural rendering must be enabled.
			</summary>  
			<returns>Relationship type to be used for rendering the particle system to a procedural texture:0 - a decal/field node that uses the procedural texture is a child of the particle system.1 - a decal/field node that uses the procedural texture is a parent of the particle system.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setProceduralPositioning(int)">
			<summary>
			Sets positioning mode to be used for child nodes using the procedural texture to which the particle system is rendered.																		Positioning mode can be set only when the particle system is a parent of a decal/field node that uses the procedural texture (parenting mode is set to 0)							Procedural rendering must be enabled.
			</summary> 
			<param name="positioning"> Mode of the procedural positioning. Can be one of the following:PROCEDURAL_POSITIONING_MANUAL = 0 - position of a child decal/field node, that uses the procedural texture, can be changed manually.PROCEDURAL_POSITIONING_AUTO = 1 - position of a child decal/field node, that uses the procedural texture, is automatically defined by the position of particle system and cannot be changed manually. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getProceduralPositioning const">
			<summary>
			Returns the value indicating the procedural position mode.					Procedural rendering must be enabled.
			</summary>  
			<returns>Mode of the procedural positioning. Can be one of the following:PROCEDURAL_POSITIONING_MANUAL = 0PROCEDURAL_POSITIONING_AUTO = 1</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setProceduralTextureResolution(Unigine.Math.vec3)">
			<summary>
			Sets the resolution of the procedural texture.					Procedural rendering must be enabled.
			</summary> 
			<param name="res"> Resolution of the texture. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getProceduralTextureResolution const">
			<summary>
			Returns the resolution of the procedural texture.					Procedural rendering must be enabled.
			</summary>  
			<returns>Resolution of the texture.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setRestitution(float)">
			<summary>
			Sets a restitution value for particles.
			</summary> 
			<param name="restitution"> A new restitution value. The provided value will be saturated in the range [0; 1]. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getRestitution const">
			<summary>
			Returns the current restitution value for particles.
			</summary>  
			<returns>The current restitution value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setRoughness(float)">
			<summary>
			Sets a roughness of the particle surface.
			</summary> 
			<param name="roughness"> A new roughness value. The provided value will be saturated in the range [0; 1]. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getRoughness const">
			<summary>
			Returns the current roughness of the particle surface.
			</summary>  
			<returns>The current roughness.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setSeed(unsignedint)">
			<summary>
			Sets a seed value for the particles' random generator.
			</summary> 
			<param name="seed"> A seed value. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getSeed const">
			<summary>
			Returns the seed value used for the particles' random generator.
			</summary>  
			<returns>The seed value.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNumberPerSpawn(int)">
			<summary>
			Sets the number of particles to be spawned simultaneously each time according to the spawn rate.
			</summary> 
			<param name="spawn"> Number of particles to be spawned simultaneously. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNumberPerSpawn const">
			<summary>
			Returns the current number of particles to be spawned simultaneously each time according to the spawn rate.
			</summary>  
			<returns>Current number of particles to be spawned simultaneously.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setSpawnRate(float)">
			<summary>
			Sets a rate at which particles are created.
			</summary> 
			<param name="rate"> A new spawn rate. If a too small value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getSpawnRate const">
			<summary>
			Returns the current particle spawn rate.
			</summary>  
			<returns>The current spawn rate.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setSpawnScale(float)">
			<summary>
			Sets a spawn scale that enables to modulate smooth and gradual initialization of the particle system starting with the given spawn state and up to the specified spawn rate.
			</summary> 
			<param name="scale"> A spawn scale. The provided value is clipped to range [0;1]. By the value of 0, there are no spawned particles at the start. By the value of 1, the system is initialized with the specified spawn rate. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getSpawnScale const">
			<summary>
			Returns the current spawn scale that enables to modulate smooth and gradual initialization of the particle system starting with the given spawn state and up to the specified spawn rate.
			</summary>  
			<returns>The current spawn scale.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setSpawnThreshold(float)">
			<summary>
			Sets the velocity threshold for spark and random emitters. They spawn particles if the velocity value of the parent particles is high enough.
			</summary> 
			<param name="threshold"> A velocity threshold for the parent particles. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getSpawnThreshold const">
			<summary>
			Returns the current velocity threshold for spark and random emitters. They spawn particles if velocity of the parent particles is high enough.
			</summary>  
			<returns>The current velocity threshold of the parent particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setTextureAtlas(int)">
			<summary>
			Sets a value indicating if a diffuse texture for the particles is a NxN texture atlas.
			</summary> 
			<param name="atlas"> 1 if a texture atlas is used; 0 if an ordinary diffuse texture is assigned. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getTextureAtlas const">
			<summary>
			Returns a value indicating if a diffuse texture for the particles is used as a NxN texture atlas.
			</summary>  
			<returns>1 if a texture atlas is used; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setVariationX(int)">
			<summary>
			Sets a value indicating if the initial orientation of particles diffuse texture should be randomly varied along the X axis.
			</summary> 
			<param name="variationx"> 1 to add random variation along the X axis, 0 not to add. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getVariationX const">
			<summary>
			Returns a value indicating if the initial orientation of particles diffuse texture is randomly varied along the X axis.
			</summary>  
			<returns>1 if there is random variation along the X axis, 0 if there is not.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setVariationY(int)">
			<summary>
			Sets a value indicating if the initial orientation of particles diffuse texture should be randomly varied along the Y axis.
			</summary> 
			<param name="variationy"> 1 to add random variation along the Y axis, 0 not to add. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getVariationY const">
			<summary>
			Returns a value indicating if the initial orientation of particles diffuse texture is randomly varied along the Y axis.
			</summary>  
			<returns>1 if there is random variation along the Y axis, 0 if there is not.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setWarming(int)">
			<summary>
			Enables the warm start for the particles. It means that the particle system starts to be rendered with already emitted particles, rather then from a zero point.
			</summary> 
			<param name="warming"> 1 to enable the warm start; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getWarming const">
			<summary>
			Returns a value indicating if the warm start is enabled for the particles. It means that the particle system starts to be rendered with already emitted particles, rather then from a zero point.
			</summary>  
			<returns>1 if the warm start is enabled; 0 if it is disabled.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getWorldBoundBoxParticles const">
			<summary>
			Returns the estimated world bounding box considering the changes of the particle system (velocity, length, etc.).
			</summary>  
		</member>
		<member name="M:Unigine.ObjectParticles.getWorldOffset const">
			<summary>
			Returns the current world offset of the local origin of coordinates of the particle system. The offset of the origin of coordinates is changed depending on the position of the particle system so that the particles are simulated near their emitter.
			</summary>  
			<returns>Offset coordinates values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.addDeflector">
			<summary>
			Adds a deflector with default settings.
			</summary>  
			<returns>The number of the new deflector in the list of deflectors.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.addEmitterSpark(Unigine.Math.Vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Adds a spark emitter in the given point.
			</summary> 
			<param name="point"> Point for sparks emission. </param>
			<param name="normal"> Normal vector of the point of spark emission. </param>
			<param name="velocity"> Velocity in the point of spark emission (velocity of source particles or node by contact). </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.addForce">
			<summary>
			Adds a force with default settings.
			</summary>  
			<returns>The number of the new force in the list of forces.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.addNoise">
			<summary>
			Adds a new noise with default settings.
			</summary>  
			<returns>The number of the new noise in the list of noises.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.clearParticles">
			<summary>
			Deletes all particles spawned by the emitter.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectParticles.removeDeflector(int)">
			<summary>
			Removes a given point deflector.
			</summary> 
			<param name="num"> The number of the deflector to remove. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.removeForce(int)">
			<summary>
			Removes the given force.
			</summary> 
			<param name="num"> The number of the force to remove. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.removeNoise(int)">
			<summary>
			Removes the given noise.
			</summary> 
			<param name="num"> Target noise number. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>Object Particles type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.saveStateSelf(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the object's state to the stream.					This method saves all object's parameters, including forces, noises, and deflectors. To save any of these parameters individually, use saveStateForces(), saveStateNoises(), or saveStateDeflectors() respectively.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreStateSelf() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.restoreStateSelf(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the object's state from the stream.					This method restores all object's parameters, including forces, noises, and deflectors. To restore any of these parameters individually, use restoreStateForces(), restoreStateNoises(), or restoreStateDeflectors() respectively.					Restoring from the stream requires creating a blob to save into and saving the state using the saveStateSelf() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.saveStateForces(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the state of the object's forces to the specified stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreStateForces() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.restoreStateForces(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the state of the object's forces from the specified stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveStateForces() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.saveStateNoises(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the state of the object's noises to the specified stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreStateNoises() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.restoreStateNoises(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the state of the object's noises from the specified stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveStateNoises() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.saveStateDeflectors(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the state of the object's deflectors to the specified stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreStateDeflectors() method is used:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.restoreStateDeflectors(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores the state of the object's deflectors from the specified stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveStateDeflectors() method:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true on success; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setNoiseSeed(int,int)">
			<summary>
			Sets a new random seed value to be used for the noise with the specified number. This parameter is used to synchronize pseudorandom number generators for particle system noises.
			</summary> 
			<param name="num"> Target noise number. </param>
			<param name="seed"> Random seed value to be used for the target noise. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getNoiseSeed(int) const">
			<summary>
			Returns the random seed value currently used for the noise with the specified number. This parameter is used to synchronize pseudorandom number generators for particle system noises.
			</summary> 
			<param name="num"> Target noise number. </param> 
			<returns>Random seed value currently used for the target noise.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setSyncMode(ObjectParticles::SYNC_MODE)">
			<summary>
			Sets synchronization mode to be used for the particle system.
			</summary> 
			<param name="mode"> Synchronization mode to be set, one of the SYNC_MODE values. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getSyncMode const">
			<summary>
			Returns the current synchronization mode used for the particle system.
			</summary>  
			<returns>Current synchronization mode, one of the SYNC_MODE values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.takeSyncData(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Writes particle synchronization data to the specified stream. This method should be used by the particle system with the master sync mode.
			</summary> 
			<param name="stream"> Stream to which particle synchronization data is to be written. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.applySyncData(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Reads particle synchronization data from the specified stream and applies it to the particle system. This method should be used by the particle system with the slave sync mode.
			</summary> 
			<param name="stream"> Stream with particle synchronization data to be applied. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.setFPSVisibleCamera(int)">
			<summary>
			Sets the update rate value when the object is rendered to the viewport. The default value is infinity.
			</summary> 
			<param name="camera"> Update rate value when the object is rendered. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getFPSVisibleCamera const">
			<summary>
			Returns the update rate value when the object is rendered to the viewport.
			</summary>  
			<returns>Update rate value when the object is rendered.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setFPSVisibleShadow(int)">
			<summary>
			Sets the update rate value when only object shadows are rendered. The default value is 30 fps.
			</summary> 
			<param name="shadow"> Update rate value when only object shadows are rendered. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getFPSVisibleShadow const">
			<summary>
			Returns the update rate value when only object shadows are rendered.
			</summary>  
			<returns>Update rate value when only object shadows are rendered.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setFPSInvisible(int)">
			<summary>
			Sets the update rate value when the object is not rendered at all. The default value is 0 fps.
			</summary> 
			<param name="invisible"> Update rate value when the object is not rendered at all. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getFPSInvisible const">
			<summary>
			Returns the update rate value when the object is not rendered at all.
			</summary>  
			<returns>Update rate value when the object is not rendered at all.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setUpdateDistanceLimit(float)">
			<summary>
			Sets the distance from the camera within which the object should be updated. The default value is 1000 units.
			</summary> 
			<param name="limit"> Distance from the camera within which the object should be updated. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getUpdateDistanceLimit const">
			<summary>
			Returns the distance from the camera within which the object should be updated.
			</summary>  
			<returns>Distance from the camera within which the object should be updated.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setEmitterLimitPerSpawn(int)">
			<summary>
			Sets the maximum number of particles to be spawned simultaneously each time according to the Spawn Rate.
			</summary> 
			<param name="spawn"> New number of particles emitted per spawn. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getEmitterLimitPerSpawn const">
			<summary>
			Returns the maximum number of particles to be spawned simultaneously each time according to the Spawn Rate.
			</summary>  
			<returns>Current number of particles emitted per spawn.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getAngleOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the orientation angle values change over time.
			</summary>  
			<returns>Modifier, that controls orientation angle values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getRotationOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the particle angular velocity values change over time.
			</summary>  
			<returns>Modifier, that controls particle angular velocity values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getRadiusOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the particle radius values change over time.
			</summary>  
			<returns>Modifier, that controls particle radius values.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getGrowthOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the particle radius value changes over time.
			</summary>  
			<returns>Modifier, that controls particle growth.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getLengthStretchOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the stretch values of Length particles change over time.
			</summary>  
			<returns>Modifier, that controls stretching of Length particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getLengthFlatteningOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the flattening values of Length particles change over time.
			</summary>  
			<returns>Modifier, that controls flattening of Length particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getVelocityOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the velocity values of particles change over time.
			</summary>  
			<returns>Modifier, that controls linear velocity of particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getDirectionOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the direction of emission changes over time.
			</summary>  
			<returns>Modifier, that controls direction of emission of particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getPositionOverTimeModifier const">
			<summary>
			Returns the modifier used to control how particles positions change over time.
			</summary>  
			<returns>Modifier, that controls position of particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.getGravityOverTimeModifier const">
			<summary>
			Returns the modifier used to control how the gravity force that affects particles changes over time.
			</summary>  
			<returns>Modifier, that controls gravity of particles.</returns>
		</member>
		<member name="M:Unigine.ObjectParticles.setTextureAtlasSize(Unigine.Math.ivec2)">
			<summary>
			Sets the NxN size of the texture atlas for the particles.
			</summary> 
			<param name="size"> The size of the texture atlas to be used. </param> 
		</member>
		<member name="M:Unigine.ObjectParticles.getTextureAtlasSize const">
			<summary>
			Returns the NxN size of the texture atlas for the particles.
			</summary>  
			<returns>The size of the texture atlas.</returns>
		</member>
		<member name="F:Unigine.ObjectParticles.DEFLECTOR_CLIPPER">
			<summary>
			When a particle hits a deflector of this type, the particle is removed.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.DEFLECTOR_REFLECTOR">
			<summary>
			When a particle hits a deflector of this type, the particle bounces off it.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.EMITTER_BOX">
			<summary>
			Box emitter. Particles are emitted from a random point of the box.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.EMITTER_CYLINDER">
			<summary>
			Cylinder emitter. Particles are emitted from a random point of the cylinder.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.EMITTER_POINT">
			<summary>
			Point emitter. Particles are emitted from one single point.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.EMITTER_RANDOM">
			<summary>
			Arbitrary emitter. Particles are emitted from a random point of their parent node. With an emitter of this type you can create particles, which spawn particles themselves.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.EMITTER_SPARK">
			<summary>
			Spark emitter. Particles are emitted from a single point and imitate sparks.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.EMITTER_SPHERE">
			<summary>
			Sphere emitter. Particles are emitted from a random point of the sphere.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_BILLBOARD">
			<summary>
			Particles of this type are camera-oriented and rotating.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_CHAIN">
			<summary>
			Particles of this type are camera-oriented and connected with each other at vertices forming continuous flow.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_FLAT">
			<summary>
			Particles of this type are perpendicular to the z-axis of their particle system.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_LENGTH">
			<summary>
			Particles of this type are similar to billboard particles, but stretched along the direction of their motion and do not rotate.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_POINT">
			<summary>
			Particles of this type are similar to billboard particles, but do not rotate.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_RANDOM">
			<summary>
			Particles of this type are arbitrary oriented ones.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.TYPE_ROUTE">
			<summary>
			Particles of this type can be used to create tracks from moving objects (for example, foam after a ship). Each Route particle is flat (just like flat particles), but is oriented on the plane in the same way as the emitter when it spawned it.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.SYNC_MODE_SLAVE">
			<summary>
			This mode makes a particle system take the stored synchronization data from the master particle system.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.SYNC_MODE_MASTER">
			<summary>
			This mode enables storing of the particle system data used for synchronization by the slave system.
		</summary>
		</member>
		<member name="F:Unigine.ObjectParticles.SYNC_MODE_NONE">
			<summary>
			In this mode, the particle system neither provides nor takes any synchronization data.
		</summary>
		</member>
		<member name="M:Unigine.ParticleModifier.isSignedValues const">
			<summary>
			Returns a value indicating whether the value(s) controlled by the modifier are signed or unsigned.
			</summary>  
			<returns>true is the value(s) controlled by the modifier are signed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.saveState(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves the current modifier state to the specified stream.						Saving into the stream requires creating a blob to save into. To restore the saved state the restoreState() method is used:
			</summary> 
			<param name="stream"> Stream to which the modifier's state is to be saved. </param> 
			<returns>true if the state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores a previously saved state from the specified stream.						Restoring from the stream requires creating a blob to save into and saving the state using the saveState() method:
			</summary> 
			<param name="stream"> Stream from which the modifier's state is to be loaded. </param> 
			<returns>true if the state is restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.save(Unigine.Ptr{Unigine.Xml}) const">
			<summary>
			Saves the modifier's state to the specified Xml node.
			</summary> 
			<param name="xml"> Xml node to which the modifier's state is to be saved. </param> 
			<returns>true if the state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.load(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads a previously saved modifier's state from the specified Xml node.
			</summary> 
			<param name="xml"> Xml node from which the modifier's state is to be loaded. </param> 
			<returns>true if the state is loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.getSystemMemoryUsage const">
			<summary>
			Returns the total amount of memory used by the modifier.
			</summary>  
			<returns>Total amount of memory used by the modifier with all its keys, in bytes.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.getType const">
			<summary>
			Returns the type of the particle modifier.
			</summary>  
			<returns>Particle modifier type. One of the TYPE enum values.</returns>
		</member>
		<member name="M:Unigine.ParticleModifier.setMode(ParticleModifier::MODE)">
			<summary>
			Sets the mode of the particle modifier. The mode defines how the controlled value is set. You can switch modes at any time.
			</summary> 
			<param name="mode"> Modifier mode to be set. One of the MODE enum values. </param> 
		</member>
		<member name="M:Unigine.ParticleModifier.getMode const">
			<summary>
			Returns the current mode of the particle modifier. The mode defines how the controlled value is set. You can switch modes at any time.
			</summary>  
			<returns>Current particle modifier mode. One of the MODE enum values.</returns>
		</member>
		<member name="F:Unigine.ParticleModifier.PARTICLE_MODIFIER_SCALAR">
			<summary>
			In this mode the modifier controls a single scalar value via a single curve.
		</summary>
		</member>
		<member name="F:Unigine.ParticleModifier.PARTICLE_MODIFIER_VECTOR">
			<summary>
			In this mode the modifier controls a vector of up to 4 values via a set of curves.
		</summary>
		</member>
		<member name="F:Unigine.ParticleModifier.MODE_CONSTANT">
			<summary>
			In this mode the specified value is fixed throughout the lifetime.
		</summary>
		</member>
		<member name="F:Unigine.ParticleModifier.MODE_RANDOM_BETWEEN_TWO_CONSTANTS">
			<summary>
			In this mode two constants define the upper and lower limits for the value. The actual value changes randomly over time between these limits.
		</summary>
		</member>
		<member name="F:Unigine.ParticleModifier.MODE_CURVE">
			<summary>
			In this mode the modifier controls each value via a single curve.
		</summary>
		</member>
		<member name="F:Unigine.ParticleModifier.MODE_RANDOM_BETWEEN_TWO_CURVES">
			<summary>
			In this mode two curves define the upper and lower limits for the value at each point of the lifetime. The actual value changes randomly over time between these limits.
		</summary>
		</member>
		<member name="F:Unigine.ParticleModifier.NUM_MODES">
			<summary>
			Number of particle modifier's modes.
		</summary>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setCurveScale(float)">
			<summary>
			Sets a new curve scale for the modifier. The scale defines the maximum possible value for the parameter controlled by the modifier.
			</summary> 
			<param name="scale"> Curve scale value to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getCurveScale const">
			<summary>
			Sets a new curve scale for the modifier. The scale defines the maximum possible value for the parameter controlled by the modifier.
			</summary>  
			<returns>Current curve scale set for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setConstant(float)">
			<summary>
			Sets a new constant value for the modifier. In the CONSTANT modifier mode the actual value of the controlled parameter remains equal to this constant throughout the particle's lifetime.
			</summary> 
			<param name="constant"> Constant value to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getConstant const">
			<summary>
			Returns the current constant value set for the modifier. In the CONSTANT modifier mode the actual value of the controlled parameter remains equal to this constant throughout the particle's lifetime.
			</summary>  
			<returns>Current constant value set for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setConstantMin(float)">
			<summary>
			Sets a new minimum constant value for the modifier. This constant defines the lower limit for the value of the controlled parameter. The actual value varies randomly between the lower and upper limits.
			</summary> 
			<param name="min"> Minimum constant value to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getConstantMin const">
			<summary>
			Returns the current minimum constant value set for the modifier. This constant defines the lower limit for the value of the controlled parameter. The actual value varies randomly between the lower and upper limits.
			</summary>  
			<returns>Current minimum constant value for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setConstantMax(float)">
			<summary>
			Sets a new maximum constant value for the modifier. This constant defines the upper limit for the value of the controlled parameter. The actual value varies randomly between the lower and upper limits.
			</summary> 
			<param name="max"> Maximum constant value to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getConstantMax const">
			<summary>
			Returns the current maximum constant value set for the modifier. This constant defines the upper limit for the value of the controlled parameter. The actual value varies randomly between the lower and upper limits.
			</summary>  
			<returns>Current maximum constant value for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setCurve(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new curve for the modifier. The actual value of the controlled parameter is defined by this curve.
			</summary> 
			<param name="curve"> Curve to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getCurve const">
			<summary>
			Returns the current curve set for the modifier. The actual value of the controlled parameter is defined by this curve.
			</summary>  
			<returns>Current curve set for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setCurveMin(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new minimum curve for the modifier. This curve defines the lower limit for the value of the controlled parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="min"> Minimum curve to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getCurveMin const">
			<summary>
			Returns the current minimum curve set for the modifier. This curve defines the lower limit for the value of the controlled parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current minimum curve set for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.setCurveMax(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new maximum curve for the modifier. This curve defines the upper limit for the value of the controlled parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="max"> Maximum curve to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getCurveMax const">
			<summary>
			Returns the current maximum curve set for the modifier. This curve defines the upper limit for the value of the controlled parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current maximum curve set for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getMaxValue const">
			<summary>
			Returns the maximum value for the modifier defining the upper limit for the value of the controlled parameter.
			</summary>  
			<returns>Maximum value for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierScalar.getMinValue const">
			<summary>
			Returns the minimum value for the modifier defining the lower limit for the value of the controlled parameter.
			</summary>  
			<returns>Minimum value for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setConstant(Unigine.Math.vec3)">
			<summary>
			Sets a new constant vector value for the modifier. In the CONSTANT modifier mode the actual value of the controlled parameter remains equal to this constant throughout the particle's lifetime.
			</summary> 
			<param name="constant"> Constant vector value to be set for the modifier (all components are constant). </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getConstant const">
			<summary>
			Returns the current constant vector value set for the modifier. In the CONSTANT modifier mode the actual value of the controlled parameter remains equal to this constant throughout the particle's lifetime.
			</summary>  
			<returns>Current constant vector value set for the modifier (all components are constant).</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setConstantMin(Unigine.Math.vec3)">
			<summary>
			Sets a new minimum constant vector value for the modifier. This vector defines the lower limit for the value of the controlled vector parameter. The actual value varies randomly between the lower and upper limits.
			</summary> 
			<param name="min"> Minimum constant vector value to be set for the modifier (all components are constant). </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getConstantMin const">
			<summary>
			Returns the current minimum constant vector value for the modifier. This vector defines the lower limit for the value of the controlled vector parameter. The actual value varies randomly between the lower and upper limits.
			</summary>  
			<returns>Current minimum constant vector value set for the modifier (all components are constant).</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setConstantMax(Unigine.Math.vec3)">
			<summary>
			Sets a new maximum constant vector value for the modifier. This vector defines the upper limit for the value of the controlled vector parameter. The actual value varies randomly between the lower and upper limits.
			</summary> 
			<param name="max"> Maximum constant vector value to be set for the modifier (all components are constant). </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getConstantMax const">
			<summary>
			Returns the current maximum constant vector value for the modifier. This vector defines the upper limit for the value of the controlled vector parameter. The actual value varies randomly between the lower and upper limits.
			</summary>  
			<returns>Current maximum constant vector value set for the modifier (all components are constant).</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveScale(float)">
			<summary>
			Sets a new curve scale for the modifier. The scale defines the maximum possible value for the components of the vector parameter controlled by the modifier.
			</summary> 
			<param name="scale"> Curve scale value to be set for the modifier. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveScale const">
			<summary>
			Sets a new curve scale for the modifier. The scale defines the maximum possible value for the components of the vector parameter controlled by the modifier.
			</summary>  
			<returns>Current curve scale set for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveX(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new curve for the modifier to control the X component of the vector parameter.
			</summary> 
			<param name="curvex"> Curve to be set for the modifier to control the X component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveX const">
			<summary>
			Returns the current curve set for the modifier to control the X component of the vector parameter.
			</summary>  
			<returns>Current curve set for the modifier to control the X component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveY(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new curve for the modifier to control the Y component of the vector parameter.
			</summary> 
			<param name="curvey"> Curve to be set for the modifier to control the Y component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveY const">
			<summary>
			Returns the current curve set for the modifier to control the Y component of the vector parameter.
			</summary>  
			<returns>Current curve set for the modifier to control the Y component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveZ(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new curve for the modifier to control the Z component of the vector parameter.
			</summary> 
			<param name="curvez"> Curve to be set for the modifier to control the Z component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveZ const">
			<summary>
			Returns the current curve set for the modifier to control the Z component of the vector parameter.
			</summary>  
			<returns>Current curve set for the modifier to control the Z component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveXMin(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new minimum curve for the modifier to control the X component of the vector parameter. This curve defines the lower limit for the value of the X component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="xmin"> Minimum curve to be set for the modifier to control the X component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveXMin const">
			<summary>
			Returns the current minimum curve set for the modifier to control the X component of the vector parameter. This curve defines the lower limit for the value of the X component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current minimum curve set for the modifier to control the X component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveYMin(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new minimum curve for the modifier to control the Y component of the vector parameter. This curve defines the lower limit for the value of the Y component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="ymin"> Minimum curve to be set for the modifier to control the Y component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveYMin const">
			<summary>
			Returns the current minimum curve set for the modifier to control the Y component of the vector parameter. This curve defines the lower limit for the value of the Y component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current minimum curve set for the modifier to control the Y component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveZMin(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new minimum curve for the modifier to control the Z component of the vector parameter. This curve defines the lower limit for the value of the Z component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="zmin"> Minimum curve to be set for the modifier to control the Z component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveZMin const">
			<summary>
			Returns the current minimum curve set for the modifier to control the Z component of the vector parameter. This curve defines the lower limit for the value of the Z component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current minimum curve set for the modifier to control the Z component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveXMax(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new maximum curve for the modifier to control the X component of the vector parameter. This curve defines the upper limit for the value of the X component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="xmax"> Maximum curve to be set for the modifier to control the X component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveXMax const">
			<summary>
			Returns the current maximum curve set for the modifier to control the X component of the vector parameter. This curve defines the upper limit for the value of the X component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current maximum curve set for the modifier to control the X component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveYMax(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new maximum curve for the modifier to control the Y component of the vector parameter. This curve defines the upper limit for the value of the Y component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="ymax"> Maximum curve to be set for the modifier to control the Y component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveYMax const">
			<summary>
			Returns the current maximum curve set for the modifier to control the Y component of the vector parameter. This curve defines the upper limit for the value of the Y component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current maximum curve set for the modifier to control the Y component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.setCurveZMax(Unigine.Ptr{Curve2d})">
			<summary>
			Sets a new maximum curve for the modifier to control the Z component of the vector parameter. This curve defines the upper limit for the value of the Z component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary> 
			<param name="zmax"> Maximum curve to be set for the modifier to control the Z component of the vector parameter. </param> 
		</member>
		<member name="M:Unigine.ParticleModifierVector.getCurveZMax const">
			<summary>
			Returns the current maximum curve set for the modifier to control the Z component of the vector parameter. This curve defines the upper limit for the value of the Z component of the controlled vector parameter at each point of the particle's lifetime. The actual value changes randomly over time between the lower and the upper limits.
			</summary>  
			<returns>Current maximum curve set for the modifier to control the Z component of the vector parameter.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.getMaxValue const">
			<summary>
			Returns the maximum value for the modifier defining the upper limit for the value of the controlled vector parameter.
			</summary>  
			<returns>Maximum value for the modifier.</returns>
		</member>
		<member name="M:Unigine.ParticleModifierVector.getMinValue const">
			<summary>
			Returns the minimum value for the modifier defining the lower limit for the value of the controlled vector parameter.
			</summary>  
			<returns>Minimum value for the modifier.</returns>
		</member>
		<member name="M:Unigine.ObjectSky.#ctor">
			<summary>
			Constructor. Creates a new sky object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectSky.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>ObjectSky node type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectSky.setSpherical(bool)">
			<summary>
			Sets a value indicating if a sky background cube map should be mapped onto a whole sphere rather then a hemisphere.
			</summary> 
			<param name="spherical"> true for the whole sphere; false for a sky hemisphere. </param> 
		</member>
		<member name="M:Unigine.ObjectSky.isSpherical const">
			<summary>
			Returns a value indicating whether a sky background cube map should be mapped onto a whole sphere rather then a hemisphere.
			</summary>  
			<returns>true if the sky is a sphere; false, if a hemisphere.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.#ctor">
			<summary>
			Constructor. Creates a new empty global terrain object with default properties.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.clear">
			<summary>
			Clears all terrain data (lods, textures, details, masks etc.).
			</summary>  
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>ObjectTerrainGlobal type identifier. </returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getAlbedoLods">
			<summary>
			Returns the group of terrain albedo LODs.
			</summary>  
			<returns>Terrain albedo LODs group.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getAlbedoTextureArray const">
			<summary>
			Returns the albedo textures array.
			</summary>  
			<returns>Albedo textures array.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.setAlbedoTextureArrayName(char)">
			<summary>
			Sets the name of the albedo textures array.
			</summary> 
			<param name="name"> Name of the albedo textures array. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getAlbedoTextureArrayName const">
			<summary>
			Returns the name of the albedo textures array.
			</summary>  
			<returns>Name of the albedo textures array.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.addDetail(char)">
			<summary>
			Adds a new detail to the vector of terrain details.
			</summary> 
			<param name="name"> Detail name. </param> 
			<returns>Number of the new detail.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.cloneDetail(int)">
			<summary>
			Clones the detail with the specified number.
			</summary> 
			<param name="num"> Detail number. </param> 
			<returns>Number of the new cloned terrain detail.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getDetail(int)">
			<summary>
			Returns the terrain detail with the specified number.
			</summary> 
			<param name="num"> Detail number. </param> 
			<returns>Terrain detail.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.removeDetail(int)">
			<summary>
			Removes the detail with the specified number.
			</summary> 
			<param name="num"> Detail number. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.swapDetail(int,int)">
			<summary>
			Swaps two details of the terrain.
			</summary> 
			<param name="num_0"> Number of the first detail. </param>
			<param name="num_1"> Number of the second detail. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.resizeDetails(int)">
			<summary>
			Resizes the vector of terrain details.
			</summary> 
			<param name="size"> New size. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getNumDetails const">
			<summary>
			Returns the total number of details.
			</summary>  
			<returns>Number of details.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.setForceIntersection(bool)">
			<summary>
								Enables or disables forced loading of necessary terrain tiles to ensure correct intersection detection.																		When enabled, this option may significantly reduce performance. Thus, it is recommended to enable it, perform intersection check, and disable it again.							It is recommended to make two or more intersection requests to make sure you get the required result when necessary, as in some rare cases forced loading of tiles may not give you a 100% guarantee.
			</summary> 
			<param name="intersection"> true to load necessary terrain tiles for intersection detection; otherwise, false. The default value is false. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.isForceIntersection const">
			<summary>
			Returns a value indicating if forced loading of terrain tiles for intersection detection is enabled.					This option is used to enable force loading of terrain tiles to ensure correct intersection detection.
			</summary>  
			<returns>false if forced loading of terrain tiles for intersection detection is enabled; otherwise, false. </returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.addMask(char)">
			<summary>
			Adds a new mask to the vector of masks.
			</summary> 
			<param name="name"> Mask name. </param> 
			<returns>Number of the new mask, if the mask was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.cloneMask(int)">
			<summary>
			Clones the mask with the specified number.
			</summary> 
			<param name="num"> Mask number. </param> 
			<returns>Number of the new cloned mask.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.removeMask(int)">
			<summary>
			Removes the mask with the specified number from the vector of masks.
			</summary> 
			<param name="num"> Mask number. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.swapMask(int,int)">
			<summary>
			Swaps two masks.
			</summary> 
			<param name="num_0"> Number of the first mask. </param>
			<param name="num_1"> Number of the second mask. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.replaceMasks(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Replaces the list of masks with a given one.					If a mask used by some detail is missing in the new list, such detail will be considered as having no mask assigned, otherwise it will keep its mask.
			</summary> 
			<param name="names"> New list of masks. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.resizeMasks(int)">
			<summary>
			Resizes the vector of masks.
			</summary> 
			<param name="size"> New size. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getNumMasks const">
			<summary>
			Returns the total number of masks.
			</summary>  
			<returns>Number of masks.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getMaskLods">
			<summary>
			Returns the group of terrain mask LODs.
			</summary>  
			<returns>Terrain mask LODs group.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.setMaskName(int,char)">
			<summary>
			Sets the name of the mask with the specified number.
			</summary> 
			<param name="num"> Mask number. </param>
			<param name="name"> New mask name. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getMaskName(int) const">
			<summary>
			Returns the name for of mask with the specified number.
			</summary> 
			<param name="num"> Mask number. </param> 
			<returns>Mask name.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getHeightLods">
			<summary>
			Returns the group of terrain height LODs.
			</summary>  
			<returns>Terrain height LODs group.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getHeightTextureArray const">
			<summary>
			Returns the height textures array.
			</summary>  
			<returns>Height textures array.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.setHeightTextureArrayName(char)">
			<summary>
			Sets the name of the height textures array.
			</summary> 
			<param name="name"> Name of the height textures array. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getHeightTextureArrayName const">
			<summary>
			Returns the name of the height textures array.
			</summary>  
			<returns>Name of the height textures array.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getNormalLods">
			<summary>
			Returns the group of terrain normal LODs.
			</summary>  
			<returns>Terrain normal LODs group.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getNormalTextureArray const">
			<summary>
			Returns the normal textures array.
			</summary>  
			<returns>Normal textures array.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.setNormalTextureArrayName(char)">
			<summary>
			Sets the name of the normal textures array.
			</summary> 
			<param name="name"> Name of the normal textures array. </param> 
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.getNormalTextureArrayName const">
			<summary>
			Returns the name of the normal textures array.
			</summary>  
			<returns>Name of the normal textures array.</returns>
		</member>
		<member name="M:Unigine.ObjectTerrainGlobal.fetchTopologyData(double,double,Unigine.Math.Vec3,Unigine.Math.vec3,Unigine.Math.vec3,int)">
			<summary>
			Returns topology data for a given terrain point.
			</summary> 
			<param name="x"> X coordinate of the point. </param>
			<param name="y"> Y coordinate of the point. </param>
			<param name="ret_point"> World coordinates of the point. </param>
			<param name="ret_normal"> Normal coordinates. </param>
			<param name="ret_up"> "Up" vector coordinates. </param>
			<param name="force"> Force flag. Use 1 to load files in any case; otherwise, 0. The default value is 0. </param> 
			<returns>1 if the topology data was fetched successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setAlbedoColor(Unigine.Math.vec4)">
			<summary>
			Sets the albedo color multiplier for the detail.
			</summary> 
			<param name="color"> Albedo color multiplier. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getAlbedoColor">
			<summary>
			Returns the current albedo color multiplier for the detail.
			</summary>  
			<returns>Albedo color multiplier.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setAlbedoScale(float)">
			<summary>
			Sets the intensity scale of the detail albedo texture.
			</summary> 
			<param name="scale"> Albedo texture intensity scale value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getAlbedoScale">
			<summary>
			Returns the intensity scale of the detail albedo texture.
			</summary>  
			<returns>Albedo texture intensity scale value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setAlbedoTextureName(char)">
			<summary>
			Sets the path to the albedo texture of the detail.
			</summary> 
			<param name="name"> Path to the albedo texture. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getAlbedoTextureName">
			<summary>
			Returns the path to the albedo texture of the detail.
			</summary>  
			<returns>Path to the albedo texture.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setBlendTriplanar(float)">
			<summary>
			Sets the threshold value that controls smoothness of blending between the different projections of triplanar texture mapping.					This parameter is used only when triplanar texture mapping is enabled for the detail.
			</summary> 
			<param name="triplanar"> Triplanar blending value within the [0.0f; 1.0f] range. Lower values produce sharper transitions between projections, while higher values make it smoother. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getBlendTriplanar">
			<summary>
			Returns the threshold value that controls smoothness of blending between the different projections of triplanar texture mapping.					This parameter is used only when triplanar texture mapping is enabled for the detail.
			</summary>  
			<returns>Triplanar blending value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setDetail(int)">
			<summary>
			Sets the value indicating if the detail uses the mask of the parent detail.
			</summary> 
			<param name="detail"> 1 to use the mask of the parent detail or the one generated on its basis; 0 to use own mask. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.isDetail">
			<summary>
			Returns the value indicating if the detail uses the mask of the parent detail.
			</summary>  
			<returns>1 if the detail uses the mask of the parent detail or the one generated on its basis; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setDisplacement(float)">
			<summary>
			Sets the scale of displacement mapping according to the height texture.
			</summary> 
			<param name="displacement"> Displacement scale value within the [0.0f; 1.0f] range. Higher values produce a greater displacement effect. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getDisplacement">
			<summary>
			Returns the scale of displacement mapping according to the height texture.
			</summary>  
			<returns>Displacement scale value within the [0.0f; 1.0f] range. Higher values produce a greater displacement effect.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setDisplacementOffset(float)">
			<summary>
			Sets the displacement offset. This parameter controls the direction of displacement (inward or outward).
			</summary> 
			<param name="offset"> Displacement offset value within the [-1.0f; 1.0f] range.positive value - outward displacement.0 - points corresponding to height texture values less than 0.5 are displaced inwards, others are displaced outwards.negative value - inward displacement. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getDisplacementOffset">
			<summary>
			Returns the displacement offset. This parameter controls the direction of displacement (inward or outward).
			</summary>  
			<returns>Displacement offset value within the [-1.0f; 1.0f] range.positive value - outward displacement.0 - points corresponding to height texture values less than 0.5 are displaced inwards, others ar edisplaced outwards.negative value - inward displacement.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setEnabled(int)">
			<summary>
			Enables or disables the detail.
			</summary> 
			<param name="enabled"> 1 to enable the detail; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.isEnabled">
			<summary>
			Returns a value indicating if the detail is enabled.
			</summary>  
			<returns>1 if the detail is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setHeightTextureName(char)">
			<summary>
			Sets the path to the height texture of the detail.
			</summary> 
			<param name="name"> Path to the height texture. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getHeightTextureName">
			<summary>
			Returns the path to the height texture of the detail.
			</summary>  
			<returns>Path to the height texture.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaskColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of the detail mask.
			</summary> 
			<param name="color"> Detail mask color. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaskColor">
			<summary>
			Returns the color of the detail mask.
			</summary>  
			<returns>Detail mask color.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaskContrast(float)">
			<summary>
			Sets the contrast of the detail mask.
			</summary> 
			<param name="contrast"> Detail mask contrast value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaskContrast">
			<summary>
			Returns the contrast of the detail mask.
			</summary>  
			<returns>Detail mask contrast value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaskNumber(int)">
			<summary>
			Sets the index of the mask used by the detail.
			</summary> 
			<param name="number"> Mask number. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaskNumber">
			<summary>
			Returns the index of the mask used by the detail.
			</summary>  
			<returns>Mask number.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaskThreshold(float)">
			<summary>
			Sets the threshold that controls smoothness of blending of detail's height texture. Higher values provide smoother results. Blending is performed according to the detail's mask.
			</summary> 
			<param name="threshold"> Blending threshold value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaskThreshold">
			<summary>
			Returns the threshold that controls smoothness of blending of detail's height texture. Higher values provide smoother results. Blending is performed according to the detail's mask.
			</summary>  
			<returns>Blending threshold value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaskWidth(float)">
			<summary>
			Sets the width of blending of detail's height texture. Higher values provide wider areas. Blending is performed according to the detail's mask.
			</summary> 
			<param name="width"> Blending width value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaskWidth">
			<summary>
			Returns the width of blending of detail's height texture. Higher values provide wider areas. Blending is performed according to the detail's mask.
			</summary>  
			<returns>Blending width value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaxFadeDistance(float)">
			<summary>
			Sets the maximum fade-out distance of the detail. Over this distance the detail smoothly becomes invisible due to alpha fading. It is counted starting from the maximum visibility distance.
			</summary> 
			<param name="distance"> Maximum fade-out distance, in units. If a negative value is provided, 0 will be used instead. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaxFadeDistance">
			<summary>
			Returns the maximum fade-out distance of the detail. Over this distance the detail smoothly becomes invisible due to alpha fading. It is counted starting from the maximum visibility distance.
			</summary>  
			<returns>Maximum fade-out distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaxFadeHeight(float)">
			<summary>
			Sets the fade out height range for the detail mask. Over this height range above the maximum height value the detail mask will fade out until it is completely invisible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Fade out height range value for the mask, in units. The default value is 0. Higher values provide smoother fade out. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaxFadeHeight">
			<summary>
			Returns the fade out height range for the detail mask. Over this height range above the maximum height value the detail mask will fade out until it is completely invisible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Fade out height range value for the mask, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaxVisibleDistance(float)">
			<summary>
			Sets the maximum visibility distance of the detail. It is the distance, starting from which the detail begins to fade out until it becomes completely invisible.					This parameter can be used to improve performance and reduce the tiling effect when looking at the terrain from a large distance.
			</summary> 
			<param name="distance"> Maximum visibility distance, in units. If a negative value is provided, 0 will be used instead. The default value is inf. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaxVisibleDistance">
			<summary>
			Returns the maximum visibility distance of the detail. It is the distance, starting from which the detail begins to fade out until it becomes completely invisible.
			</summary>  
			<returns>Maximum visibility distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMaxVisibleHeight(float)">
			<summary>
			Sets the maximum height value for the detail mask, starting from which the detail begins to fade out until it becomes completely invisible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Maximum height value for the mask, in units. The default value is inf. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMaxVisibleHeight">
			<summary>
			Sets the maximum height value for the detail mask, starting from which the detail begins to fade out until it becomes completely invisible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Maximum height value for the mask, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMinFadeDistance(float)">
			<summary>
			Sets the minimum fade-in distance of the detail. Over this distance the detail smoothly becomes visible due to alpha fading. It is counted starting from the minimum visibility distance.
			</summary> 
			<param name="distance"> Minimum fade-in distance, in units. If a negative value is provided, 0 will be used instead. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMinFadeDistance">
			<summary>
			Returns the minimum fade-in distance of the detail. Over this distance the detail smoothly becomes visible due to alpha fading. It is counted starting from the minimum visibility distance.
			</summary>  
			<returns>Minimum fade-in distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMinFadeHeight(float)">
			<summary>
			Sets the fade in height range for the detail mask. Over this height range below the minimum height value the detail mask will fade in until it is completely visible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Fade in height range value for the mask, in units. The default value is 0. Higher values provide smoother fade in. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMinFadeHeight">
			<summary>
			Returns the fade in height range for the detail mask. Over this height range below the minimum height value the detail mask will fade in until it is completely visible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Fade in height range value for the mask, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMinVisibleDistance(float)">
			<summary>
			Sets the minimum visibility distance of the detail. It is the distance, starting from which the detail begins to fade in until it becomes completely visible.					This parameter can be used to improve performance and reduce the tiling effect when looking at the terrain from a large distance.
			</summary> 
			<param name="distance"> Minimum visibility distance, in units. If a negative value is provided, 0 will be used instead. The default value is -inf. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMinVisibleDistance">
			<summary>
			Returns the minimum visibility distance of the detail. It is the distance, starting from which the detail begins to fade in until it becomes completely visible.
			</summary>  
			<returns>Minimum visibility distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setMinVisibleHeight(float)">
			<summary>
			Sets the minimum height value for the detail mask, starting from which the detail begins to fade in until it becomes completely visible. This parameter is used to modulate the detail mask by height.
			</summary> 
			<param name="height"> Minimum height value for the mask, in units. The default value is -inf. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getMinVisibleHeight">
			<summary>
			Returns the minimum height value for the detail mask, starting from which the detail begins to fade in until it becomes completely visible. This parameter is used to modulate the detail mask by height.
			</summary>  
			<returns>Minimum height value for the mask, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setName(char)">
			<summary>
			Sets the name of the detail.
			</summary> 
			<param name="name"> Detail name. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getName">
			<summary>
			Returns the name of the detail.
			</summary>  
			<returns>Detail name.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setNormalScale(float)">
			<summary>
			Sets the intensity scale of the detail normal texture.
			</summary> 
			<param name="scale"> Normal texture intensity scale value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getNormalScale">
			<summary>
			Returns the intensity scale of the detail normal texture.
			</summary>  
			<returns>Normal texture intensity scale value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setNormalTextureName(char)">
			<summary>
			Sets the path to the normal texture of the detail.
			</summary> 
			<param name="name"> Path to the normal texture. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getNormalTextureName">
			<summary>
			Returns the path to the normal texture of the detail.
			</summary>  
			<returns>Path to the normal texture.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setOverlap(int)">
			<summary>
			Enables or disables overlap mode for the detail.
			</summary> 
			<param name="overlap"> 1 to enable overlap mode for the detail; 0 to use overlay mode instead. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.isOverlap">
			<summary>
			Returns a value indicating if overlap mode is enabled for the detail.
			</summary>  
			<returns>1 if overlap mode is enabled for the detail; otherwise, 0 (overlay mode is used).</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setRoughness(float)">
			<summary>
			Sets the roughness value multiplier for the detail.
			</summary> 
			<param name="roughness"> Roughness value multiplier within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getRoughness">
			<summary>
			Returns the roughness value multiplier for the detail.
			</summary>  
			<returns>Roughness value multiplier within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setRoughnessScale(float)">
			<summary>
			Sets the intensity scale of the detail roughness texture.
			</summary> 
			<param name="scale"> Roughness texture intensity scale value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getRoughnessScale">
			<summary>
			Returns the intensity scale of the detail roughness texture.
			</summary>  
			<returns>Roughness texture intensity scale value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setRoughnessTextureName(char)">
			<summary>
			Sets the path to the roughness texture of the detail.
			</summary> 
			<param name="name"> Path to the roughness texture. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getRoughnessTextureName">
			<summary>
			Returns the path to the roughness texture of the detail.
			</summary>  
			<returns>Path to the roughness texture.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setTransform(Unigine.Math.vec4)">
			<summary>
			Sets the transformation parameters of the detail.
			</summary> 
			<param name="transform"> Vec4 transformation vector with the following components:X - Tile size X - texture tile size along the X axis, in units.Y - Tile size Y - texture tile size along the Y axis, in units.Z - Offset X - texture offset along the X axis.W - Offset Y - texture offset along the Y axis. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.getTransform">
			<summary>
			Returns the current transformation parameters of the detail.
			</summary>  
			<returns>Vec4 transformation vector with the following components:X - Tile size X - texture tile size along the X axis, in units.Y - Tile size Y - texture tile size along the Y axis, in units.Z - Offset X - texture offset along the X axis.W - Offset Y - texture offset along the Y axis.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.setTriplanar(int)">
			<summary>
			Enables or disables triplanar texture mapping for the detail.
			</summary> 
			<param name="triplanar"> 1 to enable triplanar texture mapping for the detail; 0 to use planar UV mapping instead. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalDetail.isTriplanar">
			<summary>
			Returns a value indicating if triplanar texture mapping is enabled for the detail.
			</summary>  
			<returns>1 if triplanar texture mapping is enabled for the detail; otherwise, 0 (planar UV mapping is used).</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setClearDistance(float)">
			<summary>
			Sets the clear distance of the LOD. Starting from this distance the tiles of the LOD are removed from memory.
			</summary> 
			<param name="distance"> Clear distance, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getClearDistance">
			<summary>
			Returns the clear distance of the LOD. Starting from this distance the tiles of the LOD are removed from memory.
			</summary>  
			<returns>Current clear distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setEnabled(bool)">
			<summary>
			Enables or disables the LOD.
			</summary> 
			<param name="enabled"> 1 to enable the LOD, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.isEnabled">
			<summary>
			Returns a value indicating if the LOD is enabled.
			</summary>  
			<returns>1 if the LOD is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setLoadDistance(float)">
			<summary>
			Sets the load distance for the LOD. Starting from this distance the tiles of the LOD are loaded into memory.
			</summary> 
			<param name="distance"> Load distance, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getLoadDistance">
			<summary>
			Returns the current load distance for the LOD. Starting from this distance the tiles of the LOD are loaded into memory.
			</summary>  
			<returns>Current load distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setPath(char)">
			<summary>
			Sets the path to the folder where the LOD is stored.
			</summary> 
			<param name="path"> Path to the folder where the LOD is stored. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getPath">
			<summary>
			Returns the path to the folder where the LOD is stored.
			</summary>  
			<returns>Path to the folder where the LOD is stored.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setTileDensity(float)">
			<summary>
			Sets the density of LOD tiles.
			</summary> 
			<param name="density"> LOD tile density, in meters per pixel. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getTileDensity">
			<summary>
			Returns the current density of LOD tiles.
			</summary>  
			<returns>Current LOD tile density, in meters per pixel.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getTileset">
			<summary>
			Returns the tileset for the LOD.
			</summary>  
			<returns>LOD tileset.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setViewportMask(int)">
			<summary>
			Sets the bit mask for rendering into the viewport. The LOD is rendered, if its mask matches the player's one.
			</summary> 
			<param name="mask"> Viewport mask, an integer value each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getViewportMask">
			<summary>
			Returns the current bit mask for rendering into the viewport. The LOD is rendered, if its mask matches the player's one.
			</summary>  
			<returns>Viewport mask, an integer value each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.setVisibleDistance(float)">
			<summary>
			Sets the visibility distance. Starting from this distance the tiles of the LOD become visible.
			</summary> 
			<param name="distance"> Visibility distance, in units. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getVisibleDistance">
			<summary>
			Returns the current visibility distance. Starting from this distance the tiles of the LOD become visible.
			</summary>  
			<returns>Current visibility distance, in units.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.renamePath(char)">
			<summary>
			Sets a new path to the folder where the LOD is stored.
			</summary> 
			<param name="new_path"> New path to be set. </param> 
			<returns>1 if the new path was set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.reload">
			<summary>
			Reloads the LOD.
			</summary>  
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getType">
			<summary>
			Returns the type of the LOD. This method is used to define whether it is a height LOD used for collision and intersection detection or an ordinary albedo, normal or detail mask LOD.
			</summary>  
			<returns>LOD type, one of the TYPE values.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLod.getTypeName">
			<summary>
			Returns the name of the terrain global LOD type. This method is used to define whether it is a height LOD used for collision and intersection detection or an ordinary albedo, normal or detail mask LOD.
			</summary>  
			<returns>Name of the terrain global LOD type. One of the following values:TerrainGlobalLodTerrainGlobalLodHeight</returns>
		</member>
		<member name="F:Unigine.TerrainGlobalLod.TERRAIN_GLOBAL_LOD">
			<summary>
			Albedo, normal or detail mask LOD of the global terrain object.
		</summary>
		</member>
		<member name="F:Unigine.TerrainGlobalLod.TERRAIN_GLOBAL_LOD_HEIGHT">
			<summary>
			Height LOD of the global terrain object. This type of LOD is used for collision and intersection detection.
		</summary>
		</member>
		<member name="F:Unigine.TerrainGlobalLod.NUM_TERRAIN_GLOBAL_LODS">
			<summary>
			Total number of LOD types of the global terrain objectю
		</summary>
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.setCastShadows(int)">
			<summary>
			Enables or disables casting shadows from non-world lights for the height LOD.
			</summary> 
			<param name="shadows"> 1 to enable casting shadows, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.isCastShadows">
			<summary>
			Returns a value indicating if shadow casting for the height LOD is enabled.
			</summary>  
			<returns>1 if shadow casting for the height LOD is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.setCollision(int)">
			<summary>
			Enables or disables collision detection for the height LOD.
			</summary> 
			<param name="collision"> 1 to enable collision detection, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.isCollision">
			<summary>
			Returns a value indicating if collision detection for the height LOD is enabled.
			</summary>  
			<returns>1 if collision detection for the height LOD is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.setCollisionMask(int)">
			<summary>
			Sets the collision mask for the height LOD. A collision of an object with the height LOD will be detected, if they both have matching masks.
			</summary> 
			<param name="mask"> Collision mask, an integer value each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.getCollisionMask">
			<summary>
			Returns the current collision mask for the height LOD. A collision of an object with the height LOD will be detected, if they both have matching masks.
			</summary>  
			<returns>Collision mask, an integer value each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.setIntersection(int)">
			<summary>
			Enables or disables intersection detection for the height LOD.
			</summary> 
			<param name="intersection"> 1 to enable intersection detection, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.isIntersection">
			<summary>
			Returns a value indicating if intersection detection for the height LOD is enabled.
			</summary>  
			<returns>1 if intersection detection for the height LOD is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.setIntersectionMask(int)">
			<summary>
			Sets the intersection mask for the height LOD. An intersection of an object with the height LOD will be detected, if they both have matching masks.
			</summary> 
			<param name="mask"> Intersection mask, an integer value each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLodHeight.getIntersectionMask">
			<summary>
			Returns the current intersection mask for the height LOD. An intersection of an object with the height LOD will be detected, if they both have matching masks.
			</summary>  
			<returns>Intersection mask, an integer value each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getDataFormat">
			<summary>
			Returns a value indicating current image format for the tile data.
			</summary>  
			<returns>Tile data image format. One of the Image::FORMAT_* values.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getDataType">
			<summary>
			Returns a value indicating current image format for the tile data.
			</summary>  
			<returns>Tile data image type. One of the Image::IMAGE_* values.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getMaskFormat">
			<summary>
			Returns a value indicating current image format for the tile mask.
			</summary>  
			<returns>Tile mask image format. One of the Image::FORMAT_* values.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.setNumLayers(int)">
			<summary>
			Sets the number of layers of the LOD group.
			</summary> 
			<param name="layers"> Number of layers. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getNumLayers">
			<summary>
			Returns the number of layers of the LOD group.
			</summary>  
			<returns>Number of layers.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getNumLods">
			<summary>
			Returns the total number of LODs in the group.
			</summary>  
			<returns>Total number of LODs.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.addLod">
			<summary>
			Adds a new LOD.
			</summary>  
			<returns>Index of the last added LOD.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.insertLod(int)">
			<summary>
			Inserts a new LOD at the specified position.
			</summary> 
			<param name="num"> Position to insert a new LOD at. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLods.removeLod(int)">
			<summary>
			Removes the LOD with the specified number.
			</summary> 
			<param name="num"> LOD number. </param> 
		</member>
		<member name="M:Unigine.TerrainGlobalLods.clearLods">
			<summary>
			Removes all LODs.
			</summary>  
		</member>
		<member name="M:Unigine.TerrainGlobalLods.fetch(Unigine.BoundSphere,Unigine.BoundBox,int)">
			<summary>
			Loads the data of all LODs for the tiles within a given bounding box and a bounding sphere.
			</summary> 
			<param name="bs"> Bounding sphere. </param>
			<param name="bb"> Bounding box. </param>
			<param name="force"> Force flag. Use 1 to load files in any case; otherwise, 0. The default value is 0. </param> 
			<returns>1 if the data of all LODs was fetched successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.fetchData(double,double,Pixel,int,bool)">
			<summary>
			Fetches the data for the point on the terrain with given coordinates and puts it to the specified output structure.
			</summary> 
			<param name="x"> X coordinate of the point on the terrain. </param>
			<param name="y"> Y coordinate of the point on the terrain. </param>
			<param name="ret_pixel"> Output Pixel structure to store the pixel color. </param>
			<param name="layer"> Layer number. </param>
			<param name="force"> Force flag.If 1 is specified, the data will be fetched immediately.If 0 is specified, the operation will be queued to a separate thread.It is recommended to set this flag to 0 when possible to avoid spikes.. </param> 
			<returns>1 if the data for the specified pixel was fetched successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getType">
			<summary>
			Returns the type of LODs.
			</summary>  
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getName">
			<summary>
			Returns the name of the LOD group.
			</summary>  
			<returns>LOD group name.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getLod(int)">
			<summary>
			Returns the LOD with a given number.
			</summary> 
			<param name="num"> LOD number. </param> 
			<returns>Pointer to TerrainGlobalLod.</returns>
		</member>
		<member name="M:Unigine.TerrainGlobalLods.getVideoMemoryUsage">
			<summary>
			Returns information about the total video memory usage for all LODs in the group.
			</summary>  
			<returns>Total video memory usage for all LODs.</returns>
		</member>
		<member name="M:Unigine.ObjectText.#ctor">
			<summary>
			Default constructor. Creates an empty object with no text and font set.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectText.#ctor(char)">
			<summary>
			Constructor. Creates an object with no text but with the specified font.
			</summary> 
			<param name="font_name"> The path to the TTF font relatively to the data directory. </param> 
		</member>
		<member name="M:Unigine.ObjectText.#ctor(char,char)">
			<summary>
			Constructor. Creates an object with the set font and text.
			</summary> 
			<param name="font_name"> The path to the TTF font relatively to the data directory. </param>
			<param name="text"> The text (can be either plain or rich). </param> 
		</member>
		<member name="M:Unigine.ObjectText.setDepthTest(int)">
			<summary>
			Sets a value indicating if depth test should be used for the text object.
			</summary> 
			<param name="test"> 1 to use depth test; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getDepthTest const">
			<summary>
			Returns a value indicating if the text object uses depth test.
			</summary>  
			<returns>1 if the object uses depth test; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontHSpacing(int)">
			<summary>
			Sets the horizontal spacing between letters (kerning value). This parameter influences the text's physical size.
			</summary> 
			<param name="hspacing"> The horizontal spacing value. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontHSpacing const">
			<summary>
			Returns the horizontal spacing between letters (kerning value).
			</summary>  
			<returns>The horizontal spacing, in dots.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontName(char)">
			<summary>
			Sets the path to the TTF font.					Names of font files for bold, italic and bold italic fonts must have the b, i and bi postfixes correspondingly. For example: myfontb.ttf, myfontbi.ttf.
			</summary> 
			<param name="name"> The path to the TTF font relatively to the data directory. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontName const">
			<summary>
			Returns the path to the TTF font specified in the node.					Names of font files for bold, italic and bold italic fonts must have the b, i and bi postfixes correspondingly. For example: myfontb.ttf, myfontbi.ttf.
			</summary>  
			<returns>The path to the font relatively to the data directory, if specified; otherwise — the empty string.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontOutline(int)">
			<summary>
			Sets the outline for the text. The outline looks like the dark shadow in the right lower corner of the text and is displaced by one dot.
			</summary> 
			<param name="outline"> 1 — to enable the outline; 0 — to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontOutline const">
			<summary>
			Returns the flag indicating if the text outline is enabled.
			</summary>  
			<returns>1 — the outline is enabled; 0 — disabled.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontResolution(int)">
			<summary>
			Sets the resolution of the texture into which the text will be rendered. The lower the value, the less detailed will be the text, the less video memory will be required for the texture. It doesn't influence the text's physical size.
			</summary> 
			<param name="resolution"> The font resolution. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontResolution const">
			<summary>
			Returns the text resolution value.
			</summary>  
			<returns>The text resolution value.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontRich(int)">
			<summary>
			Sets the flag indicating if the rich text is enabled. When enabled, the following tags can be used for text formatting:											&lt;b&gt;text&lt;/b&gt; specifies a bold text.						&lt;i&gt;text&lt;/i&gt; specifies an italic text.						&lt;br&gt;text&lt;br/&gt; inserts a single line break.						&lt;left&gt;text&lt;/left&gt; left-aligns the text.						&lt;right&gt;text&lt;/right&gt; right-aligns the text.						&lt;center&gt;text&lt;/center&gt; center-aligns the text.						&lt;p align=left|right|center|justify&gt;text&lt;/p&gt; specifies the alignment of the text within a paragraph:															left - left-aligns the text								right - right-aligns the text								center - center-aligns the text								justify - stretches the lines so that each line has equal width (like in newspapers and magazines)														Text alignment requires text wrapping to be enabled: the value of the Wrap Width parameter must be greater than 0.												&lt;font size=12 color=magenta face=verdana&gt; text&lt;/font&gt; specifies the font face, font size, and color of text.						&lt;sub&gt; text&lt;/sub&gt; defines subscript text. Subscript text appears half a character below the normal line, and is sometimes rendered in a smaller font.						&lt;sup&gt; text&lt;/sup&gt; defines superscript text. Superscript text appears half a character above the normal line, and is sometimes rendered in a smaller font.										&lt;image/&gt; and &lt;table/&gt; tags are not available.
			</summary> 
			<param name="rich"> 1 — to enable the rich text; 0 — to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontRich const">
			<summary>
			Returns the value indicating if the rich text is enabled. When enabled, tags can be used for text formatting.
			</summary>  
			<returns>1 — the rich text is enabled; 0 — disabled.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontSize(int)">
			<summary>
			Sets the size of the text font. The more dots, the higher the size of the font. To match dots with a 3D space, there is a set value: 288 dots per unit. For example, if you have the Arial font with the size of 20, the physical height of the letter can be calculated as 20/288=0.0694 units.
			</summary> 
			<param name="size"> The size of the text, in dots. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontSize const">
			<summary>
			Returns the text font size.
			</summary>  
			<returns>The text font size, in dots.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setFontVSpacing(int)">
			<summary>
			Sets the vertical spacing between letters (kerning value). This parameter influences the text's physical size.
			</summary> 
			<param name="vspacing"> The vertical spacing value. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getFontVSpacing const">
			<summary>
			Returns the vertical spacing between letters (kerning value).
			</summary>  
			<returns>The vertical spacing, in dots.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setText(char)">
			<summary>
			Sets the text for the node. Can be either a plain or rich text.
			</summary> 
			<param name="text"> The text. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getText const">
			<summary>
			Returns the text set in the node.
			</summary>  
			<returns>The text.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setTextColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of the text.
			</summary> 
			<param name="color"> The color of the text in the RGBA range. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getTextColor const">
			<summary>
			Returns the color of the text.
			</summary>  
			<returns>The text color in the RGBA range.</returns>
		</member>
		<member name="M:Unigine.ObjectText.setTextWrapWidth(float)">
			<summary>
			Sets text wrap width in units. The text will wrap if its physical size will be greater than the set value. If 0 is set, text wrapping is disabled.
			</summary> 
			<param name="width"> Wrap width in units. </param> 
		</member>
		<member name="M:Unigine.ObjectText.getTextWrapWidth const">
			<summary>
			Returns the current text wrap width in units.
			</summary>  
			<returns>Wrap width in units.</returns>
		</member>
		<member name="M:Unigine.ObjectText.type">
			<summary>
			Returns the type of the object.
			</summary>  
			<returns>Object Text type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeBox.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a new volume box object with given dimensions.
			</summary> 
			<param name="size"> Dimensions of the new volume box object in units. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeBox.setSize(Unigine.Math.vec3)">
			<summary>
			Sets new dimensions for the volume box.
			</summary> 
			<param name="size"> New dimensions of the volume box in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeBox.getSize const">
			<summary>
			Returns dimensions of the volume box.
			</summary>  
			<returns>Dimensions of the volume box in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeBox.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.#ctor(float,float,float)">
			<summary>
			Constructor. Creates a new volume omni object with given properties.
			</summary> 
			<param name="width"> Width of the central rectangle in units. </param>
			<param name="height"> Height of the central rectangle in units. </param>
			<param name="radius"> Size of billboards in units. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.setAttenuation(float)">
			<summary>
			Sets attenuation that controls how fast the volume omni object fades out when a camera looks at it from a side.
			</summary> 
			<param name="attenuation"> Attenuation factor. If a too small value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.getAttenuation const">
			<summary>
			Returns attenuation that modulates smooth fading of the volume omni object when the camera looks at it from a side.
			</summary>  
			<returns>The current attenuation factor.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.getHeight const">
			<summary>
			Returns the height of the central flat rectangle in units.
			</summary>  
			<returns>The height of the central rectangle in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.setRadius(float)">
			<summary>
			Sets the width of billboards at the edges.
			</summary> 
			<param name="radius"> A new width in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.getRadius const">
			<summary>
			Returns the size of billboards.
			</summary>  
			<returns>The size of billboards in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.setSize(float,float)">
			<summary>
			Sets new dimensions of the volume omni object.
			</summary> 
			<param name="width"> A new width of the central flat rectangle in units. If a negative value is provided, 0 will be used instead. </param>
			<param name="height"> A new height of the central flat rectangle in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.getWidth const">
			<summary>
			Returns the width of the central flat rectangle.
			</summary>  
			<returns>The width of the central rectangle in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeOmni.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.#ctor(float,float,float)">
			<summary>
			Constructor. Creates a new volume projected object with the given properties.
			</summary> 
			<param name="width"> Size of the smallest billboard in units. </param>
			<param name="height"> Length of the light beam along the Z axis in units. </param>
			<param name="fov"> Angle of the beam cone in degrees. It controls the width of the light beam. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.setFov(float)">
			<summary>
			Sets the width of the light beam, which is specified as an angle of the beam cone.
			</summary> 
			<param name="fov"> Angle in degrees. The provided value will be saturated in the range [10;90]. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.getFov const">
			<summary>
			Returns the width of the light beam, which is specified as the angle of the beam cone.
			</summary>  
			<returns>Angle in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.setRadius(float)">
			<summary>
			Sets a length of the light beam.
			</summary> 
			<param name="radius"> Length in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.getRadius const">
			<summary>
			Returns the length of the light beam along the Z axis in units.
			</summary>  
			<returns>The current length in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.setSize(float)">
			<summary>
			Sets a size of the smallest billboard at the beginning of the light beam.
			</summary> 
			<param name="size"> Size of the smallest billboard in units. If a too small value is provided, 0.001 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.getSize const">
			<summary>
			Returns the size of the smallest billboard at the beginning of the light beam.
			</summary>  
			<returns>Size of the smallest billboard in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.setStep(float)">
			<summary>
			Sets a step between neighboring billboards. The step controls how many billboards are used to render the volume projected object. The bigger the step, the less billboards are used to render the object.
			</summary> 
			<param name="step"> Step between billboards. The provided value will be saturated in the range [0.1; 1]. By the value of 1, the beam is rendered discrete. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.getStep const">
			<summary>
			Returns the distance between neighboring billboards. The step controls how many billboards are used to render the volume projected object. The bigger the step, the less billboards are used to render the object.
			</summary>  
			<returns>The step between billboards.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.setVelocity(float)">
			<summary>
			Sets a velocity with which billboards move to the end of the light beam.
			</summary> 
			<param name="velocity"> A velocity of billboards. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.getVelocity const">
			<summary>
			Returns the velocity with which billboards move to the end of the light beam.
			</summary>  
			<returns>The velocity of billboards.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.setVolumeRotation(float)">
			<summary>
			Sets an angle of billboards rotation. This angle is set for the billboard at the end of the light beam.
			</summary> 
			<param name="rotation"> A rotation angle. If a positive value is set, the billboards will be rotated clockwise; if a negative value is set, the billboards will be rotated counterclockwise. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeProj.getVolumeRotation const">
			<summary>
			Returns the angle of billboards rotation. This angle is set for the billboard at the end of the beam. If a positive value is set, the billboards will be rotated clockwise; if a negative value is set, the billboards will be rotated counterclockwise.
			</summary>  
			<returns>The rotation angle.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeProj.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeSphere.#ctor(Unigine.Math.vec3)">
			<summary>
			Constructor. Creates a new volume sphere object with given radius values.					If a volume light material is assigned to an object, it is rendered based only on the X-axis radius value. If its radius values along Y or Z axes are smaller, then the object is cut along them.
			</summary> 
			<param name="radius"> Radius values of the new volume sphere object in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeSphere.setRadius(Unigine.Math.vec3)">
			<summary>
			Updates volume sphere radius values. If a volume light material is assigned to an object, it is rendered based only on the radius value along the X axis. If its radius values along the Y or Z axes are smaller than along the X axis, the object is cut along them.
			</summary> 
			<param name="radius"> New radius values of the volume sphere in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.ObjectVolumeSphere.getRadius const">
			<summary>
			Returns the volume sphere radius values.
			</summary>  
			<returns>The radius values of the volume sphere in units.</returns>
		</member>
		<member name="M:Unigine.ObjectVolumeSphere.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.ObjectWaterMesh">
			<summary>
			Constructor. Creates a new water mesh object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectWaterMesh.#ctor(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Constructor. Creates a new water mesh object.
			</summary> 
			<param name="mesh"> The mesh smart pointer. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.#ctor(char)">
			<summary>
			Constructor. Creates a new water mesh object from a specified file.
			</summary> 
			<param name="path"> Path to the water mesh. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setFieldMask(int)">
			<summary>
			Sets a field mask specifying the area of the Field node to be applied.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a mask. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getFieldMask">
			<summary>
			Returns the mask specifying the area of the applied Field node.
			</summary>  
			<returns>The integer value, each bit of which sets a mask.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getHeight(Unigine.Math.Vec3)">
			<summary>
			Returns a height offset of a given point relatively to the water mesh surface.
			</summary> 
			<param name="position"> The point position coordinates. </param> 
			<returns>Height offset of the point.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Allows for reinitialization of the water mesh object: copies a given mesh into the current water mesh.
			</summary> 
			<param name="mesh"> The mesh smart pointer. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getMesh(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Copies the current water mesh into the received mesh.
			</summary> 
			<param name="mesh"> The received mesh smart pointer. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setMeshName(char,int)">
			<summary>
			Sets a new name for the water mesh and forces loading of the mesh with the new name for the current water mesh.
			</summary> 
			<param name="path"> A new name to be set for the water mesh. </param>
			<param name="force_load"> Force flag.If 1 is specified, the mesh with the new name will be loaded immediately from the file specified as the first argument for this function.If 0 is specified, only the mesh name will be updated. </param> 
			<returns>1 if:The current mesh name coincides the new name.The mesh with the new name has been loaded successfully.The force flag is set to 0.In other cases,0.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getMeshName">
			<summary>
			Returns the name of the current water mesh.
			</summary>  
			<returns>The mesh name.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getNormal(Unigine.Math.Vec3)">
			<summary>
			Returns the normal vector of a given point (used to orient objects along the waves normals).
			</summary> 
			<param name="position"> The point position coordinates. </param> 
			<returns>Normal vector.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setWave(int,Unigine.Math.vec4)">
			<summary>
			Sets parameters for one of four simulated water waves.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param>
			<param name="wave"> Wave parameters:The X and Y components containing the velocity of the wave.The Z component containing the frequency.The W component containing the amplitude. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getWave(int)">
			<summary>
			Returns parameters of one of four simulated water waves.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param> 
			<returns>Wave parameters:The X and Y components containing the velocity of the wave.The Z component containing the frequency.The W component containing the amplitude.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setWaveAngle(int,float)">
			<summary>
			Sets direction (angle of spreading) for a given wave:											If 0 is specified, the wave spreads along the Y axis and is parallel to the X axis.						If a positive value is specified, the wave direction is slanted counterclockwise relative to its initial spread.						If a negative value is specified, the wave is rotated clockwise.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param>
			<param name="angle"> Angle, in degrees. Both positive and negative values are acceptable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getWaveAngle(int)">
			<summary>
			Returns direction (angle of spreading) of a given wave.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param> 
			<returns>Angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setWaveHeight(int,float)">
			<summary>
			Sets the distance between the highest and the lowest peaks for the given wave. It sets the wave form along with the setWaveLength() function. The higher the value is, the higher the waves are.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param>
			<param name="height"> Height, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getWaveHeight(int)">
			<summary>
			Returns the distance between the highest and the lowest peaks for the given wave.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param> 
			<returns>Height, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setWaveLength(int,float)">
			<summary>
			Sets the distance between successive crests for the given wave. The higher the length value is, the broader the waves are.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param>
			<param name="length"> Length, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getWaveLength(int)">
			<summary>
			Returns the distance between successive crests of the given wave.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param> 
			<returns>Length, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.setWaveSpeed(int,float)">
			<summary>
			Sets a speed for a given wave. The higher the value, the faster waves follow each other.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param>
			<param name="speed"> Speed, in units per second. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterMesh.getWaveSpeed(int)">
			<summary>
			Returns the speed of a given wave.
			</summary> 
			<param name="num"> Wave number in range [0;3]. </param> 
			<returns>Speed, in units per second.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.loadMesh(char)">
			<summary>
			Loads a mesh for the current water mesh from the file. This function doesn't change the mesh name.
			</summary> 
			<param name="path"> The name of the mesh file. </param> 
			<returns>1 if the mesh is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.saveMesh(char)">
			<summary>
			Saves the object water mesh into a file.
			</summary> 
			<param name="path"> A name of the file. </param> 
			<returns>1 if the mesh is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterMesh.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.#ctor">
			<summary>
			Constructor. Creates a new global water object.
			</summary>  
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getPhysicsFieldMask const">
			<summary>
			Returns the FieldHeight physics mask of the assigned material on the Global Water.
			</summary>  
			<returns>The FieldHeight physics mask.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getVisualFieldMask const">
			<summary>
			Returns the FieldHeight visual mask of the assigned material on the Global Water.
			</summary>  
			<returns>The FieldHeight visual mask.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getMeanLevel const">
			<summary>
			Returns the average Z coordinate of the water object.
			</summary>  
			<returns>The Z coordinate value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setAnimationTime(float)">
			<summary>
								Sets water animation time value for water synchronization. It is used for effects, such as normals, caustics, and foam.
			</summary> 
			<param name="time"> Water animation time value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getAnimationTime const">
			<summary>
			Returns water animation time value for water synchronization.
			</summary>  
			<returns>Water animation time value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerName(int,char)">
			<summary>
			Sets a new name for the wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="value"> Name of the layer. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerName(int) const">
			<summary>
			Returns the name of the wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>Name of the layer</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerWeight(int,float)">
			<summary>
			Sets a weight for a given wave layer. This value determines how much the given layer affects the final wave form. It can be used for smooth transitions between the states of water. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="value"> Layer weight </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerWeight(int) const">
			<summary>
			Returns the current weight of the wave layer. This value determines how much the given layer affects the final wave form. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>Weight of the layer.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerDirectionAngleVariance(int,float)">
			<summary>
			Sets a variance value of the wave direction angle for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="value"> Variance value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerDirectionAngleVariance(int) const">
			<summary>
			Returns the current variance value of the wave direction angle for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>Variance value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerSteepnessScale(int,float)">
			<summary>
			Sets a steepness scale value for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="value"> Steepness scale value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerSteepnessScale(int) const">
			<summary>
			Returns the current steepness scale value for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>Steepness scale value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerAmplitudeRange(int,Unigine.Math.vec2)">
			<summary>
			Sets a range of wave amplitudes for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number. </param>
			<param name="value"> Amplitude range. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerAmplitudeRange(int) const">
			<summary>
			Returns the current range of wave amplitudes of a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number. </param> 
			<returns>Amplitude range.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerLengthRange(int,Unigine.Math.vec2)">
			<summary>
			Sets a range of wave lengths for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="value"> Length range. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerLengthRange(int) const">
			<summary>
			Returns the current range of wave lengths of a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>Length range.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerNumWaves(int,int)">
			<summary>
			Sets the number of waves for a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="num"> Number of waves. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getLayerNumWaves(int) const">
			<summary>
			Returns the number of waves on a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>Number of waves.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isLayerEnabled(int) const">
			<summary>
			Returns a value indicating if a given wave layer is enabled. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
			<returns>1 if the layer is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setLayerEnabled(int,bool)">
			<summary>
			Enables or disables a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param>
			<param name="enabled"> 1 to enable the layer, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.swapLayer(int,int)">
			<summary>
			Swaps two specified wave layers. Available when the Layers mode  is set.
			</summary> 
			<param name="num_0"> Layer1 number. </param>
			<param name="num_1"> Layer2 number. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getNumLayers const">
			<summary>
			Returns the current number of wave layers. Available when the Layers mode  is set.
			</summary>  
			<returns>Number of wave layers.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.removeLayer(int)">
			<summary>
			Removes a given wave layer. Available when the Layers mode  is set.
			</summary> 
			<param name="layer"> Layer number </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.addLayer">
			<summary>
			Appends a new wave layer. Available when the Layers mode  is set.
			</summary>  
			<returns>Number of the new added layer.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWavePhaseOffset(int,float)">
			<summary>
			Sets the phase offset parameter for a given wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param>
			<param name="value"> Phase offset parameter value in radians in range [0; 2pi]. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWavePhaseOffset(int) const">
			<summary>
			Returns the value of the Phase Offset parameter of a wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param> 
			<returns>Phase offset parameter value in radians in range [0; 2pi].</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWaveDirectionAngle(int,float)">
			<summary>
			Sets direction (angle of spreading) for a given wave:											If 0 is specified, the wave spreads along the Y axis and is parallel to the X axis.						If a positive value is specified, the wave direction is slanted counterclockwise relative to its initial spread.						If a negative value is specified, the wave is rotated clockwise.										Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param>
			<param name="value"> Angle, in degrees. Both positive and negative values are acceptable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWaveDirectionAngle(int) const">
			<summary>
			Returns direction (angle of spreading) of a given wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param> 
			<returns>Angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWaveSteepness(int,float)">
			<summary>
			Sets the steepness value for a given wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param>
			<param name="value"> Steepness value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWaveSteepness(int) const">
			<summary>
			Returns the current steepness value of the given wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param> 
			<returns>Steepness value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWaveAmplitude(int,float)">
			<summary>
			Sets the distance between the highest and the lowest peaks for a given wave. It sets the wave form along with the setWaveLength() function. The higher the value is, the higher the waves are. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param>
			<param name="value"> Amplitude, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWaveAmplitude(int) const">
			<summary>
			Returns the distance between the highest and the lowest peaks for the given wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param> 
			<returns>Amplitude, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWaveLength(int,float)">
			<summary>
			Sets the distance between successive crests for a given wave. The higher the length value is, the broader the waves are. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param>
			<param name="value"> Length, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWaveLength(int) const">
			<summary>
			Returns the distance between successive crests of the given wave. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param> 
			<returns>Length, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getNumWaves const">
			<summary>
			Returns the current number of simulated waves. Available when the Manual mode  is set.
			</summary>  
			<returns>Number of waves.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.removeWave(int)">
			<summary>
			Removes the wave having a specified number. Available when the Manual mode  is set.
			</summary> 
			<param name="index"> Wave number. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.addWave(float,float,float,float,float)">
			<summary>
			Adds a wave if the Manual mode  is set.
			</summary> 
			<param name="length"> Wave length. </param>
			<param name="amplitude"> Wave amplitude. </param>
			<param name="steepness"> Wave steepness. </param>
			<param name="direction_angle"> Angle of the wave direction in degrees. At 0 angle the wave will be directed along the X-axis. </param>
			<param name="phase"> Phase offset of the wave in radians (0 to 2pi). </param> 
			<returns>Number of the added wave.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWindAffect const">
			<summary>
			Returns the current value determining how much the wind direction affects the waves.
			</summary>  
			<returns>Wind influence value in range [0;1].</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWindAffect(float)">
			<summary>
			Sets how much the wind direction affects the waves.
			</summary> 
			<param name="affect"> Wind influence in range [0;1]. If you set it to 1, all waves will be directed along the wind direction. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWindDirectionAngle const">
			<summary>
			Returns the angle that determines the wind direction.
			</summary>  
			<returns>Angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWindDirectionAngle(float)">
			<summary>
			Sets the angle that determines the wind direction.
			</summary> 
			<param name="angle"> Wind direction angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Object type identifier.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setActiveWater(bool)">
			<summary>
			Sets a value indicating if the global water object is active. If there are more than one global water nodes in the scene, only the active one will be rendered.
			</summary> 
			<param name="water"> true to set the global water object as active, false - to set it as inactive. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isActiveWater const">
			<summary>
			Returns a value indicating if the global water object is active.
			</summary>  
			<returns>true if the global water object is active, false - if it is inactive.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.fetchHeight(Unigine.Math.Vec3) const">
			<summary>
			Returns a height offset of the specified point relative to the current water level calculated at this point. E.g. in case the specified point is (0, 0, -3) and the current water level calculated for this point is equal to 5, the function shall return 8.								In case of higher Beaufort levels (resulting in significant wave steepness and height differences on the water surface), calculation results may differ from visual representation (e.g. calculated water level may be greater the actual value). To avoid it and increase precision, adjust calculation quality.
			</summary> 
			<param name="position"> Point position coordinates. </param> 
			<returns>Height offset of the specified point relative to the current water level calculated at this point, in meters.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.fetchNormal(Unigine.Math.Vec3) const">
			<summary>
			Returns a normal vector to the water surface at the specified point (to orient objects along the waves normals).In case of higher Beaufort levels (resulting in significant wave steepness and height differences on the water surface), calculation results may differ from visual representation (e.g. calculated water level may be greater the actual value). To avoid it and increase precision, adjust calculation quality.
			</summary> 
			<param name="position"> Point position coordinates. </param> 
			<returns>Normal vector.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFetchAmplitudeThreshold(float)">
			<summary>
			Sets the threshold for amplitude values that will not participate in height and normal calculations. The more you cut off, the less accurate the height value you get, but the faster are the calculations.
			</summary> 
			<param name="threshold"> Amplitude threshold. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFetchAmplitudeThreshold const">
			<summary>
			Returns the current threshold for amplitude values that will not participate in height and normal calculations.
			</summary>  
			<returns>Amplitude threshold.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFetchSteepnessQuality(ObjectWaterGlobal::STEEPNESS_QUALITY)">
			<summary>
			Sets the wave steepness calculation quality used in height and normal calculations. Low quality is usually sufficient for calm water and large floating objects. If the waves are big, or you want to simulate small floating objects, you may need to increase the quality. Higher quality gives a more precise result but affects performance.
			</summary> 
			<param name="quality"> Quality value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFetchSteepnessQuality const">
			<summary>
			Returns the wave steepness calculation quality used in height and normal calculations.
			</summary>  
			<returns>Steepness quality. The default is STEEPNESS_QUALITY_LOW.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getIntersectionAmplitudeThreshold const">
			<summary>
			Returns the current threshold of amplitude values that will not participate in intersection calculations.
			</summary>  
			<returns>Amplitude threshold.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setIntersectionAmplitudeThreshold(float)">
			<summary>
			Sets the threshold for amplitude values that will not participate in intersection calculations. The default value is 0.1f.
			</summary> 
			<param name="threshold"> Amplitude threshold. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setIntersectionPrecision(float)">
			<summary>
			Sets an intersection precision which represents an error between the real value of the water intersection point and the calculated value. The default value is 0.25.
			</summary> 
			<param name="precision"> Precision for intersection detection. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getIntersectionPrecision const">
			<summary>
			Returns current intersection precision which represents an error between the real value of the water intersection point and the calculated value.
			</summary>  
			<returns>Precision for intersection detection.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setIntersectionSteepnessQuality(ObjectWaterGlobal::STEEPNESS_QUALITY)">
			<summary>
			Sets the wave steepness calculation quality used in intersection calculations. Low quality is usually sufficient for calm water and large floating objects. If the waves are big, or you want to simulate small floating objects, you may need to increase the quality. Higher quality gives a more precise result but affects performance.
			</summary> 
			<param name="quality"> Steepness quality. The default is STEEPNESS_QUALITY_LOW. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getIntersectionSteepnessQuality const">
			<summary>
			Returns the wave steepness calculation quality used in intersection calculations. Low quality is usually sufficient for calm water and large floating objects. If the waves are big, or you want to simulate small floating objects, you may need to increase the quality. Higher quality gives a more precise result but affects performance.
			</summary>  
			<returns>Steepness quality.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setSoftIntersection(float)">
			<summary>
			Sets soft intersection of water with the shoreline and surfaces of objects.
			</summary> 
			<param name="intersection"> Soft intersection value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getSoftIntersection const">
			<summary>
			Returns the current soft intersection of water with the shoreline and surfaces of objects.
			</summary>  
			<returns>Soft intersection value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.takeSyncData(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Writes wave synchronization data to the specified stream.
			</summary> 
			<param name="stream"> Stream to which wave synchronization data is to be written. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.applySyncData(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Reads wave synchronization data from the specified stream and applies it to the wave system.
			</summary> 
			<param name="stream"> Stream with wave synchronization data to be applied. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWavesMode(ObjectWaterGlobal::WAVES_MODE)">
			<summary>
			Sets the wave generation mode.
			</summary> 
			<param name="mode"> A desired wave mode. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWavesMode const">
			<summary>
			Returns the current wave generation mode.
			</summary>  
			<returns>Wave mode.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setBeaufort(float)">
			<summary>
			Sets the Beaufort wind force scale value.
			</summary> 
			<param name="beaufort"> Beaufort value from 0 (Calm) to 12 (Hurricane). Available when the Beauforts mode  is set. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getBeaufort const">
			<summary>
			Returns the current Beaufort wind force scale value. Available when the Beauforts mode  is set.
			</summary>  
			<returns>Beaufort value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setGeometryNormalIntensity(float)">
			<summary>
			Sets the intensity of normals of the waves.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getGeometryNormalIntensity const">
			<summary>
			Returns the current intensity of normals of the waves.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setTextureNormalBlur(float)">
			<summary>
			Sets the blurring ratio for the procedurally generated normals. This parameter enables you to reduce pixelation of the normal map, and make it less pronounced. It is recommended to use small values for correction, when necessary. This affects the normals generated for Field Height and Field Shoreline.
			</summary> 
			<param name="blur"> Normal blur value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getTextureNormalBlur const">
			<summary>
			Returns the current blurring ratio for the procedurally generated normals. This parameter enables you to reduce pixelation of the normal map, and make it less pronounced. It is recommended to use small values for correction, when necessary. This affects the normals generated for Field Height and Field Shoreline.
			</summary>  
			<returns>Normal blur value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setTextureNormalIntensity(float)">
			<summary>
			Sets the intensity of procedurally generated normals. This affects the normals generated for Field Height and Field Shoreline.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getTextureNormalIntensity const">
			<summary>
			Returns the current intensity of procedurally generated normals. This affects the normals generated for Field Height and Field Shoreline.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetailTexturePath(char)">
			<summary>
			Sets a path to the location of a normal detail texture.
			</summary> 
			<param name="path"> Detail texture path. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetailTexturePath const">
			<summary>
			Returns the current path to the location of a normal detail texture.
			</summary>  
			<returns>Detail texture path.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetail0UVSize(Unigine.Math.vec2)">
			<summary>
			Sets the size of the first sample of the normal detail texture.
			</summary> 
			<param name="size"> Size value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetail0UVSize const">
			<summary>
			Returns the current size of the first sample of the normal detail texture.
			</summary>  
			<returns>Size value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetail0UVSpeed(Unigine.Math.vec2)">
			<summary>
			Sets the speed of the first sample of the normal detail texture.
			</summary> 
			<param name="speed"> Speed value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetail0UVSpeed const">
			<summary>
			Returns the current speed of the first sample of the normal detail texture.
			</summary>  
			<returns>Speed value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetail0Intensity(float)">
			<summary>
			Sets the intensity of the first sample of the normal detail texture.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetail0Intensity const">
			<summary>
			Returns the current intensity of the first sample of the normal detail texture.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetail1UVSize(Unigine.Math.vec2)">
			<summary>
			Sets the size of the second sample of the normal detail texture.
			</summary> 
			<param name="size"> Size value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetail1UVSize const">
			<summary>
			Returns the current size of the second sample of the normal detail texture.
			</summary>  
			<returns>Size value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetail1UVSpeed(Unigine.Math.vec2)">
			<summary>
			Sets the speed of the second sample of the normal detail texture.
			</summary> 
			<param name="speed"> Speed of the detail texture. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetail1UVSpeed const">
			<summary>
			Returns the current speed of the second sample of the normal detail texture.
			</summary>  
			<returns>Speed value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDetail1Intensity(float)">
			<summary>
			Sets the intensity of the second sample of the normal detail texture.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDetail1Intensity const">
			<summary>
			Returns the current intensity of the first sample of the normal detail texture.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesTexturePath(char)">
			<summary>
			Sets the path to the normal map of the distant waves.
			</summary> 
			<param name="path"> Path to the normal map. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesTexturePath const">
			<summary>
			Returns the current path to the normal map of the distant waves.
			</summary>  
			<returns>Path to the normal map.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesUVTransform(Unigine.Math.vec4)">
			<summary>
			Specifies the UV transform for the distant waves normal map.
			</summary> 
			<param name="transform"> The first two values (x, y) represent the scale texture coordinates along the X and Y axes. The third and forth (z, w) specify the speed of movement animation. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesUVTransform const">
			<summary>
			Returns the current UV transform for the distant waves normal map.
			</summary>  
			<returns>The first two values (x, y) represent the scale texture coordinates along the X and Y axes. The third and forth (z, w) specify the speed of movement animation.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesIntensity(float)">
			<summary>
			Sets the intensity for distant waves.Unavailable for modes with Beaufort levels blending.
			</summary> 
			<param name="scale"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesIntensity const">
			<summary>
			Returns the current intensity value for distant waves.Unavailable for modes with Beaufort levels blending.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesBlendDistanceStart(float)">
			<summary>
			Sets the fade-in start distance for distant waves.
			</summary> 
			<param name="start"> Fade-in start distance. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesBlendDistanceStart const">
			<summary>
			Returns the current fade-in start distance for distant waves.
			</summary>  
			<returns>Fade-in start distance.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesBlendDistanceEnd(float)">
			<summary>
			Sets the fade-in end distance for distant waves.
			</summary> 
			<param name="end"> Fade-in end distance. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesBlendDistanceEnd const">
			<summary>
			Returns the current fade-in end distance for distant waves.
			</summary>  
			<returns>Fade end distance.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesBlendMax(float)">
			<summary>
			Sets the value representing the maximum amount of distant waves in the crossfade zone where the main geometry waves fade out and distant waves fade in.
			</summary> 
			<param name="value"> A value representing the maximum amount of distant waves. Range: [0; 1], the default value is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesBlendMax const">
			<summary>
			Returns the current value representing the maximum amount of distant waves in the crossfade zone where the main geometry waves fade out and distant waves fade in.
			</summary>  
			<returns>A value representing the maximum amount of distant waves.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDistantWavesBlendMin(float)">
			<summary>
			Sets the value representing the minimum amount of distant waves in the crossfade zone where the main geometry waves fade out and distant waves fade in.
			</summary> 
			<param name="value"> A value representing the minimum amount of distant waves. Range: [0; 1], the default value is 0. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDistantWavesBlendMin const">
			<summary>
			Returns the current value representing the minimum amount of distant waves in the crossfade zone where the main geometry waves fade out and distant waves fade in.
			</summary>  
			<returns>A value representing the minimum amount of distant waves.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamTexturePath(char)">
			<summary>
			Sets the path to the foam texture.
			</summary> 
			<param name="path"> Path to the foam texture. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamTexturePath const">
			<summary>
			Returns the current path to the foam texture.
			</summary>  
			<returns>Path to the foam texture.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoam0UVScale(float)">
			<summary>
			Sets the UV scale for the first sample of the foam texture.
			</summary> 
			<param name="scale"> Scale value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoam0UVScale const">
			<summary>
			Returns the current UV scale for the first sample of the foam texture.
			</summary>  
			<returns>Scale value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoam0UVSpeed(float)">
			<summary>
			Sets the speed for the first sample of the foam texture.
			</summary> 
			<param name="speed"> Speed value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoam0UVSpeed const">
			<summary>
			Returns the current speed for the first sample of the foam texture.
			</summary>  
			<returns>Speed value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoam1UVScale(float)">
			<summary>
			Sets the UV scale for the second sample of the foam texture.
			</summary> 
			<param name="scale"> Scale value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoam1UVScale const">
			<summary>
			Returns the current UV scale for the second sample of the foam texture.
			</summary>  
			<returns>Scale value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoam1UVSpeed(float)">
			<summary>
			Sets the speed for the second sample of the foam texture.
			</summary> 
			<param name="speed"> Speed value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoam1UVSpeed const">
			<summary>
			Returns the current speed for the second sample of the foam texture.
			</summary>  
			<returns>Speed value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamPeakContrast(float)">
			<summary>
			Sets the foam contrast on the wave peaks.
			</summary> 
			<param name="contrast"> Contrast value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamPeakContrast const">
			<summary>
			Returns the current foam contrast on the wave peaks.
			</summary>  
			<returns>Contrast value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamPeakIntensity(float)">
			<summary>
			Sets the foam intensity on the wave peaks.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamPeakIntensity const">
			<summary>
			Returns the current foam intensity on the wave peaks.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamWhitecapContrast(float)">
			<summary>
			Sets the foam contrast on the white caps.
			</summary> 
			<param name="contrast"> Contrast value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamWhitecapContrast const">
			<summary>
			Returns the current foam contrast on the white caps.
			</summary>  
			<returns>Contrast value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamWhitecapIntensity(float)">
			<summary>
			Sets the foam intensity on the white caps.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamWhitecapIntensity const">
			<summary>
			Returns the current foam intensity on the white caps.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamWindContrast(float)">
			<summary>
			Sets the contrast for the foam generated based on the wind direction.
			</summary> 
			<param name="contrast"> Contrast value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamWindContrast const">
			<summary>
			Returns the current contrast for the foam generated based on the wind direction.
			</summary>  
			<returns>Contrast value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamWindIntensity(float)">
			<summary>
			Sets the intensity for the foam generated based on the wind direction.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamWindIntensity const">
			<summary>
			Returns the current intensity for the foam generated based on the wind direction.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldHeightFoamContrast(float)">
			<summary>
			Sets the contrast of the foam generated from the FieldHeight objects placed in Global Water.
			</summary> 
			<param name="contrast"> Contrast value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldHeightFoamContrast const">
			<summary>
			Returns the current contrast of the foam generated from the FieldHeight objects placed in Global Water.
			</summary>  
			<returns>Contrast value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldHeightFoamIntensity(float)">
			<summary>
			Sets the intensity of the foam generated from the FieldHeight objects placed in Global Water.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldHeightFoamIntensity const">
			<summary>
			Returns the current intensity of the foam generated from the FieldHeight objects placed in Global Water.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamContactIntensity(float)">
			<summary>
			Sets the foam intensity near shores or different objects in water.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamContactIntensity const">
			<summary>
			Returns the current foam intensity near shores or different objects in water.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFoamTextureAffect(float)">
			<summary>
			Sets the visibility of the foam texture. It can be used to create additional effects, e.g., foam bubbles.
			</summary> 
			<param name="affect"> Texture affect value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFoamTextureAffect const">
			<summary>
			Sets the visibility of the foam texture.
			</summary>  
			<returns>Texture affect value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setSubsurfaceColor(Unigine.Math.vec4)">
			<summary>
			Sets the water subsurface scattering (SSS) color.
			</summary> 
			<param name="color"> Color value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getSubsurfaceColor const">
			<summary>
			Returns the current water subsurface scattering (SSS) color.
			</summary>  
			<returns>Color value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setSubsurfaceAmbientIntensity(float)">
			<summary>
			Sets the intensity of subsurface scattering for ambient lighting.
			</summary> 
			<param name="intensity"> Intensity value. The lower the value, the faster the light rays dissipate in water. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getSubsurfaceAmbientIntensity const">
			<summary>
			Returns the current intensity of subsurface scattering for ambient lighting.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setSubsurfaceWaveIntensity(float)">
			<summary>
			Sets the intensity of light rays passing through waves.
			</summary> 
			<param name="intensity"> Intensity value. The lower the value, the faster the light rays dissipate in water. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getSubsurfaceWaveIntensity const">
			<summary>
			Returns the current intensity of light rays passing through waves.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setSubsurfaceWaveFoamIntensity(float)">
			<summary>
			Sets the intensity of subsurface scattering near the foam areas.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getSubsurfaceWaveFoamIntensity const">
			<summary>
			Returns the current intensity of subsurface scattering near the foam areas.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setSubsurfaceDiffuseIntensity(float)">
			<summary>
			Sets the intensity of subsurface scattering for diffuse lighting.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getSubsurfaceDiffuseIntensity const">
			<summary>
			Returns the current intensity of subsurface scattering for diffuse lighting.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDepthLUTTexturePath(char)">
			<summary>
			Sets the path to the LUT texture that shows the color of the bottom.
			</summary> 
			<param name="path"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDepthLUTTexturePath const">
			<summary>
			Returns the current path to the LUT texture that shows the color of the bottom.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterFogColor(Unigine.Math.vec4)">
			<summary>
			Sets the underwater fog color. The Sun and Environment lighting affect this parameter to create the final underwater fog color.
			</summary> 
			<param name="color"> Color value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterFogColor const">
			<summary>
			Returns the current underwater fog color.
			</summary>  
			<returns>Color value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterFogTransparency(float)">
			<summary>
			Sets the transparency of the underwater fog.
			</summary> 
			<param name="transparency"> Transparency value. The higher the value, the more transparent the underwater fog is. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterFogTransparency const">
			<summary>
			Returns the current transparency of the underwater fog.
			</summary>  
			<returns>Transparency value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterFogDepth(float)">
			<summary>
			Sets the distance from the water surface up to which the light affects the underwater color.
			</summary> 
			<param name="depth"> Depth value, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterFogDepth const">
			<summary>
			Returns the current distance from the water surface up to which the light affects the underwater color.
			</summary>  
			<returns>Depth value, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterFogOffset(float)">
			<summary>
			Sets the height offset for lighting.
			</summary> 
			<param name="offset"> Offset value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterFogOffset const">
			<summary>
			Returns the current height offset for lighting.
			</summary>  
			<returns>Offset value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterFogEnvironmentInfluence(float)">
			<summary>
			Sets the degree of impact of the environment lighting on the final underwater color.
			</summary> 
			<param name="influence"> Influence value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterFogEnvironmentInfluence const">
			<summary>
			Returns the current degree of impact of the environment lighting on the final underwater color.
			</summary>  
			<returns>Influence value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterFogSunInfluence(float)">
			<summary>
			Sets the degree of impact of the sun lighting on the final underwater color.
			</summary> 
			<param name="influence"> Influence value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterFogSunInfluence const">
			<summary>
			Returns the current degree of impact of the sun lighting on the final underwater color.
			</summary>  
			<returns>Influence value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterShaftIntensity(float)">
			<summary>
			Sets the intensity of the underwater sun shafts.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterShaftIntensity const">
			<summary>
			Returns the current intensity of the underwater sun shafts.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWaterlineSize(float)">
			<summary>
			Sets the size of the borderline between the overwater and underwater environments.
			</summary> 
			<param name="size"> Waterline size. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWaterlineSize const">
			<summary>
			Returns the current size of the borderline between the overwater and underwater environments.
			</summary>  
			<returns>Waterline size.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterDofDistance(float)">
			<summary>
			Sets the focal distance for the underwater DOF effect.
			</summary> 
			<param name="distance"> Focal distance. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getUnderwaterDofDistance const">
			<summary>
			Returns the current focal distance for the underwater DOF effect.
			</summary>  
			<returns>Focal distance.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setPlanarReflectionDistance(float)">
			<summary>
			Sets the distance from the reflection viewport camera to the reflected object. This distance sums up to the distance from the camera to the reflective surface plus the distance from object to reflective surface.
			</summary> 
			<param name="distance"> Distance, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getPlanarReflectionDistance const">
			<summary>
			Returns the current distance from the reflection viewport camera to the reflected object. This distance sums up to the distance from the camera to the reflective surface plus the distance from object to reflective surface.
			</summary>  
			<returns>Distance, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setPlanarReflectionPivotOffset(Unigine.Math.vec3)">
			<summary>
			Sets the position of the reflection pivot point.
			</summary> 
			<param name="offset"> Pivot point offset. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getPlanarReflectionPivotOffset const">
			<summary>
			Returns the current position of the reflection pivot point.
			</summary>  
			<returns>Pivot point offset.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setReflectionRoughness(float)">
			<summary>
			Sets the environment reflection roughness of the water surface. This parameter helps to tweak reflections on the water surface relative to the environment.
			</summary> 
			<param name="roughness"> Roughness value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getReflectionRoughness const">
			<summary>
			Returns the current environment reflection roughness of the water surface. This parameter helps to tweak reflections on the water surface relative to the environment.
			</summary>  
			<returns>Roughness value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setReflectionOcclusion(float)">
			<summary>
			Sets the occlusion factor for environment reflections on parts of the water surface with negative normals. Using this parameter enables simulation of reflection of waves on the water surface removing too bright areas on waves close to the horizon.
			</summary> 
			<param name="occlusion"> Occlusion value. Minimum value is 0 - no occlusion. By the higher values, occlusion is performed for reflections on parts of the water surface with negative normals that have a certain slope. The higher the value, the less intensive reflections are on the surface parts with negative normals. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getReflectionOcclusion const">
			<summary>
			Returns the current occlusion factor for environment reflections on parts of the water surface with negative normals. Using this parameter enables simulation of reflection of waves on the water surface removing too bright areas on waves close to the horizon.
			</summary>  
			<returns>Occlusion value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setReflectionOcclusionSlope(float)">
			<summary>
			Sets the slope of negative normals of the water surface, at which occlusion is performed for wave reflections.
			</summary> 
			<param name="slope"> Slope value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getReflectionOcclusionSlope const">
			<summary>
			Returns the current slope of negative normals of the water surface, at which occlusion is performed for wave reflections.
			</summary>  
			<returns>Slope value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCausticsTexturePath(char)">
			<summary>
			Sets the path to the 3D Caustic texture which determines the pattern of light rays refracted by the water surface. The texture is 1-channeled: R value defines the caustics pattern.
			</summary> 
			<param name="path"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getCausticsTexturePath const">
			<summary>
			Returns the current path to the 3D Caustic texture which determines the pattern of light rays refracted by the water surface.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCausticUVTransform(Unigine.Math.vec4)">
			<summary>
			Sets the UV Transform coordinates for the caustic texture.
			</summary> 
			<param name="transform"> Transform coordinates. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getCausticUVTransform const">
			<summary>
			Returns the current UV Transform coordinates for the caustic texture.
			</summary>  
			<returns>Transform coordinates.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCausticDistanceFade(float)">
			<summary>
			Sets the distance from the water surface downwards, at which light shapes fade.
			</summary> 
			<param name="fade"> Distance, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getCausticDistanceFade const">
			<summary>
			Returns the current distance from the water surface downwards, at which light shapes fade.
			</summary>  
			<returns>Distance, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCausticAnimationSpeed(float)">
			<summary>
			Sets the movement speed of the light patterns.
			</summary> 
			<param name="speed"> Speed value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getCausticAnimationSpeed const">
			<summary>
			Returns the current movement speed of the light patterns.
			</summary>  
			<returns>Speed value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCausticBrightness(float)">
			<summary>
			Sets the brightness of the light shapes.
			</summary> 
			<param name="brightness"> Brightness value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getCausticBrightness const">
			<summary>
			Returns the current brightness of the light shapes.
			</summary>  
			<returns>Brightness value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineLUTTexturePath(char)">
			<summary>
			Sets the path to the LUT texture used for shoreline wetness effect.
			</summary> 
			<param name="path"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineLUTTexturePath const">
			<summary>
			Returns the current path to the LUT texture used for shoreline wetness effect.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineWaveSpeed(float)">
			<summary>
			Sets the speed of tidal waves.
			</summary> 
			<param name="speed"> Wave speed value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineWaveSpeed const">
			<summary>
			Returns the current speed of tidal waves.
			</summary>  
			<returns>Wave speed value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineWaveTiling(float)">
			<summary>
			Sets the frequency of tidal waves.
			</summary> 
			<param name="tiling"> Tiling value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineWaveTiling const">
			<summary>
			Returns the current frequency of tidal waves.
			</summary>  
			<returns>Tiling value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineWaveHeight(float)">
			<summary>
			Sets the height of oncoming tidal waves.
			</summary> 
			<param name="height"> Height value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineWaveHeight const">
			<summary>
			Returns the current height of oncoming tidal waves.
			</summary>  
			<returns>Height value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineWaveFalloff(float)">
			<summary>
			Sets the visibility gradient of waves coming from sea to the shore.
			</summary> 
			<param name="falloff"> Falloff value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineWaveFalloff const">
			<summary>
			Returns the current visibility gradient of waves coming from sea to the shore.
			</summary>  
			<returns>Falloff value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineWaveExponent(float)">
			<summary>
			Sets the nonlinearity of tidal waves frequency and movement speed depending on their distance from the shoreline.
			</summary> 
			<param name="exponent"> Exponent value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineWaveExponent const">
			<summary>
			Returns the current nonlinearity of tidal waves frequency and movement speed.
			</summary>  
			<returns>Exponent value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineWaveFrontExponent(float)">
			<summary>
			Sets the semi-transparency of the foam at an angle to the wind direction. Allows making the foam visible only on the windward side.
			</summary> 
			<param name="exponent"> Exponent value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineWaveFrontExponent const">
			<summary>
			Returns the current semi-transparency of the foam at an angle to the wind direction. Allows making the foam visible only on the windward side.
			</summary>  
			<returns>Exponent value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineFoamStretching(float)">
			<summary>
			Sets the width of the Shoreline LUT texture that creates a tidal wave.
			</summary> 
			<param name="stretching"> Stretching value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineFoamStretching const">
			<summary>
			Returns the current width of the Shoreline LUT texture that creates a tidal wave.
			</summary>  
			<returns>Stretching value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineFoamIntensity(float)">
			<summary>
			Sets the degree of foam intensity along the shoreline.
			</summary> 
			<param name="intensity"> Intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineFoamIntensity const">
			<summary>
			Returns the current degree of foam intensity along the shoreline.
			</summary>  
			<returns>Intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineFoamExponent(float)">
			<summary>
			Sets the visibility of the foam texture pattern.
			</summary> 
			<param name="exponent"> Exponent value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineFoamExponent const">
			<summary>
			Returns the current visibility of the foam texture pattern.
			</summary>  
			<returns>Exponent value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineMaskTiling(float)">
			<summary>
			Sets a size of the foam procedural pattern used to reduce the foam tiling effect when seen from above.
			</summary> 
			<param name="tiling"> Tiling value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineMaskTiling const">
			<summary>
			Returns the current size of the foam procedural pattern used to reduce the foam tiling effect.
			</summary>  
			<returns>Tiling value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineBeaufortFalloff(float)">
			<summary>
			Sets the Beaufort falloff value that provides height control of main geometry waves near the shoreline.
			</summary> 
			<param name="falloff"> Falloff value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldShorelineBeaufortFalloff const">
			<summary>
			Returns the current Beaufort falloff value that provides height control of main geometry waves near the shoreline.
			</summary>  
			<returns>Falloff value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setShorelineWetnessIntensity(float)">
			<summary>
			Sets the intensity of the wetness effect along the shoreline.
			</summary> 
			<param name="intensity"> Wetness intensity value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getShorelineWetnessIntensity const">
			<summary>
			Returns the current intensity of the wetness effect along the shoreline.
			</summary>  
			<returns>Wetness intensity value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setShorelineWetnessDistance(float)">
			<summary>
			Sets the spread of the wetness area along the shoreline.
			</summary> 
			<param name="distance"> Wetness distance value, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getShorelineWetnessDistance const">
			<summary>
			Returns the current spread of the wetness area along the shoreline.
			</summary>  
			<returns>Wetness distance value, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setShorelineWetnessOffset(float)">
			<summary>
			Sets the offset of the wetness area from the water.
			</summary> 
			<param name="offset"> Wetness offset value, in units. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getShorelineWetnessOffset const">
			<summary>
			Returns the current offset of the wetness area from the water.
			</summary>  
			<returns>Wetness offset value, in units.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setAuxiliaryColor(Unigine.Math.vec4)">
			<summary>
			Sets the color that goes into the auxiliary buffer. Alpha is the blend factor.
			</summary> 
			<param name="color"> Auxiliary color. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getAuxiliaryColor const">
			<summary>
			Returns the current color that goes into the auxiliary buffer.
			</summary>  
			<returns>Auxiliary color.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setRefractionScale(float)">
			<summary>
			Sets the scale of the water refraction.
			</summary> 
			<param name="scale"> Refraction scale value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getRefractionScale const">
			<summary>
			Returns the current scale of the water refraction.
			</summary>  
			<returns>Refraction scale value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setDiffuseDistortion(float)">
			<summary>
			Distortion of decals projected onto water.
			</summary> 
			<param name="distortion"> Distortion value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getDiffuseDistortion const">
			<summary>
			Returns the current distortion of decals projected onto water.
			</summary>  
			<returns>Distortion value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldHeightSteepness(float)">
			<summary>
			Sets the sharpness of the crests for the waves generated from the FieldHeight objects placed in Global Water.
			</summary> 
			<param name="steepness"> Steepness value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getFieldHeightSteepness const">
			<summary>
			Returns the current sharpness of the crests for the waves generated from the FieldHeight objects placed in Global Water.
			</summary>  
			<returns>Steepness value.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setUnderwaterDOF(bool)">
			<summary>
			Enables/disables the underwater DOF effect.
			</summary> 
			<param name="underwaterdof"> true to enable underwater DOF effect, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isUnderwaterDOF const">
			<summary>
			Returns a value indicating if the underwater DOF effect is enabled.
			</summary>  
			<returns>true if underwater DOF effect is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setPlanarReflection(bool)">
			<summary>
			Enables/disables the use of planar reflections on the water surface instead of SSR. It is better to use this option for undisturbed water (0-2 Beaufort). Enabling the option activates Planar Reflection MapSize  and Planar Reflection parameters.
			</summary> 
			<param name="reflection"> true to enable planar reflections, false to disable them. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isPlanarReflection const">
			<summary>
			Returns a value indicating if the planar reflections option is enabled.
			</summary>  
			<returns>true if planar reflections option is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setPlanarReflectionMapSizeType(ObjectWaterGlobal::PLANAR_REFLECTION_SIZE)">
			<summary>
			Sets the size of the planar reflection map. The higher the value, the better the quality is.
			</summary> 
			<param name="type"> Size of the planar reflection map. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getPlanarReflectionMapSizeType const">
			<summary>
			Returns the current size of the planar reflection map.
			</summary>  
			<returns>Size of the planar reflection map.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setPlanarReflectionViewportMask(int)">
			<summary>
			Sets the viewport mask of the reflection camera. A surface has its reflection rendered, if its viewport mask and its material's viewport mask match this mask.
			</summary> 
			<param name="mask"> Viewport mask. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getPlanarReflectionViewportMask const">
			<summary>
			Returns the current viewport mask of the reflection camera. A surface has its reflection rendered, if its viewport mask and its material's viewport mask match this mask.
			</summary>  
			<returns>Viewport mask.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCaustics(bool)">
			<summary>
			Enables/disables the effect of light rays refraction by the water surface.
			</summary> 
			<param name="caustics"> true to enable the caustics, false to disable them. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isCaustics const">
			<summary>
			Returns a value indicating if the caustics effect is enabled.
			</summary>  
			<returns>true if the caustics effect is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setCausticsDistortion(bool)">
			<summary>
			Enables/disables the caustics distortion option. This effect removes pixelation and makes caustics look smoother. When smoothing is not required, you can disable this option to gain performance.
			</summary> 
			<param name="distortion"> true to enable caustics distortion, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isCausticsDistortion const">
			<summary>
			Returns a value indicating if the caustics distortion effect is enabled.
			</summary>  
			<returns>true if caustics distortion is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineEnabled(bool)">
			<summary>
			Enables/disables the effect of the FieldShoreline object on the Global Water object. Enabling this option makes available the group of Field Shoreline states.
			</summary> 
			<param name="enabled"> true to enable FieldShoreline, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldShorelineEnabled const">
			<summary>
			Checks if the assigned material on the Global Water object has enabled FieldShoreline interaction option.
			</summary>  
			<returns>true if the FieldShoreline interaction option is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineHighPrecision(bool)">
			<summary>
			Enables/disables improved interpolation between the adjacent pixels of the shoreline texture to reduce stepping artifacts. This can be noticed when looking at the waterline separating overwater and underwater. This option should be used only when geometry and/or normal states are enabled.
			</summary> 
			<param name="precision"> true to enable high precision, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldShorelineHighPrecision const">
			<summary>
			Returns a value indicating if the high precision of the shoreline is enabled. If enabled, this option improves interpolation between the adjacent pixels of the shoreline texture to reduce stepping artifacts.
			</summary>  
			<returns>true if high precision is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineNormal(bool)">
			<summary>
			Enables/disables calculation of normals for geometry of shoreline waves. This option significantly reduces performance and can be used in cases, when really large waves are required. Enabling just the geometry state to simulate distortion of the water surface by a shoreline wave is enough in most cases.
			</summary> 
			<param name="normal"> true to enable, false to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldShorelineNormal const">
			<summary>
			Returns a value indicating if calculation of normals for geometry of shoreline waves is enabled.
			</summary>  
			<returns>true if enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineGeometry(bool)">
			<summary>
			Enables/disables rendering of wave geometry for shoreline waves. If disabled, the water surface remains flat. Disabling this option in cases where wave geometry is hardly noticeable (e.g. a flight simulator) gives a performance gain.
			</summary> 
			<param name="geometry"> true to enable, false to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldShorelineGeometry const">
			<summary>
			Returns a value indicating if rendering of wave geometry for shoreline waves is enabled.
			</summary>  
			<returns>true if enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldShorelineFoam(bool)">
			<summary>
			Enables/disables rendering of foam for shoreline zones.
			</summary> 
			<param name="foam"> true to enable, false to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldShorelineFoam const">
			<summary>
			Returns a value indicating if rendering of foam for shoreline zones is enabled.
			</summary>  
			<returns>true if enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setAuxiliary(bool)">
			<summary>
			Enables/disables the auxiliary rendering pass for the material. Can be used for custom post-effects, such as thermal vision, night vision, etc. Enabling the option activates the Auxiliary Color parameter.
			</summary> 
			<param name="auxiliary"> true to enable, false to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isAuxiliary const">
			<summary>
			Returns a value indicating if the auxiliary rendering pass for the material is enabled.
			</summary>  
			<returns>true if enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldHeightEnabled(bool)">
			<summary>
			Enables/disables the effect of FieldHeight object on the Global Water object.
			</summary> 
			<param name="enabled"> true to enable, false to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldHeightEnabled const">
			<summary>
			Checks if the assigned material on the Global Water object has enabled FieldHeight interaction option.
			</summary>  
			<returns>true if the FieldHeight interaction option is enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setFieldSpacerEnabled(bool)">
			<summary>
			Enables/disables the effect of FieldSpacer object on the Global Water object.
			</summary> 
			<param name="enabled"> true to enable, false to disable. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.isFieldSpacerEnabled const">
			<summary>
			Returns a value indicating if the effect of FieldSpacer object on the Global Water object is enabled.
			</summary>  
			<returns>true if enabled, otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.setWavesSpeedScale(float)">
			<summary>
			Sets a scale value that affects the speed of all the waves. The resulting wave speed is calculated as  sqrt(gravity * 2 * pi / wave_length) * waves_speed_scale, where gravity = 9.81 m/s2.
			</summary> 
			<param name="scale"> Scale value. </param> 
		</member>
		<member name="M:Unigine.ObjectWaterGlobal.getWavesSpeedScale const">
			<summary>
			Returns the current scale value that affects the speed of all the waves.
			</summary>  
			<returns>Scale value.</returns>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.WAVES_MODE_BEAUFORTS">
			<summary>
			Beaufort scale mode of wave generation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.WAVES_MODE_LAYERS">
			<summary>
			Layer mode of wave generation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.WAVES_MODE_MANUAL">
			<summary>
			Manual mode of wave generation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.STEEPNESS_QUALITY_EXTREME">
			<summary>
			Extreme quality of wave steepness calculation. Significantly affects performance.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.STEEPNESS_QUALITY_ULTRA">
			<summary>
			Ultra quality of wave steepness calculation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.STEEPNESS_QUALITY_HIGH">
			<summary>
			High quality of wave steepness calculation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.STEEPNESS_QUALITY_MEDIUM">
			<summary>
			Medium quality of wave steepness calculation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.STEEPNESS_QUALITY_LOW">
			<summary>
			Default. Low quality of wave steepness calculation.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_HEIGHT">
			<summary>
			Reflection image with the resolution height x height, where height is an application window height.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_HEIGHT_HALF">
			<summary>
			Reflection image with the resolution height/2 x height/2, where height is an application window height.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_HEIGHT_QUART">
			<summary>
			Reflection image with the resolution height/4 x height/4, where height is an application window height.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_4096">
			<summary>
			Reflection image with 4096x4096 resolution.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_2048">
			<summary>
			Reflection image with 2048x2048 resolution.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_1024">
			<summary>
			Reflection image with 1024x1024 resolution.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_512">
			<summary>
			Reflection image with 512x512 resolution.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_256">
			<summary>
			Reflection image with 256x256 resolution.
		</summary>
		</member>
		<member name="F:Unigine.ObjectWaterGlobal.PLANAR_REFLECTION_SIZE_RESOLUTION_128">
			<summary>
			Reflection image with 128x128 resolution.
		</summary>
		</member>
	</members>
</doc>