<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.IG.DIS.Connector.init(String,int,int,int,int)">
			<summary>
			Initializes the DIS Connector using the given parameters.
			</summary> 
			<param name="ip"> Broadcast address of the server computer that is used to broadcast messages to IG over the network </param>
			<param name="site"> Site ID of this application instance. </param>
			<param name="exercise"> Exercise ID of the DIS. </param>
			<param name="app"> Application ID of this application instance. If not set, will be generated automatically. </param>
			<param name="port"> Connection port. This argument is optional, default value is 3000. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.addConnectCallback(Unigine.CallbackBase)">
			<summary>
			Sets the parameter to be called when connection is established.
			</summary> 
			<param name="func"> Parameter to be called when connection is established. </param> 
			<returns>ID of the last added connect callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.IG.DIS.Connector.removeConnectCallback(void)">
			<summary>
			Removes the specified callback from the list of Connect callbacks.
			</summary> 
			<param name="id"> Connect callback ID obtained when adding it. </param> 
			<returns>True if the Connect callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.IG.DIS.Connector.addReceivePacketCallback(int,Unigine.CallbackBase)">
			<summary>
			Adds a callback function to be fired when the packet is received.
			</summary> 
			<param name="pdu_type"> PDU type. </param>
			<param name="func"> Callback function to be called when the packet is received. Callback signature: void func(KDIS::PDU::Header *packet). </param> 
			<returns>ID of the last added Receive Packet callback, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.IG.DIS.Connector.removeReceivePacketCallback(void)">
			<summary>
			Removes the specified callback from the list of Receive Packet callbacks.
			</summary> 
			<param name="id"> Receive Packet callback ID obtained when adding it. </param> 
			<returns>True if the Receive Packet callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.IG.DIS.Connector.getInternalEntityID(int,int)">
			<summary>
			Returns the IG internal entity ID.
			</summary> 
			<param name="app"> Application ID. </param>
			<param name="id"> DIS entity ID. </param> 
			<returns>IG internal entity ID.</returns>
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setProcessPacket(int,bool)">
			<summary>
			Sets a value indicating if the specified IG packets received are to be processed or skipped.
			</summary> 
			<param name="op_code"> PDU type identifier. </param>
			<param name="enabled"> true to process packets of the specified type, false to skip them.  </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setConnectionThreadCallbacks(Unigine.CallbackBase,Unigine.CallbackBase)">
			<summary>
			Sets callbacks for tuning the connection instance.					This callback will be invoked in a thread that is not the main thread.
			</summary> 
			<param name="on_connect"> Parameter to be called in the connection thread immediately after the connection is established. Callback's signature: void func(KDIS::NETWORK::Connection * connection). </param>
			<param name="on_disconnect"> Parameter to be called after a connection failure or shutdown. Callback's signature: void func(KDIS::NETWORK::Connection * connection). Connection may be nullptr. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningStatic(Plugins::IG::Entity)">
			<summary>
			Sets the Static dead reckoning algorithm to be used for the specified entity (Entity does not move).						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the Static dead reckoning algorithm is to be used. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningFPW(Plugins::IG::Entity,Unigine.Vec3)">
			<summary>
			Sets the FPW dead reckoning algorithm to be used for the specified entity along with the specified constant rates. FPW means: F - fixed rotation, P - rate of position is to be held constant (velocity), B - world coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the FPW dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningRPW(Plugins::IG::Entity,Unigine.Vec3,Unigine.vec3)">
			<summary>
			Sets the RPW dead reckoning algorithm to be used for the specified entity along with the specified constant rates. RPW means: R - rotating, P - rate of position is to be held constant (velocity), B - world coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the RPW dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="angular_velocity_deg"> Vector containing angular velocity values for each of the axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningRVW(Plugins::IG::Entity,Unigine.Vec3,Unigine.Vec3,Unigine.vec3)">
			<summary>
			Sets the RVW dead reckoning algorithm to be used for the specified entity along with the specified constant rates. RVW means: R - rotating, V - rate of velocity is to be held constant (velocity + acceleration), W - world coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the RVW dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="linear_acceleration"> Linear acceleration vector. </param>
			<param name="angular_velocity_deg"> Vector containing angular velocity values for each of the axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningFVW(Plugins::IG::Entity,Unigine.Vec3,Unigine.Vec3)">
			<summary>
			Sets the FVW dead reckoning algorithm to be used for the specified entity along with the specified constant rates. FVW means: F - fixed rotation, V - rate of velocity is to be held constant (velocity + acceleration), W - world coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the FVW dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="linear_acceleration"> Linear acceleration vector. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningFPB(Plugins::IG::Entity,Unigine.Vec3,Unigine.vec3)">
			<summary>
			Sets the FPB dead reckoning algorithm to be used for the specified entity along with the specified constant rates. FPB means: F - fixed rotation, P - rate of position is to be held constant (velocity), B - body-centered coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the FPB dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="angular_velocity_deg"> Vector containing angular velocity values for each of the axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningRPB(Plugins::IG::Entity,Unigine.Vec3,Unigine.vec3)">
			<summary>
			Sets the RPB dead reckoning algorithm to be used for the specified entity along with the specified constant rates. RPB means: R - rotating, P - rate of position is to be held constant (velocity), B - body-centered coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the RPB dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="angular_velocity_deg"> Vector containing angular velocity values for each of the axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningRVB(Plugins::IG::Entity,Unigine.Vec3,Unigine.Vec3,Unigine.vec3)">
			<summary>
			Sets the RVB dead reckoning algorithm to be used for the specified entity along with the specified constant rates. RVB means: R - rotating, V - rate of velocity is to be held constant (velocity + acceleration), B - body-centered coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the RVB dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="linear_acceleration"> Linear acceleration vector. </param>
			<param name="angular_velocity_deg"> Vector containing angular velocity values for each of the axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.IG.DIS.Connector.setDeadReckoningFVB(Plugins::IG::Entity,Unigine.Vec3,Unigine.Vec3,Unigine.vec3)">
			<summary>
			Sets the FVB dead reckoning algorithm to be used for the specified entity along with the specified constant rates. FVB means: F - fixed rotation, V - rate of velocity is to be held constant (velocity + acceleration), B - body-centered coordinate system.						Dead Reckoning algorithms (Static, FPW, RPW, RVW, FVW, FPB, RPB, RVB, FVB) are used in Advanced Distributed Simulation to reduce the need to continually update a simulated entity's state information by the estimation of the position and orientation of an entity, based on a previously known position and orientation and estimates of the passage of simulation time and motion.
			</summary> 
			<param name="entity"> Simulated Entity, for which the FVB dead reckoning algorithm is to be used with the specified values. </param>
			<param name="linear_velocity"> Linear velocity vector. </param>
			<param name="linear_acceleration"> Linear acceleration vector. </param>
			<param name="angular_velocity_deg"> Vector containing angular velocity values for each of the axes, in degrees. </param> 
		</member>
	</members>
</doc>