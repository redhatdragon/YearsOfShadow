<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Ellipsoid.#ctor(double,double)">
			<summary>
			Constructor. Creates a new Ellipsoid class instance with given flattening and semimajor axis.
			</summary> 
			<param name="semimajor_axis"> Semimajor axis. </param>
			<param name="flattening"> Flattening coefficient. </param> 
		</member>
		<member name="M:Unigine.Ellipsoid.#ctor">
			<summary>
			Constructor. Creates a new Ellipsoid class instance (WGS84 Ellipsoid).
			</summary>  
		</member>
		<member name="M:Unigine.Ellipsoid.getENUSurfacePoint(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns surface point by using tangent point coordinates.The Up-axis (Z+) direction in ENU points upward along the ellipsoid normal, while in UNIGINE implementation of ENU it goes from the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param>
			<param name="tangent_point"> Tangent point coordinates to converted (curved) to surface coordinates (offset related to point of junction). </param> 
			<returns>Surface point coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getENUTangentPoint(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns tangent point ENU coordinates based on the geographical coordinates.The Up-axis (Z+) direction in ENU points upward along the ellipsoid normal, while in UNIGINE implementation of ENU it goes from the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param>
			<param name="surface_point"> Surface point coordinates to be converted (flatten) to tangent point (offset related to point of junction). </param> 
			<returns>Tangent point coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getENUWorldRotation(Unigine.Math.dvec3)">
			<summary>
			Returns the world rotation quaternion in ENU coordinates.The Up-axis (Z+) direction in ENU points upward along the ellipsoid normal, while in UNIGINE implementation of ENU it goes from the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param> 
			<returns>World rotation in ENU coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getENUWorldTransform(Unigine.Math.dvec3)">
			<summary>
			Returns the world transformation matrix in ENU coordinates.The Up-axis (Z+) direction in ENU points upward along the ellipsoid normal, while in UNIGINE implementation of ENU it goes from the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param> 
			<returns>World transformation matrix in ENU coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.setFlattening(double)">
			<summary>
			Sets new flattening for the ellipsoid.
			</summary> 
			<param name="flattening"> Flattening coefficient of the ellipsoid. If the value is 0, the ellipsoid has a sphere shape, for 1 the ellipsoid has a circle (completely flat) shape. </param> 
		</member>
		<member name="M:Unigine.Ellipsoid.getFlattening">
			<summary>
			Returns flattening coefficient of the ellipsoid.
			</summary>  
			<returns>Flattening coefficient of the ellipsoid.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getMeanRadius">
			<summary>
			Returns the mean radius of the ellipsoid.
			</summary>  
			<returns>The mean radius of the ellipsoid.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.isSupported">
			<summary>
			Returns a value indicating if the geodetics feature is enabled.
			</summary>  
			<returns>1 if the geodetics feature is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.setMode(int)">
			<summary>
			Sets the calculation mode.
			</summary> 
			<param name="mode"> The variable of the calculation mode. It can be one of the following:MODE_FASTMODE_ACCURATE </param> 
		</member>
		<member name="M:Unigine.Ellipsoid.getMode">
			<summary>
			Returns the calculation mode int value: 1 if the mode is MODE_ACCURATE, 0 if the mode is MODE_FAST.
			</summary>  
			<returns>1 if the mode is MODE_ACCURATE, 0 if the mode is MODE_FAST.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getNEDSurfacePoint(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns surface point by using tangent point coordinates.The Down-axis direction in NED points downward along the ellipsoid normal, while in UNIGINE implementation of NED it goes through the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param>
			<param name="tangent_point"> Tangent point coordinates to converted (curved) to surface coordinates (offset related to point of junction). </param> 
			<returns>Surface point coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getNEDTangentPoint(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns tangent point NED coordinates based on the geographical coordinates.The Down-axis direction in NED points downward along the ellipsoid normal, while in UNIGINE implementation of NED it goes through the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param>
			<param name="surface_point"> Surface point coordinates to be converted (flatten) to tangent point (offset related to point of junction). </param> 
			<returns>Tangent point coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getNEDWorldRotation(Unigine.Math.dvec3)">
			<summary>
			Returns the world rotation quaternion in NED coordinates.The Down-axis direction in NED points downward along the ellipsoid normal, while in UNIGINE implementation of NED it goes through the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param> 
			<returns>World rotation in NED coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getNEDWorldTransform(Unigine.Math.dvec3)">
			<summary>
			Returns the world transformation matrix in NED coordinates.The Down-axis direction in NED points downward along the ellipsoid normal, while in UNIGINE implementation of NED it goes through the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param> 
			<returns>World transformation matrix in NED coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.setSemimajorAxis(double)">
			<summary>
			Sets new semimajor axis of the ellipsoid.
			</summary> 
			<param name="axis"> Semimajor axis length in units. </param> 
		</member>
		<member name="M:Unigine.Ellipsoid.getSemimajorAxis">
			<summary>
			Returns semimajor axis length of the ellipsoid in units.
			</summary>  
			<returns>Semimajor axis of the ellipsoid.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getSemimajorEccentricitySqr">
			<summary>
			Returns the squared eccentricity calculated along the semimajor axis.
			</summary>  
			<returns>Squared eccentricity calculated along the semimajor axis.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getSemiminorAxis">
			<summary>
			Returns semiminor axis of the ellipsoid in units.
			</summary>  
			<returns>Semiminor axis of the ellipsoid in units.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.getSemiminorEccentricitySqr">
			<summary>
			Returns the squared eccentricity calculated along the semiminor axis.
			</summary>  
			<returns>Squared eccentricity calculated along the semiminor axis.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.solveGeodeticDirect(Unigine.Math.dvec3,double,double)">
			<summary>
			Solves the direct geodetic problem: calculates end point coordinates on the ellipsoid by using given start point, distance between points, and bearing value.
			</summary> 
			<param name="geodetic_start"> Start point on the ellipsoid. </param>
			<param name="bearing"> Bearing value. </param>
			<param name="distance"> Distance between two points on the ellipsoid. </param> 
		</member>
		<member name="M:Unigine.Ellipsoid.solveGeodeticInverse(Unigine.Math.dvec3,Unigine.Math.dvec3,double,double)">
			<summary>
			Solves the inverse geodetic problem: calculates distance and bearing values by using given start and end points on the ellipsoid.
			</summary> 
			<param name="geodetic_start"> Start point on the ellipsoid. </param>
			<param name="geodetic_end"> End point on the ellipsoid. </param>
			<param name="bearing"> Variable to save the calculated bearing value. </param>
			<param name="distance"> Variable to save the calculated distance value. </param> 
		</member>
		<member name="M:Unigine.Ellipsoid.toECF(Unigine.Math.dvec3)">
			<summary>
			Converts geodetic coordinates to Cartesian (ECF).
			</summary> 
			<param name="geodetic_coords"> Ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters)) to be converted to Cartesian. </param> 
			<returns>Cartesian coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.toENU(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Converts geodetic coordinates to ENU (East, North, Up).The Up-axis (Z+) direction in ENU points upward along the ellipsoid normal, while in UNIGINE implementation of ENU it goes from the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param>
			<param name="geodetic_coords"> Coordinates to be converted to ENU. </param> 
			<returns>ENU coordinates.</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.toGeodetic(Unigine.Math.dvec3,int)">
			<summary>
			Converts Cartesian (ECF) coordinates to Ellipsoid.
			</summary> 
			<param name="ecf_coords"> Cartesian ECF coordinates to be converted. </param>
			<param name="need_alt"> Flag indicating if altitude is to be calculated. 1 to calculate altitude, 0 - to skip altitude calculation.The default value is 1. </param> 
			<returns>Ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters)</returns>
		</member>
		<member name="M:Unigine.Ellipsoid.toNED(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Converts geodetics coordinates to NED (North, East, Down).The Down-axis direction in NED points downward along the ellipsoid normal, while in UNIGINE implementation of NED it goes through the Earth's center.
			</summary> 
			<param name="geodetic_origin"> The origin in ellipsoid coordinates (latitude (degrees), longitude (degrees) and altitude (meters). </param>
			<param name="geodetic_coords"> Coordinates to be converted to NED. </param> 
			<returns>NED coordinates.</returns>
		</member>
		<member name="F:Unigine.Ellipsoid.MODE_ACCURATE">
			<summary>
			A calculation mode uses Vincenty's formula to calculate distances on the surface of the ellipsoid with a millimeter precision. It takes more time for calculation, but the accuracy of positioning is awesome.
		</summary>
		</member>
		<member name="F:Unigine.Ellipsoid.MODE_FAST">
			<summary>
			A calculation mode is computed by using Great-circle distance formula. It works pretty fast, but you'll get positioning errors on big (~80000x80000 units) distances.
		</summary>
		</member>
	</members>
</doc>