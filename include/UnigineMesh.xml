<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Mesh.#ctor">
			<summary>
			Constructor. Creates an empty mesh.
			</summary>  
		</member>
		<member name="M:Unigine.Mesh.#ctor(char)">
			<summary>
			Constructor. Creates a mesh using the specified file.
			</summary> 
			<param name="name"> Path to the mesh file. </param> 
		</member>
		<member name="M:Unigine.Mesh.#ctor(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Constructor.
			</summary> 
			<param name="mesh"> Mesh instance. </param> 
		</member>
		<member name="M:Unigine.Mesh.assignFrom(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Copies the data including bones, surfaces, and animations from the specified source mesh.
			</summary> 
			<param name="mesh"> Source mesh instance. </param> 
		</member>
		<member name="M:Unigine.Mesh.setAnimationBones(int,Unigine.Vector{short,int,Unigine.VectorAllocator})">
			<summary>
			Copies bones from the given array to the current array of animation bones.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="bones"> Array of bones taking part in the animation to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getAnimationBones(int,Unigine.Vector{short,int,Unigine.VectorAllocator}) const">
			<summary>
			Adds all bones of the given animation to the given array of bones.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="bones"> Array with indices of bones taking part in the animation. </param> 
		</member>
		<member name="M:Unigine.Mesh.setAnimationFrame(int,int,Unigine.Vector{Unigine.Math.vec3,int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Math.quat,int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Math.vec3,int,Unigine.VectorAllocator})">
			<summary>
			Updates the animation frame coordinates, rotation quaternions and scaling vectors.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="num"> Frame number in the array of the animation frames. </param>
			<param name="xyz"> Array with coordinates of the animation frame. </param>
			<param name="rot"> Array with rotation quaternions of the animation frame. </param>
			<param name="scale"> Array with scaling vectors of the animation frame. </param> 
		</member>
		<member name="M:Unigine.Mesh.setAnimationFrame(int,int,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator})">
			<summary>
			Updates the animation frame coordinates, rotation quaternions and scaling vectors.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="num"> Frame number in the array of the animation frames. </param>
			<param name="frames"> Matrix that includes coordinates, rotation quaternions and scaling vectors of the animation frame. </param> 
		</member>
		<member name="M:Unigine.Mesh.getAnimationFrame(int,int,Unigine.Vector{Unigine.Math.vec3,int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Math.quat,int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Math.vec3,int,Unigine.VectorAllocator}) const">
			<summary>
			Adds the animation frame coordinates, rotation quaternions and scaling vectors to the given matrix passed to the function as the third argument. The matrix can be set by using the setAnimationFrame() method.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="num"> Frame number in the array of the animation frames. </param>
			<param name="xyz"> Array with coordinates of the animation frame. </param>
			<param name="rot"> Array with rotation quaternions of the animation frame. </param>
			<param name="scale"> Array with scaling vectors of the animation frame. </param> 
		</member>
		<member name="M:Unigine.Mesh.getAnimationFrame(int,int,Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator}) const">
			<summary>
			Adds the animation frame coordinates, rotation quaternions and scaling vectors to the given matrix passed to the function as the third argument. The matrix can be set by using the setAnimationFrame() method.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="num"> Frame number in the array of the animation frames. </param>
			<param name="frames"> Matrix that includes coordinates, rotation quaternions and scaling vectors of the animation frame. </param> 
		</member>
		<member name="M:Unigine.Mesh.setAnimationName(int,char)">
			<summary>
			Sets a name for the given animation.
			</summary> 
			<param name="animation"> Animation number. </param>
			<param name="name"> Animation name to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getAnimationName(int) const">
			<summary>
			Returns the name of the given animation.
			</summary> 
			<param name="animation"> Animation number. </param> 
			<returns>Animation name.</returns>
		</member>
		<member name="M:Unigine.Mesh.setBoneName(int,char)">
			<summary>
			Sets a name for the given bone.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="name"> Bone name to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getBoneName(int) const">
			<summary>
			Returns the name of the given bone.
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Bone name.</returns>
		</member>
		<member name="M:Unigine.Mesh.setBoneParent(int,int)">
			<summary>
			Sets the parent bone for the given one.
			</summary> 
			<param name="bone"> Bone number, for which the parent bone should be set. </param>
			<param name="parent"> Bone to be set as a parent. </param> 
		</member>
		<member name="M:Unigine.Mesh.getBoneParent(int) const">
			<summary>
			Returns the number of the parent bone of the given one.
			</summary> 
			<param name="bone"> Bone number, for which the parent bone will be returned. </param> 
			<returns>Parent bone number.</returns>
		</member>
		<member name="M:Unigine.Mesh.setBoneTransform(int,Unigine.Math.mat4)">
			<summary>
			Sets the transformation matrix for the given bone.
			</summary> 
			<param name="bone"> Bone number. </param>
			<param name="transform"> Transformation matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getBoneTransform(int) const">
			<summary>
			Returns the transformation matrix for the given bone.
			</summary> 
			<param name="bone"> Bone number. </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Mesh.setBoneTransforms(Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator},int,int)">
			<summary>
			Updates the array of the world-space transformation matrices for bones of the given animation frame.					If the passed animation number is -1,  the bind pose will be updated to the given array.
			</summary> 
			<param name="transforms"> Array of transformation matrices to be set. Its size must be equal to the number of animation bones. </param>
			<param name="animation"> Animation number. The default value is -1. </param>
			<param name="frame"> Animation frame number. The default value is 0. </param> 
			<returns>Returns 1 if the array of bones' transformations is updated successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.getBoneTransforms(Unigine.Vector{Unigine.Math.mat4,int,Unigine.VectorAllocator},int,int) const">
			<summary>
			Appends the world-space transformation matrices for bones of the given animation frame to the given array.					If the passed animation number is -1, the bind pose will be added to the given array.The number of array elements must be equal to the number of animation bones.
			</summary> 
			<param name="transforms"> Array of transformation matrices. </param>
			<param name="animation"> Animation number. The default value is -1. </param>
			<param name="frame"> Animation frame number. The default value is 0. </param> 
			<returns>Returns 1 if the array of bones' transformations is filled successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.setBoundBox(Unigine.BoundBox,int)">
			<summary>
			Sets the bounding box for the given mesh surface.
			</summary> 
			<param name="bb"> Bounding box to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.setBoundBox(Unigine.BoundBox)">
			<summary>
			Sets the bounding box for the given mesh surface.
			</summary> 
			<param name="bb"> Bounding box to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getBoundBox(int) const">
			<summary>
			Returns the bounding box of the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Bounding box.</returns>
		</member>
		<member name="M:Unigine.Mesh.getBoundBox const">
			<summary>
			Returns the bounding box of the given mesh surface.
			</summary>  
			<returns>Bounding box.</returns>
		</member>
		<member name="M:Unigine.Mesh.setBoundSphere(Unigine.BoundSphere)">
			<summary>
			Sets the bounding sphere for the given mesh surface.
			</summary> 
			<param name="bs"> Bounding sphere to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.setBoundSphere(Unigine.BoundSphere,int)">
			<summary>
			Sets the bounding sphere for the given mesh surface.
			</summary> 
			<param name="bs"> Bounding sphere to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getBoundSphere const">
			<summary>
			Returns the bounding sphere of the given surface.
			</summary>  
			<returns>Bounding sphere.</returns>
		</member>
		<member name="M:Unigine.Mesh.getBoundSphere(int) const">
			<summary>
			Returns the bounding sphere of the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Bounding sphere.</returns>
		</member>
		<member name="M:Unigine.Mesh.setCIndex(int,int,int)">
			<summary>
			Sets the new coordinate index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices for the given surface.To get the total number of coordinate indices for the given surface, use the getNumCIndices() method. </param>
			<param name="index"> Coordinate index to be set in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getCIndex(int,int) const">
			<summary>
			Returns the coordinate index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices for the given surface.To get the total number of coordinate indices for the given surface, use the getNumCIndices() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Coordinate index.</returns>
		</member>
		<member name="M:Unigine.Mesh.setColor(int,Unigine.Math.vec4,int)">
			<summary>
			Sets the color for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex color entries of the given surface.To get the total number of vertex color entries for the surface, call the getNumColors() method. </param>
			<param name="color"> Vertex color to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getColor(int,int) const">
			<summary>
			Returns the color of the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex color entries of the given surface.To get the total number of vertex color entries for the surface, call the getNumColors() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Vertex color.</returns>
		</member>
		<member name="M:Unigine.Mesh.setIndex(int,int,int)">
			<summary>
			Sets both coordinate and triangle indices for the given vertex of the given surface equal to the specified index.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices of the given surface.To get the total number of coordinate indices for the surface, use the getNumCIndices() method. </param>
			<param name="index"> Index to be set in the range from 0 to the total number of coordinate vertices.To get the total number of coordinate vertices, use the getNumVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getIndex(int,int) const">
			<summary>
			Returns the coordinate index of the given vertex of the given surface if the coordinate index is equal to the triangle index.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of coordinate indices of the given surface.To get the total number of coordinate indices for the surface, use the getNumCIndices() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Coordinate index.</returns>
		</member>
		<member name="M:Unigine.Mesh.getIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,int,int,int)">
			<summary>
			Performs the search for the intersection of the given surface target with the given traced line.					Mesh local space coordinates are used for this method.
			</summary> 
			<param name="p0"> Start point coordinates. </param>
			<param name="p1"> End point coordinates. </param>
			<param name="ret_point"> Return array to write the intersection point coordinates into. </param>
			<param name="ret_normal"> Return array to write the intersection point normal into. </param>
			<param name="ret_index"> Return array to write the intersection point indices into. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>1 if the intersection is found; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNormal(int,Unigine.Math.vec3,int,int)">
			<summary>
			Sets the normal for the given triangle vertex of the given surface target.					The normal of the vertex won't be written to the *.mesh file. It will be stored only in memory.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex normal entries of the given surface target.To get the total number of vertex normal entries for the surface target, call the getNumNormals() method. </param>
			<param name="normal"> Normal to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNormal(int,int,int) const">
			<summary>
			Returns the normal for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex normal entries of the given surface target.To get the total number of vertex normal entries for the surface target, call the getNumNormals() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex normal.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumAnimationFrames(int,int)">
			<summary>
			Sets the number of animation frames for the given animation.
			</summary> 
			<param name="animation"> Animation number in the range from 0 to the total number of mesh animations.To get the total number of mesh animations, call the getNumAnimations() method. </param>
			<param name="num"> Number of the animation frames to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumAnimationFrames(int) const">
			<summary>
			Returns the number of animation frames for the given animation.
			</summary> 
			<param name="animation"> Animation number in the range from 0 to the total number of mesh animations.To get the total number of mesh animations, call the getNumAnimations() method. </param> 
			<returns>Number of the animation frames.</returns>
		</member>
		<member name="M:Unigine.Mesh.getNumAnimations const">
			<summary>
			Returns the total number of mesh animations.
			</summary>  
			<returns>Number of the mesh animations.</returns>
		</member>
		<member name="M:Unigine.Mesh.getNumBones const">
			<summary>
			Returns the total number of mesh bones.
			</summary>  
			<returns>Number of the mesh bones.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumCIndices(int,int)">
			<summary>
			Sets the total number of coordinate indices for the given surface.
			</summary> 
			<param name="size"> Number of the coordinate indices to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumCIndices(int) const">
			<summary>
			Returns the total number of coordinate indices for the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of coordinate indices.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumColors(int,int)">
			<summary>
			Sets the total number of vertex color entries for the given surface.					Colors are specified for triangle vertices.
			</summary> 
			<param name="size"> Number of vertex color entries to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumColors(int) const">
			<summary>
			Returns the total number of vertex color entries for the given surface.					Colors are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of vertex color entries.</returns>
		</member>
		<member name="M:Unigine.Mesh.getNumCVertex(int) const">
			<summary>
			Returns the number of coordinate vertices of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of coordinate vertices.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumIndices(int,int)">
			<summary>
			Sets the number of indices for the given surface: updates the number of coordinate and triangle indices. 			For example, if you pass 5 as the first argument, the number of the coordinate indices and the number of triangle indices will be set to 5.
			</summary> 
			<param name="size"> Number of indices to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumIndices(int) const">
			<summary>
			Returns the number of coordinate indices of the given surface if the number of the coordinate indices is equal to the number of triangle indices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of coordinate indices.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumNormals(int,int,int)">
			<summary>
			Sets the total number of vertex normal entries for the given surface target.					Normals are specified for triangle vertices.
			</summary> 
			<param name="size"> Number of vertex normal entries to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumNormals(int,int) const">
			<summary>
			Returns the total number of vertex normal entries for the given surface target.					Normals are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Number of vertex normal entries.</returns>
		</member>
		<member name="M:Unigine.Mesh.getNumSurfaces const">
			<summary>
			Returns the total number of mesh surfaces.
			</summary>  
			<returns>Number of mesh surfaces.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumSurfaceTargets(int,int)">
			<summary>
			Sets the number of targets for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="num"> Number of surface targets to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumSurfaceTargets(int) const">
			<summary>
			Returns the number of surface targets for the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of surface targets.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumTangents(int,int,int)">
			<summary>
			Sets the total number of vertex tangent entries for the given surface target.					Tangents are specified for triangle vertices.
			</summary> 
			<param name="size"> Number of vertex tangent entries to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumTangents(int,int) const">
			<summary>
			Returns the total number of vertex tangent entries for the given surface target.					Tangents are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="tangent"> Surface target number. The default value is 0. </param> 
			<returns>Number of vertex tangent entries.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumTexCoords0(int,int)">
			<summary>
			Sets the total number of the first UV map texture coordinate entries for the given mesh surface.					First UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="size"> Number of the first UV map texture coordinate entries to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumTexCoords0(int) const">
			<summary>
			Returns the total number of the first UV map texture coordinate entries for the given mesh surface.					First UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Total number of the first UV map texture coordinate entries.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumTexCoords1(int,int)">
			<summary>
			Sets the total number of the second UV map texture coordinate entries for the given mesh surface.					Second UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="size"> Number of the second UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumTexCoords1(int) const">
			<summary>
			Returns the total number of the second UV map texture coordinate entries for the given mesh surface.					Second UV map texture coordinates are specified for triangle vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Total number of the second UV map texture coordinate entries.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumTIndices(int,int)">
			<summary>
			Sets the total number of triangle indices for the given surface.
			</summary> 
			<param name="size"> Number of triangle indices to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumTIndices(int) const">
			<summary>
			Returns the total number of triangle indices for the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of triangle indices.</returns>
		</member>
		<member name="M:Unigine.Mesh.getNumTVertex(int) const">
			<summary>
			Returns the number of triangle vertices for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the triangle vertices.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumVertex(int,int,int)">
			<summary>
			Sets the total number of vertices for the given surface target.					The numbers of vertices and coordinate vertices are equal.
			</summary> 
			<param name="size"> Number of the vertices to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumVertex(int,int) const">
			<summary>
			Returns the total number of vertices for the given surface target.					The numbers of vertices and coordinate vertices are equal.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Number of the vertices.</returns>
		</member>
		<member name="M:Unigine.Mesh.setNumWeights(int,int)">
			<summary>
			Sets the number of weights set for vertices of the given surface.					Weights are specified for coordinate vertices.
			</summary> 
			<param name="size"> Number of weights to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getNumWeights(int) const">
			<summary>
			Returns the number of weights set for vertices of the given surface.					Weights are specified for coordinate vertices.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of the weights.</returns>
		</member>
		<member name="M:Unigine.Mesh.setSurfaceName(int,char)">
			<summary>
			Sets the name for the given mesh surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="name"> Surface name to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getSurfaceName(int) const">
			<summary>
			Returns the name of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Surface name.</returns>
		</member>
		<member name="M:Unigine.Mesh.setSurfaceTargetName(int,int,char)">
			<summary>
			Sets the name for the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. </param>
			<param name="name"> Surface target name to be set. </param> 
		</member>
		<member name="M:Unigine.Mesh.getSurfaceTargetName(int,int) const">
			<summary>
			Returns the name of the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. </param> 
			<returns>Surface target name.</returns>
		</member>
		<member name="M:Unigine.Mesh.setSurfaceTransform(Unigine.Math.mat4,int,int)">
			<summary>
			Sets the transformation matrix for the given surface target.
			</summary> 
			<param name="transform"> Transformation matrix to be set. </param>
			<param name="surface"> Mesh surface number. The default value is -1 (apply to all of the mesh surfaces).If all surfaces are chosen, the transformations of bones and animations will also be recalculated. </param>
			<param name="target"> Surface target number. The default value is -1 (apply to all of the surface targets). </param> 
			<returns>1 if the transformation matrix is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.setSurfaceLightmapUVChannel(int,char)">
			<summary>
			Sets a new UV channel to be used for lightmaps of the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="uv_channel"> UV channel to be used for lightmaps of the surface with the specified number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getSurfaceLightmapUVChannel(int) const">
			<summary>
			Returns the current UV channel used for lightmaps of the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>UV channel currently used for lightmaps of the surface with the specified number.</returns>
		</member>
		<member name="M:Unigine.Mesh.setSurfaceLightmapResolution(int,Mesh::LIGHTMAP_RESOLUTION)">
			<summary>
			Sets a new lightmap resolution for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="resolution"> Lightmap resolution to be used for the surface with the specified number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getSurfaceLightmapResolution(int) const">
			<summary>
			Returns the current lightmap resolution for the surface with the specified number.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Current lightmap resolution for the surface with the specified number.</returns>
		</member>
		<member name="M:Unigine.Mesh.setTangent(int,Unigine.Math.quat,int,int)">
			<summary>
			Sets the new tangent for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface target.To get the total number of vertex tangent entries for the surface target, call the getNumTangents() method. </param>
			<param name="tangent"> Tangent to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.getTangent(int,int,int) const">
			<summary>
			Returns the tangent for the given triangle vertex of the given surface target.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of vertex tangent entries of the given surface target.To get the total number of vertex tangent entries for the surface target, call the getNumTangents() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex tangent.</returns>
		</member>
		<member name="M:Unigine.Mesh.setTexCoord0(int,Unigine.Math.vec2,int)">
			<summary>
			Sets first UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of first UV map texture coordinate entries of the given surface.To get the total number of first UV map texture coordinate entries for the surface, call the getNumTexCoords0() method. </param>
			<param name="texcoord"> First UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getTexCoord0(int,int) const">
			<summary>
			Returns first UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of first UV map texture coordinate entries of the given surface.To get the total number of first UV map texture coordinate entries for the surface, call the getNumTexCoords0() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>First UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.Mesh.setTexCoord1(int,Unigine.Math.vec2,int)">
			<summary>
			Sets second UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of second UV map texture coordinate entries of the given surface.To get the total number of second UV map texture coordinate entries for the surface, call the getNumTexCoords1() method. </param>
			<param name="texcoord"> Second UV map texture coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getTexCoord1(int,int) const">
			<summary>
			Returns second UV map texture coordinates for the given triangle vertex of the given surface.
			</summary> 
			<param name="num"> Triangle vertex number in the range from 0 to the total number of second UV map texture coordinate entries of the given surface.To get the total number of second UV map texture coordinate entries for the surface, call the getNumTexCoords1() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Second UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.Mesh.setTIndex(int,int,int)">
			<summary>
			Sets the new triangle index for the given vertex of the given surface.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of triangle indices for the given surface.To get the total number of triangle indices, use the getNumTIndices() method. </param>
			<param name="index"> Triangle index to be set in the range from 0 to the total number of triangle vertices for the given surface.To get the total number of triangle vertices for the given surface, use the getNumTVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getTIndex(int,int) const">
			<summary>
			Returns the triangle index for the given surface by using the index number.
			</summary> 
			<param name="num"> Vertex number in the range from 0 to the total number of triangle indices for the given surface.To get the total number of triangle indices for the given surface, use the getNumTIndices() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Triangle index.</returns>
		</member>
		<member name="M:Unigine.Mesh.setVertex(int,Unigine.Math.vec3,int,int)">
			<summary>
			Sets the coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="vertex"> Vertex coordinates to be set. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.getVertex(int,int,int) const">
			<summary>
			Returns coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of coordinate vertices for the given surface.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex coordinates.</returns>
		</member>
		<member name="M:Unigine.Mesh.setWeightBones(int,Unigine.Math.ivec4,int)">
			<summary>
			Sets the vector of bone indices that affect the vertex with the given weight.					Vertex weight is characterized by the following values:													The 4 bone indices (see setWeightBones() / getWeightBones() methods);							The 4 bone weights (see setWeightWeights() / getWeightWeights() methods);							Number of weights (see setWeightCount() / getWeightCount() methods).
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of vertex weight entries for the given surface.To get the total number of of vertex weight entries for the given surface, use the getNumWeights() method. </param>
			<param name="bones"> Vector of the bone indices to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getWeightBones(int,int) const">
			<summary>
			Returns a vector of bone indices that affect the vertex with the given weight.					Vertex weight is characterized by the following values:													The 4 bone indices (see setWeightBones() / getWeightBones() methods);							The 4 bone weights (see setWeightWeights() / getWeightWeights() methods);							Number of weights (see setWeightCount() / getWeightCount() methods).
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of vertex weight entries for the given surface.To get the total number of of vertex weight entries for the given surface, use the getNumWeights() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Vector of the bone indices associated with the given weight.</returns>
		</member>
		<member name="M:Unigine.Mesh.setWeightCount(int,int,int)">
			<summary>
			Sets the number of weights that affect the vertex with the given weight.					Vertex weight is characterized by the following values:													The 4 bone indices (see setWeightBones() / getWeightBones() methods);							The 4 bone weights (see setWeightWeights() / getWeightWeights() methods);							Number of weights (see setWeightCount() / getWeightCount() methods).
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of vertex weight entries for the given surface.To get the total number of of vertex weight entries for the given surface, use the getNumWeights() method. </param>
			<param name="count"> Number of weights to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getWeightCount(int,int) const">
			<summary>
			Returns the number of weights that affect the vertex with the given weight.					Vertex weight is characterized by the following values:													The 4 bone indices (see setWeightBones() / getWeightBones() methods);							The 4 bone weights (see setWeightWeights() / getWeightWeights() methods);							Number of weights (see setWeightCount() / getWeightCount() methods).
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of vertex weight entries for the given surface.To get the total number of of vertex weight entries for the given surface, use the getNumWeights() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Number of weights.</returns>
		</member>
		<member name="M:Unigine.Mesh.setWeightWeights(int,Unigine.Math.vec4,int)">
			<summary>
			Sets the vector of bone weights that affect the vertex with the given weight.					Vertex weight is characterized by the following values:													The 4 bone indices (see setWeightBones() / getWeightBones() methods);							The 4 bone weights (see setWeightWeights() / getWeightWeights() methods);							Number of weights (see setWeightCount() / getWeightCount() methods).
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of vertex weight entries for the given surface.To get the total number of of vertex weight entries for the given surface, use the getNumWeights() method. </param>
			<param name="weights"> Vector of bone weights to be set. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getWeightWeights(int,int) const">
			<summary>
			Returns a vector of bone weights that affect the vertex with the given weight.					Vertex weight is characterized by the following values:													The 4 bone indices (see setWeightBones() / getWeightBones() methods);							The 4 bone weights (see setWeightWeights() / getWeightWeights() methods);							Number of weights (see setWeightCount() / getWeightCount() methods).
			</summary> 
			<param name="num"> Coordinate vertex number in the range from 0 to the total number of vertex weight entries for the given surface.To get the total number of of vertex weight entries for the given surface, use the getNumWeights() method. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>Bone weights associated with the given weight.</returns>
		</member>
		<member name="M:Unigine.Mesh.addAnimation(char)">
			<summary>
			Appends an animation with a given name to the current mesh.
			</summary> 
			<param name="name"> Name of the animation. This argument is empty by default. </param> 
			<returns>Number of mesh animations.</returns>
		</member>
		<member name="M:Unigine.Mesh.addBone(char,int)">
			<summary>
			Appends a new mesh bone.
			</summary> 
			<param name="name"> Bone name. This argument is empty by default. </param>
			<param name="parent"> Parent bone number. The default value is -1 (the new bone has no parent bone). </param> 
			<returns>Number of mesh bones.</returns>
		</member>
		<member name="M:Unigine.Mesh.addBoxSurface(char,Unigine.Math.vec3)">
			<summary>
			Appends a box surface to the current mesh.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="size"> Box size along the X, Y and Z axes. </param> 
			<returns>Added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addCapsuleSurface(char,float,float,int,int)">
			<summary>
			Appends a capsule surface to the current mesh. The stacks and slices specify the surface's subdivision.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="radius"> Capsule radius. </param>
			<param name="height"> Capsule height. </param>
			<param name="stacks"> Number of stacks that divide the capsule radially. </param>
			<param name="slices"> Number of slices that divide the capsule horizontally. </param> 
			<returns>The added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addCIndex(int,int)">
			<summary>
			Appends a new Coordinate index the array of coordinate indices for the given surface.
			</summary> 
			<param name="index"> Coordinate index to be added in the range from 0 to the total number of coordinate vertices.To get the total number of coordinate vertices for the given surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addColor(Unigine.Math.vec4,int)">
			<summary>
			Appends the given color to the vertex color array of the given surface.
			</summary> 
			<param name="color"> Color to be added. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addCylinderSurface(char,float,float,int,int)">
			<summary>
			Appends a cylinder surface to the current mesh. The stacks and slices specify the surface's subdivision.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="radius"> Cylinder radius. </param>
			<param name="height"> Cylinder height. </param>
			<param name="stacks"> Number of stacks that divide the cylinder radially. </param>
			<param name="slices"> Number of slices that divide the cylinder horizontally. </param> 
			<returns>The added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addDodecahedronSurface(char,float)">
			<summary>
			Appends a dodecahedron surface to the current mesh.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="radius"> Dodecahedron radius. </param> 
			<returns>The added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addEmptySurface(char,int,int)">
			<summary>
			Appends a new empty surface to the current mesh.					This function allocates only vertex and index arrays. Texture coordinates, tangent basis, weights and color arrays must be allocated manually.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="num_vertex"> Number of surface vertices. </param>
			<param name="num_indices"> Number of surface indices. </param> 
			<returns>Number of the mesh surfaces.</returns>
		</member>
		<member name="M:Unigine.Mesh.addIcosahedronSurface(char,float)">
			<summary>
			Appends a icosahedron surface to the current mesh.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="radius"> Icosahedron radius. </param> 
			<returns>Added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addIndex(int,int)">
			<summary>
			Appends a given index to the arrays of coordinate and triangle indices for the given surface.
			</summary> 
			<param name="index"> Index to be added in the range from 0 to the total number of coordinate vertices for the surface.To get the total number of coordinate vertices for the surface, use the getNumCVertex() method. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addMeshSurface(char,Unigine.Ptr{Unigine.Mesh},int,int)">
			<summary>
			Appends a surface of the source mesh to the current mesh as a new surface.					The following example shows how to add a surface from the one mesh to another.											The mesh will appear.
			</summary> 
			<param name="v"> Name of the new surface added to the current mesh. </param>
			<param name="mesh"> Source mesh to copy a surface from. </param>
			<param name="surface"> Number of the source mesh surface to copy. </param>
			<param name="target"> Number of the target of the source mesh surface. The default value is -1 (all of the surface targets). </param> 
			<returns>Number of the last added surface.</returns>
		</member>
		<member name="M:Unigine.Mesh.addMeshSurface(int,Unigine.Ptr{Unigine.Mesh},int,int)">
			<summary>
			Appends a surface of the source mesh to the existing surface of the current mesh.					The following example shows how to add a surface from the one mesh to another.											The mesh will appear.
			</summary> 
			<param name="v"> Number of the existing surface of the current mesh, to which the geometry is added. </param>
			<param name="mesh"> Source mesh to copy a surface from. </param>
			<param name="surface"> Number of the source mesh surface to copy. </param>
			<param name="target"> Number of the target of the source mesh surface. The default value is -1 (all of the surface targets). </param> 
			<returns>Number of the last added surface.</returns>
		</member>
		<member name="M:Unigine.Mesh.addNormal(Unigine.Math.vec3,int,int)">
			<summary>
			Appends a given normal to the array of normals of the given surface target.
			</summary> 
			<param name="normal"> Normal to be added. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.addPlaneSurface(char,float,float,float)">
			<summary>
			Appends a plane surface to the current mesh. The plane is divided into equal squares whose size is defined by the given step.											The mesh will appear. You could see that the plane divided each 1 unit to equal squares.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="width"> Plane width. </param>
			<param name="height"> Plane height. </param>
			<param name="step"> Step of surface subdivision (vertical and horizontal). </param> 
			<returns>Added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addPrismSurface(char,float,float,float,int)">
			<summary>
			Appends a prism surface to the current mesh.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="size_0"> Radius of the circle circumscribed about the top prism base. </param>
			<param name="size_1"> Radius of the circle circumscribed about the bottom prism base. </param>
			<param name="height"> Height of the prism. </param>
			<param name="sides"> Number of the prism faces. </param> 
			<returns>The added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addSphereSurface(char,float,int,int)">
			<summary>
			Appends a sphere surface to the current mesh. The stacks and slices specify the surface's subdivision.											The mesh will appear.
			</summary> 
			<param name="name"> Surface name. </param>
			<param name="radius"> Sphere radius. </param>
			<param name="stacks"> Number of stacks that divide the sphere radially. </param>
			<param name="slices"> Number of slices that divide the sphere horizontally. </param> 
			<returns>Added surface number.</returns>
		</member>
		<member name="M:Unigine.Mesh.addSurface(char)">
			<summary>
			Append a new surface with the given name to the current mesh.					In the following example, we create a new surface and add vertices and indices to create a plane.
			</summary> 
			<param name="name"> Surface name. This argument is empty by default. </param> 
			<returns>Number of mesh surfaces.</returns>
		</member>
		<member name="M:Unigine.Mesh.addSurfaceTarget(int,char)">
			<summary>
			Appends a target with the given name to the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="name"> Name of the surface target. This argument is empty by default. </param> 
			<returns>Number of surface targets.</returns>
		</member>
		<member name="M:Unigine.Mesh.addTangent(Unigine.Math.quat,int,int)">
			<summary>
			Appends the given tangent to the array of tangents of the specified surface target.
			</summary> 
			<param name="tangent"> Tangent to be added. </param>
			<param name="surface"> Surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTexCoord0(Unigine.Math.vec2,int)">
			<summary>
			Appends texture coordinates to the array of the first UV map coordinates of the given mesh surface.
			</summary> 
			<param name="texcoord"> Coordinates of the first UV map to be added. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTexCoord1(Unigine.Math.vec2,int)">
			<summary>
			Appends texture coordinates to the array of the second UV map coordinates of the given mesh surface.
			</summary> 
			<param name="texcoord"> Coordinates of the second UV map to be added. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTIndex(int,int)">
			<summary>
			Appends an index of a triangle vertex to the array of triangle indices for the given surface.
			</summary> 
			<param name="index"> Index number of the vertex in the triangle buffer in the range from 0 to the total number of triangle vertices.To get the total number of triangle vertices for the given surface, use the getNumTVertex() method. </param>
			<param name="surface"> Number of the surface to which the triangle index is added. </param> 
		</member>
		<member name="M:Unigine.Mesh.addVertex(Unigine.Math.vec3,int,int)">
			<summary>
			Appends a new coordinate vertex with the given coordinates to the mesh surface.					In the following example, we create a new surface and add 4 vertices to it. We use local coordinates to define a vertex and specify the surface. After that we specify 6 indices to create a plane by using defined vertices.
			</summary> 
			<param name="vertex"> Coordinates of the vertex to be added. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.clear">
			<summary>
			Clears the mesh (including its bones, animation, surfaces and bounds).
			</summary>  
		</member>
		<member name="M:Unigine.Mesh.createBounds(int)">
			<summary>
			Creates bounds (a bounding box and a bounding sphere) for the given surface. If the default value is used as an argument, the bounds will be created for all of the mesh surfaces.
			</summary> 
			<param name="surface"> Mesh surface number. The default value is -1 (all of the mesh surfaces). </param> 
			<returns>1 if bounds are created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.createIndices(int)">
			<summary>
			Creates indices for the given surface. If the default value is used as an argument, the indices will be created for all of the mesh surfaces.
			</summary> 
			<param name="surface"> Mesh surface number. The default value is -1 (all of the mesh surfaces). </param> 
			<returns>1 if indices are created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.createIntersection(int)">
			<summary>
			Calculates a potentially visible set for the given surface. This function prepares the mesh for working with getIntersection() method.
			</summary> 
			<param name="surface"> Mesh surface number. The default value is -1 (all of the mesh surfaces). </param> 
			<returns>1 if the potentially visible set is calculated successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.createNormals(int,int)">
			<summary>
			Creates normals for the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. The default value is -1 (all of the mesh surfaces). </param>
			<param name="target"> Surface target number. The default value is -1 (all of the surface targets). </param> 
			<returns>1 if the normals are created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.createNormals(float,int,int)">
			<summary>
			Creates normals for the given surface target.
			</summary> 
			<param name="angle"> Angle between normals used to calculate the mean vertex normal. </param>
			<param name="surface"> Mesh surface number. -1 means all of the mesh surfaces. </param>
			<param name="target"> Surface target number. -1 means all of the surface targets. </param> 
			<returns>1 if the normals are created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.createTangents(int,int)">
			<summary>
			Creates tangents for the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. -1 means all of the mesh surfaces. </param>
			<param name="target"> Surface target number. -1 means all of the surface targets. </param> 
			<returns>1 if the tangents are created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.createTangents(float,Unigine.Vector{int,int,Unigine.VectorAllocator})">
			<summary>
			Creates tangents for all of the surfaces in the list.
			</summary> 
			<param name="angle"> Angle between normals used to calculate the mean vertex normal. </param>
			<param name="surfaces"> List of surface numbers, for which tangents are to be created. </param> 
			<returns>1 if the tangents are created successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.findAnimation(char) const">
			<summary>
			Searches for the animation by the name and returns its number.
			</summary> 
			<param name="name"> Name of the animation. </param> 
		</member>
		<member name="M:Unigine.Mesh.findBone(char) const">
			<summary>
			Searches for a bone with a given name and returns its number.
			</summary> 
			<param name="name"> Name of the bone. </param> 
			<returns>Bone number.</returns>
		</member>
		<member name="M:Unigine.Mesh.findSurface(char) const">
			<summary>
			Searches for the surface number by its name.
			</summary> 
			<param name="name"> Mesh surface name. </param> 
			<returns>Mesh surface number, if it is found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Mesh.findSurfaceTarget(int,char) const">
			<summary>
			Searches for the surface target number by the morph target name.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Target number, if exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Mesh.flipTangent(int)">
			<summary>
			Flips the sign of the binormal component of the surface tangent space.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>1 if the sign of the binormal component is flipped successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.flipYZ(int)">
			<summary>
			Flips the Y and Z axes for the given surface:											Y axis becomes equal to -Z						Z axis becomes equal to Y
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>1 if the axes are flipped successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.info(char) const">
			<summary>
			Returns an information about the given mesh or animation.
			</summary> 
			<param name="name"> Mesh or animation name. </param> 
		</member>
		<member name="M:Unigine.Mesh.load(char)">
			<summary>
			Loads the mesh with the given name for the current mesh.
			</summary> 
			<param name="name"> Mesh name. </param> 
			<returns>1 if the mesh is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.optimizeIndices(int,int)">
			<summary>
			Optimizes indices of the given mesh surface. As polygons are added to a surface, vertices of the adjacent polygons are duplicated (you can get the number of such the vertices by using the getNumTVertex()), because normals, texture coordinates and tangents of such the vertices differ depending on the polygons, to which this vertices belongs. The optimizeIndices() function serves to decrease the number of such vertices and create indices for them that will be stored in the corresponding normals, tangents and texture coordinates.
			</summary> 
			<param name="flags"> One of the flags used for indices' optimization: MESH_BACK_TO_FRONT or MESH_VERTEX_CACHE. </param>
			<param name="surface"> Mesh surface number. </param> 
			<returns>1 if the indices are optimized successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.remapCVertex(int)">
			<summary>
			Sets the size of the array of coordinate indices to be equal to the size of the array of triangle indices and increases the size of the vertex buffer to the size of the array of triangle vertices by using the coordinate vertex duplicating.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>1 if indices are copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.removeIndices(int)">
			<summary>
			Clears the coordinate and triangle indices of the given surface.
			</summary> 
			<param name="surface"> The mesh surface number. -1 means all of the mesh surfaces. </param> 
			<returns>1 if the indices were cleared successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.save(char) const">
			<summary>
			Saves the given mesh in either MESH or ANIM file format. Creates the given mesh path if it doesn’t exist yet (including subdirectories).
			</summary> 
			<param name="name"> Path to the mesh including the file name and extension — *.mesh or *.anim. </param> 
			<returns>1 if the mesh is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Mesh.sortAnimations">
			<summary>
			Sort all animations by their names.
			</summary>  
		</member>
		<member name="M:Unigine.Mesh.sortSurfaces">
			<summary>
			Sort all surfaces by their names.
			</summary>  
		</member>
		<member name="M:Unigine.Mesh.addVertex(Unigine.Vector{Unigine.Math.vec3,int,Unigine.VectorAllocator},int,int)">
			<summary>
			Adds coordinates of the given coordinate vertex to the given surface target.
			</summary> 
			<param name="vertices"> Vertex coordinates. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTexCoords0(Unigine.Vector{Unigine.Math.vec2,int,Unigine.VectorAllocator},int)">
			<summary>
			Adds the first UV map texture coordinates to the given surface.
			</summary> 
			<param name="texcoords"> First UV map texture coordinates. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTexCoords1(Unigine.Vector{Unigine.Math.vec2,int,Unigine.VectorAllocator},int)">
			<summary>
			Adds the second UV map texture coordinates to the given surface.
			</summary> 
			<param name="texcoords"> Second UV map texture coordinates. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addNormals(Unigine.Vector{Unigine.Math.vec3,int,Unigine.VectorAllocator},int,int)">
			<summary>
			Add normals to the given surface target.
			</summary> 
			<param name="normals"> Normals of the surface target. </param>
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTangents(Unigine.Vector{Unigine.Math.quat,int,Unigine.VectorAllocator},int,int)">
			<summary>
			Add tangents to the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Mesh.addColors(Unigine.Vector{Unigine.Math.vec4,int,Unigine.VectorAllocator},int)">
			<summary>
			Adds the vertex colors to the given surface.
			</summary> 
			<param name="colors"> Vertex colors. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addCIndices(Unigine.Vector{int,int,Unigine.VectorAllocator},int)">
			<summary>
			Adds the coordinate indices of all vertices to the given surface.
			</summary> 
			<param name="indices"> Coordinate indices. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addTIndices(Unigine.Vector{int,int,Unigine.VectorAllocator},int)">
			<summary>
			Adds the triangle indices to the given surface.
			</summary> 
			<param name="indices"> Triangle indices. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.addIndices(Unigine.Vector{int,int,Unigine.VectorAllocator},int)">
			<summary>
			Adds the indices to the given surface.
			</summary> 
			<param name="indices"> Index coordinates of the mesh. </param>
			<param name="surface"> Mesh surface number. </param> 
		</member>
		<member name="M:Unigine.Mesh.getVertices(int,int)">
			<summary>
			Returns coordinates of the given coordinate vertex of the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Vertex coordinates.</returns>
		</member>
		<member name="M:Unigine.Mesh.getNormals(int,int)">
			<summary>
			Returns normals for the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Normals of the surface target.</returns>
		</member>
		<member name="M:Unigine.Mesh.getTangents(int,int)">
			<summary>
			Returns tangents for the given surface target.
			</summary> 
			<param name="surface"> Mesh surface number. </param>
			<param name="target"> Surface target number. The default value is 0. </param> 
			<returns>Tangents of the surface target.</returns>
		</member>
		<member name="M:Unigine.Mesh.getTexCoords0(int)">
			<summary>
			Returns the first UV map texture coordinates of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>First UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.Mesh.getTexCoords1(int)">
			<summary>
			Returns the second UV map texture coordinates of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Second UV map texture coordinates.</returns>
		</member>
		<member name="M:Unigine.Mesh.getColors(int)">
			<summary>
			Returns the vertex colors of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Vertex colors.</returns>
		</member>
		<member name="M:Unigine.Mesh.getCIndices(int)">
			<summary>
			Returns the coordinate indices of all vertices of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Coordinate indices.</returns>
		</member>
		<member name="M:Unigine.Mesh.getTIndices(int)">
			<summary>
			Returns the triangle indices of the given surface.
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>Triangle indices.</returns>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_4096">
			<summary>
			Lightmap resolution 4096 x 4096.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_2048">
			<summary>
			Lightmap resolution 2048 x 2048.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_1024">
			<summary>
			Lightmap resolution 1024 x 1024.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_512">
			<summary>
			Lightmap resolution 512 x 512.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_256">
			<summary>
			Lightmap resolution 256 x 256.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_128">
			<summary>
			Lightmap resolution 128 x 128.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_64">
			<summary>
			Lightmap resolution 64 x 64.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.LIGHTMAP_RESOLUTION_MODE_32">
			<summary>
			Lightmap resolution 32 x 32.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.BACK_TO_FRONT">
			<summary>
			Flag, which is used for mesh indices optimization. If this flag is set, polygons will be rendered in back-to-front order (from the exterior polygons to the central polygons of the mesh).
		</summary>
		</member>
		<member name="F:Unigine.Mesh.NUM_WEIGHTS">
			<summary>
			Number of vertices weights.
		</summary>
		</member>
		<member name="F:Unigine.Mesh.VERTEX_CACHE">
			<summary>
			Vertex cache optimization flag.
		</summary>
		</member>
	</members>
</doc>