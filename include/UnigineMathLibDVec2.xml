<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.dvec2.#ctor(__m128d)">
			<summary>
			Constructor. Initializes the vector using a given 128-bit variable as a source.					We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="v"> 128-bit variable. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(hvec2)">
			<summary>
			Constructor. Initializes the vector using a given hvec2 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor">
			<summary>
			Default constructor. Produces a zero vector.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(Unigine.dvec2)">
			<summary>
			Constructor. Initializes the vector by copying a given source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(double,double)">
			<summary>
			Constructor. Initializes the vector using given double values.
			</summary> 
			<param name="x"> X component of the vector. </param>
			<param name="y"> Y component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(double)">
			<summary>
			Constructor. Initializes the vector using a given scalar value: x=v, y=v.
			</summary> 
			<param name="v"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(Unigine.dvec3)">
			<summary>
			Constructor. Initializes the vector using a given three-component vec3 vector: x=v.x, y=v.y.
			</summary> 
			<param name="v"> Three-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(Unigine.dvec4)">
			<summary>
			Constructor. Initializes the vector using a given four-component vec4 source vector: x=v.x, y=v.y.
			</summary> 
			<param name="v"> Four-component source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(Unigine.vec2)">
			<summary>
			Constructor. Initializes the vector using a given vec2 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(Unigine.ivec2)">
			<summary>
			Constructor. Initializes the vector using a given ivec2 source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(double)">
			<summary>
			Constructor. Initializes the vector using a given pointer to the array of double elements: x=v[0], y=v[1].
			</summary> 
			<param name="v"> Pointer to the array of double elements. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(double,double,ConstexprTag)">
			<summary>
			Constructor. Initializes the vector using a given double elements.
			</summary> 
			<param name="x"> Source element. </param>
			<param name="y"> Source element. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.#ctor(double,ConstexprTag)">
			<summary>
			Constructor. Initializes both vector components using a given double element.
			</summary> 
			<param name="v"> Source element. </param>
			<param name=""> Auxiliary tag. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.abs">
			<summary>
			Returns the absolute values of the vector components.
			</summary>  
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.set(double,double)">
			<summary>
			Sets the vector by components.
			</summary> 
			<param name="x_"> X component of the vector. </param>
			<param name="y_"> Y component of the vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.set(double)">
			<summary>
			Sets the vector using the array of double elements: x=val[0], y=val[1].
			</summary> 
			<param name="val"> Pointer to the array of double elements. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.set(double)">
			<summary>
			Sets the vector components equal to specified scalar value: x=val, y=val.
			</summary> 
			<param name="val"> Scalar value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.set(Unigine.dvec2)">
			<summary>
			Sets the vector equal to the specified source vector.
			</summary> 
			<param name="val"> Source vector. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.get(double) const">
			<summary>
			Gets the vector: val[0]=x, val[1]=y.
			</summary> 
			<param name="val"> Pointer to the array of double elements. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.get">
			<summary>
			Returns the pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.get const">
			<summary>
			Returns the constant pointer to the vector.
			</summary>  
			<returns>Pointer to the vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.length const">
			<summary>
			Returns the length of the vector.
			</summary>  
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.length2 const">
			<summary>
			Returns the squared length of the vector.
			</summary>  
			<returns>Squared length of the vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.normalize">
			<summary>
			Returns normalized vector.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.normalizeValid">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary>  
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator const double * const">
			<summary>
			Performs type conversion to const double *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec2.operator const void * const">
			<summary>
			Performs type conversion to const void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec2.operator double *">
			<summary>
			Performs type conversion to double *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec2.operator void *">
			<summary>
			Performs type conversion to void *.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec2.operator*=(double)">
			<summary>
			Performs scalar multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator*=(Unigine.dvec2)">
			<summary>
			Performs vector multiplication.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator+=(Unigine.dvec2)">
			<summary>
			Performs vector addition.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator- const">
			<summary>
			Performs vector negation.
			</summary>  
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator-=(Unigine.dvec2)">
			<summary>
			Performs vector subtraction.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator/=(double)">
			<summary>
			Performs componentwise division of the vector by the scalar. Implemented using the calculation of inverse scalar value with subsequent by-component multiplication.
			</summary> 
			<param name="v"> Scalar value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator/=(Unigine.dvec2)">
			<summary>
			Performs componentwise division of vectors.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator=(__m128d)">
			<summary>
			Sets the vector using a given 128-bit variable as a source.					We do not recommend to use this method unless you have a clear understanding of SSE2.
			</summary> 
			<param name="val"> 128-bit variable. </param> 
			<returns>Vector.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator=(Unigine.dvec2)">
			<summary>
			Performs vector assignment. Destination vector = Source vector.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Result.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator[](int)">
			<summary>
			Performs array access to the vector item reference by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item reference.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.operator[](int) const">
			<summary>
			Performs array access to the vector item by using given item index.
			</summary> 
			<param name="i"> Vector item index. </param> 
			<returns>Vector item.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.mul(double)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> A double multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.mul(Unigine.dvec2)">
			<summary>
			Multiplies the vector by the value of the specified argument.
			</summary> 
			<param name="v"> Vector multiplier. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.div(double)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A double divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.div(Unigine.dvec2)">
			<summary>
			Returns the result of division of the vector by the value of the specified arguments.
			</summary> 
			<param name="v"> A dvec2 divisor value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.sub(double)">
			<summary>
			Subtracts each element of the specified value from the corresponding vector's element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.sub(Unigine.dvec2)">
			<summary>
			Subtracts each element of the specified value from the corresponding vector's element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.operator-=(double)">
			<summary>
			Subtracts each element of the specified value from the corresponding vector's element.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.sum const">
			<summary>
			Returns the sum of vector components.
			</summary>  
		</member>
		<member name="M:Unigine.Math.dvec2.add(double)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.add(Unigine.dvec2)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.operator+=(double)">
			<summary>
			Performs addition of the specified value.
			</summary> 
			<param name="v"> Value. </param> 
		</member>
		<member name="M:Unigine.Math.dvec2.iLength const">
			<summary>
			Returns the inverted length of the vector.
			</summary>  
			<returns>Inverted length.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.max const">
			<summary>
			&gt;Returns the maximum value among all components.
			</summary>  
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.min const">
			<summary>
			Returns the minimum value among all components.
			</summary>  
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.frac const">
			<summary>
			Returns a vector containing fractional parts of the corresponding vector components.
			</summary>  
			<returns>Fractional parts of the corresponding vector components.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.floor const">
			<summary>
			Returns a vector containing the largest integral values each being less than or equal to the corresponding vector component.
			</summary>  
			<returns>Vector containing the largest integral values.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.ceil const">
			<summary>
			Returns a vector containing the smallest integral values each being greater than or equal to the corresponding vector component.
			</summary>  
			<returns>Vector containing the smallest integral values.</returns>
		</member>
		<member name="M:Unigine.Math.dvec2.hash const">
			<summary>
			</summary>  
		</member>
		<member name="F:Unigine.Math.dvec2.dvec2_eps">
			<summary>
			Vector filled with epsilon constant (1e-6f).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec2.dvec2_half">
			<summary>
			Vector filled with 0.5.
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec2.dvec2_inf">
			<summary>
			Vector filled with infinity constant (1e+9f).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec2.dvec2_one">
			<summary>
			Vector filled with ones (1).
		</summary>
		</member>
		<member name="F:Unigine.Math.dvec2.dvec2_zero">
			<summary>
			Vector filled with zeros (0).
		</summary>
		</member>
	</members>
</doc>