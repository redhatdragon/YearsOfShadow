<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.setPolygonToCCW(Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator})">
			<summary>
			Sets the counter-clockwise orientation for the polygon.
			</summary> 
			<param name="points"> Vector containing all points of the polygon. </param> 
			<returns>1 if the counter-clockwise orientation for the polygon is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.triangulatePolygon(Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator},Unigine.Vector{unsignedshort,int,Unigine.VectorAllocator},int)">
			<summary>
			Performs triangulation by ear clipping algorithm (complexity: O(n^2)/O(n)).
			</summary> 
			<param name="points"> Vector containing all points of the polygon. </param>
			<param name="indices"> Vector containing all points indices. </param>
			<param name="append_to_result"> Flag indicating if resulting points should be appended to the points of initial polygon - 0 (the default value), or replace them - 1. </param> 
		</member>
		<member name="M:Unigine.Math.resizePolygon(Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator},float,Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator},int)">
			<summary>
			Returns a set of points representing a shrunk/enlarged polygon. Supports concave polygons, CCW and CW orientations.
			</summary> 
			<param name="points"> Vector containing all points of the polygon. </param>
			<param name="result_points"> Vector containing all points of the shrunk/enlarged polygon. </param>
			<param name="append_to_result"> Flag indicating if resulting points should be appended to the points of initial polygon - 0 (the default value), or replace them - 1. </param> 
		</member>
		<member name="M:Unigine.Math.getPolygonArea(Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator})">
			<summary>
			Returns the area of the given polygon in square units.
			</summary> 
			<param name="points"> Vector containing all points of the polygon. </param> 
			<returns>Polygon's area, in square units.</returns>
		</member>
		<member name="M:Unigine.Math.getPolygonAreaSigned(Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator})">
			<summary>
			Returns the area of the given polygon in square units.
			</summary> 
			<param name="points"> Vector containing all points of the polygon. </param> 
			<returns>Polygon's area, in square units.The value will be negative if the polygon is oriented clockwise.</returns>
		</member>
		<member name="M:Unigine.Math.findIntersection(Unigine.vec2,Unigine.vec2,Unigine.vec2,Unigine.vec2,int,int,Unigine.vec2,Unigine.vec2,Unigine.vec2)">
			<summary>
			Finds the point of intersection between the two lines specified by the pairs of points p1 - p2 and p3 - p4 and sets the values of the last 5 arguments.
			</summary> 
			<param name="p1"> Start point coordinates of the first line segment. </param>
			<param name="p2"> End point coordinates of the first line segment. </param>
			<param name="p3"> Start point coordinates of the second line segment. </param>
			<param name="p4"> End point coordinates of the second line segment. </param>
			<param name="lines_intersect"> 1 if the lines to which the segments belong intersect; otherwise, 0. </param>
			<param name="segments_intersect"> 1 if the lines to which the segments belong intersect; otherwise, 0. </param>
			<param name="intersection"> Coordinates of the point of intersection between the two line segments. </param>
			<param name="close_p1"> Coordinates of the first of the two closest points belonging to the first segment. </param>
			<param name="close_p2"> Coordinates of the second of the two closest points belonging to the second segment. </param> 
		</member>
		<member name="M:Unigine.Math.polygonIsOrientedClockwise(Unigine.Vector{Unigine.vec2,int,Unigine.VectorAllocator})">
			<summary>
			Returns a value indicating if a given polygon is oriented clockwise.
			</summary> 
			<param name="points"> Vector containing all points of the polygon. </param> 
			<returns>1 if a given polygon is oriented clockwise; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.getTriangleArea(Unigine.vec2,Unigine.vec2,Unigine.vec2)">
			<summary>
			Returns the area of the given triangle in square units.
			</summary> 
			<param name="p1"> Coordinates of the first triangle vertex. </param>
			<param name="p2"> Coordinates of the second triangle vertex. </param>
			<param name="p3"> Coordinates of the third triangle vertex. </param> 
			<returns>Triangle area, in square units.The value will be negative if the polygon is oriented clockwise.</returns>
		</member>
		<member name="M:Unigine.Math.sign(Unigine.vec2,Unigine.vec2,Unigine.vec2)">
			<summary>
			Returns a value indicating to which part of the segment the point belongs.
			</summary> 
			<param name="point"> Coordinates of the point to be checked. </param>
			<param name="segment_p1"> Segment start point coordinates. </param>
			<param name="segment_p2"> Segment end point coordinates. </param> 
		</member>
		<member name="M:Unigine.Math.pointTriangleInside(Unigine.vec2,Unigine.vec2,Unigine.vec2,Unigine.vec2)">
			<summary>
			Returns a value indicating if a given point is inside the specified triangle.
			</summary> 
			<param name="point"> Coordinates of the point to be checked. </param>
			<param name="v0"> Coordinates of the first triangle vertex. </param>
			<param name="v1"> Coordinates of the second triangle vertex. </param>
			<param name="v2"> Coordinates of the third triangle vertex. </param> 
			<returns>1 if a given point is inside the specified triangle; otherwise, 0.</returns>
		</member>
	</members>
</doc>