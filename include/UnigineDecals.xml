<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Decal.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets a new material for the decal.
			</summary> 
			<param name="mat"> Smart pointer to the material to be used for the decal. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterial const">
			<summary>
			Returns the material used for the decal.
			</summary>  
			<returns>Smart pointer to the material used for the decal.</returns>
		</member>
		<member name="M:Unigine.Decal.getMaterialInherit const">
			<summary>
			Inherits material for the decal (i.e. creates a material instance). Modifications made in a new material instance will not affect the source material.					A child material will be created only once, all subsequent calls to this method will return the first created child material.
			</summary>  
			<returns>Smart pointer to the inherited material.</returns>
		</member>
		<member name="M:Unigine.Decal.isMaterialInherited const">
			<summary>
			Returns the value indicating if a given material is inherited (instanced). Modifications made in a material instance do not affect the source material.
			</summary>  
			<returns>1 if the material is inherited successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaxFadeDistance(float)">
			<summary>
			Updates a maximum fade-out distance, across which the decal smoothly becomes invisible due to the alpha fading. It is counted starting from the maximum visibility distance value.
			</summary> 
			<param name="distance"> A new minimum fade-out distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaxFadeDistance const">
			<summary>
			Returns a maximum fade-out distance, across which the decal smoothly becomes invisible due to the alpha fading. It is counted starting from the maximum visibility distance value.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaxVisibleDistance(float)">
			<summary>
			Updates the maximum visibility distance, starting at which the decal begins to fade out until becomes completely invisible.
			</summary> 
			<param name="distance"> A maximum visibility distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaxVisibleDistance const">
			<summary>
			Returns a maximum visibility distance, starting at which the decal begins to fade out until becomes completely invisible.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMinFadeDistance(float)">
			<summary>
			Updates a minimum fade-in distance, across which the decal smoothly becomes visible due to the alpha fading. It is counted starting from the minimum visibility distance value.
			</summary> 
			<param name="distance"> A new minimum fade-in distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMinFadeDistance const">
			<summary>
			Returns a minimum fade-in distance, across which the decal smoothly becomes visible due to the alpha fading. It is counted starting from the minimum visibility distance value.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMinVisibleDistance(float)">
			<summary>
			Updates a minimum visibility distance, starting at which the decal begins to fade in and then becomes completely visible.
			</summary> 
			<param name="distance"> A new minimum visibility distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMinVisibleDistance const">
			<summary>
			Returns the minimum visibility distance, starting at which the decal begins to fade in and then becomes completely visible.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setOpacity(float)">
			<summary>
			Sets opacity for the decal. This parameter enables you to control whether the decal should be opaque or semi-transparent.
			</summary> 
			<param name="opacity"> New opacity value to be set in the [0.0f; 1.0f] range (1.0f - the decal is fully opaque). </param> 
		</member>
		<member name="M:Unigine.Decal.getOpacity const">
			<summary>
			Returns the current opacity for the decal.
			</summary>  
			<returns>Current opacity value in the [0.0f; 1.0f] range (1.0f - the decal is fully opaque).</returns>
		</member>
		<member name="M:Unigine.Decal.setRadius(float)">
			<summary>
			Sets the new height of the projection box/pyramid along the Z axis.
			</summary> 
			<param name="radius"> Height of the projection box/pyramid along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Decal.getRadius const">
			<summary>
			Returns the current height of the projection box along the Z axis.
			</summary>  
			<returns>The height of the projection box along the Z axis, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setViewportMask(int)">
			<summary>
			Sets a bit mask for rendering a decal into the viewport. The decal is rendered, if its mask matches the camera viewport mask and the viewport mask of the decal's material.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a mask. </param> 
		</member>
		<member name="M:Unigine.Decal.getViewportMask const">
			<summary>
			Returns the current bit mask for rendering into the viewport. The decal is rendered, if its mask matches the camera viewport mask and the viewport mask of the decal's material.
			</summary>  
			<returns>The integer value, each bit of which is used to set a mask.</returns>
		</member>
		<member name="M:Unigine.Decal.setIntersectionMask(int)">
			<summary>
			Sets a new intersection mask for the decal. This mask can be used to cut out areas intersected by the decal from grass, mesh clutter and world clutter					(e.g. to remove grass or forest from the surface of roads projected using decals).					The areas will be cut out only if intersection masks of grass and clutter objects matches this mask (one bit at least).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.Decal.getIntersectionMask const">
			<summary>
			Returns the current intersection mask of the decal. This mask can be used to cut out areas intersected by the decal from grass, mesh clutter and world clutter					(e.g. to remove grass or forest from the surface of roads projected using decals).					The areas will be cut out only if intersection masks of grass and clutter objects matches this mask (one bit at least).
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.Decal.isTerrainHole const">
			<summary>
			Returns a value indicating if the decal is used to create a hole in the terrain.
			</summary>  
			<returns>1 if the decal is used to create a terrain hole; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.inside(Unigine.Math.vec3)">
			<summary>
			Returns a value indicating if the point with the given coordinates is inside the decal (in object-space).
			</summary> 
			<param name="p"> Point coordinates. </param> 
			<returns>1 if the point is inside the decal; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaterialPath(char)">
			<summary>
			Sets the material for the decal by path.
			</summary> 
			<param name="path"> Material path. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterialPath const">
			<summary>
			Returns the path to the material used for the decal.
			</summary>  
			<returns>Material path.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaterialGUID(Unigine.UGUID)">
			<summary>
			Sets the material for the decal by GUID.
			</summary> 
			<param name="materialguid"> Material GUID. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterialGUID const">
			<summary>
			Returns the GUID of the material used for the decal.
			</summary>  
			<returns>Material GUID.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.#ctor">
			<summary>
			Constructor. Creates a new mesh decal.
			</summary>  
		</member>
		<member name="M:Unigine.DecalMesh.setMesh(Unigine.Ptr{Unigine.Mesh},bool)">
			<summary>
			Copies a given source mesh into the current decal mesh.
			</summary> 
			<param name="mesh"> Mesh to be set.The mesh should contain a single surface. In case if the mesh contains several surfaces, only the one with the 0 index will be used. Thus, the area of the decal will differ from the initial mesh. </param>
			<param name="unique"> Unique flag used when you create several objects out of a single Mesh instance:0 - An instance of source mesh geometry is created. If the source geometry is changed at runtime, its instances will be changed as well.1 - A copy of source mesh geometry is created and changes made to the source geometry do not affect the mesh. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMesh(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Copies the current decal mesh into the received mesh. For example, you can obtain geometry of the decal mesh and then change it:
			</summary> 
			<param name="mesh"> Current mesh. </param> 
			<returns>1 if the mesh is copied successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.setMeshName(char,bool)">
			<summary>
			Sets a new name for the mesh and forces loading of the mesh with the new name for the current decal mesh.					The mesh should contain a single surface. In case if the mesh contains several surfaces, only the one with the 0 index will be used. Thus, the area of the decal will differ from the initial mesh.
			</summary> 
			<param name="path"> A new name to be set for the mesh. </param>
			<param name="force_load"> Force flag.If 1 is specified, the mesh with the new name will be loaded immediately with the unique flag set to 0.If 0 is specified, only the mesh name will be updated. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.setMeshName(char)">
			<summary>
			Sets a name for the mesh.
			</summary> 
			<param name="name"> New name to be set for the mesh. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.getMeshName const">
			<summary>
			Returns a name of the mesh used as a base for the decal.
			</summary>  
			<returns>Name of the mesh.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadMesh(char,bool)">
			<summary>
			Loads a mesh for the current mesh from the file. This function doesn't change the mesh name.
			</summary> 
			<param name="path"> The name of the mesh file.The mesh should contain a single surface. In case if the mesh contains several surfaces, only the one with the 0 index will be used. Thus, the area of the decal will differ from the initial mesh. </param>
			<param name="unique"> Unique flag used when you create several objects out of a single .mesh file:0 - An instance of source mesh geometry is created. If the source geometry is changed at runtime, its instances will be changed as well.1 - A copy of source mesh geometry is created and changes made to the source geometry do not affect the mesh. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.saveMesh(char) const">
			<summary>
			Saves the decal mesh into a file.
			</summary> 
			<param name="path"> Mesh file name. </param> 
			<returns>1 if the mesh is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.type">
			<summary>
			Returns a DecalMesh type identifier.
			</summary>  
			<returns>Type identifier.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.#ctor">
			<summary>
			Constructor. Creates a new orthographic decal with default parameters.
			</summary>  
		</member>
		<member name="M:Unigine.DecalOrtho.setHeight(float)">
			<summary>
			Sets a new length of the projection box along the Y axis.
			</summary> 
			<param name="height"> The length of the projection box along the Y axis, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getHeight const">
			<summary>
			Returns the current length of the projection box along the Y axis.
			</summary>  
			<returns>The length of the projection box along the Y axis, in units.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.getProjection const">
			<summary>
			Returns the projection matrix.
			</summary>  
			<returns>The projection matrix of the decal.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.setWidth(float)">
			<summary>
			Sets the new length of the projection box along the X axis.
			</summary> 
			<param name="width"> The length of the projection box along the X axis, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getWidth const">
			<summary>
			Returns the current length of the projection box along the X axis, in units.
			</summary>  
			<returns>The length of the projection box along the X axis, in units.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.setZNear(float)">
			<summary>
			Sets a new value of the near clipping plane.
			</summary> 
			<param name="znear"> A value of the near clipping plane, ranging from 0 to 1. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getZNear const">
			<summary>
			Returns the value of the near clipping plane.
			</summary>  
			<returns>The value of the near clipping plane, ranging from 0 to 1.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.type">
			<summary>
			Returns a type identifier.
			</summary>  
			<returns>Type identifier.</returns>
		</member>
		<member name="M:Unigine.DecalProj.#ctor">
			<summary>
			Constructor. Creates a new projected decal with default parameters.
			</summary>  
		</member>
		<member name="M:Unigine.DecalProj.setAspect(float)">
			<summary>
			Sets the new aspect ratio of the decal, in units.
			</summary> 
			<param name="aspect"> The aspect ratio of the decal, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getAspect const">
			<summary>
			Returns the current aspect ratio of the decal.
			</summary>  
			<returns>The aspect ratio of the decal, in units.</returns>
		</member>
		<member name="M:Unigine.DecalProj.setFov(float)">
			<summary>
			Sets a new field of view of the decal's projector.
			</summary> 
			<param name="fov"> A field of view of the decal's projector, in degrees. The provided value will be clamped in the range [1;90]. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getFov const">
			<summary>
			Returns the current field of view of the decal's projector.
			</summary>  
			<returns>The field of view of the decal's projector, in degrees.</returns>
		</member>
		<member name="M:Unigine.DecalProj.getProjection const">
			<summary>
			Returns the projection matrix.
			</summary>  
			<returns>The projection matrix of the decal.</returns>
		</member>
		<member name="M:Unigine.DecalProj.setZNear(float)">
			<summary>
			Sets a distance to the near clipping plane of the decal.
			</summary> 
			<param name="znear"> A new distance to the near clipping plane, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getZNear const">
			<summary>
			Returns the distance to the near clipping plane of the decal.
			</summary>  
			<returns>The distance to the near clipping plane, in units.</returns>
		</member>
		<member name="M:Unigine.DecalProj.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Decal type identifier.</returns>
		</member>
	</members>
</doc>