<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Blob.#ctor(size_t)">
			<summary>
			Constructor. Creates a new blob of the specified size.
			</summary> 
			<param name="size"> Blob size. </param> 
		</member>
		<member name="M:Unigine.Blob.set(size_t,unsignedchar)">
			<summary>
			Sets the value of the specified byte in the blob.
			</summary> 
			<param name="offset"> The offset in the blob. </param>
			<param name="value"> The byte value. </param> 
		</member>
		<member name="M:Unigine.Blob.get(size_t)">
			<summary>
			Returns the value of the specified byte in the blob.
			</summary> 
			<param name="offset"> The offset, in bytes. </param> 
			<returns>The byte value.</returns>
		</member>
		<member name="M:Unigine.Blob.getc">
			<summary>
			Gets a next symbol from the blob.
			</summary>  
			<returns>Character read from the blob.</returns>
		</member>
		<member name="M:Unigine.Blob.getCRC32">
			<summary>
			Returns the 32-bit CRC checksum.
			</summary>  
			<returns>The 32-bit CRC checksum.</returns>
		</member>
		<member name="M:Unigine.Blob.setData(unsignedchar,size_t)">
			<summary>
			Sets new data to the Blob instance.					You should manage the previously stored data manually.
			</summary> 
			<param name="data"> Data to set to the Blob instance. </param>
			<param name="size"> The size of the blob. </param> 
		</member>
		<member name="M:Unigine.Blob.getData">
			<summary>
			Returns the current blob data.
			</summary>  
			<returns>Blob data.</returns>
		</member>
		<member name="M:Unigine.Blob.getMD5">
			<summary>
			Returns a 128-bit MD5 checksum.
			</summary>  
			<returns>128-bit MD5 checksum.</returns>
		</member>
		<member name="M:Unigine.Blob.getSHA1">
			<summary>
			Returns a 160-bit SHA1 checksum.
			</summary>  
			<returns>160-bit SHA1 checksum.</returns>
		</member>
		<member name="M:Unigine.Blob.getSHA256">
			<summary>
			Returns a 256-bit SHA256 checksum.
			</summary>  
			<returns>256-bit SHA256 checksum.</returns>
		</member>
		<member name="M:Unigine.Blob.getSize">
			<summary>
			Returns the current blob size.
			</summary>  
			<returns>Blob size.</returns>
		</member>
		<member name="M:Unigine.Blob.allocate(size_t)">
			<summary>
			Allocates the required memory without resizing the blob.					The blob will be resized dynamically when the allocated memory is filled.
			</summary> 
			<param name="size"> Size of the allocated memory in bytes. </param> 
		</member>
		<member name="M:Unigine.Blob.clear">
			<summary>
			Clears the blob size to 0.
			</summary>  
		</member>
		<member name="M:Unigine.Blob.compress(Unigine.Ptr{Unigine.Stream},int)">
			<summary>
			Compresses the blob and writes it into the given stream.					This method uses zlib compression which is better than Lz4 (see the compressLz4() method), but significantly slower.
			</summary> 
			<param name="dest"> Destination stream. </param>
			<param name="quality"> Compression quality (0 is for fast compression, 1 is for a small size). </param> 
			<returns>1 if the data is compressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.compressLz4(Unigine.Ptr{Unigine.Stream},int)">
			<summary>
			Compresses the blob with Lz4 algorithm and writes it into the given stream.
			</summary> 
			<param name="dest"> Destination stream. </param>
			<param name="quality"> Compression quality (0 is for fast compression, 1 is for a small size). </param> 
			<returns>1 if the data is successfully compressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.decode(char)">
			<summary>
			Decodes a base64 encoded string into the blob.
			</summary> 
			<param name="src"> Source base64 encoded string. </param> 
			<returns>Returns 1 if the data is decoded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.decodeZBase32(char)">
			<summary>
			Decodes a Zbase32 encoded string into the blob.
			</summary> 
			<param name="src"> Source Zbase32 encoded string. </param> 
			<returns>Returns 1 if the data is decoded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.decompress(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Reads the compressed blob from a stream and decompresses it.
			</summary> 
			<param name="src"> Source stream to read data from. </param> 
			<returns>1 if the blob is decompressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.decompressLz4(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Reads and decompresses a previously compressed blob with Lz4 algorithm from a given stream.
			</summary> 
			<param name="src"> Source stream to read data from. </param> 
			<returns>1 if the blob is successfully decompressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.encode">
			<summary>
			Encodes the blob into the base64 encoded string.
			</summary>  
			<returns>Base64 encoded string.</returns>
		</member>
		<member name="M:Unigine.Blob.encodeZBase32">
			<summary>
			Encodes the blob into the ZBase32 encoded string.
			</summary>  
			<returns>ZBase32 encoded string.</returns>
		</member>
		<member name="M:Unigine.Blob.eof">
			<summary>
			Tests if the end of the blob has been reached.
			</summary>  
			<returns>Returns 1 if the end of the blob is reached; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.flush">
			<summary>
			Flushes the blob.
			</summary>  
			<returns>Returns 1 if the blob is flushed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.reserve(size_t)">
			<summary>
			Reserves the blob, i.e. allocates (size * 1.5) bytes without resizing the blob. It will be resized dynamically when the allocated memory is filled.
			</summary> 
			<param name="size"> Size of the allocated memory. </param> 
		</member>
		<member name="M:Unigine.Blob.resize(size_t)">
			<summary>
			Allocates the required memory and resizes the blob.
			</summary> 
			<param name="size"> Size of the blob in bytes. </param> 
		</member>
		<member name="M:Unigine.Blob.seekCur(size_t)">
			<summary>
			Seeks to position relative to the current offset.
			</summary> 
			<param name="offset"> Offset in bytes from the current position of indicator. </param> 
			<returns>Returns 1 if the blob position indicator is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.seekEnd(size_t)">
			<summary>
			Seeks to position relative to the end of the blob.
			</summary> 
			<param name="offset"> Offset in bytes from the end of the blob. </param> 
			<returns>Returns 1 if the blob position indicator is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.seekSet(size_t)">
			<summary>
			Seeks to position relative to the start of the blob.
			</summary> 
			<param name="offset"> Offset in bytes from the beginning of the blob. </param> 
			<returns>Returns 1 if the blob position indicator is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Blob.tell">
			<summary>
			Gets the current blob offset position indicator.
			</summary>  
			<returns>Returns the current blob offset.</returns>
		</member>
		<member name="M:Unigine.Stream.isAvailable const">
			<summary>
			Returns the status of the stream.
			</summary>  
			<returns>1 if the stream data is available; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.setByteOrder(int)">
			<summary>
			Sets the endianness of the stream.
			</summary> 
			<param name="order"> A value indicating the endianness of the stream: 0 value is for LSB (least significant), 1 is for MSB (most significant). </param> 
		</member>
		<member name="M:Unigine.Stream.getByteOrder const">
			<summary>
			Returns the value indicating the endianness of the stream.
			</summary>  
			<returns>A value indicating the endianness of the stream: 0 value is for LSB (least significant), 1 is for MSB (most significant).</returns>
		</member>
		<member name="M:Unigine.Stream.isError const">
			<summary>
			Returns the status of the stream.
			</summary>  
			<returns>1 if there is a read/write error; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.isOpened const">
			<summary>
			Returns the status of the stream.
			</summary>  
			<returns>1 if the stream is opened; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.gets">
			<summary>
			Reads the stream data from the current position.
			</summary>  
			<returns>Stream data starting from the current position.</returns>
		</member>
		<member name="M:Unigine.Stream.getType const">
			<summary>
			Return the type of the stream.
			</summary>  
			<returns>A value indicating the type of the stream.</returns>
		</member>
		<member name="M:Unigine.Stream.puts(char)">
			<summary>
			Writes a non-binary string of characters to the stream.
			</summary> 
			<param name="str"> String to write. </param> 
			<returns>1 if a string of characters is written successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.read(void,size_t)">
			<summary>
			Reads the number of bytes from the stream.
			</summary> 
			<param name="ptr"> Destination buffer pointer. </param>
			<param name="size"> Size of the buffer, in bytes. </param> 
			<returns>The number of read bytes.</returns>
		</member>
		<member name="M:Unigine.Stream.read(char) const">
			<summary>
			Reads a ASCII character in a binary format (1 byte) from the stream.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(short) const">
			<summary>
			Reads a signed short integer from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(unsignedshort) const">
			<summary>
			Reads a unsigned short integer from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(bool) const">
			<summary>
			Reads a boolean value from the stream.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(int) const">
			<summary>
			Reads a signed integer from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(unsignedint) const">
			<summary>
			Reads a unsigned integer from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(longlong) const">
			<summary>
			Reads a signed long from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(float) const">
			<summary>
			Reads a floating-point number from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(double) const">
			<summary>
			Reads a double floating-point number from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.vec2) const">
			<summary>
			Reads a 2-component vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.vec3) const">
			<summary>
			Reads a 3-component vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.vec4) const">
			<summary>
			Reads a 4-component vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.dvec2) const">
			<summary>
			Reads a 2-component double vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.dvec3) const">
			<summary>
			Reads a 3-component double vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.dvec4) const">
			<summary>
			Reads a 4-component double vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.ivec2) const">
			<summary>
			Reads a 2-component integer vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.ivec3) const">
			<summary>
			Reads a 3-component integer vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.ivec4) const">
			<summary>
			Reads a 4-component integer vector from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.mat4) const">
			<summary>
			Reads a matrix from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.dmat4) const">
			<summary>
			Reads a double matrix from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.read(Unigine.Math.quat) const">
			<summary>
			Reads a quaternion from the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Variable to which the read value is saved. </param> 
		</member>
		<member name="M:Unigine.Stream.readBool">
			<summary>
			Reads a boolean value from the stream.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readChar">
			<summary>
			Reads a ASCII character in a binary format (1 byte) from the stream.
			</summary>  
			<returns>Received character.</returns>
		</member>
		<member name="M:Unigine.Stream.readDMat4">
			<summary>
			Reads a double matrix from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readDouble">
			<summary>
			Reads a double floating-point number from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readDoubleArray(outdouble[])">
			<summary>
			Reads an array of double floating-point numbers from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readDVec2">
			<summary>
			Reads a 2-component double vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readDVec3">
			<summary>
			Reads a 3-component double vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readDVec4">
			<summary>
			Reads a 4-component double vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readFloat">
			<summary>
			Reads a floating-point number from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readFloatArray(outfloat[])">
			<summary>
			Reads an array of floating-point numbers from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readInt">
			<summary>
			Reads a signed integer from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readInt2">
			<summary>
			Reads a compact signed integer from the stream.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readIntArray(outint[])">
			<summary>
			Reads an array of signed integers from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readIVec2">
			<summary>
			Reads a 2-component integer vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readIVec3">
			<summary>
			Reads a 3-component integer vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readIVec4">
			<summary>
			Reads a 4-component integer vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readLine(outchar[])">
			<summary>
			Reads a line from the stream.
			</summary>  
			<returns>Returns string.</returns>
		</member>
		<member name="M:Unigine.Stream.readLine">
			<summary>
			Reads a line of non-binary characters from the stream: starting from the current position until the end of line is reached ("\n"). The maximum length of the line is 4096 bytes.
			</summary>  
			<returns>Received line.</returns>
		</member>
		<member name="M:Unigine.Stream.readLong">
			<summary>
			Reads a signed long from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readLongArray(outllong[])">
			<summary>
			Reads an array of signed longs from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readMat4">
			<summary>
			Reads a matrix from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readMat44">
			<summary>
			Reads the first 12 elements of 4x4 matrix from the current stream. The last 4 elements of the matrix are discarded.
			</summary>  
			<returns>4x4 matrix with 12 read elements (the last four elements are equal to 0 0 0 1).</returns>
		</member>
		<member name="M:Unigine.Stream.readPalette">
			<summary>
			Reads a palette from the current stream.
			</summary>  
			<returns>Palette value.</returns>
		</member>
		<member name="M:Unigine.Stream.readQuat">
			<summary>
			Reads a quaternion from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readShort">
			<summary>
			Reads a signed short integer from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readShortArray(outshort[])">
			<summary>
			Reads an array of signed short integers from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readStream(Unigine.Ptr{Unigine.Stream},size_t)">
			<summary>
			Reads the number of bytes directly from the stream.
			</summary> 
			<param name="dest"> Destination stream pointer. </param>
			<param name="size"> Size of the data in bytes. </param> 
			<returns>The number of read bytes.</returns>
		</member>
		<member name="M:Unigine.Stream.readString(outchar[])">
			<summary>
			Reads a string from the stream in accordance with the big-endian order.
			</summary>  
			<returns>Returns string.</returns>
		</member>
		<member name="M:Unigine.Stream.readString">
			<summary>
			Reads a compact string in a binary format from the stream. Each binary string should be preceded by its length (the string length + the string itself). The string length is written as the compact signed integer.
			</summary>  
			<returns>Received string.</returns>
		</member>
		<member name="M:Unigine.Stream.readString2(outchar[])">
			<summary>
			Reads a string from the stream in accordance with the big-endian order.
			</summary>  
			<returns>Returns string.</returns>
		</member>
		<member name="M:Unigine.Stream.readString2">
			<summary>
			</summary>  
			<returns>Received string.</returns>
		</member>
		<member name="M:Unigine.Stream.readToken">
			<summary>
			Reads a token from the stream. A token is a single word delimited by white space or a string in quotes, for example, "word" or "many words". A token is read starting from the current position up to the white space or line feed ("\n"), or if the first character is a double quote mark (") up to the second double quote mark (returned token will not contain any quotes). The maximum length of the string is 4096 bytes.
			</summary>  
			<returns>Received token.</returns>
		</member>
		<member name="M:Unigine.Stream.readToken(char,int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Stream.readUChar">
			<summary>
			Reads an unsigned character in a binary format from the stream.
			</summary>  
			<returns>Unsigned character in a binary format.</returns>
		</member>
		<member name="M:Unigine.Stream.readUInt">
			<summary>
			Reads a unsigned integer from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readUInt2">
			<summary>
			Reads a compact unsigned integer from the stream.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readUIntArray(outuint[])">
			<summary>
			Reads an array of unsigned integers from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readUShort">
			<summary>
			Reads a unsigned short integer from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Data value.</returns>
		</member>
		<member name="M:Unigine.Stream.readUShortArray(outushort[])">
			<summary>
			Reads an array of unsigned short integers from the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.readVec2">
			<summary>
			Reads a 2-component vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readVec3">
			<summary>
			Reads a 3-component vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.readVec4">
			<summary>
			Reads a 4-component vector from the stream in accordance with the little-endian order.
			</summary>  
			<returns>Vector value.</returns>
		</member>
		<member name="M:Unigine.Stream.write(void,size_t)">
			<summary>
			Writes the number of bytes to the stream.
			</summary> 
			<param name="ptr"> Source buffer pointer. </param>
			<param name="size"> Size of the buffer in bytes. </param> 
			<returns>The number of written bytes.</returns>
		</member>
		<member name="M:Unigine.Stream.write(char) const">
			<summary>
			Writes an ASCII character in a binary format (1 byte) to the stream.
			</summary> 
			<param name="value"> ASCII code of a character to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(short) const">
			<summary>
			Writes a signed short integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A short integer value to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(unsignedshort) const">
			<summary>
			Writes a unsigned short integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Unsigned short integer to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(bool) const">
			<summary>
			Writes the specified boolean value to the stream.
			</summary> 
			<param name="value"> Data value to be written. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(int) const">
			<summary>
			Writes a signed integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> An integer value to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(unsignedint) const">
			<summary>
			Writes a unsigned integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(longlong) const">
			<summary>
			Writes a signed long to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A long value to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(float) const">
			<summary>
			Writes a floating-point number to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A float value to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(double) const">
			<summary>
			Writes a double floating-point number to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A double value to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(char) const">
			<summary>
			Writes a string in a binary format to the stream. Each binary string should be preceded by its length (4 bytes defining the length of string + the string itself).
			</summary> 
			<param name="value"> String to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.vec2) const">
			<summary>
			Writes a 2-component vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.vec3) const">
			<summary>
			Writes a 3-component vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.vec4) const">
			<summary>
			Writes a 4-component vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.dvec2) const">
			<summary>
			Writes a 2-component double vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.dvec3) const">
			<summary>
			Writes a 3-component double vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.dvec4) const">
			<summary>
			Writes a 4-component double vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.ivec2) const">
			<summary>
			Writes a 2-component integer vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.ivec3) const">
			<summary>
			Writes a 3-component integer vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.ivec4) const">
			<summary>
			Writes a 4-component integer vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.mat4) const">
			<summary>
			Writes a matrix to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A matrix to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.dmat4) const">
			<summary>
			Writes a double matrix to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A matrix to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.write(Unigine.Math.quat) const">
			<summary>
			Writes a quaternion to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> A quaternion to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeBool(bool)">
			<summary>
			Writes the specified boolean value to the stream.
			</summary> 
			<param name="value"> Data value to be written. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeChar(char)">
			<summary>
			Writes an ASCII character in a binary format (1 byte) to the stream.
			</summary> 
			<param name="value"> ASCII code of a character to write. </param> 
			<returns>true if a character is written successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeDMat4(Unigine.Math.dmat4)">
			<summary>
			Writes a double matrix to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeDouble(double)">
			<summary>
			Writes a double floating-point number to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeDoubleArray(double[])">
			<summary>
			Writes an array of double floating-point numbers to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeDVec2(Unigine.Math.dvec2)">
			<summary>
			Writes a 2-component double vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeDVec3(Unigine.Math.dvec3)">
			<summary>
			Writes a 3-component double vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeDVec4(Unigine.Math.dvec4)">
			<summary>
			Writes a 4-component double vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeFloat(float)">
			<summary>
			Writes a floating-point number to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeFloatArray(float[])">
			<summary>
			Writes an array of floating-point numbers to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeInt(int)">
			<summary>
			Writes a signed integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeInt2(int)">
			<summary>
			Writes a compact signed integer to the stream.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>1 if the compact integer is written successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeIntArray(int[])">
			<summary>
			Writes an array of signed integers to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeIVec2(Unigine.Math.ivec2)">
			<summary>
			Writes a 2-component integer vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeIVec3(Unigine.Math.ivec3)">
			<summary>
			Writes a 3-component integer vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeIVec4(Unigine.Math.ivec4)">
			<summary>
			Writes a 4-component integer vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeLong(longlong)">
			<summary>
			Writes a signed long to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeLongArray(llong[])">
			<summary>
			Writes an array of signed longs to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeMat4(Unigine.Math.mat4)">
			<summary>
			Writes a matrix to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeMat44(Unigine.Math.mat4)">
			<summary>
			Writes the first 12 elements of 4x4 matrix in a binary format into the current stream. The last 4 elements of the matrix are discarded.
			</summary> 
			<param name="value"> A 4x4 matrix. </param> 
			<returns>1 if data is written successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writePalette(Palette)">
			<summary>
			Writes the palette to the stream.
			</summary> 
			<param name="value"> Palette value. </param> 
		</member>
		<member name="M:Unigine.Stream.writeQuat(Unigine.Math.quat)">
			<summary>
			Writes a quaternion to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeShort(short)">
			<summary>
			Writes a signed short integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeShortArray(short[])">
			<summary>
			Writes an array of signed short integers to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeStream(Unigine.Ptr{Unigine.Stream},size_t)">
			<summary>
			Writes the number of bytes directly to the stream.
			</summary> 
			<param name="src"> Source stream pointer. </param>
			<param name="size"> Size of the data in bytes. </param> 
			<returns>The number of written bytes.</returns>
		</member>
		<member name="M:Unigine.Stream.writeString(char)">
			<summary>
			Writes a string in a binary format to the stream. Each binary string should be preceded by its length (4 bytes defining the length of string + the string itself).
			</summary> 
			<param name="str"> String to write. </param> 
			<returns>true if the string is written successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeString2(char)">
			<summary>
			Writes a compact string in a binary format to the stream. Each binary string should be preceded by its length (the string length + the string itself). The string length is written as the compact signed integer.
			</summary> 
			<param name="str"> String to write. </param> 
			<returns>1 if the string is written successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeUChar(unsignedchar)">
			<summary>
			Writes an unsigned character to the stream.
			</summary> 
			<param name="value"> Unsigned character to write. </param> 
			<returns>1 if the unsigned character is written successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeUInt(unsignedint)">
			<summary>
			Writes a unsigned integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeUInt2(unsignedint)">
			<summary>
			Writes a compact unsigned integer to the stream.
			</summary> 
			<param name="value"> Data value. </param> 
		</member>
		<member name="M:Unigine.Stream.writeUIntArray(uint[])">
			<summary>
			Writes an array of unsigned integers to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeUShort(unsignedshort)">
			<summary>
			Writes a unsigned short integer to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Data value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeUShortArray(ushort[])">
			<summary>
			Writes an array of unsigned short integers to the stream in accordance with the little-endian order.
			</summary>  
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeVec2(Unigine.Math.vec2)">
			<summary>
			Writes a 2-component vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>1 if the operation was successful; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Stream.writeVec3(Unigine.Math.vec3)">
			<summary>
			Writes a 3-component vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Stream.writeVec4(Unigine.Math.vec4)">
			<summary>
			Writes a 4-component vector to the stream in accordance with the little-endian order.
			</summary> 
			<param name="value"> Vector value. </param> 
			<returns>true if the operation was successful; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.Stream.BLOB">
			<summary>
			A stream for blobs.
		</summary>
		</member>
		<member name="F:Unigine.Stream.FILE">
			<summary>
			A stream for files.
		</summary>
		</member>
		<member name="F:Unigine.Stream.SOCKET">
			<summary>
			A stream for sockets.
		</summary>
		</member>
		<member name="F:Unigine.Stream.USER">
			<summary>
			A user stream inherited from StreamBase.
		</summary>
		</member>
		<member name="F:Unigine.Stream.NUM_STREAMS">
			<summary>
			Number of stream types.
		</summary>
		</member>
		<member name="M:Unigine.File.#ctor">
			<summary>
			Default constructor.
			</summary>  
		</member>
		<member name="M:Unigine.File.#ctor(char,char)">
			<summary>
			Constructor.
			</summary> 
			<param name="name"> File name. </param>
			<param name="mode"> Access mode (see open()). </param> 
		</member>
		<member name="M:Unigine.File.getc">
			<summary>
			Reads the next character from the file.
			</summary>  
			<returns>Single character read from the opened file.</returns>
		</member>
		<member name="M:Unigine.File.getName">
			<summary>
			Returns a name of the opened file.
			</summary>  
			<returns>File name.</returns>
		</member>
		<member name="M:Unigine.File.getSize">
			<summary>
			Returns the size of the opened file in bytes.
			</summary>  
			<returns>File size in bytes.</returns>
		</member>
		<member name="M:Unigine.File.close">
			<summary>
			Closes a file for any operation.
			</summary>  
			<returns>Returns 1 if the file is closed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.File.eof">
			<summary>
			Tests for end-of-file on a file descriptor.
			</summary>  
			<returns>1 if it is the end of file; 0 otherwise.</returns>
		</member>
		<member name="M:Unigine.File.flush">
			<summary>
			Forces to write of all buffered data to the file.
			</summary>  
			<returns>1 if the data is written successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.File.open(char,char)">
			<summary>
			Opens a file with a given access mode: rb to open file for reading; wb to create a new file.											r - Open for reading only. The stream is positioned at the beginning of the file.						r+ - Open for reading and writing. The stream is positioned at the beginning of the file.						w - Truncate file to zero length or create file for writing. The stream is positioned at the beginning of the file.						w+ - Open for reading and writing. The file is created if it does not exist, otherwise it is truncated to zero length. The stream is positioned at the beginning of the file.						a - Open for appending (writing at end of file). The file is created if it does not exist. The stream is positioned at the end of the file.						a+ - Open for reading and appending (writing at end of file). The file is created if it does not exist. The initial file position for reading is at the beginning of the file, but output is always appended to the end of the file.						b - For binary files. Otherwise, the file is deemed a text file, and Windows replaces \n with \n\r in text files.
			</summary> 
			<param name="name"> Name of the file to open. </param>
			<param name="mode"> Access mode. </param> 
			<returns>Returns 1 if the file is opened (or created, if the wb access mode is specified) successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.File.seekCur(size_t)">
			<summary>
			Sets an offset of the file position indicator relative to its current position.
			</summary> 
			<param name="offset"> Offset of the file position indicator from the current position, in bytes. </param> 
			<returns>Returns 1 if the file position indicator offset is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.File.seekEnd(size_t)">
			<summary>
			Sets an offset of the file position indicator relative to the end of the file.
			</summary> 
			<param name="offset"> File position indicator offset from the end of the file in bytes. </param> 
			<returns>Returns 1 if the file position indicator offset is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.File.seekSet(size_t)">
			<summary>
			Sets an offset of the file position indicator relatively to the start of the file.
			</summary> 
			<param name="offset"> Offset of the file position indicator from the start of the file, in bytes. </param> 
			<returns>1 if the offset has been set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.File.tell">
			<summary>
			Returns the current offset of the file position indicator.
			</summary>  
			<returns>Offset in bytes from the beginning of the file.</returns>
		</member>
		<member name="M:Unigine.Socket.#ctor(int)">
			<summary>
			Creates a socket and opens it on a given port. When the socket receives data, packets from all network interfaces will be received. When the socket sends data, the default IP address will be used.
			</summary> 
			<param name="type"> Port, on which the socket will be opened. </param> 
		</member>
		<member name="M:Unigine.Socket.#ctor(int,int)">
			<summary>
			Creates a socket for TCP or UDP connections and opens it on a given port. When the socket receives data, packets from all network interfaces will be received. When the socket sends data, the default IP address will be used.
			</summary> 
			<param name="type"> Socket for TCP (SOCKET_STREAM variable) or UDP (SOCKET_DGRAM) connections. </param>
			<param name="port"> Port, on which the socket will be opened. </param> 
		</member>
		<member name="M:Unigine.Socket.#ctor(int,char,int)">
			<summary>
			Creates a socket for TCP or UDP connections and opens it on a given host and a given port. The host specifies the address, from and to which data will be sent.
			</summary> 
			<param name="type"> Socket for TCP (SOCKET_STREAM variable) or UDP (SOCKET_DGRAM) connections. </param>
			<param name="host"> Host, on which the socket will be opened. </param>
			<param name="port"> Port, on which the socket will be opened. </param> 
		</member>
		<member name="M:Unigine.Socket.getFD const">
			<summary>
			Returns the socket file descriptor.
			</summary>  
			<returns>Socket file descriptor.</returns>
		</member>
		<member name="M:Unigine.Socket.getHost const">
			<summary>
			Returns the host name on which the socket is opened.
			</summary>  
			<returns>Host name.</returns>
		</member>
		<member name="M:Unigine.Socket.getPort const">
			<summary>
			Returns the port number on which the socket is opened.
			</summary>  
			<returns>Port number.</returns>
		</member>
		<member name="M:Unigine.Socket.accept(Unigine.Ptr{Socket}) const">
			<summary>
			Accepts a connection on the socket.
			</summary> 
			<param name="socket"> Socket that is bound to an address and listens to connections. </param> 
			<returns>1 if the connection is accepted; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.bind const">
			<summary>
			Binds the socket to an address figured out from the host used for socket initialization.
			</summary>  
			<returns>1 if the address is bound; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.block const">
			<summary>
			Sets up a blocking socket.
			</summary>  
			<returns>1 if the socket is opened; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.broadcast const">
			<summary>
			Sets up a broadcast socket. To create a broadcast socket, you need to create it with a broadcast host address first and then use this function.
			</summary>  
			<returns>1 if the socket is set up successfully ; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Socket.close const">
			<summary>
			Closes the socket.
			</summary>  
		</member>
		<member name="M:Unigine.Socket.connect const">
			<summary>
			Initiates a connection on the socket.
			</summary>  
			<returns>1 if the connection is initialized; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.listen(int) const">
			<summary>
			Makes the socket listen to connections.
			</summary> 
			<param name="num"> Maximum number of pending connections. </param> 
			<returns>1 if the socket has started listening; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.listenMulticastGroup const">
			<summary>
			Joins the socket to a multicast group. Available for UDP sockets only.					The socket class doesn't allow creating a multicast server.
			</summary>  
			<returns>1 if the sockect has been joined successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.nodelay const">
			<summary>
			Enables Nagle's algorithm.
			</summary>  
			<returns>1 if the algorithm has been enabled successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.nonblock const">
			<summary>
			Makes the socket a non-blocking one.
			</summary>  
			<returns>1 if the has become non-blocking; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.open(int) const">
			<summary>
			Opens the socket on a given port. When the socket receives data, packets from all network interfaces will be received. When the socket sends data, the default IP address will be used.
			</summary> 
			<param name="port"> Port number, on which the socket will be opened. </param>
			<param name="host"> Host, on which the socket will be opened. </param> 
			<returns>1 if the socket is opened successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.open(char,int) const">
			<summary>
			Opens the socket on a given port. When the socket receives data, packets from all network interfaces will be received. When the socket sends data, the default IP address will be used.
			</summary> 
			<param name="host"> Host name, on which the socket will be opened. </param>
			<param name="port"> Port number, on which the socket will be opened. </param> 
			<returns>1 if the socket is opened successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.recv(int) const">
			<summary>
			Resizes an internal receiving buffer for a socket.
			</summary> 
			<param name="size"> Receive buffer size in bytes. </param> 
			<returns>1 if the buffer is resized successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.send(int) const">
			<summary>
			Resizes an internal sending buffer for a socket.
			</summary> 
			<param name="size"> Send buffer size in bytes. </param> 
			<returns>1 if the buffer is resized successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.isReadyToRead(int) const">
			<summary>
			Returns a value indicating whether the socked is ready for reading data, waiting if necessary, to perform synchronous I/O.
			</summary> 
			<param name="timeout_usec"> The maximum time for to wait for the socket's response, in microseconds. By default, the timeout is 0 </param> 
			<returns>1 if the socket is ready for reading data; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Socket.isReadyToWrite(int) const">
			<summary>
			Returns a value indicating whether the socked is ready for writing data, waiting if necessary, to perform synchronous I/O.
			</summary> 
			<param name="timeout_usec"> The maximum time for to wait for the socket's response, in microseconds. By default, the timeout is 0 </param> 
			<returns>1 if the socket is ready for writing data; otherwise, 0.</returns>
		</member>
		<member name="F:Unigine.Socket.SOCKET_DGRAM">
			<summary>
			Socket for UDP packets.
		</summary>
		</member>
		<member name="F:Unigine.Socket.SOCKET_STREAM">
			<summary>
			Socket for TCP packets.
		</summary>
		</member>
	</members>
</doc>