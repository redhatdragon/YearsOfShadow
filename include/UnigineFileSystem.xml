<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.FileSystem.getMount(char)">
			<summary>
			Returns a mount point for the specified path.					This method will return the root mount for all files located directly in the data folder or its subfolders.
			</summary> 
			<param name="path"> File path, for which a mount point is to be found. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>FileSystemMount class smart pointer on success; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getMount(Unigine.UGUID)">
			<summary>
			Returns a mount point for the specified GUID.					This method will return the root mount for all files located directly in the data folder or its subfolders.
			</summary> 
			<param name="guid"> File GUID for which a mount point is to be found. </param> 
			<returns>FileSystemMount class smart pointer on success; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getMounts(Unigine.Vector{Unigine.Ptr{FileSystemMount},int,Unigine.VectorAllocator})">
			<summary>
			Returns a list of all mount points currently used by the file system and puts the to the specified output buffer.					This list will not include the root mount.
			</summary> 
			<param name="container"> Output buffer to store the list of all currently used mount points. </param> 
		</member>
		<member name="M:Unigine.FileSystem.getRootMount">
			<summary>
			Returns the root mount of the file system. It mounts the data folder to the root of the virtual file system. The root mount cannot be unmounted.
			</summary>  
			<returns>FileSystemMount class smart pointer for the root mount of the virtual file system.</returns>
		</member>
		<member name="M:Unigine.FileSystem.createMount(char,char,int)">
			<summary>
			Adds a new mount point for the specified external folder/package, virtual path and access mode. All mounted files are automatically added as known to the virtual file system.
			</summary> 
			<param name="absolute_path"> Absolute path to the mounted folder/package. </param>
			<param name="virtual_path"> Virtual path to the folder to which the contents of the external folder/package is to be mounted. </param>
			<param name="access"> Mount point access mode, one of the FileSystemMount::ACCESS_* values. </param> 
			<returns>FileSystemMount class smart pointer, if it was created successfully; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addMount(char)">
			<summary>
			Adds a new mount point using the data from the specified *.umount file. All mounted files are automatically added as known to the virtual file system.
			</summary> 
			<param name="umount_path"> Absolute path to a *.umount file. </param> 
			<returns>FileSystemMount class smart pointer, if it was created successfully; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystem.saveMountFile(char)">
			<summary>
			Saves the specified *.umount file.
			</summary> 
			<param name="umount_path"> Mount point file path. </param> 
			<returns>true if the specified *.umount file is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeMount(char)">
			<summary>
			Unmounts a mount point with a given path.					The root mount cannot be removed.
			</summary> 
			<param name="path"> Absolute path to the mounted folder/package. </param> 
			<returns>true if the mount point with a given path is successfully unmounted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.clearMounts">
			<summary>
			Unmounts all mount points.					This method does not remove the root mount.
			</summary>  
		</member>
		<member name="M:Unigine.FileSystem.loadPackage(char)">
			<summary>
			Loads an UNG or ZIP package into the file system. Note that the package should be mounted, otherwise it won't be loaded.					UNG packages without password protection can be loaded even if the engine has built-in password for the file system packages. For example, it is possible to load both the core.ung package without a password and the my_assets.ung package protected with a password.
			</summary> 
			<param name="path"> Package path. It can be a relative, absolute, network, or virtual path. </param> 
			<returns>true if the package is loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.loadPackage(char,char)">
			<summary>
			Loads a package with the specified extension (ung, zip, or pak) into the file system. Note that the package should be mounted, otherwise it won't be loaded.					UNG packages without password protection can be loaded even if the engine has built-in password for the file system packages. For example, it is possible to load both the core.ung package without a password and the my_assets.ung package protected with a password.
			</summary> 
			<param name="path"> Package path. It can be a relative, absolute, network, or virtual path. </param>
			<param name="extension"> Extension of a custom package, one of the following values:ungzippak </param> 
			<returns>true if the package is loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removePackage(char)">
			<summary>
			Unloads an UNG or ZIP package from the file system.
			</summary> 
			<param name="path"> Package path. It can be a relative, absolute, network, or virtual path. </param> 
			<returns>true if the package is removed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getSupportedPackagesExtensions(Unigine.Vector{String,int,Unigine.VectorAllocator}) const">
			<summary>
			Returns a list of registered extensions that can be loaded as a package.
			</summary> 
			<param name="extensions"> An array to store registered extensions. </param> 
		</member>
		<member name="M:Unigine.FileSystem.getPackageVirtualFiles(char,Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Saves the list of names for all virtual files stored in the specified package to the specified string buffer.
			</summary> 
			<param name="path"> Path to a custom package. It can be a relative, absolute, network, or virtual path. </param>
			<param name="files"> String buffer to store the list of names for all virtual files stored in the specified package. </param> 
		</member>
		<member name="M:Unigine.FileSystem.getPackageVirtualFiles(char,char,Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Saves the list of names for all virtual files stored in a package with the specified name and extension to the specified string buffer.
			</summary> 
			<param name="path"> Path to a custom package. It can be a relative, absolute, network, or virtual path. </param>
			<param name="extension"> Extension of a custom package, one of the following values:ungzippak </param>
			<param name="files"> String buffer to store the list of names for all virtual files stored in the specified package. </param> 
		</member>
		<member name="M:Unigine.FileSystem.preloadExternPackage(Package)">
			<summary>
			Loads the custom package before the file system initialization. The method should be called before the Engine init.
			</summary> 
			<param name="package"> Custom package instance. </param> 
		</member>
		<member name="M:Unigine.FileSystem.preloadExternPackage(char,Package)">
			<summary>
			Loads the custom package before the file system initialization and sets a virtual path to it. The method should be called before the Engine init.
			</summary> 
			<param name="virtual_path"> Virtual path to a custom package. </param>
			<param name="package"> Custom package instance. </param> 
		</member>
		<member name="M:Unigine.FileSystem.clearPreloadedExternPackages">
			<summary>
			Clears all preloaded custom packages (packages loaded before the file system initialization).
			</summary>  
		</member>
		<member name="M:Unigine.FileSystem.addExternPackage(Package)">
			<summary>
			Adds a custom package to the virtual file system.
			</summary> 
			<param name="package"> Custom package instance. </param> 
			<returns>true if the package is added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addExternPackage(char,Package)">
			<summary>
			Adds a custom package to the virtual file system and assigns a virtual path to it. The virtual path is obtained by using the given path.
			</summary> 
			<param name="path"> Path to a custom package. It can be a relative, absolute, network, or virtual path. </param>
			<param name="package"> Custom package instance. </param> 
			<returns>true if the package is added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getVirtualFiles(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Saves the list of names for all known files registered in the file system to the specified string buffer.
			</summary> 
			<param name="files"> String buffer to store the list of names for all known virtual files. </param> 
		</member>
		<member name="M:Unigine.FileSystem.getVirtualFiles(Unigine.Vector{Unigine.UGUID,int,Unigine.VectorAllocator}) const">
			<summary>
			Saves the list of GUIDs for all known files registered in the file system to the specified string buffer.
			</summary> 
			<param name="files"> String buffer to store the list of GUIDs for all known virtual files. </param> 
		</member>
		<member name="M:Unigine.FileSystem.isVirtualFile(char)">
			<summary>
			Checks if the given file is known to the virtual file system.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path. </param> 
			<returns>true if the file is known to the virtual file system; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isVirtualFile(Unigine.UGUID)">
			<summary>
			Checks if a file with the given GUID is known to the virtual file system and has a virtual path registered.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is known to the virtual file system; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addVirtualFile(char,Unigine.UGUID,bool)">
			<summary>
			Registers the regular file name as known virtual file with the given GUID and appends it to the map used for fast searching. This method should be used when you need to add, for example, a new content to the project.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param>
			<param name="guid"> File GUID. </param>
			<param name="must_exist"> A flag indicating whether the specified file must exist. </param> 
			<returns>true if the file name is appended successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addVirtualFile(char,bool)">
			<summary>
			Registers the regular file name as known virtual file and appends it to the map used for fast searching. This method should be used when you need to add, for example, a new content to the project.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param>
			<param name="must_exist"> A flag indicating whether the specified file must exist. </param> 
			<returns>File GUID if it was registered successfully or an empty GUID, otherwise.</returns>
		</member>
		<member name="M:Unigine.FileSystem.renameVirtualFile(char,char)">
			<summary>
			Renames the specified known virtual file.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param>
			<param name="new_path"> New path for the file. </param> 
			<returns>true if the file is renamed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.renameVirtualFile(char,char,Unigine.UGUID)">
			<summary>
			Renames the specified known file and assigns it the specified new GUID.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param>
			<param name="new_path"> New path for the file. </param>
			<param name="new_guid"> New GUID for the file. </param> 
			<returns>true if the file is renamed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.renameVirtualFile(Unigine.UGUID,char)">
			<summary>
			Renames the known virtual file with the given GUID.
			</summary> 
			<param name="guid"> File GUID. </param>
			<param name="new_path"> New path for the file. </param> 
			<returns>true if the file is renamed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.renameVirtualFile(Unigine.UGUID,char,Unigine.UGUID)">
			<summary>
			Renames the known virtual file with the given GUID and assigns it the specified new GUID.
			</summary> 
			<param name="guid"> File GUID. </param>
			<param name="new_path"> New path for the file. </param>
			<param name="new_guid"> New GUID for the file. </param> 
			<returns>true if the file is renamed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeVirtualFile(char)">
			<summary>
			Removes the virtual file with the given name.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeVirtualFile(Unigine.UGUID)">
			<summary>
			Removes the virtual file with the given GUID.
			</summary> 
			<param name="guid"> GUID of the known virtual file to remove. </param> 
			<returns>true if the file is removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.changeVirtualFile(char)">
			<summary>
			Marks the virtual file with the given name as modified. The corresponding CALLBACK_FILE_CHANGED signal is emitted. This method is used to notify the Engine that a resource has been modified and needs to be updated.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is successfully marked as modified; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.changeVirtualFile(Unigine.UGUID)">
			<summary>
			Marks the virtual file with the given GUID as modified. The corresponding CALLBACK_FILE_CHANGED signal is emitted. This method is used to notify the Engine that a resource has been modified and needs to be updated.
			</summary> 
			<param name="guid"> GUID of the known virtual file to remove. </param> 
			<returns>true if the file is successfully marked as modified; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeNonExistingVirtualFiles">
			<summary>
			Removes all non-existing virtual files from the File System. These files aren't physically exist on the disk, however, they are added to the virtual file system. For example, it can be a blob or a cache file.
			</summary>  
		</member>
		<member name="M:Unigine.FileSystem.isBlobFile(char)">
			<summary>
			Checks if the given file is loaded to a blob.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is loaded to a blob successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isBlobFile(Unigine.UGUID)">
			<summary>
			Checks if a file with the given GUID is loaded to a blob.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is loaded to a blob successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addBlobFile(char)">
			<summary>
			Adds a file into a blob. It can be used for files that are frequently modified at run time (for example, images). After such file is loaded from a disk and written into a blob in the memory, its modifications can be saved fast into this blob.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is successfully added into a blob; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addBlobFile(Unigine.UGUID)">
			<summary>
			Adds a file with the given GUID into a blob. It can be used for files that are frequently modified at run time (for example, images). After such file is loaded from a disk and written into a blob in the memory, its modifications can be saved fast into this blob.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is successfully added into a blob; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeBlobFile(char)">
			<summary>
			Removes a file from the blob. Blobbing can be used for files that are frequently modified at run time (for example, images). After such file is loaded from a disk and written into a blob in the memory, its modifications can be saved fast into this blob.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeBlobFile(Unigine.UGUID)">
			<summary>
			Removes a file with the given GUID from the blob. Blobbing can be used for files that are frequently modified at run time (for example, images). After such file is loaded from a disk and written into a blob in the memory, its modifications can be saved fast into this blob.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isCacheFile(char)">
			<summary>
			Checks if the given file is loaded into cache.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is added into cache; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isCacheFile(Unigine.UGUID)">
			<summary>
			Checks if a file with the given GUID is loaded into cache.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is added into cache; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addCacheFile(char)">
			<summary>
			Caches a file in the memory. It can be used for files that are accessed multiple times at run time (for example, textures are read two times in a row). Such files are loaded into the memory for faster reading.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is successfully added to cache; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addCacheFile(Unigine.UGUID)">
			<summary>
			Caches a file in the memory with the given GUID. It can be used for files that are accessed multiple times at run time (for example, textures are read two times in a row). Such files are loaded into the memory for faster reading.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is successfully added to cache; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeCacheFile(char)">
			<summary>
			Removes a cached file from the memory. Caching can be used for files that are accessed multiple times at run time (for example, textures are read two times in a row). Such files are loaded into the memory for faster reading.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file is successfully removed from cache; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeCacheFile(Unigine.UGUID)">
			<summary>
			Removes a cached file with the given GUID from the memory. Caching can be used for files that are accessed multiple times at run time (for example, textures are read two times in a row). Such files are loaded into the memory for faster reading.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file is successfully removed from cache; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isDiskFile(char)">
			<summary>
			Returns a value indicating if the specified file path is a path to a file on disk (i.e. not a package, a blob, or a cache file).
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the specified file path is a path to a file on disk; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isDiskFile(Unigine.UGUID)">
			<summary>
			Returns a value indicating if the file with the specified GUID is a file on disk.
			</summary> 
			<param name="guid"> Any file GUID. </param> 
			<returns>true if the file with the specified GUID is a file on disk; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isPackageFile(char)">
			<summary>
			Returns a value indicating if the specified file path is a path to a file inside a ZIP or UNG package.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path. </param> 
			<returns>true if the specified file path is a path to a file inside a ZIP or UNG package; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isPackageFile(Unigine.UGUID)">
			<summary>
			Returns a value indicating if the file with the specified GUID is file inside a ZIP or UNG package.
			</summary> 
			<param name="guid"> Any file GUID. </param> 
			<returns>true if the file with the specified GUID is file inside a ZIP or UNG package; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.resolvePartialVirtualPath(char)">
			<summary>
			Converts the given partial path to a full virtual one.					If the file isn't added to the virtual file system, the full virtual path won't be returned.				For example, if you have the					data/project/image_1.tga and want to use the partial virtual path image_1.tga, you should get the full virtual path first:
			</summary> 
			<param name="path"> Partial path to be resolved. </param> 
			<returns>Full virtual path.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getVirtualPath(char)">
			<summary>
			Resolves a virtual path for the given file path. The following examples show particular cases of the method usage:											If the given path is known for the virtual file system, the following can be returned:													If the given path is unknown for the virtual file system, the following can be returned:													If the given path is the path to a mounted file. Here mount_1 is the mount_1.umount mount point. Note that in the example below, the 1.tga asset has no runtime files. If an asset has a runtime file, the virtual path to this runtime file (stored in the .runtimes folder of the mount point) will be returned.													If the given path is the path to a mounted file stored in the nested mount points. Here mount_1 and mount_2 are the mount_1.umount and mount_2.umount mount points correspondingly. Note that in the example below, the 1.tga asset has no runtime files. If an asset has a runtime file, the virtual path to this runtime file (stored in the .runtimes folder of the mount point) will be returned.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path, including a path to a folder.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>Virtual path to the file relative to the data folder.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getVirtualPath(Unigine.UGUID)">
			<summary>
			Resolves a virtual path for the given GUID.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>Virtual path to the file relative to the data folder.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getAbsolutePath(char)">
			<summary>
			Resolves an absolute path for the given file path. The following examples show particular cases of the method usage:											If the given path is known for the virtual file system, the following can be returned:													If the given path is unknown for the virtual file system, the following can be returned:													If the given path is the path to a mounted file. Here mount_1 is the mount_1.umount mount point. Note that in the example below, the 1.tga asset has no runtime files. If an asset has a runtime file, the absolute path to this runtime file (stored in the .runtimes folder of the mount point) will be returned.													If the given path is the path to a mounted file stored in the nested mount points. Here mount_1 and mount_2 are the mount_1.umount and mount_2.umount mount points correspondingly. Note that in the example below, the 1.tga asset has no runtime files. If an asset has a runtime file, the absolute path to this runtime file (stored in the .runtimes folder of the mount point) will be returned.													If the given path is a network path:
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path, including a path to a folder.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>Absolute path to the file.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getAbsolutePath(Unigine.UGUID)">
			<summary>
								Resolves an absolute path for the given file GUID.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>Absolute path to the file.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getPackageVirtualPath(char) const">
			<summary>
			Resolves a virtual path for the given path to the package.
			</summary> 
			<param name="path"> Path to a package. It can be a relative, absolute, network, or virtual path. </param> 
			<returns>Virtual path to the package.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getPackageVirtualPath(Unigine.UGUID) const">
			<summary>
			Resolves a virtual path for the given GUID.
			</summary> 
			<param name="guid"> Package GUID. </param> 
			<returns>Virtual path to the package.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getPackageAbsolutePath(char) const">
			<summary>
			Resolves an absolute path for the given path to the package.
			</summary> 
			<param name="path"> Path to a package. It can be a relative, absolute, network, or virtual path. </param> 
			<returns>Absolute path to the package.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getPackageAbsolutePath(Unigine.UGUID) const">
			<summary>
								Resolves an absolute path for the given package GUID.
			</summary> 
			<param name="guid"> Package GUID. </param> 
			<returns>Absolute path to the package.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getExtension(char)">
			<summary>
			Returns the extension for the given file.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>File extension in lower case, if any; otherwise, an empty string.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getExtension(Unigine.UGUID)">
			<summary>
			Returns the extension for a file with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the file for which extension is to be returned. </param> 
			<returns>File extension in lower case if any; otherwise, an empty string.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isFileExist(char)">
			<summary>
			Checks if the given file actually exists on the disk.Calling this method every frame in the main thread, especially for multiple files, may cause a performance hit. It is better to optimize such checks and move them to a separate thread.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>true if the file exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isFileExist(Unigine.UGUID)">
			<summary>
			Checks if a file with the given GUID actually exists.Calling this method every frame in the main thread, especially for multiple files, may cause a performance hit. It is better to optimize such checks and move them to a separate thread.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>true if the file exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isGUIDPath(char)">
			<summary>
			Returns a value indicating if the given path has a valid GUID path format (e.g. "guid://e231e15beff2309b8f87c30b2c105cc4d2399973)".
			</summary> 
			<param name="path"> Path to be checked. </param> 
			<returns>true if the given path has a valid GUID path format; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.isAssetPath(char)">
			<summary>
			Returns a value indicating if the given path has a valid asset path format (e.g. asset://1.tga).
			</summary> 
			<param name="path"> Path to be checked. </param> 
			<returns>true if the given path has a valid asset path format; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getMTime(char)">
			<summary>
			Returns the time of the last modification of the given file.Calling this method every frame in the main thread, especially for multiple files, may cause a performance hit. It is better to optimize such checks and move them to a separate thread.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>Time of the last file modification. If there is no such file, -1 will be returned.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getMTime(Unigine.UGUID)">
			<summary>
			Returns the time of the last modification of the file with the specified GUID.Calling this method every frame in the main thread, especially for multiple files, may cause a performance hit. It is better to optimize such checks and move them to a separate thread.
			</summary> 
			<param name="guid"> File GUID. </param> 
			<returns>Time of the last file modification. If there is no such file, -1 will be returned.</returns>
		</member>
		<member name="M:Unigine.FileSystem.loadGUIDs(char)">
			<summary>
			Loads file system GUIDs from the specified file.
			</summary> 
			<param name="path"> Path to the file, where file system GUIDs are stored. </param> 
			<returns>true if file system GUIDs are loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.saveGUIDs(char,bool)">
			<summary>
			Saves all file system GUIDs to the specified file in the specified format (json or binary).
			</summary> 
			<param name="path"> Path to the file, where file system GUIDs are to be stored. </param>
			<param name="binary"> Binary file format flag. When the flag is set to true, the file system will save GUIDs to a binary file; otherwise, to a JSON file. </param> 
			<returns>true if all file system GUIDs are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.generateGUID">
			<summary>
			Generates a new GUID.
			</summary>  
			<returns>New filesystem GUID if is was generated successfully; otherwise, an empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystem.setGUID(char,Unigine.UGUID)">
			<summary>
			Sets the specified GUID for the given file.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param>
			<param name="guid"> GUID to be set for the file. </param> 
			<returns>true if the GUID is set successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getGUID(char)">
			<summary>
			Returns the GUID (if it exists) for the given file.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>File GUID if it exists; otherwise, an empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getFileSize(char) const">
			<summary>
			Returns the size of the specified file.
			</summary> 
			<param name="path"> File path. It can be a relative, absolute, network, or virtual path.If you want to specify a path to an asset, you should use the asset path format (asset://). Otherwise, if you specify the regular path to the asset, it will be treated as the path to its runtime file (if any) from the .runtimes folder. </param> 
			<returns>File size in bytes.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getFileSize(Unigine.UGUID) const">
			<summary>
			Returns the size of the file with the specified GUID.
			</summary> 
			<param name="guid"> File GUID </param> 
			<returns>File size in bytes.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getNumModifiers">
			<summary>
			Returns the total number of file modifiers registered in the file system.
			</summary>  
			<returns>Number of modifiers.</returns>
		</member>
		<member name="M:Unigine.FileSystem.getModifier(int) const">
			<summary>
			Returns the name of the given modifier.
			</summary> 
			<param name="num"> ID number of the modifier. </param> 
			<returns>Modifier name.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addModifier(char)">
			<summary>
			Registers a new modifier in the file system.
			</summary> 
			<param name="name"> Modifier name. </param> 
		</member>
		<member name="M:Unigine.FileSystem.removeModifier(char)">
			<summary>
			Unregisters a given modifier in the file system.
			</summary> 
			<param name="name"> Modifier name. </param> 
		</member>
		<member name="M:Unigine.FileSystem.clearModifiers">
			<summary>
			Unregister all modifiers in the file system.
			</summary>  
		</member>
		<member name="M:Unigine.FileSystem.addCallback(int,Unigine.CallbackBase1{Unigine.Vector{FilePath,int,Unigine.VectorAllocator}})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when files are added, changed, or removed. The signature of the callback function must be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.FileSystem.addCallback(int,Unigine.CallbackBase2{char,Unigine.UGUID})">
			<summary>
			Adds a callback of the specified type. Callback functions can be used to determine actions to be performed when files are added, changed, or removed. The signature of the callback function must be as follows:
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.FileSystem.removeCallback(int,void)">
			<summary>
			Removes the specified callback from the list of callbacks of the specified type. Callback functions can be used to determine actions to be performed when files are added, changed, or removed.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.FileSystem.clearCallbacks(int)">
			<summary>
			Clears all added callbacks of the specified type. Callback functions can be used to determine actions to be performed when files are added, changed, or removed.
			</summary> 
			<param name="callback"> Callback type. One of the CALLBACK_* variables. </param> 
		</member>
		<member name="F:Unigine.FileSystem.NUM_CALLBACKS">
			<summary>
			Callback counter.
		</summary>
		</member>
		<member name="F:Unigine.FileSystem.CALLBACK_FILES_CHANGED">
			<summary>
			Callback fired at the end of the Engine::update() containing the files have been changed during the frame.
		</summary>
		</member>
		<member name="F:Unigine.FileSystem.CALLBACK_FILES_REMOVED">
			<summary>
			Callback fired at the end of the Engine::update() containing the files have been removed during the frame.
		</summary>
		</member>
		<member name="F:Unigine.FileSystem.CALLBACK_FILES_ADDED">
			<summary>
			Callback fired at the end of the Engine::update() containing the files have been added during the frame.
		</summary>
		</member>
		<member name="F:Unigine.FileSystem.CALLBACK_FILE_CHANGED">
			<summary>
			Callback fired after the file is changed using the FileSystem API.
		</summary>
		</member>
		<member name="F:Unigine.FileSystem.CALLBACK_FILE_REMOVED">
			<summary>
			Callback fired after the file is removed using the FileSystem API.
		</summary>
		</member>
		<member name="F:Unigine.FileSystem.CALLBACK_FILE_ADDED">
			<summary>
			Callback fired after the file is added using the FileSystem API.
		</summary>
		</member>
		<member name="M:Unigine.FileSystemAssets.isAsset(Unigine.UGUID)">
			<summary>
			Returns a value indicating whether the file with the specified GUID is a non-native asset (has runtime files generated for it).
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>true if the file with the specified GUID is a non-native asset; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isAsset(char)">
			<summary>
			Returns a value indicating whether the file with the specified path is a non-native asset (has runtime files generated for it).
			</summary> 
			<param name="path"> Path to a file. </param> 
			<returns>true if the file with the specified path is a non-native asset; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getAssetGUID(char)">
			<summary>
			Returns a GUID of a non-native asset (having generated runtime file or files) for the specified path.
			</summary> 
			<param name="path"> Path to a runtime or asset file. </param> 
			<returns>GUID of a non-native asset corresponding to the specified path if it exists; otherwise, empty GUID.This method will return an empty GUID for any asset having no runtimes generated for it.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getAssetGUID(Unigine.UGUID)">
			<summary>
			Returns a GUID of a non-native asset (having generated runtime file or files) for the specified GUID.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>GUID of a non-native asset corresponding to the specified path if it exists; otherwise, empty GUID.This method will return an empty GUID for any asset having no runtimes generated for it.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getNumRuntimes(char)">
			<summary>
			Returns a number of runtime files for a non-native asset having the specified path.
			</summary> 
			<param name="asset_path"> Path to an asset file. </param> 
			<returns>Number of runtime files generated for the specified asset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getNumRuntimes(Unigine.UGUID)">
			<summary>
			Returns a number of runtime files for a non-native asset having the specified GUID.
			</summary> 
			<param name="asset_path"> Asset file GUID. </param> 
			<returns>Number of runtime files generated for the specified asset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isPrimary(char)">
			<summary>
			Returns a value indicating whether the runtime file corresponding to the specified path is a primary one.
			</summary> 
			<param name="path"> Path to a runtime file. </param> 
			<returns>true if the runtime file corresponding to the specified path is a primary one; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isPrimary(Unigine.UGUID)">
			<summary>
			Returns a value indicating whether the runtime file corresponding to the specified GUID is a primary one.
			</summary> 
			<param name="any_guid"> Runtime file GUID. </param> 
			<returns>true if the runtime file corresponding to the specified GUID is a primary one; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getPrimaryGUID(Unigine.UGUID)">
			<summary>
			Returns the GUID of the primary runtime file for the specified file GUID if it exists.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>Return value is determined by the specified GUID in accordance with the following:Asset file GUID -&gt; GUID of its primary runtime file, if any; otherwise empty GUID.Primary runtime file GUID -&gt; GUID of this primary runtime file.Runtime file GUID -&gt; GUID of the primary runtime file for its asset, if any; otherwise empty GUID.Any other file GUID -&gt; empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getPrimaryGUID(char)">
			<summary>
			Returns the GUID of the primary runtime file for the specified file path if it exists.
			</summary> 
			<param name="path"> Any file path. </param> 
			<returns>Return value is determined by the specified GUID in accordance with the following:Asset file path -&gt; GUID of its primary runtime file, if any; otherwise empty GUID.Primary runtime file path -&gt; GUID of this primary runtime file.Runtime file path -&gt; GUID of the primary runtime file for its asset, if any; otherwise empty GUID.Any other file path -&gt; empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isMeta(Unigine.UGUID)">
			<summary>
			Returns a value indicating whether the file with the specified GUID is a *.meta file.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>true if the file with the specified GUID is a *.meta file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isRuntime(char)">
			<summary>
			Returns a value indicating whether the file corresponding to the specified path is a generated runtime file.
			</summary> 
			<param name="path"> Any file path. </param> 
			<returns>true if the file corresponding to the specified path is a generated runtime file; otherwise, false.This method will return 0 for any native asset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isRuntime(Unigine.UGUID)">
			<summary>
			Returns a value indicating whether the file corresponding to the specified GUID is a generated runtime file.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>true if the file corresponding to the specified path is a generated runtime file; otherwise, false.This method will return 0 for any native asset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.isRuntimePath(char)">
			<summary>
			Returns a value indicating whether the specified path is a path to a generated runtime file.
			</summary> 
			<param name="path"> Any file path. </param> 
			<returns>true if the specified path is a path to a generated runtime file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeAlias(char)">
			<summary>
			Returns the alias of the generated runtime file, specified by the given path.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param> 
			<returns>Alias set for the specified generated runtime file, if it exists; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeAlias(Unigine.UGUID)">
			<summary>
			Returns the alias of the generated runtime file, specified by the given GUID.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param> 
			<returns>Alias set for the specified generated runtime file, if it exists; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeAlias(String,int)">
			<summary>
			Returns the alias of the generated runtime file, specified by the given non-native asset path and runtime index.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param> 
			<returns>Alias set for the specified generated runtime file, if it exists; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeAlias(Unigine.UGUID,int)">
			<summary>
			Returns the alias of the generated runtime file, specified by the given non-native asset GUID and runtime index.
			</summary> 
			<param name="asset_guid"> GUID of a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param> 
			<returns>Alias set for the specified generated runtime file, if it exists; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeGUID(char,Unigine.UGUID)">
			<summary>
			Sets a new GUID for the generated runtime file with a given path.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="new_runtime_guid"> New GUID to be set. </param> 
			<returns>true if a new GUID is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeGUID(Unigine.UGUID,Unigine.UGUID)">
			<summary>
			Sets a new GUID for the generated runtime file with a given GUID.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="new_runtime_guid"> New GUID to be set. </param> 
			<returns>true if a new GUID is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeGUID(char,int,Unigine.UGUID)">
			<summary>
			Sets a new GUID for the generated runtime file, specified by the given non-native asset path and runtime index.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param>
			<param name="new_runtime_guid"> New GUID to be set. </param> 
			<returns>true if a new GUID is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeGUID(Unigine.UGUID,int,Unigine.UGUID)">
			<summary>
			Sets a new GUID for the generated runtime file, specified by the given non-native asset GUID and runtime index.
			</summary> 
			<param name="asset_guid"> GUID of a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param>
			<param name="new_runtime_guid"> New GUID to be set. </param> 
			<returns>true if a new GUID is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeGUID(char,int)">
			<summary>
			Returns the current GUID for the generated runtime file, specified by the given non-native asset path and runtime index.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param> 
			<returns>Current generated runtime file GUID for the given asset and runtime index, if any; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeGUID(Unigine.UGUID,int)">
			<summary>
			Returns the current GUID for the generated runtime file, specified by the given non-native asset GUID and runtime index.
			</summary> 
			<param name="asset_guid"> GUID of a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param> 
			<returns>Current generated runtime file GUID for the given asset and runtime index, if any; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.addRuntime(char,char,int)">
			<summary>
			Creates a new runtime file for the asset with a given path. A new GUID will be generated for the new runtime file.
			</summary> 
			<param name="asset_path"> Path to the asset for which a new runtime is to be created. </param>
			<param name="alias"> Alias for the new runtime file. </param>
			<param name="primary"> Use 1 to create a new runtime as a primary one; otherwise, 0. </param> 
			<returns>GUID of the new created runtime, if it was successfully created, or an empty GUID, otherwise.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.addRuntime(Unigine.UGUID,char,int)">
			<summary>
			Creates a new runtime file for the asset with a given GUID. A new GUID will be generated for the new runtime file.
			</summary> 
			<param name="asset_guid"> GUID of the asset for which a new runtime is to be created. </param>
			<param name="alias"> Alias for the new runtime file. </param>
			<param name="primary"> Use 1 to create a new runtime as a primary one; otherwise, 0. </param> 
			<returns>GUID of the new created runtime, if it was successfully created, or an empty GUID, otherwise.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.addRuntime(char,char,Unigine.UGUID,int)">
			<summary>
			Creates a new runtime file for the asset with a given path. The specified GUID will be assigned to the new runtime file.
			</summary> 
			<param name="asset_path"> Path to the asset for which a new runtime is to be created. </param>
			<param name="alias"> Alias for the new runtime file. </param>
			<param name="runtime_guid"> GUID for the new runtime file. </param>
			<param name="primary"> Use 1 to create a new runtime as a primary one; otherwise, 0. </param> 
			<returns>true if a new runtime file is successfully created; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.addRuntime(Unigine.UGUID,char,Unigine.UGUID,int)">
			<summary>
			Creates a new runtime file for the asset with a given GUID. The specified GUID will be assigned to the new runtime file.
			</summary> 
			<param name="asset_guid"> GUID of the asset for which a new runtime is to be created. </param>
			<param name="alias"> Alias for the new runtime file. </param>
			<param name="runtime_guid"> GUID for the new runtime file. </param>
			<param name="primary"> Use 1 to create a new runtime as a primary one; otherwise, 0. </param> 
			<returns>true if a new runtime file is successfully created; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.clearRuntimes(char)">
			<summary>
			Deletes all generated runtime files for the asset with the specified path.
			</summary> 
			<param name="asset_path"> Path to the asset for which all generated runtime files are to be deleted. </param> 
			<returns>true if all generated runtime files for the specified asset are successfully deleted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.clearRuntimes(Unigine.UGUID)">
			<summary>
			Deletes all generated runtime files for the asset with the specified GUID.
			</summary> 
			<param name="asset_guid"> GUID of the asset for which all generated runtime files are to be deleted. </param> 
			<returns>true if all generated runtime files for the specified asset are successfully deleted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,char)">
			<summary>
			Adds a copy of the generated runtime file with the specified path to another asset with the specified path.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file to be copied. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,Unigine.UGUID)">
			<summary>
			Adds a copy of the generated runtime file with the specified path to another asset having the specified GUID.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file to be copied. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,char)">
			<summary>
			Adds a copy of the generated runtime file with the specified path to another asset having the specified path.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file to be copied. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,Unigine.UGUID)">
			<summary>
			Adds a copy of the generated runtime file with the specified GUID to another asset specified by GUID.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file to be copied. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,int,char)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by path, to another asset having the specified path.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="asset_path"> Path to the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,int,Unigine.UGUID)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by path, to another asset having the specified GUID.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="asset_path"> Path to the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,int,char)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by GUID, to another asset having the specified path.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="asset_guid"> GUID of the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,int,Unigine.UGUID)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by GUID, to another asset having the specified GUID.					A new GUID will be generated for the created runtime file copy.
			</summary> 
			<param name="asset_guid"> GUID of the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param> 
			<returns>GUID of the new runtime file copy, if it is created successfully; otherwise, empty GUID.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,char,Unigine.UGUID)">
			<summary>
			Adds a copy of the generated runtime file specified by path, to another asset having the specified path.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file to be copied. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,Unigine.UGUID,Unigine.UGUID)">
			<summary>
			Adds a copy of the generated runtime file specified by path, to another asset having the specified GUID.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file to be copied. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,char,Unigine.UGUID)">
			<summary>
			Adds a copy of the generated runtime file specified by GUID, to another asset having the specified path.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="runtime_guid"> GUID of the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,Unigine.UGUID,Unigine.UGUID)">
			<summary>
			Adds a copy of the generated runtime file specified by GUID, to another asset having the specified GUID.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file to be copied. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,int,char,Unigine.UGUID)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by path, to another asset having the specified path.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="asset_path"> Path to the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(char,int,Unigine.UGUID,Unigine.UGUID)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by path, to another asset having the specified GUID.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="asset_path"> Path to the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,int,char,Unigine.UGUID)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by GUID, to another asset having the specified path.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="asset_guid"> GUID of the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_path"> Path to another asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.copyRuntime(Unigine.UGUID,int,Unigine.UGUID,Unigine.UGUID)">
			<summary>
			Adds a copy of the runtime file with the specified index, generated for the asset specified by GUID, to another asset having the specified GUID.					The created runtime file copy will have the specified runtime GUID assigned.
			</summary> 
			<param name="asset_guid"> GUID of the asset file to which the generated runtime file to be copied belongs. </param>
			<param name="index"> Index of the generated runtime file to be copied in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="new_asset_guid"> GUID of the asset for which a copy of the generated runtime file is to be added. </param>
			<param name="new_runtime_guid"> GUID to be set for the new runtime file copy. </param> 
			<returns>true if the specified runtime file is successfully copied; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntime(char)">
			<summary>
			Deletes the specified generated runtime file and removes it from the list of runtimes of the corresponding asset.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file to be deleted. </param> 
			<returns>true if the specified runtime file is successfully deleted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntime(Unigine.UGUID)">
			<summary>
			Deletes the specified generated runtime file and removes it from the list of runtimes of the corresponding asset.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file to be deleted. </param> 
			<returns>true if the specified runtime file is successfully deleted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntime(char,int)">
			<summary>
			Deletes the generated runtime file with the specified index, and removes it from the list of runtimes of the asset specified by path.
			</summary> 
			<param name="asset_path"> Path to the asset file for which the specified generated runtime file is to be deleted. </param>
			<param name="index"> Index of the generated runtime file to be deleted in the range from 0 to the total number of runtimes generated for the asset. </param> 
			<returns>true if the specified runtime file is successfully deleted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntime(Unigine.UGUID,int)">
			<summary>
			Deletes the generated runtime file with the specified index, and removes it from the list of runtimes of the asset specified by GUID.
			</summary> 
			<param name="asset_guid"> GUID of the asset file for which the specified generated runtime file is to be deleted. </param>
			<param name="index"> Index of the generated runtime file to be deleted in the range from 0 to the total number of runtimes generated for the asset. </param> 
			<returns>true if the specified runtime file is successfully deleted; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.resolve(Unigine.UGUID)">
			<summary>
			Resolves a given GUID.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>Return GUID value is determined by the GUID specified in accordance with the following:Non-native asset file GUID -&gt; GUID of its primary runtime file, if any; otherwise, asset file GUID.Any other file GUID -&gt; file GUID as is.// if there is a primary runtime generatedresolve(asset_guid);//-&gt; primary_guidresolve(primary_guid);//-&gt; primary_guidresolve(runtime_guid);//-&gt; runtime_guid// if there is no primary runtime generatedresolve(asset_guid);//-&gt; asset_guidresolve(primary_guid);//-&gt; primary_guidresolve(runtime_guid);//-&gt; runtime_guid</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.resolveAsset(Unigine.UGUID)">
			<summary>
			Resolves a given GUID to a corresponding asset GUID, if any, or keeps the specified GUID as is.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>Return GUID value is determined by the GUID specified in accordance with the following:Primary runtime file GUID -&gt; source asset file GUID.Generated runtime file GUID -&gt; source asset file GUID.Non-native asset file GUID -&gt; GUID as is.Any other file GUID -&gt; GUID as is.resolveAsset(asset_guid);//-&gt; asset_guidresolveAsset(primary_guid);//-&gt; asset_guidresolveAsset(runtime_guid);//-&gt; asset_guid</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.resolvePrimary(Unigine.UGUID)">
			<summary>
			Resolves a given GUID to a corresponding primary runtime GUID, if any.
			</summary> 
			<param name="any_guid"> Any file GUID. </param> 
			<returns>Return GUID value is determined by the GUID specified in accordance with the following:Any generated runtime file GUID -&gt; GUID of the primary runtime file for the source asset.Non-native asset file GUID -&gt; GUID of its primary runtime file, if any; otherwise, empty GUID.Any other file GUID -&gt; empty GUID.// if there is a primary runtime generatedresolvePrimary(asset_guid);//-&gt; primary_guidresolvePrimary(primary_guid);//-&gt; primary_guidresolvePrimary(runtime_guid);//-&gt; primary_guid// if there is no primary runtime generatedresolvePrimary(asset_guid);//-&gt; empty guidresolvePrimary(runtime_guid);//-&gt; empty guid</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.resolveRuntimeAlias(char)">
			<summary>
			Resolves a given alias of a generated runtime file to a corresponding GUID, if any.
			</summary> 
			<param name="path"> Runtime file alias. </param> 
			<returns>GUID of the generated runtime file having the specified alias, af any; otherwise, empty GUID</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeAlias(Unigine.UGUID,int,char)">
			<summary>
			Sets a new alias for the generated runtime file, specified by the given non-native asset GUID and runtime index.
			</summary> 
			<param name="asset_guid"> GUID of a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param>
			<param name="new_alias"> New alias to be set. </param> 
			<returns>true if a new alias is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeAlias(Unigine.UGUID,char)">
			<summary>
			Sets a new alias for the generated runtime file with a given GUID.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="new_alias"> New alias to be set. </param> 
			<returns>true if a new alias is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeAlias(char,char)">
			<summary>
			Sets a new alias for the generated runtime file with a given path.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="new_alias"> New alias to be set. </param> 
			<returns>true if a new alias is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeAlias(char,int,char)">
			<summary>
			Sets a new alias for the generated runtime file, specified by the given non-native asset path and runtime index.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param>
			<param name="new_alias"> New alias to be set. </param> 
			<returns>true if a new alias is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimePrimary(char,int,int)">
			<summary>
			Sets or unsets the generated runtime file, specified by the given non-native asset path and runtime index, as a primary one.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param>
			<param name="primary"> 1 to make the runtime file primary; 0 to unmake, if it is already set. </param> 
			<returns>true if the runtime file is successfully set as a primary one; otherwise, false.There can be the only one primary runtime file, so when a new runtime file is set as the primary, the previous one is unset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimePrimary(char,int)">
			<summary>
			Sets or unsets the generated runtime file with a given path as a primary one.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="primary"> 1 to make the runtime file primary; 0 to unmake, if it is already set. </param> 
			<returns>true if the runtime file is successfully set as a primary one; otherwise, false.There can be the only one primary runtime file, so when a new runtime file is set as the primary, the previous one is unset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimePrimary(Unigine.UGUID,int)">
			<summary>
			Sets or unsets the generated runtime file with a given GUID as a primary one.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="primary"> 1 to make the runtime file primary; 0 to unmake, if it is already set. </param> 
			<returns>true if the runtime file is successfully set as a primary one; otherwise, false.There can be the only one primary runtime file, so when a new runtime file is set as the primary, the previous one is unset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimePrimary(Unigine.UGUID,int,int)">
			<summary>
			Sets or unsets the generated runtime file, specified by the given non-native asset GUID and runtime index, as a primary one.
			</summary> 
			<param name="asset_guid"> GUID of a non-native asset. </param>
			<param name="index"> Index of the generated runtime file. </param>
			<param name="primary"> 1 to make the runtime file primary; 0 to unmake, if it is already set. </param> 
			<returns>true if the runtime file is successfully set as a primary one; otherwise, false.There can be the only one primary runtime file, so when a new runtime file is set as the primary, the previous one is unset.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeParameter(Unigine.UGUID,int,char,char)">
			<summary>
			Sets a new parameter with a given name and value for the generated runtime file specified by the non-native asset GUID.
			</summary> 
			<param name="asset_guid"> GUID of a non-native asset. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be set. </param>
			<param name="new_parameter_value"> Value of the parameter to be set. </param> 
			<returns>true if a new parameter for the runtime is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeParameter(char,int,char,char)">
			<summary>
			Sets a new parameter with a given name and value for the generated runtime file specified by the given non-native asset path.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be set. </param>
			<param name="new_parameter_value"> Value of the parameter to be set. </param> 
			<returns>true if a new parameter for the runtime is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeParameter(Unigine.UGUID,char,char)">
			<summary>
			Sets a new parameter with a given name and value for the generated runtime file with a given GUID.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be set. </param>
			<param name="new_parameter_value"> Value of the parameter to be set. </param> 
			<returns>true if a new parameter for the runtime is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.setRuntimeParameter(char,char,char)">
			<summary>
			Sets a new parameter with a given name and value for the generated runtime file with the specified path.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be set. </param>
			<param name="new_parameter_value"> Value of the parameter to be set. </param> 
			<returns>true if a new parameter for the runtime is successfully set; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeParameter(Unigine.UGUID,int,char) const">
			<summary>
			Returns the value of the specified parameter of the specified runtime file, or an empty string if such parameter does not exist.
			</summary> 
			<param name="asset_guid"> GUID of the asset file for the runtime file of which the parameter is returned. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be returned. </param> 
			<returns>Value of the specified parameter, or an empty string if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeParameter(char,int,char) const">
			<summary>
			Returns the value of the specified parameter of the specified runtime file, or an empty string if such parameter does not exist.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be returned. </param> 
			<returns>Value of the specified parameter, or an empty string if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeParameter(Unigine.UGUID,char) const">
			<summary>
			Returns the value of the specified parameter of the specified runtime file, or an empty string if such parameter does not exist.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be returned. </param> 
			<returns>Value of the specified parameter, or an empty string if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.getRuntimeParameter(char,char) const">
			<summary>
			Returns the value of the specified parameter of the specified runtime file, or an empty string if such parameter does not exist.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be returned. </param> 
			<returns>Value of the specified parameter, or an empty string if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.hasRuntimeParameter(Unigine.UGUID,int,char) const">
			<summary>
			Checks if the specified runtime file has the specified parameter.
			</summary> 
			<param name="asset_guid"> GUID of the asset file for the runtime file of which the parameter is checked. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be checked. </param> 
			<returns>true if the runtime file has the specified parameter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.hasRuntimeParameter(char,int,char) const">
			<summary>
			Checks if the specified runtime file has the specified parameter.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be checked. </param> 
			<returns>true if the runtime file has the specified parameter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.hasRuntimeParameter(Unigine.UGUID,char) const">
			<summary>
			Checks if the specified runtime file has the specified parameter.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be checked. </param> 
			<returns>true if the runtime file has the specified parameter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.hasRuntimeParameter(char,char) const">
			<summary>
			Checks if the specified runtime file has the specified parameter.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be checked. </param> 
			<returns>true if the runtime file has the specified parameter; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntimeParameter(Unigine.UGUID,int,char) const">
			<summary>
			Removes the specified parameter of the runtime file of the asset with the specified GUID.
			</summary> 
			<param name="asset_guid"> GUID of the asset file for the runtime file of which the parameter is removed. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be removed. </param> 
			<returns>true if the specified parameter of the runtime file is successfully deleted; false if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntimeParameter(char,int,char) const">
			<summary>
			Removes the specified parameter of the runtime file of the asset with the specified path.
			</summary> 
			<param name="asset_path"> Path to a non-native asset. </param>
			<param name="index"> Index of the generated runtime file in the range from 0 to the total number of runtimes generated for the asset. </param>
			<param name="parameter_name"> Name of the parameter to be removed. </param> 
			<returns>true if the specified parameter of the runtime file is successfully deleted; false if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntimeParameter(Unigine.UGUID,char) const">
			<summary>
			Removes the specified parameter of the runtime file with the specified GUID.
			</summary> 
			<param name="runtime_guid"> GUID of the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be removed. </param> 
			<returns>true if the specified parameter of the runtime file is successfully deleted; false if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemAssets.removeRuntimeParameter(char,char) const">
			<summary>
			Removes the specified parameter of the runtime file with the specified path.
			</summary> 
			<param name="runtime_path"> Path to the generated runtime file. </param>
			<param name="parameter_name"> Name of the parameter to be removed. </param> 
			<returns>true if the specified parameter of the runtime file is successfully deleted; false if such parameter does not exist.</returns>
		</member>
		<member name="M:Unigine.FileSystemMount.getAccess">
			<summary>
			Returns the current access mode of the mount point.
			</summary>  
			<returns>Mount point access mode, one of the ACCESS_* values.</returns>
		</member>
		<member name="M:Unigine.FileSystemMount.getName">
			<summary>
			Returns the name of the mount point.
			</summary>  
			<returns>Mount point name.</returns>
		</member>
		<member name="M:Unigine.FileSystemMount.getDataPath">
			<summary>
			Returns the absolute path to the mounted folder/package.
			</summary>  
			<returns>Absolute path to the mounted folder/package.</returns>
		</member>
		<member name="M:Unigine.FileSystemMount.getVirtualPath">
			<summary>
			Returns the virtual path to the folder to which the contents of the external folder/package is mounted.
			</summary>  
			<returns>Virtual path to the folder to which the contents of the external folder/package is mounted.</returns>
		</member>
		<member name="M:Unigine.FileSystemMount.getUMountPath">
			<summary>
			Returns the absolute path to the *.umount file.
			</summary>  
			<returns>Absolute path to the *.umount file.</returns>
		</member>
		<member name="M:Unigine.FileSystemMount.setExclusiveFilters(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Sets the list of exclusive filters (whitelist) to be used for files as a list of wildcards.
			</summary> 
			<param name="filters"> List of wildcards to be used to filter files in the mounted folder/package.Maximum number of patterns that can be used is limited to 32. </param> 
		</member>
		<member name="M:Unigine.FileSystemMount.getExclusiveFilters(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Returns the list of exclusive filters (whitelist) used for files as a list of wildcards.
			</summary> 
			<param name="filters"> List of wildcards currently used to filter files in the mounted folder/package.Maximum number of patterns that can be used is limited to 32. </param> 
		</member>
		<member name="M:Unigine.FileSystemMount.setIgnoreFilters(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Sets the list of ignore filters (blacklist) to be used for files as a list of wildcards.
			</summary> 
			<param name="filters"> List of wildcards to be used to filter out files to be ignored in the mounted folder/package.Maximum number of patterns that can be used is limited to 32. </param> 
		</member>
		<member name="M:Unigine.FileSystemMount.getIgnoreFilters(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Returns the list of ignore filters (blacklist) used for files as a list of wildcards.
			</summary> 
			<param name="filters"> List of wildcards currently used to filter out files to be ignored in the mounted folder/package.Maximum number of patterns that can be used is limited to 32. </param> 
		</member>
		<member name="M:Unigine.FileSystemMount.getVirtualFiles(Unigine.Vector{String,int,Unigine.VectorAllocator})">
			<summary>
			Returns the list of virtual paths to all files in the mounted folder/package.					Contents of nested mount points inside the mounted folder will not be included in the list.
			</summary> 
			<param name="files"> Output vector to store the list of files stored in the mounted folder/package. </param> 
		</member>
		<member name="M:Unigine.FileSystemMount.isPathFilteredOut(char)">
			<summary>
			Returns a value indicating whether the specified path is filtered out by the exclusive and ignore filters.
			</summary> 
			<param name="path"> Any file path. </param> 
			<returns>true if the specified path is filtered out after applying exclusive and ignore filters if any; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.FileSystemMount.ACCESS_READONLY">
			<summary>
			The mount point is read-only, files contained in the mounted folder/package cannot be modified.
		</summary>
		</member>
		<member name="F:Unigine.FileSystemMount.ACCESS_READWRITE">
			<summary>
			The mount point access mode is read-write, files contained in the mounted folder/package can be modified.
		</summary>
		</member>
	</members>
</doc>