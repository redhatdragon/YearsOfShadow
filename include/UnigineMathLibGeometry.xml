<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Geometry.getClosestPointOnLine(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Scans the specified line segment and searches for the point closest to the reference point. The found point will be put to the return vector.
			</summary> 
			<param name="point"> Reference point. </param>
			<param name="p0"> Line start point. </param>
			<param name="p1"> Line end point. </param>
			<param name="ret"> Return vector. </param> 
		</member>
		<member name="M:Unigine.Geometry.getClosestPointOnLine(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Scans the specified line segment and searches for the point closest to the reference point. The found point will be put to the return vector.
			</summary> 
			<param name="point"> Reference point. </param>
			<param name="p0"> Line start point. </param>
			<param name="p1"> Line end point. </param>
			<param name="ret"> Return vector. </param> 
		</member>
		<member name="M:Unigine.Geometry.getClosestPointOnTriangle(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Scans the specified triangle and searches for the point closest to the reference point. The found point will be put to the return vector.
			</summary> 
			<param name="point"> Reference point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the point is inside the triangle; otherwise, 0</returns>
		</member>
		<member name="M:Unigine.Geometry.getClosestPointOnTriangle(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Scans the specified triangle and searches for the point closest to the reference point. The found point will be put to the return vector.
			</summary> 
			<param name="point"> Reference point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the point is inside the triangle; otherwise, 0</returns>
		</member>
		<member name="M:Unigine.Geometry.getClosestPointsOnLines(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Scans the two specified lines and searches for the pair of closest points. The closest points of the first and the second lines will be put to the respective return vector.
			</summary> 
			<param name="p00"> Start point of the first line. </param>
			<param name="p01"> End point of the first line. </param>
			<param name="p10"> Start point of the second line. </param>
			<param name="p11"> End point of the second line. </param>
			<param name="ret_0"> First return vector. </param>
			<param name="ret_1"> Second return vector. </param> 
			<returns>1 if the lines cross; otherwise, 0</returns>
		</member>
		<member name="M:Unigine.Geometry.getClosestPointsOnLines(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Scans the two specified lines and searches for the pair of closest points. The closest points of the first and the second lines will be put to the respective return vectors.
			</summary> 
			<param name="p00"> Start point of the first line. </param>
			<param name="p01"> End point of the first line. </param>
			<param name="p10"> Start point of the second line. </param>
			<param name="p11"> End point of the second line. </param>
			<param name="ret_0"> First return vector. </param>
			<param name="ret_1"> Second return vector. </param> 
			<returns>1 if the lines cross; otherwise, 0</returns>
		</member>
		<member name="M:Unigine.Geometry.irayBoundBoxIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if there is an intersection between a ray and a bounding box. The same function as rayBoundBoxIntersection(), but it uses the inverse of the ray direction, which increases performance.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="idirection"> Inverse direction of the ray. </param>
			<param name="min"> Min coordinates of the axis-aligned bounding box. </param>
			<param name="max"> Max coordinates of the axis-aligned bounding box. </param> 
			<returns>1 if the given ray intersects the given bounding box; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.irayBoundBoxIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if there is an intersection between a ray and a bounding box. The same function as rayBoundBoxIntersection(), but it uses the inverse of the ray direction, which increases performance.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="idirection"> Inverse direction of the ray. </param>
			<param name="min"> Min coordinates of the axis-aligned bounding box. </param>
			<param name="max"> Max coordinates of the axis-aligned bounding box. </param> 
			<returns>1 if the given ray intersects the given bounding box; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4)">
			<summary>
			Checks if there is an intersection between a line and a plane.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane"> Plane. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Calculates the intersection of a line and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane_point"> Point of the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if there is an intersection between a line and a plane.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> Start point of the line. </param>
			<param name="plane_point"> Point of the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Calculates the intersection of a line and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane_point"> Point of the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if there is an intersection between a line and a plane.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane_point"> Point of the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4,Unigine.Math.dvec3)">
			<summary>
			Calculates the intersection of a line and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane"> Plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4,Unigine.Math.vec3)">
			<summary>
			Calculates the intersection of a line and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane"> Plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.linePlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4)">
			<summary>
			Checks if there is an intersection between a line and a plane.
			</summary> 
			<param name="p0"> Start point of the line. </param>
			<param name="p1"> End point of the line. </param>
			<param name="plane"> Plane. </param> 
			<returns>1 if the given line intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.normalizeAngle(float)">
			<summary>
			Normalizes the angle in [-180, 180 ] range.
			</summary> 
			<param name="angle"> Input angle. </param> 
			<returns>Normalized angle, in degrees.</returns>
		</member>
		<member name="M:Unigine.Geometry.orthoBasis(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Creates an ortho transformation. Output tangent and binormal vectors will be put to corresponding return vector.
			</summary> 
			<param name="v"> Input vector. </param>
			<param name="tangent"> Return vector. </param>
			<param name="binormal"> Return vector. </param> 
		</member>
		<member name="M:Unigine.Geometry.orthoBasis(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Creates an ortho transformation. Output tangent and binormal vectors will be put to corresponding return vectors.
			</summary> 
			<param name="v"> Input vector. </param>
			<param name="tangent"> Return vector. </param>
			<param name="binormal"> Return vector. </param> 
		</member>
		<member name="M:Unigine.Geometry.orthoTangent(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Creates the ortho triangle tangent space basis.
			</summary> 
			<param name="tangent"> Tangent vector. </param>
			<param name="binormal"> Binormal vector. </param>
			<param name="normal"> Normal vector. </param> 
			<returns>Tangent basis.</returns>
		</member>
		<member name="M:Unigine.Geometry.orthoTangent(Unigine.Math.vec4,Unigine.Math.vec3)">
			<summary>
			Creates the ortho triangle tangent space basis.
			</summary> 
			<param name="tangent"> Tangent vector. </param>
			<param name="normal"> Normal vector. </param> 
			<returns>Tangent basis.</returns>
		</member>
		<member name="M:Unigine.Geometry.orthoTransform(Unigine.Math.dvec3,Unigine.Math.dmat4)">
			<summary>
			Creates an ortho transformation. The transformation will be put to the return matrix.
			</summary> 
			<param name="v"> Input vector. </param>
			<param name="transform"> Return matrix. </param> 
		</member>
		<member name="M:Unigine.Geometry.orthoTransform(Unigine.Math.vec3,Unigine.Math.mat4)">
			<summary>
			Creates an ortho transformation. The transformation will be put to the return matrix.
			</summary> 
			<param name="v"> Input vector. </param>
			<param name="transform"> Return matrix. </param> 
		</member>
		<member name="M:Unigine.Geometry.pointPolygonDistance(Unigine.Math.vec3,Unigine.Math.vec3,int[],Unigine.Math.vec4)">
			<summary>
			Returns the distance from a point to a polygon.
			</summary> 
			<param name="point"> Point. </param>
			<param name="vertex"> Pointer to vertex structure. </param>
			<param name="indices"> Array of vertex indices. </param>
			<param name="plane"> Polygon plane. </param> 
			<returns>Distance.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointPolygonDistance(Unigine.Math.dvec3,Unigine.Math.dvec3,int[],Unigine.Math.dvec4)">
			<summary>
			Returns the distance from a point to a polygon.
			</summary> 
			<param name="point"> Point. </param>
			<param name="vertex"> Pointer to vertex structure. </param>
			<param name="indices"> Array of vertex indices. </param>
			<param name="plane"> Polygon plane. </param> 
			<returns>Distance.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointPolygonInside(Unigine.Math.vec3,Unigine.Math.vec3,int[],Unigine.Math.vec3)">
			<summary>
			Checks if a point is inside a polygon.
			</summary> 
			<param name="point"> Point. </param>
			<param name="vertex"> Pointer to vertex structure. </param>
			<param name="indices"> Array of vertex indices. </param>
			<param name="normal"> Normal to the polygon plane. </param> 
			<returns>1 if the point is inside the given polygon; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointPolygonInside(Unigine.Math.dvec3,Unigine.Math.dvec3,int[],Unigine.Math.dvec3)">
			<summary>
			Checks if a point is inside a polygon.
			</summary> 
			<param name="point"> Point. </param>
			<param name="vertex"> Pointer to vertex structure. </param>
			<param name="indices"> Array of vertex indices. </param>
			<param name="normal"> Normal to the polygon plane. </param> 
			<returns>1 if the point is inside the given polygon; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointTriangleCoordinates(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,float,float)">
			<summary>
			Calculates barycentric triangle coordinates. The coordinates will be put to corresponding return variables.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="a"> Return variable. </param>
			<param name="b"> Return variable. </param> 
		</member>
		<member name="M:Unigine.Geometry.pointTriangleCoordinates(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,double,double)">
			<summary>
			Calculates barycentric triangle coordinates. The coordinates will be put to corresponding return variables.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="a"> Return variable. </param>
			<param name="b"> Return variable. </param> 
		</member>
		<member name="M:Unigine.Geometry.pointTriangleDistance(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4)">
			<summary>
			Returns the closest distance from a point to a triangle.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="plane"> Triangle plane. </param> 
			<returns>Distance.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointTriangleDistance(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4)">
			<summary>
			Returns the closest distance from a point to a triangle.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="plane"> Triangle plane. </param> 
			<returns>Distance.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointTriangleInside(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if a point is inside a triangle.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="normal"> Normal to the triangle plane. </param> 
			<returns>1 if the point is inside the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointTriangleInside(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if a point is inside a triangle.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param>
			<param name="normal"> Normal to the triangle plane. </param> 
			<returns>1 if the point is inside the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointTriangleInside(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if a point is inside a triangle.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param> 
			<returns>1 if the point is inside the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.pointTriangleInside(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if a point is inside a triangle.
			</summary> 
			<param name="point"> Point. </param>
			<param name="v0"> The first vertex of the triangle. </param>
			<param name="v1"> The second vertex of the triangle. </param>
			<param name="v2"> The third vertex of the triangle. </param> 
			<returns>1 if the point is inside the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.polygonPlane(Unigine.Math.vec3,int[])">
			<summary>
			Returns the polygon plane.
			</summary> 
			<param name="vertex"> Pointer to vertex structure. </param>
			<param name="indices"> Array of vertex indices. </param> 
			<returns>Polygon plane.</returns>
		</member>
		<member name="M:Unigine.Geometry.polygonPlane(Unigine.Math.dvec3,int[])">
			<summary>
			Returns the polygon plane.
			</summary> 
			<param name="vertex"> Pointer to vertex structure. </param>
			<param name="indices"> Array of vertex indices. </param> 
			<returns>Polygon plane.</returns>
		</member>
		<member name="M:Unigine.Geometry.projectOntoPlane(Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Calculates the projection of a vector onto a given plane.
			</summary> 
			<param name="v"> Input vector. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>Projection of the input vector onto the plane.</returns>
		</member>
		<member name="M:Unigine.Geometry.projectOntoPlane(Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Calculates the projection of a vector onto a given plane.
			</summary> 
			<param name="v"> Input vector. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>Projection of the input vector onto the plane.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayBoundBoxIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if a ray intersects a bounding box. The same function as irayBoundBoxIntersection(), but the latter has higher performance due to reduction of division operations, as the ray direction is replaced by the pre-calculated inverse of the ray direction.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="min"> Min coordinates of the axis-aligned bounding box. </param>
			<param name="max"> Max coordinates of the axis-aligned bounding box. </param> 
			<returns>1 if the given ray intersects the given bounding box; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayBoundBoxIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if a ray intersects a bounding box. The same function as irayBoundBoxIntersection(), but the latter has higher performance due to reduction of division operations, as the ray direction is replaced by the pre-calculated inverse of the ray direction.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="min"> Min coordinates of the axis-aligned bounding box. </param>
			<param name="max"> Max coordinates of the axis-aligned bounding box. </param> 
			<returns>1 if the given ray intersects the given bounding box; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4)">
			<summary>
			Checks if a ray intersects a plane.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane"> Plane. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if a ray intersects a plane.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4,Unigine.Math.dvec3)">
			<summary>
			Calculates the intersection of a ray and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane"> Plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Calculates the intersection of a ray and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4,Unigine.Math.vec3)">
			<summary>
			Calculates the intersection of a ray and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane"> Plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if a ray intersects a plane.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Calculates the intersection of a ray and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4)">
			<summary>
			Checks if a ray intersects a plane.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="plane"> Plane. </param> 
			<returns>1 if the given ray intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayTriangleIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if a ray intersects a triangle.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>1 if the given ray intersects the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.rayTriangleIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if a ray intersects a triangle.
			</summary> 
			<param name="point"> Starting point of the ray. </param>
			<param name="direction"> Direction of the ray. </param>
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>1 if the given ray intersects the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4,Unigine.Math.vec3)">
			<summary>
			Calculates the intersection of a segment and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane"> Plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given ray intersects the given triangle; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Checks if a segment intersects a plane.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec4)">
			<summary>
			Checks if a segment intersects a plane.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane"> Plane. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Calculates the intersection of a line segment and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4)">
			<summary>
			Checks if a segment intersects a plane.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane"> Plane. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Checks if a segment intersects a plane.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec4,Unigine.Math.dvec3)">
			<summary>
			Calculates the intersection of a line segment and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane"> Plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.segmentPlaneIntersection(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Calculates the intersection of a line segment and a plane. If the function returns 1, the point of intersection will be put to the return vector.
			</summary> 
			<param name="p0"> Start point of the line segment. </param>
			<param name="p1"> End point of the line segment. </param>
			<param name="plane_point"> Point on the plane. </param>
			<param name="plane_normal"> Normal to the plane. </param>
			<param name="ret"> Return vector. </param> 
			<returns>1 if the given segment intersects the given plane; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleArea(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns the triangle area.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle area.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleArea(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Returns the triangle area.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle area.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleNormal(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns the triangle normal vector.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle normal vector.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleNormal(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Returns the triangle normal vector.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle normal vector.</returns>
		</member>
		<member name="M:Unigine.Geometry.trianglePlane(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Returns the triangle plane.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle plane.</returns>
		</member>
		<member name="M:Unigine.Geometry.trianglePlane(Unigine.Math.dvec3,Unigine.Math.dvec3,Unigine.Math.dvec3)">
			<summary>
			Returns the triangle plane.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle plane.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleTangent(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec2,Unigine.Math.vec2,Unigine.Math.vec2)">
			<summary>
			Returns the triangle tangent space.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param>
			<param name="t0"> Tangent vector of the first triangle vertex. </param>
			<param name="t1"> Tangent vector of the second triangle vertex. </param>
			<param name="t2"> Tangent vector of the third triangle vertex. </param> 
			<returns>Triangle tangent space vector.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleTangent(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec2,Unigine.Math.vec2,Unigine.Math.vec2,Unigine.Math.vec3)">
			<summary>
			Returns the triangle tangent space.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param>
			<param name="t0"> Tangent vector of the first triangle vertex. </param>
			<param name="t1"> Tangent vector of the second triangle vertex. </param>
			<param name="t2"> Tangent vector of the third triangle vertex. </param>
			<param name="normal"> Normal. </param> 
			<returns>Triangle tangent space vector.</returns>
		</member>
		<member name="M:Unigine.Geometry.triangleTangent(Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Returns the triangle tangent space.
			</summary> 
			<param name="v0"> The first triangle vertex. </param>
			<param name="v1"> The second triangle vertex. </param>
			<param name="v2"> The third triangle vertex. </param> 
			<returns>Triangle tangent space vector.</returns>
		</member>
	</members>
</doc>